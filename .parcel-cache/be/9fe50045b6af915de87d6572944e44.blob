var _helpers = require("@swc/helpers");
"use strict";
var regeneratorRuntime = require("regenerator-runtime");
var _marked = regeneratorRuntime.mark(_actionWebInvoke);
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
function _actionWebInvoke() {
    _actionWebInvoke = /*
 * <license header>
 */ /* global fetch */ /**
 *
 * Invokes a web action
 *
 * @param  {object} ims
 * @param  {string} actionUrl
 * @param {object} headers
 * @param  {object} params
 *
 * @returns {Promise<string|object>} the response
 *
 */ _helpers.asyncToGenerator(regeneratorRuntime.mark(function _callee(ims, actionUrl, param, param1) {
        var headers, params, actionHeaders, response, content;
        return regeneratorRuntime.wrap(function _callee$(_ctx) {
            while(1)switch(_ctx.prev = _ctx.next){
                case 0:
                    headers = param === void 0 ? {
                    } : param, params = param1 === void 0 ? {
                    } : param1;
                    _ctx.prev = 1;
                    // set the authorization header and org from the ims props object
                    if (ims.token && !headers.authorization) headers.authorization = "Bearer ".concat(ims.token);
                    if (ims.org && !headers['x-gw-ims-org-id']) headers['x-gw-ims-org-id'] = ims.org;
                    actionHeaders = _helpers.objectSpread({
                        'Content-Type': 'application/json'
                    }, headers);
                    if (window.location.hostname === 'localhost') actionHeaders['x-ow-extra-logging'] = 'on';
                    _ctx.next = 8;
                    return fetch(actionUrl, {
                        method: 'post',
                        headers: actionHeaders,
                        body: JSON.stringify(params)
                    });
                case 8:
                    response = _ctx.sent;
                    _ctx.next = 11;
                    return response.text();
                case 11:
                    content = _ctx.sent;
                    if (response.ok) {
                        _ctx.next = 14;
                        break;
                    }
                    throw new Error("failed request to '".concat(actionUrl, "' with status: ").concat(response.status, " and message: ").concat(content));
                case 14:
                    return _ctx.abrupt("return", JSON.parse(content));
                case 17:
                    _ctx.prev = 17;
                    _ctx.t0 = _ctx["catch"](1);
                    return _ctx.abrupt("return", {
                        error: _ctx.t0
                    });
                case 20:
                case "end":
                    return _ctx.stop();
            }
        }, _callee, null, [
            [
                1,
                17
            ]
        ]);
    }));
    return _actionWebInvoke.apply(this, arguments);
}
function actionWebInvoke(ims, actionUrl) {
    return _actionWebInvoke.apply(this, arguments);
}
var _default = actionWebInvoke;
exports.default = _default;
