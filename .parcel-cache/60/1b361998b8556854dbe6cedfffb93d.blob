var { useToggleState  } = require("@react-stately/toggle");
var { useSwitch  } = require("@react-aria/switch");
var { useProviderProps  } = require("@react-spectrum/provider");
var { useHover  } = require("@react-aria/interactions");
var _react2 = require("react");
var _react = $parcel$interopDefault(_react2);
var { forwardRef , useRef  } = _react2;
var { FocusRing  } = require("@react-aria/focus");
var { classNames , useFocusableRef , useStyleProps  } = require("@react-spectrum/utils");
var _babelRuntimeHelpersObjectWithoutPropertiesLoose = $parcel$interopDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
require("./main.css");
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/toggle/vars.css
var $c0e9fa21e5197f150cb2ac60c4351474$exports = {
};
$c0e9fa21e5197f150cb2ac60c4351474$exports = {
    "spectrum-ToggleSwitch": "_spectrum-ToggleSwitch_fc100",
    "spectrum-ToggleSwitch-input": "_spectrum-ToggleSwitch-input_fc100",
    "spectrum-ToggleSwitch-switch": "_spectrum-ToggleSwitch-switch_fc100",
    "focus-ring": "_focus-ring_fc100",
    "spectrum-ToggleSwitch-label": "_spectrum-ToggleSwitch-label_fc100",
    "is-hovered": "_is-hovered_fc100",
    "spectrum-ToggleSwitch--quiet": "_spectrum-ToggleSwitch--quiet_fc100",
    "spectrum-ToggleSwitch--ab": "_spectrum-ToggleSwitch--ab_fc100"
};
var $c0e9fa21e5197f150cb2ac60c4351474$$interop$default = $parcel$interopDefault($c0e9fa21e5197f150cb2ac60c4351474$exports);
function $db9ffdf19392d6fe228fcec0e1352a3$var$Switch(props, ref) {
    props = useProviderProps(props);
    let { isEmphasized =false , isDisabled =false , autoFocus , children  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "isEmphasized",
        "isDisabled",
        "autoFocus",
        "children"
    ]);
    let { styleProps  } = useStyleProps(otherProps);
    let { hoverProps , isHovered  } = useHover({
        isDisabled
    });
    let inputRef = useRef(null);
    let domRef = useFocusableRef(ref, inputRef);
    let state = useToggleState(props);
    let { inputProps  } = useSwitch(props, state, inputRef);
    return(/*#__PURE__*/ _react.createElement("label", _babelRuntimeHelpersExtends({
    }, styleProps, hoverProps, {
        ref: domRef,
        className: classNames($c0e9fa21e5197f150cb2ac60c4351474$$interop$default, 'spectrum-ToggleSwitch', {
            'spectrum-ToggleSwitch--quiet': !isEmphasized,
            'is-disabled': isDisabled,
            'is-hovered': isHovered
        }, styleProps.className)
    }), /*#__PURE__*/ _react.createElement(FocusRing, {
        focusRingClass: classNames($c0e9fa21e5197f150cb2ac60c4351474$$interop$default, 'focus-ring'),
        autoFocus: autoFocus
    }, /*#__PURE__*/ _react.createElement("input", _babelRuntimeHelpersExtends({
    }, inputProps, {
        ref: inputRef,
        className: classNames($c0e9fa21e5197f150cb2ac60c4351474$$interop$default, 'spectrum-ToggleSwitch-input')
    }))), /*#__PURE__*/ _react.createElement("span", {
        className: classNames($c0e9fa21e5197f150cb2ac60c4351474$$interop$default, 'spectrum-ToggleSwitch-switch')
    }), children && /*#__PURE__*/ _react.createElement("span", {
        className: classNames($c0e9fa21e5197f150cb2ac60c4351474$$interop$default, 'spectrum-ToggleSwitch-label')
    }, children)));
}
/**
 * Switches allow users to turn an individual option on or off.
 * They are usually used to activate or deactivate a specific setting.
 */ const Switch = /*#__PURE__*/ forwardRef($db9ffdf19392d6fe228fcec0e1352a3$var$Switch);
exports.Switch = Switch;
