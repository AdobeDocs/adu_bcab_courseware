var { usePress  } = require("@react-aria/interactions");
var { filterDOMProps , mergeProps  } = require("@react-aria/utils");
var _babelRuntimeHelpersObjectWithoutPropertiesLoose = $parcel$interopDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
/**
 * Provides the behavior and accessibility implementation for a link component.
 * A link allows a user to navigate to another page or resource within a web page
 * or application.
 */ function useLink(props, ref) {
    let { elementType ='a' , onPress , onPressStart , onPressEnd , // @ts-ignore
    onClick: deprecatedOnClick , isDisabled  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "elementType",
        "onPress",
        "onPressStart",
        "onPressEnd",
        "onClick",
        "isDisabled"
    ]);
    let linkProps;
    if (elementType !== 'a') linkProps = {
        role: 'link',
        tabIndex: !isDisabled ? 0 : undefined
    };
    let { pressProps , isPressed  } = usePress({
        onPress,
        onPressStart,
        onPressEnd,
        isDisabled,
        ref
    });
    let domProps = filterDOMProps(otherProps, {
        labelable: true
    });
    return {
        isPressed,
        // Used to indicate press state for visual
        linkProps: mergeProps(domProps, _babelRuntimeHelpersExtends({
        }, pressProps, linkProps, {
            'aria-disabled': isDisabled || undefined,
            onClick: (e)=>{
                pressProps.onClick(e);
                if (deprecatedOnClick) {
                    deprecatedOnClick(e);
                    console.warn('onClick is deprecated, please use onPress');
                }
            }
        }))
    };
}
exports.useLink = useLink;
