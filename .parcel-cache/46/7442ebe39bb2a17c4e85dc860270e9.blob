var { useFormProps  } = require("@react-spectrum/form");
var { useCheckboxGroupState  } = require("@react-stately/checkbox");
var { Label  } = require("@react-spectrum/label");
var { useToggleState  } = require("@react-stately/toggle");
var { useProviderProps , Provider  } = require("@react-spectrum/provider");
var { useHover  } = require("@react-aria/interactions");
var { useCheckbox , useCheckboxGroupItem , useCheckboxGroup  } = require("@react-aria/checkbox");
var { FocusRing  } = require("@react-aria/focus");
var _spectrumIconsUiDashSmall = $parcel$interopDefault(require("@spectrum-icons/ui/DashSmall"));
var { classNames , useFocusableRef , useStyleProps , useDOMRef  } = require("@react-spectrum/utils");
var _spectrumIconsUiCheckmarkSmall = $parcel$interopDefault(require("@spectrum-icons/ui/CheckmarkSmall"));
var _react2 = require("react");
var _react = $parcel$interopDefault(_react2);
var { forwardRef , useContext , useRef  } = _react2;
var _babelRuntimeHelpersObjectWithoutPropertiesLoose = $parcel$interopDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
require("./main.css");
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
const $d758342572ac6f9b277258e54c98$export$CheckboxGroupContext = /*#__PURE__*/ _react.createContext(null);
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/checkbox/vars.css
var $f422de1cb0c29c9cbeca4791adca989$exports = {
};
$f422de1cb0c29c9cbeca4791adca989$exports = {
    "spectrum-Checkbox": "_spectrum-Checkbox_0ffa4",
    "spectrum-Checkbox-input": "_spectrum-Checkbox-input_0ffa4",
    "focus-ring": "_focus-ring_0ffa4",
    "spectrum-Checkbox-box": "_spectrum-Checkbox-box_0ffa4",
    "is-indeterminate": "_is-indeterminate_0ffa4",
    "spectrum-Checkbox-checkmark": "_spectrum-Checkbox-checkmark_0ffa4",
    "spectrum-Checkbox-partialCheckmark": "_spectrum-Checkbox-partialCheckmark_0ffa4",
    "is-checked": "_is-checked_0ffa4",
    "spectrum-Checkbox-label": "_spectrum-Checkbox-label_0ffa4",
    "is-hovered": "_is-hovered_0ffa4",
    "spectrum-Checkbox--quiet": "_spectrum-Checkbox--quiet_0ffa4",
    "is-invalid": "_is-invalid_0ffa4"
};
var $f422de1cb0c29c9cbeca4791adca989$$interop$default = $parcel$interopDefault($f422de1cb0c29c9cbeca4791adca989$exports);
function $c3b2eaa0f618cced51a19c0a61137bb$var$Checkbox(props, ref) {
    let originalProps = props;
    props = useProviderProps(props);
    let { isIndeterminate =false , isEmphasized =false , isDisabled =false , autoFocus , children , validationState  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "isIndeterminate",
        "isEmphasized",
        "isDisabled",
        "autoFocus",
        "children",
        "validationState"
    ]);
    let { styleProps  } = useStyleProps(otherProps);
    let { hoverProps , isHovered  } = useHover({
        isDisabled
    });
    let inputRef = useRef(null);
    let domRef = useFocusableRef(ref, inputRef); // Swap hooks depending on whether this checkbox is inside a CheckboxGroup.
    // This is a bit unorthodox. Typically, hooks cannot be called in a conditional,
    // but since the checkbox won't move in and out of a group, it should be safe.
    let groupState = useContext($d758342572ac6f9b277258e54c98$export$CheckboxGroupContext);
    let { inputProps  } = groupState ? useCheckboxGroupItem(_babelRuntimeHelpersExtends({
    }, props, {
        // Value is optional for standalone checkboxes, but required for CheckboxGroup items;
        // it's passed explicitly here to avoid typescript error (requires strictNullChecks disabled).
        value: props.value,
        // Only pass isRequired and validationState to react-aria if they came from
        // the props for this individual checkbox, and not from the group via context.
        isRequired: originalProps.isRequired,
        validationState: originalProps.validationState
    }), groupState, inputRef) : useCheckbox(props, useToggleState(props), inputRef);
    let markIcon = isIndeterminate ? /*#__PURE__*/ _react.createElement(_spectrumIconsUiDashSmall, {
        UNSAFE_className: classNames($f422de1cb0c29c9cbeca4791adca989$$interop$default, 'spectrum-Checkbox-partialCheckmark')
    }) : /*#__PURE__*/ _react.createElement(_spectrumIconsUiCheckmarkSmall, {
        UNSAFE_className: classNames($f422de1cb0c29c9cbeca4791adca989$$interop$default, 'spectrum-Checkbox-checkmark')
    });
    if (groupState) {
        for (let key of [
            'isSelected',
            'defaultSelected',
            'isEmphasized'
        ])if (originalProps[key] != null) console.warn(key + " is unsupported on individual <Checkbox> elements within a <CheckboxGroup>. Please apply these props to the group instead.");
        if (props.value == null) console.warn('A <Checkbox> element within a <CheckboxGroup> requires a `value` property.');
    }
    return(/*#__PURE__*/ _react.createElement("label", _babelRuntimeHelpersExtends({
    }, styleProps, hoverProps, {
        ref: domRef,
        className: classNames($f422de1cb0c29c9cbeca4791adca989$$interop$default, 'spectrum-Checkbox', {
            'is-checked': inputProps.checked,
            'is-indeterminate': isIndeterminate,
            'spectrum-Checkbox--quiet': !isEmphasized,
            'is-invalid': validationState === 'invalid',
            'is-disabled': isDisabled,
            'is-hovered': isHovered
        }, styleProps.className)
    }), /*#__PURE__*/ _react.createElement(FocusRing, {
        focusRingClass: classNames($f422de1cb0c29c9cbeca4791adca989$$interop$default, 'focus-ring'),
        autoFocus: autoFocus
    }, /*#__PURE__*/ _react.createElement("input", _babelRuntimeHelpersExtends({
    }, inputProps, {
        ref: inputRef,
        className: classNames($f422de1cb0c29c9cbeca4791adca989$$interop$default, 'spectrum-Checkbox-input')
    }))), /*#__PURE__*/ _react.createElement("span", {
        className: classNames($f422de1cb0c29c9cbeca4791adca989$$interop$default, 'spectrum-Checkbox-box')
    }, markIcon), children && /*#__PURE__*/ _react.createElement("span", {
        className: classNames($f422de1cb0c29c9cbeca4791adca989$$interop$default, 'spectrum-Checkbox-label')
    }, children)));
}
/**
 * Checkboxes allow users to select multiple items from a list of individual items,
 * or to mark one individual item as selected.
 */ let Checkbox = /*#__PURE__*/ forwardRef($c3b2eaa0f618cced51a19c0a61137bb$var$Checkbox);
exports.Checkbox = Checkbox;
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/fieldlabel/vars.css
var $a0bedb1888ff92cb3407d1a60d76e$exports = {
};
$a0bedb1888ff92cb3407d1a60d76e$exports = {
    "spectrum-FieldLabel": "_spectrum-FieldLabel_36b9b",
    "spectrum-FieldLabel--positionSide": "_spectrum-FieldLabel--positionSide_36b9b",
    "spectrum-FieldLabel-requiredIcon": "_spectrum-FieldLabel-requiredIcon_36b9b",
    "spectrum-FieldLabel--alignEnd": "_spectrum-FieldLabel--alignEnd_36b9b",
    "spectrum-Field": "_spectrum-Field_36b9b",
    "spectrum-Field--positionTop": "_spectrum-Field--positionTop_36b9b",
    "spectrum-Field-field": "_spectrum-Field-field_36b9b",
    "spectrum-Field-field--multiline": "_spectrum-Field-field--multiline_36b9b",
    "spectrum-Field--positionSide": "_spectrum-Field--positionSide_36b9b",
    "spectrum-Form": "_spectrum-Form_36b9b",
    "spectrum-Form--positionSide": "_spectrum-Form--positionSide_36b9b",
    "spectrum-Form--positionTop": "_spectrum-Form--positionTop_36b9b",
    "spectrum-Form-itemLabel": "_spectrum-Form-itemLabel_36b9b",
    "is-disabled": "_is-disabled_36b9b"
};
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/fieldgroup/vars.css
var $ddc491461af2b6836404526ae99891$exports = {
};
$ddc491461af2b6836404526ae99891$exports = {
    "spectrum-FieldGroup": "_spectrum-FieldGroup_8cb9b",
    "spectrum-FieldGroup--positionSide": "_spectrum-FieldGroup--positionSide_8cb9b",
    "spectrum-FieldGroup-group": "_spectrum-FieldGroup-group_8cb9b",
    "spectrum-FieldGroup-group--horizontal": "_spectrum-FieldGroup-group--horizontal_8cb9b"
};
var $ddc491461af2b6836404526ae99891$$interop$default = $parcel$interopDefault($ddc491461af2b6836404526ae99891$exports);
var $a0bedb1888ff92cb3407d1a60d76e$$interop$default = $parcel$interopDefault($a0bedb1888ff92cb3407d1a60d76e$exports);
function $bf1a119e1eaf6ba1863e010f786bdc$var$CheckboxGroup(props, ref) {
    props = useProviderProps(props);
    props = useFormProps(props);
    let { isEmphasized , isRequired , necessityIndicator , label , labelPosition ='top' , labelAlign , children , orientation ='vertical' , validationState  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "isEmphasized",
        "isRequired",
        "necessityIndicator",
        "label",
        "labelPosition",
        "labelAlign",
        "children",
        "orientation",
        "validationState"
    ]);
    let domRef = useDOMRef(ref);
    let { styleProps  } = useStyleProps(otherProps);
    let state = useCheckboxGroupState(props);
    let { labelProps , groupProps  } = useCheckboxGroup(props, state);
    return(/*#__PURE__*/ _react.createElement("div", _babelRuntimeHelpersExtends({
    }, styleProps, groupProps, {
        className: classNames($ddc491461af2b6836404526ae99891$$interop$default, 'spectrum-FieldGroup', {
            'spectrum-FieldGroup--positionSide': labelPosition === 'side'
        }, classNames($a0bedb1888ff92cb3407d1a60d76e$$interop$default, 'spectrum-Field'), styleProps.className),
        ref: domRef
    }), label && /*#__PURE__*/ _react.createElement(Label, _babelRuntimeHelpersExtends({
    }, labelProps, {
        elementType: "span",
        labelPosition: labelPosition,
        labelAlign: labelAlign,
        isRequired: isRequired,
        necessityIndicator: necessityIndicator,
        includeNecessityIndicatorInAccessibilityName: true
    }), label), /*#__PURE__*/ _react.createElement("div", {
        role: "presentation",
        className: classNames($ddc491461af2b6836404526ae99891$$interop$default, 'spectrum-FieldGroup-group', {
            'spectrum-FieldGroup-group--horizontal': orientation === 'horizontal'
        })
    }, /*#__PURE__*/ _react.createElement(Provider, {
        isEmphasized: isEmphasized,
        validationState: validationState
    }, /*#__PURE__*/ _react.createElement($d758342572ac6f9b277258e54c98$export$CheckboxGroupContext.Provider, {
        value: state
    }, children)))));
}
/**
 * A CheckboxGroup allows users to select one or more items from a list of choices.
 */ const CheckboxGroup = /*#__PURE__*/ _react.forwardRef($bf1a119e1eaf6ba1863e010f786bdc$var$CheckboxGroup);
exports.CheckboxGroup = CheckboxGroup;
