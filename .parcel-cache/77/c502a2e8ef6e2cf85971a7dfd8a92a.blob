// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function(modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this,
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x) {
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function(id, exports) {
    modules[id] = [
      function(require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function() {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function() {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"ZC4vb":[function(require,module,exports) {
"use strict";
require("core-js/stable");
require("regenerator-runtime/runtime");
var _react = _interopRequireDefault(require("react"));
var _reactDom = _interopRequireDefault(require("react-dom"));
var _excApp = _interopRequireWildcard(require("@adobe/exc-app"));
var _App = _interopRequireDefault(require("./components/App"));
require("./index.css");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop1) {
        return nodeInterop1 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        default: obj
    };
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj.default = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/*
 * <license header>
 */ /* Here you can bootstrap your application and configure the integration with the Adobe Experience Cloud Shell */ try {
    // attempt to load the Experience Cloud Runtime
    require('./exc-runtime'); // if there are no errors, bootstrap the app in the Experience Cloud Shell
    _excApp.init(bootstrapInExcShell);
} catch (e) {
    console.log('application not running in Adobe Experience Cloud Shell'); // fallback mode, run the application without the Experience Cloud Runtime
    bootstrapRaw();
}
function bootstrapRaw() {
    /* **here you can mock the exc runtime and ims objects** */ var mockRuntime = {
        on: function() {
        }
    };
    var mockIms = {
    }; // render the actual react application and pass along the runtime object to make it available to the App
    _reactDom.default.render(/*#__PURE__*/ React.createElement(_App.default, {
        runtime: mockRuntime,
        ims: mockIms,
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\index.js",
            lineNumber: 47
        },
        __self: this
    }), document.getElementById('root'));
}
function bootstrapInExcShell() {
    // get the Experience Cloud Runtime object
    var runtime = _excApp.default(); // use this to set a favicon
    // runtime.favicon = 'url-to-favicon'
    // use this to respond to clicks on the app-bar title
    // runtime.heroClick = () => window.alert('Did I ever tell you you\'re my hero?')
    // ready event brings in authentication/user info
    runtime.on('ready', (function(param) {
        var imsOrg = param.imsOrg, imsToken = param.imsToken, imsProfile = param.imsProfile, locale = param.locale;
        // tell the exc-runtime object we are done
        runtime.done();
        console.log('Ready! received imsProfile:', imsProfile);
        var ims = {
            profile: imsProfile,
            org: imsOrg,
            token: imsToken
        }; // render the actual react application and pass along the runtime and ims objects to make it available to the App
        _reactDom.default.render(/*#__PURE__*/ React.createElement(_App.default, {
            runtime: runtime,
            ims: ims,
            __source: {
                fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\index.js",
                lineNumber: 73
            },
            __self: this
        }), document.getElementById('root'));
    }).bind(this)); // set solution info, shortTitle is used when window is too small to display full title
    runtime.solution = {
        icon: 'AdobeExperienceCloud',
        title: 'trainingproject',
        shortTitle: 'JGR'
    };
    runtime.title = 'trainingproject';
}

},{"core-js/stable":"6Ib7x","regenerator-runtime/runtime":"16JVu","react":"a6qBW","react-dom":"6V7Bv","@adobe/exc-app":"36K0W","./components/App":"3Rupi","./index.css":"4uj55","./exc-runtime":"6Z0P9"}],"6Ib7x":[function(require,module,exports) {
require('../modules/es.symbol');
require('../modules/es.symbol.description');
require('../modules/es.symbol.async-iterator');
require('../modules/es.symbol.has-instance');
require('../modules/es.symbol.is-concat-spreadable');
require('../modules/es.symbol.iterator');
require('../modules/es.symbol.match');
require('../modules/es.symbol.match-all');
require('../modules/es.symbol.replace');
require('../modules/es.symbol.search');
require('../modules/es.symbol.species');
require('../modules/es.symbol.split');
require('../modules/es.symbol.to-primitive');
require('../modules/es.symbol.to-string-tag');
require('../modules/es.symbol.unscopables');
require('../modules/es.aggregate-error');
require('../modules/es.array.concat');
require('../modules/es.array.copy-within');
require('../modules/es.array.every');
require('../modules/es.array.fill');
require('../modules/es.array.filter');
require('../modules/es.array.find');
require('../modules/es.array.find-index');
require('../modules/es.array.flat');
require('../modules/es.array.flat-map');
require('../modules/es.array.for-each');
require('../modules/es.array.from');
require('../modules/es.array.includes');
require('../modules/es.array.index-of');
require('../modules/es.array.is-array');
require('../modules/es.array.iterator');
require('../modules/es.array.join');
require('../modules/es.array.last-index-of');
require('../modules/es.array.map');
require('../modules/es.array.of');
require('../modules/es.array.reduce');
require('../modules/es.array.reduce-right');
require('../modules/es.array.reverse');
require('../modules/es.array.slice');
require('../modules/es.array.some');
require('../modules/es.array.sort');
require('../modules/es.array.species');
require('../modules/es.array.splice');
require('../modules/es.array.unscopables.flat');
require('../modules/es.array.unscopables.flat-map');
require('../modules/es.array-buffer.constructor');
require('../modules/es.array-buffer.is-view');
require('../modules/es.array-buffer.slice');
require('../modules/es.data-view');
require('../modules/es.date.now');
require('../modules/es.date.to-iso-string');
require('../modules/es.date.to-json');
require('../modules/es.date.to-primitive');
require('../modules/es.date.to-string');
require('../modules/es.function.bind');
require('../modules/es.function.has-instance');
require('../modules/es.function.name');
require('../modules/es.global-this');
require('../modules/es.json.stringify');
require('../modules/es.json.to-string-tag');
require('../modules/es.map');
require('../modules/es.math.acosh');
require('../modules/es.math.asinh');
require('../modules/es.math.atanh');
require('../modules/es.math.cbrt');
require('../modules/es.math.clz32');
require('../modules/es.math.cosh');
require('../modules/es.math.expm1');
require('../modules/es.math.fround');
require('../modules/es.math.hypot');
require('../modules/es.math.imul');
require('../modules/es.math.log10');
require('../modules/es.math.log1p');
require('../modules/es.math.log2');
require('../modules/es.math.sign');
require('../modules/es.math.sinh');
require('../modules/es.math.tanh');
require('../modules/es.math.to-string-tag');
require('../modules/es.math.trunc');
require('../modules/es.number.constructor');
require('../modules/es.number.epsilon');
require('../modules/es.number.is-finite');
require('../modules/es.number.is-integer');
require('../modules/es.number.is-nan');
require('../modules/es.number.is-safe-integer');
require('../modules/es.number.max-safe-integer');
require('../modules/es.number.min-safe-integer');
require('../modules/es.number.parse-float');
require('../modules/es.number.parse-int');
require('../modules/es.number.to-fixed');
require('../modules/es.number.to-precision');
require('../modules/es.object.assign');
require('../modules/es.object.create');
require('../modules/es.object.define-getter');
require('../modules/es.object.define-properties');
require('../modules/es.object.define-property');
require('../modules/es.object.define-setter');
require('../modules/es.object.entries');
require('../modules/es.object.freeze');
require('../modules/es.object.from-entries');
require('../modules/es.object.get-own-property-descriptor');
require('../modules/es.object.get-own-property-descriptors');
require('../modules/es.object.get-own-property-names');
require('../modules/es.object.get-prototype-of');
require('../modules/es.object.is');
require('../modules/es.object.is-extensible');
require('../modules/es.object.is-frozen');
require('../modules/es.object.is-sealed');
require('../modules/es.object.keys');
require('../modules/es.object.lookup-getter');
require('../modules/es.object.lookup-setter');
require('../modules/es.object.prevent-extensions');
require('../modules/es.object.seal');
require('../modules/es.object.set-prototype-of');
require('../modules/es.object.to-string');
require('../modules/es.object.values');
require('../modules/es.parse-float');
require('../modules/es.parse-int');
require('../modules/es.promise');
require('../modules/es.promise.all-settled');
require('../modules/es.promise.any');
require('../modules/es.promise.finally');
require('../modules/es.reflect.apply');
require('../modules/es.reflect.construct');
require('../modules/es.reflect.define-property');
require('../modules/es.reflect.delete-property');
require('../modules/es.reflect.get');
require('../modules/es.reflect.get-own-property-descriptor');
require('../modules/es.reflect.get-prototype-of');
require('../modules/es.reflect.has');
require('../modules/es.reflect.is-extensible');
require('../modules/es.reflect.own-keys');
require('../modules/es.reflect.prevent-extensions');
require('../modules/es.reflect.set');
require('../modules/es.reflect.set-prototype-of');
require('../modules/es.reflect.to-string-tag');
require('../modules/es.regexp.constructor');
require('../modules/es.regexp.exec');
require('../modules/es.regexp.flags');
require('../modules/es.regexp.sticky');
require('../modules/es.regexp.test');
require('../modules/es.regexp.to-string');
require('../modules/es.set');
require('../modules/es.string.code-point-at');
require('../modules/es.string.ends-with');
require('../modules/es.string.from-code-point');
require('../modules/es.string.includes');
require('../modules/es.string.iterator');
require('../modules/es.string.match');
require('../modules/es.string.match-all');
require('../modules/es.string.pad-end');
require('../modules/es.string.pad-start');
require('../modules/es.string.raw');
require('../modules/es.string.repeat');
require('../modules/es.string.replace');
require('../modules/es.string.replace-all');
require('../modules/es.string.search');
require('../modules/es.string.split');
require('../modules/es.string.starts-with');
require('../modules/es.string.trim');
require('../modules/es.string.trim-end');
require('../modules/es.string.trim-start');
require('../modules/es.string.anchor');
require('../modules/es.string.big');
require('../modules/es.string.blink');
require('../modules/es.string.bold');
require('../modules/es.string.fixed');
require('../modules/es.string.fontcolor');
require('../modules/es.string.fontsize');
require('../modules/es.string.italics');
require('../modules/es.string.link');
require('../modules/es.string.small');
require('../modules/es.string.strike');
require('../modules/es.string.sub');
require('../modules/es.string.sup');
require('../modules/es.typed-array.float32-array');
require('../modules/es.typed-array.float64-array');
require('../modules/es.typed-array.int8-array');
require('../modules/es.typed-array.int16-array');
require('../modules/es.typed-array.int32-array');
require('../modules/es.typed-array.uint8-array');
require('../modules/es.typed-array.uint8-clamped-array');
require('../modules/es.typed-array.uint16-array');
require('../modules/es.typed-array.uint32-array');
require('../modules/es.typed-array.copy-within');
require('../modules/es.typed-array.every');
require('../modules/es.typed-array.fill');
require('../modules/es.typed-array.filter');
require('../modules/es.typed-array.find');
require('../modules/es.typed-array.find-index');
require('../modules/es.typed-array.for-each');
require('../modules/es.typed-array.from');
require('../modules/es.typed-array.includes');
require('../modules/es.typed-array.index-of');
require('../modules/es.typed-array.iterator');
require('../modules/es.typed-array.join');
require('../modules/es.typed-array.last-index-of');
require('../modules/es.typed-array.map');
require('../modules/es.typed-array.of');
require('../modules/es.typed-array.reduce');
require('../modules/es.typed-array.reduce-right');
require('../modules/es.typed-array.reverse');
require('../modules/es.typed-array.set');
require('../modules/es.typed-array.slice');
require('../modules/es.typed-array.some');
require('../modules/es.typed-array.sort');
require('../modules/es.typed-array.subarray');
require('../modules/es.typed-array.to-locale-string');
require('../modules/es.typed-array.to-string');
require('../modules/es.weak-map');
require('../modules/es.weak-set');
require('../modules/web.dom-collections.for-each');
require('../modules/web.dom-collections.iterator');
require('../modules/web.immediate');
require('../modules/web.queue-microtask');
require('../modules/web.timers');
require('../modules/web.url');
require('../modules/web.url.to-json');
require('../modules/web.url-search-params');
module.exports = require('../internals/path');

},{"../modules/es.symbol":"zOsbq","../modules/es.symbol.description":"4Ou1t","../modules/es.symbol.async-iterator":"6ytvL","../modules/es.symbol.has-instance":"1HOtF","../modules/es.symbol.is-concat-spreadable":"7IwYD","../modules/es.symbol.iterator":"2LIVp","../modules/es.symbol.match":"1PKLw","../modules/es.symbol.match-all":"3KlKC","../modules/es.symbol.replace":"7nnaE","../modules/es.symbol.search":"bG439","../modules/es.symbol.species":"6GMtb","../modules/es.symbol.split":"5xc79","../modules/es.symbol.to-primitive":"2UBHX","../modules/es.symbol.to-string-tag":"1I2EP","../modules/es.symbol.unscopables":"7MceI","../modules/es.aggregate-error":"2dFKS","../modules/es.array.concat":"7qF75","../modules/es.array.copy-within":"Z2KPL","../modules/es.array.every":"5tXrX","../modules/es.array.fill":"4YBNy","../modules/es.array.filter":"62vTA","../modules/es.array.find":"76MUx","../modules/es.array.find-index":"4Ds1g","../modules/es.array.flat":"4OrkP","../modules/es.array.flat-map":"2BDmK","../modules/es.array.for-each":"4N9BO","../modules/es.array.from":"2nDHq","../modules/es.array.includes":"57aK4","../modules/es.array.index-of":"3OHM0","../modules/es.array.is-array":"3DWFE","../modules/es.array.iterator":"4FVKU","../modules/es.array.join":"1qWvh","../modules/es.array.last-index-of":"6fwS3","../modules/es.array.map":"3MGGg","../modules/es.array.of":"2uzA6","../modules/es.array.reduce":"01nvk","../modules/es.array.reduce-right":"30nNO","../modules/es.array.reverse":"46Zw8","../modules/es.array.slice":"RhvHX","../modules/es.array.some":"6qCZA","../modules/es.array.sort":"7F3u0","../modules/es.array.species":"5PN9I","../modules/es.array.splice":"50VRS","../modules/es.array.unscopables.flat":"3kPRG","../modules/es.array.unscopables.flat-map":"6Wl1N","../modules/es.array-buffer.constructor":"2J012","../modules/es.array-buffer.is-view":"6P8oC","../modules/es.array-buffer.slice":"6M2Wu","../modules/es.data-view":"1VE7g","../modules/es.date.now":"3g9un","../modules/es.date.to-iso-string":"4mpH2","../modules/es.date.to-json":"3ugRc","../modules/es.date.to-primitive":"6vxlK","../modules/es.date.to-string":"4UgPB","../modules/es.function.bind":"sGZVY","../modules/es.function.has-instance":"5L6to","../modules/es.function.name":"1Kox3","../modules/es.global-this":"1KjpN","../modules/es.json.stringify":"4jUrw","../modules/es.json.to-string-tag":"1Im52","../modules/es.map":"7Hojg","../modules/es.math.acosh":"1rqDl","../modules/es.math.asinh":"20NIn","../modules/es.math.atanh":"6WdJm","../modules/es.math.cbrt":"7iScp","../modules/es.math.clz32":"4qIcM","../modules/es.math.cosh":"4vEbq","../modules/es.math.expm1":"1VxZr","../modules/es.math.fround":"3iYhc","../modules/es.math.hypot":"6DwBI","../modules/es.math.imul":"Aae7X","../modules/es.math.log10":"6HJkq","../modules/es.math.log1p":"1d2Nq","../modules/es.math.log2":"uKxUJ","../modules/es.math.sign":"4WhKk","../modules/es.math.sinh":"4vnIe","../modules/es.math.tanh":"1HmeH","../modules/es.math.to-string-tag":"68Otw","../modules/es.math.trunc":"2zzSb","../modules/es.number.constructor":"4zXCZ","../modules/es.number.epsilon":"5npu0","../modules/es.number.is-finite":"6bA9g","../modules/es.number.is-integer":"1GInF","../modules/es.number.is-nan":"1Eatt","../modules/es.number.is-safe-integer":"1r7x5","../modules/es.number.max-safe-integer":"794za","../modules/es.number.min-safe-integer":"2rBbx","../modules/es.number.parse-float":"6yQe5","../modules/es.number.parse-int":"343Nr","../modules/es.number.to-fixed":"2IMaY","../modules/es.number.to-precision":"ZDD0W","../modules/es.object.assign":"4IFTU","../modules/es.object.create":"6gpYb","../modules/es.object.define-getter":"7Axnt","../modules/es.object.define-properties":"6iguQ","../modules/es.object.define-property":"1mBV7","../modules/es.object.define-setter":"6b6aN","../modules/es.object.entries":"4tiAn","../modules/es.object.freeze":"1Hib2","../modules/es.object.from-entries":"18HRa","../modules/es.object.get-own-property-descriptor":"6qCyt","../modules/es.object.get-own-property-descriptors":"6rxB6","../modules/es.object.get-own-property-names":"5udqw","../modules/es.object.get-prototype-of":"3dwXL","../modules/es.object.is":"2SDiB","../modules/es.object.is-extensible":"3JC2S","../modules/es.object.is-frozen":"N15Sb","../modules/es.object.is-sealed":"4Z5os","../modules/es.object.keys":"Z2WL3","../modules/es.object.lookup-getter":"eCpLO","../modules/es.object.lookup-setter":"58u4L","../modules/es.object.prevent-extensions":"1uA79","../modules/es.object.seal":"3e1Nu","../modules/es.object.set-prototype-of":"51AEH","../modules/es.object.to-string":"nrQFY","../modules/es.object.values":"39YEH","../modules/es.parse-float":"2KaX2","../modules/es.parse-int":"7rJy7","../modules/es.promise":"6WC14","../modules/es.promise.all-settled":"gdSgn","../modules/es.promise.any":"jaPw2","../modules/es.promise.finally":"3lrNK","../modules/es.reflect.apply":"7ysYq","../modules/es.reflect.construct":"3bNO2","../modules/es.reflect.define-property":"1IfhI","../modules/es.reflect.delete-property":"3NHKK","../modules/es.reflect.get":"1V4nQ","../modules/es.reflect.get-own-property-descriptor":"18tBD","../modules/es.reflect.get-prototype-of":"52EYg","../modules/es.reflect.has":"1OzkF","../modules/es.reflect.is-extensible":"5Y56A","../modules/es.reflect.own-keys":"5ewPQ","../modules/es.reflect.prevent-extensions":"2OaVM","../modules/es.reflect.set":"1SjfK","../modules/es.reflect.set-prototype-of":"3n3VA","../modules/es.reflect.to-string-tag":"7hUvf","../modules/es.regexp.constructor":"4VaPP","../modules/es.regexp.exec":"2uKSw","../modules/es.regexp.flags":"7s61Z","../modules/es.regexp.sticky":"1lCgY","../modules/es.regexp.test":"LICFT","../modules/es.regexp.to-string":"4baFV","../modules/es.set":"7hqwG","../modules/es.string.code-point-at":"2dy1y","../modules/es.string.ends-with":"2TBhV","../modules/es.string.from-code-point":"5xq7e","../modules/es.string.includes":"7GNu3","../modules/es.string.iterator":"5caim","../modules/es.string.match":"4EJ81","../modules/es.string.match-all":"4fBTH","../modules/es.string.pad-end":"40Qwk","../modules/es.string.pad-start":"1FuAj","../modules/es.string.raw":"6tMon","../modules/es.string.repeat":"7fnIO","../modules/es.string.replace":"6ioBM","../modules/es.string.replace-all":"5YpCi","../modules/es.string.search":"4NC3A","../modules/es.string.split":"1xjWY","../modules/es.string.starts-with":"2fUJr","../modules/es.string.trim":"3eh3p","../modules/es.string.trim-end":"1T8Rk","../modules/es.string.trim-start":"2E6ML","../modules/es.string.anchor":"5XwTb","../modules/es.string.big":"4jXx8","../modules/es.string.blink":"1jKzO","../modules/es.string.bold":"47JLI","../modules/es.string.fixed":"7Mtwm","../modules/es.string.fontcolor":"71brs","../modules/es.string.fontsize":"59kP6","../modules/es.string.italics":"4ft5G","../modules/es.string.link":"5uokb","../modules/es.string.small":"1Cin2","../modules/es.string.strike":"623Lp","../modules/es.string.sub":"14yK1","../modules/es.string.sup":"6LkGs","../modules/es.typed-array.float32-array":"1oZz8","../modules/es.typed-array.float64-array":"6yL55","../modules/es.typed-array.int8-array":"16xEh","../modules/es.typed-array.int16-array":"1lEVY","../modules/es.typed-array.int32-array":"5f8QB","../modules/es.typed-array.uint8-array":"4jttK","../modules/es.typed-array.uint8-clamped-array":"2VVQM","../modules/es.typed-array.uint16-array":"4xfMB","../modules/es.typed-array.uint32-array":"4Buss","../modules/es.typed-array.copy-within":"14MaR","../modules/es.typed-array.every":"307Nr","../modules/es.typed-array.fill":"4qIpl","../modules/es.typed-array.filter":"78GSm","../modules/es.typed-array.find":"3L4Oz","../modules/es.typed-array.find-index":"3j72Y","../modules/es.typed-array.for-each":"47EwE","../modules/es.typed-array.from":"3cI5d","../modules/es.typed-array.includes":"5Gxe4","../modules/es.typed-array.index-of":"7qKMA","../modules/es.typed-array.iterator":"2L9Vh","../modules/es.typed-array.join":"3whWP","../modules/es.typed-array.last-index-of":"GChDV","../modules/es.typed-array.map":"ecU8C","../modules/es.typed-array.of":"FJEpE","../modules/es.typed-array.reduce":"3wCad","../modules/es.typed-array.reduce-right":"2KMPJ","../modules/es.typed-array.reverse":"65sXn","../modules/es.typed-array.set":"6nk7q","../modules/es.typed-array.slice":"1Eeka","../modules/es.typed-array.some":"1vf1j","../modules/es.typed-array.sort":"2OaLc","../modules/es.typed-array.subarray":"2mcxu","../modules/es.typed-array.to-locale-string":"2Tt8P","../modules/es.typed-array.to-string":"7Jg9d","../modules/es.weak-map":"4glK9","../modules/es.weak-set":"6tyIB","../modules/web.dom-collections.for-each":"7njVQ","../modules/web.dom-collections.iterator":"5jqEY","../modules/web.immediate":"5HqAE","../modules/web.queue-microtask":"uG3o5","../modules/web.timers":"Gayae","../modules/web.url":"5Jt1f","../modules/web.url.to-json":"5ogTs","../modules/web.url-search-params":"1mYEa","../internals/path":"1sun5"}],"zOsbq":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var global = require('../internals/global');
var getBuiltIn = require('../internals/get-built-in');
var IS_PURE = require('../internals/is-pure');
var DESCRIPTORS = require('../internals/descriptors');
var NATIVE_SYMBOL = require('../internals/native-symbol');
var USE_SYMBOL_AS_UID = require('../internals/use-symbol-as-uid');
var fails = require('../internals/fails');
var has = require('../internals/has');
var isArray = require('../internals/is-array');
var isObject = require('../internals/is-object');
var anObject = require('../internals/an-object');
var toObject = require('../internals/to-object');
var toIndexedObject = require('../internals/to-indexed-object');
var toPrimitive = require('../internals/to-primitive');
var createPropertyDescriptor = require('../internals/create-property-descriptor');
var nativeObjectCreate = require('../internals/object-create');
var objectKeys = require('../internals/object-keys');
var getOwnPropertyNamesModule = require('../internals/object-get-own-property-names');
var getOwnPropertyNamesExternal = require('../internals/object-get-own-property-names-external');
var getOwnPropertySymbolsModule = require('../internals/object-get-own-property-symbols');
var getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');
var definePropertyModule = require('../internals/object-define-property');
var propertyIsEnumerableModule = require('../internals/object-property-is-enumerable');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var redefine = require('../internals/redefine');
var shared = require('../internals/shared');
var sharedKey = require('../internals/shared-key');
var hiddenKeys = require('../internals/hidden-keys');
var uid = require('../internals/uid');
var wellKnownSymbol = require('../internals/well-known-symbol');
var wrappedWellKnownSymbolModule = require('../internals/well-known-symbol-wrapped');
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');
var setToStringTag = require('../internals/set-to-string-tag');
var InternalStateModule = require('../internals/internal-state');
var $forEach = require('../internals/array-iteration').forEach;
var HIDDEN = sharedKey('hidden');
var SYMBOL = 'Symbol';
var PROTOTYPE = 'prototype';
var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(SYMBOL);
var ObjectPrototype = Object[PROTOTYPE];
var $Symbol = global.Symbol;
var $stringify = getBuiltIn('JSON', 'stringify');
var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
var nativeDefineProperty = definePropertyModule.f;
var nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;
var nativePropertyIsEnumerable = propertyIsEnumerableModule.f;
var AllSymbols = shared('symbols');
var ObjectPrototypeSymbols = shared('op-symbols');
var StringToSymbolRegistry = shared('string-to-symbol-registry');
var SymbolToStringRegistry = shared('symbol-to-string-registry');
var WellKnownSymbolsStore = shared('wks');
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDescriptor = DESCRIPTORS && fails(function() {
    return nativeObjectCreate(nativeDefineProperty({
    }, 'a', {
        get: function() {
            return nativeDefineProperty(this, 'a', {
                value: 7
            }).a;
        }
    })).a != 7;
}) ? function(O, P, Attributes) {
    var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor(ObjectPrototype, P);
    if (ObjectPrototypeDescriptor) delete ObjectPrototype[P];
    nativeDefineProperty(O, P, Attributes);
    if (ObjectPrototypeDescriptor && O !== ObjectPrototype) nativeDefineProperty(ObjectPrototype, P, ObjectPrototypeDescriptor);
} : nativeDefineProperty;
var wrap = function(tag, description) {
    var symbol = AllSymbols[tag] = nativeObjectCreate($Symbol[PROTOTYPE]);
    setInternalState(symbol, {
        type: SYMBOL,
        tag: tag,
        description: description
    });
    if (!DESCRIPTORS) symbol.description = description;
    return symbol;
};
var isSymbol = USE_SYMBOL_AS_UID ? function(it) {
    return typeof it == 'symbol';
} : function(it) {
    return Object(it) instanceof $Symbol;
};
var $defineProperty = function defineProperty(O, P, Attributes) {
    if (O === ObjectPrototype) $defineProperty(ObjectPrototypeSymbols, P, Attributes);
    anObject(O);
    var key = toPrimitive(P, true);
    anObject(Attributes);
    if (has(AllSymbols, key)) {
        if (!Attributes.enumerable) {
            if (!has(O, HIDDEN)) nativeDefineProperty(O, HIDDEN, createPropertyDescriptor(1, {
            }));
            O[HIDDEN][key] = true;
        } else {
            if (has(O, HIDDEN) && O[HIDDEN][key]) O[HIDDEN][key] = false;
            Attributes = nativeObjectCreate(Attributes, {
                enumerable: createPropertyDescriptor(0, false)
            });
        }
        return setSymbolDescriptor(O, key, Attributes);
    }
    return nativeDefineProperty(O, key, Attributes);
};
var $defineProperties = function defineProperties(O, Properties) {
    anObject(O);
    var properties = toIndexedObject(Properties);
    var keys = objectKeys(properties).concat($getOwnPropertySymbols(properties));
    $forEach(keys, function(key) {
        if (!DESCRIPTORS || $propertyIsEnumerable.call(properties, key)) $defineProperty(O, key, properties[key]);
    });
    return O;
};
var $create = function create(O, Properties) {
    return Properties === undefined ? nativeObjectCreate(O) : $defineProperties(nativeObjectCreate(O), Properties);
};
var $propertyIsEnumerable = function propertyIsEnumerable(V) {
    var P = toPrimitive(V, true);
    var enumerable = nativePropertyIsEnumerable.call(this, P);
    if (this === ObjectPrototype && has(AllSymbols, P) && !has(ObjectPrototypeSymbols, P)) return false;
    return enumerable || !has(this, P) || !has(AllSymbols, P) || has(this, HIDDEN) && this[HIDDEN][P] ? enumerable : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {
    var it = toIndexedObject(O);
    var key = toPrimitive(P, true);
    if (it === ObjectPrototype && has(AllSymbols, key) && !has(ObjectPrototypeSymbols, key)) return;
    var descriptor = nativeGetOwnPropertyDescriptor(it, key);
    if (descriptor && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) descriptor.enumerable = true;
    return descriptor;
};
var $getOwnPropertyNames = function getOwnPropertyNames(O) {
    var names = nativeGetOwnPropertyNames(toIndexedObject(O));
    var result = [];
    $forEach(names, function(key) {
        if (!has(AllSymbols, key) && !has(hiddenKeys, key)) result.push(key);
    });
    return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(O) {
    var IS_OBJECT_PROTOTYPE = O === ObjectPrototype;
    var names = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O));
    var result = [];
    $forEach(names, function(key) {
        if (has(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || has(ObjectPrototype, key))) result.push(AllSymbols[key]);
    });
    return result;
};
// `Symbol` constructor
// https://tc39.es/ecma262/#sec-symbol-constructor
if (!NATIVE_SYMBOL) {
    $Symbol = function Symbol1() {
        if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor');
        var description = !arguments.length || arguments[0] === undefined ? undefined : String(arguments[0]);
        var tag = uid(description);
        var setter = function(value) {
            if (this === ObjectPrototype) setter.call(ObjectPrototypeSymbols, value);
            if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
            setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
        };
        if (DESCRIPTORS && USE_SETTER) setSymbolDescriptor(ObjectPrototype, tag, {
            configurable: true,
            set: setter
        });
        return wrap(tag, description);
    };
    redefine($Symbol[PROTOTYPE], 'toString', function toString() {
        return getInternalState(this).tag;
    });
    redefine($Symbol, 'withoutSetter', function(description) {
        return wrap(uid(description), description);
    });
    propertyIsEnumerableModule.f = $propertyIsEnumerable;
    definePropertyModule.f = $defineProperty;
    getOwnPropertyDescriptorModule.f = $getOwnPropertyDescriptor;
    getOwnPropertyNamesModule.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;
    getOwnPropertySymbolsModule.f = $getOwnPropertySymbols;
    wrappedWellKnownSymbolModule.f = function(name) {
        return wrap(wellKnownSymbol(name), name);
    };
    if (DESCRIPTORS) {
        // https://github.com/tc39/proposal-Symbol-description
        nativeDefineProperty($Symbol[PROTOTYPE], 'description', {
            configurable: true,
            get: function description() {
                return getInternalState(this).description;
            }
        });
        if (!IS_PURE) redefine(ObjectPrototype, 'propertyIsEnumerable', $propertyIsEnumerable, {
            unsafe: true
        });
    }
}
$({
    global: true,
    wrap: true,
    forced: !NATIVE_SYMBOL,
    sham: !NATIVE_SYMBOL
}, {
    Symbol: $Symbol
});
$forEach(objectKeys(WellKnownSymbolsStore), function(name) {
    defineWellKnownSymbol(name);
});
$({
    target: SYMBOL,
    stat: true,
    forced: !NATIVE_SYMBOL
}, {
    // `Symbol.for` method
    // https://tc39.es/ecma262/#sec-symbol.for
    'for': function(key) {
        var string = String(key);
        if (has(StringToSymbolRegistry, string)) return StringToSymbolRegistry[string];
        var symbol = $Symbol(string);
        StringToSymbolRegistry[string] = symbol;
        SymbolToStringRegistry[symbol] = string;
        return symbol;
    },
    // `Symbol.keyFor` method
    // https://tc39.es/ecma262/#sec-symbol.keyfor
    keyFor: function keyFor(sym) {
        if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol');
        if (has(SymbolToStringRegistry, sym)) return SymbolToStringRegistry[sym];
    },
    useSetter: function() {
        USE_SETTER = true;
    },
    useSimple: function() {
        USE_SETTER = false;
    }
});
$({
    target: 'Object',
    stat: true,
    forced: !NATIVE_SYMBOL,
    sham: !DESCRIPTORS
}, {
    // `Object.create` method
    // https://tc39.es/ecma262/#sec-object.create
    create: $create,
    // `Object.defineProperty` method
    // https://tc39.es/ecma262/#sec-object.defineproperty
    defineProperty: $defineProperty,
    // `Object.defineProperties` method
    // https://tc39.es/ecma262/#sec-object.defineproperties
    defineProperties: $defineProperties,
    // `Object.getOwnPropertyDescriptor` method
    // https://tc39.es/ecma262/#sec-object.getownpropertydescriptors
    getOwnPropertyDescriptor: $getOwnPropertyDescriptor
});
$({
    target: 'Object',
    stat: true,
    forced: !NATIVE_SYMBOL
}, {
    // `Object.getOwnPropertyNames` method
    // https://tc39.es/ecma262/#sec-object.getownpropertynames
    getOwnPropertyNames: $getOwnPropertyNames,
    // `Object.getOwnPropertySymbols` method
    // https://tc39.es/ecma262/#sec-object.getownpropertysymbols
    getOwnPropertySymbols: $getOwnPropertySymbols
});
// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
// https://bugs.chromium.org/p/v8/issues/detail?id=3443
$({
    target: 'Object',
    stat: true,
    forced: fails(function() {
        getOwnPropertySymbolsModule.f(1);
    })
}, {
    getOwnPropertySymbols: function getOwnPropertySymbols1(it) {
        return getOwnPropertySymbolsModule.f(toObject(it));
    }
});
// `JSON.stringify` method behavior with symbols
// https://tc39.es/ecma262/#sec-json.stringify
if ($stringify) {
    var FORCED_JSON_STRINGIFY = !NATIVE_SYMBOL || fails(function() {
        var symbol = $Symbol();
        // MS Edge converts symbol values to JSON as {}
        return $stringify([
            symbol
        ]) != '[null]' || $stringify({
            a: symbol
        }) != '{}' || $stringify(Object(symbol)) != '{}';
    });
    $({
        target: 'JSON',
        stat: true,
        forced: FORCED_JSON_STRINGIFY
    }, {
        // eslint-disable-next-line no-unused-vars -- required for `.length`
        stringify: function stringify(it, replacer, space) {
            var args = [
                it
            ];
            var index = 1;
            var $replacer;
            while(arguments.length > index)args.push(arguments[index++]);
            $replacer = replacer;
            if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
            if (!isArray(replacer)) replacer = function(key, value) {
                if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
                if (!isSymbol(value)) return value;
            };
            args[1] = replacer;
            return $stringify.apply(null, args);
        }
    });
}
// `Symbol.prototype[@@toPrimitive]` method
// https://tc39.es/ecma262/#sec-symbol.prototype-@@toprimitive
if (!$Symbol[PROTOTYPE][TO_PRIMITIVE]) createNonEnumerableProperty($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// `Symbol.prototype[@@toStringTag]` property
// https://tc39.es/ecma262/#sec-symbol.prototype-@@tostringtag
setToStringTag($Symbol, SYMBOL);
hiddenKeys[HIDDEN] = true;

},{"../internals/export":"2y5a0","../internals/global":"4E9rT","../internals/get-built-in":"7zwJE","../internals/is-pure":"7KzvF","../internals/descriptors":"AOzbW","../internals/native-symbol":"2zi57","../internals/use-symbol-as-uid":"3gBUg","../internals/fails":"5dsdP","../internals/has":"1rjL0","../internals/is-array":"CSoeC","../internals/is-object":"5j9oO","../internals/an-object":"6as2W","../internals/to-object":"1Jr8n","../internals/to-indexed-object":"DEeSJ","../internals/to-primitive":"oTUf2","../internals/create-property-descriptor":"14mKL","../internals/object-create":"2DlVm","../internals/object-keys":"3t02w","../internals/object-get-own-property-names":"38Utf","../internals/object-get-own-property-names-external":"4PXQz","../internals/object-get-own-property-symbols":"36Y77","../internals/object-get-own-property-descriptor":"60pmx","../internals/object-define-property":"1pkua","../internals/object-property-is-enumerable":"2LEpr","../internals/create-non-enumerable-property":"7tRkq","../internals/redefine":"1SlpM","../internals/shared":"4CGOh","../internals/shared-key":"6Ds90","../internals/hidden-keys":"1wNv8","../internals/uid":"CWjPL","../internals/well-known-symbol":"23Lpi","../internals/well-known-symbol-wrapped":"4n6I6","../internals/define-well-known-symbol":"3xPOk","../internals/set-to-string-tag":"73zwY","../internals/internal-state":"32AmZ","../internals/array-iteration":"2s7u3"}],"2y5a0":[function(require,module,exports) {
var global = require('../internals/global');
var getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var redefine = require('../internals/redefine');
var setGlobal = require('../internals/set-global');
var copyConstructorProperties = require('../internals/copy-constructor-properties');
var isForced = require('../internals/is-forced');
/*
  options.target      - name of the target object
  options.global      - target is the global object
  options.stat        - export as static methods of target
  options.proto       - export as prototype methods of target
  options.real        - real prototype method for the `pure` version
  options.forced      - export even if the native feature is available
  options.bind        - bind methods to the target, required for the `pure` version
  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
  options.unsafe      - use the simple assignment of property instead of delete + defineProperty
  options.sham        - add a flag to not completely full polyfills
  options.enumerable  - export as enumerable property
  options.noTargetGet - prevent calling a getter on target
*/ module.exports = function(options, source) {
    var TARGET = options.target;
    var GLOBAL = options.global;
    var STATIC = options.stat;
    var FORCED, target, key, targetProperty, sourceProperty, descriptor;
    if (GLOBAL) target = global;
    else if (STATIC) target = global[TARGET] || setGlobal(TARGET, {
    });
    else target = (global[TARGET] || {
    }).prototype;
    if (target) for(key in source){
        sourceProperty = source[key];
        if (options.noTargetGet) {
            descriptor = getOwnPropertyDescriptor(target, key);
            targetProperty = descriptor && descriptor.value;
        } else targetProperty = target[key];
        FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
        // contained in target
        if (!FORCED && targetProperty !== undefined) {
            if (typeof sourceProperty === typeof targetProperty) continue;
            copyConstructorProperties(sourceProperty, targetProperty);
        }
        // add a flag to not completely full polyfills
        if (options.sham || targetProperty && targetProperty.sham) createNonEnumerableProperty(sourceProperty, 'sham', true);
        // extend global
        redefine(target, key, sourceProperty, options);
    }
};

},{"../internals/global":"4E9rT","../internals/object-get-own-property-descriptor":"60pmx","../internals/create-non-enumerable-property":"7tRkq","../internals/redefine":"1SlpM","../internals/set-global":"1g0Kn","../internals/copy-constructor-properties":"1OsyY","../internals/is-forced":"EXRg1"}],"4E9rT":[function(require,module,exports) {
var global = arguments[3];
var check = function(it) {
    return it && it.Math == Math && it;
};
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
module.exports = // eslint-disable-next-line es/no-global-this -- safe
check(typeof globalThis == 'object' && globalThis) || check(typeof window == 'object' && window) || // eslint-disable-next-line no-restricted-globals -- safe
check(typeof self == 'object' && self) || check(typeof global == 'object' && global) || // eslint-disable-next-line no-new-func -- fallback
(function() {
    return this;
})() || Function('return this')();

},{}],"60pmx":[function(require,module,exports) {
var DESCRIPTORS = require('../internals/descriptors');
var propertyIsEnumerableModule = require('../internals/object-property-is-enumerable');
var createPropertyDescriptor = require('../internals/create-property-descriptor');
var toIndexedObject = require('../internals/to-indexed-object');
var toPrimitive = require('../internals/to-primitive');
var has = require('../internals/has');
var IE8_DOM_DEFINE = require('../internals/ie8-dom-define');
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
// `Object.getOwnPropertyDescriptor` method
// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
exports.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
    O = toIndexedObject(O);
    P = toPrimitive(P, true);
    if (IE8_DOM_DEFINE) try {
        return $getOwnPropertyDescriptor(O, P);
    } catch (error) {
    }
    if (has(O, P)) return createPropertyDescriptor(!propertyIsEnumerableModule.f.call(O, P), O[P]);
};

},{"../internals/descriptors":"AOzbW","../internals/object-property-is-enumerable":"2LEpr","../internals/create-property-descriptor":"14mKL","../internals/to-indexed-object":"DEeSJ","../internals/to-primitive":"oTUf2","../internals/has":"1rjL0","../internals/ie8-dom-define":"IR0H3"}],"AOzbW":[function(require,module,exports) {
var fails = require('../internals/fails');
// Detect IE8's incomplete defineProperty implementation
module.exports = !fails(function() {
    // eslint-disable-next-line es/no-object-defineproperty -- required for testing
    return Object.defineProperty({
    }, 1, {
        get: function() {
            return 7;
        }
    })[1] != 7;
});

},{"../internals/fails":"5dsdP"}],"5dsdP":[function(require,module,exports) {
module.exports = function(exec) {
    try {
        return !!exec();
    } catch (error) {
        return true;
    }
};

},{}],"2LEpr":[function(require,module,exports) {
'use strict';
var $propertyIsEnumerable = {
}.propertyIsEnumerable;
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
// Nashorn ~ JDK8 bug
var NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({
    1: 2
}, 1);
// `Object.prototype.propertyIsEnumerable` method implementation
// https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable
exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
    var descriptor = getOwnPropertyDescriptor(this, V);
    return !!descriptor && descriptor.enumerable;
} : $propertyIsEnumerable;

},{}],"14mKL":[function(require,module,exports) {
module.exports = function(bitmap, value) {
    return {
        enumerable: !(bitmap & 1),
        configurable: !(bitmap & 2),
        writable: !(bitmap & 4),
        value: value
    };
};

},{}],"DEeSJ":[function(require,module,exports) {
// toObject with fallback for non-array-like ES3 strings
var IndexedObject = require('../internals/indexed-object');
var requireObjectCoercible = require('../internals/require-object-coercible');
module.exports = function(it) {
    return IndexedObject(requireObjectCoercible(it));
};

},{"../internals/indexed-object":"vbpOP","../internals/require-object-coercible":"7J9xg"}],"vbpOP":[function(require,module,exports) {
var fails = require('../internals/fails');
var classof = require('../internals/classof-raw');
var split = ''.split;
// fallback for non-array-like ES3 and non-enumerable old V8 strings
module.exports = fails(function() {
    // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
    // eslint-disable-next-line no-prototype-builtins -- safe
    return !Object('z').propertyIsEnumerable(0);
}) ? function(it) {
    return classof(it) == 'String' ? split.call(it, '') : Object(it);
} : Object;

},{"../internals/fails":"5dsdP","../internals/classof-raw":"2KP6c"}],"2KP6c":[function(require,module,exports) {
var toString = {
}.toString;
module.exports = function(it) {
    return toString.call(it).slice(8, -1);
};

},{}],"7J9xg":[function(require,module,exports) {
// `RequireObjectCoercible` abstract operation
// https://tc39.es/ecma262/#sec-requireobjectcoercible
module.exports = function(it) {
    if (it == undefined) throw TypeError("Can't call method on " + it);
    return it;
};

},{}],"oTUf2":[function(require,module,exports) {
var isObject = require('../internals/is-object');
// `ToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-toprimitive
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function(input, PREFERRED_STRING) {
    if (!isObject(input)) return input;
    var fn, val;
    if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
    if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) return val;
    if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
    throw TypeError("Can't convert object to primitive value");
};

},{"../internals/is-object":"5j9oO"}],"5j9oO":[function(require,module,exports) {
module.exports = function(it) {
    return typeof it === 'object' ? it !== null : typeof it === 'function';
};

},{}],"1rjL0":[function(require,module,exports) {
var toObject = require('../internals/to-object');
var hasOwnProperty = {
}.hasOwnProperty;
module.exports = Object.hasOwn || function hasOwn(it, key) {
    return hasOwnProperty.call(toObject(it), key);
};

},{"../internals/to-object":"1Jr8n"}],"1Jr8n":[function(require,module,exports) {
var requireObjectCoercible = require('../internals/require-object-coercible');
// `ToObject` abstract operation
// https://tc39.es/ecma262/#sec-toobject
module.exports = function(argument) {
    return Object(requireObjectCoercible(argument));
};

},{"../internals/require-object-coercible":"7J9xg"}],"IR0H3":[function(require,module,exports) {
var DESCRIPTORS = require('../internals/descriptors');
var fails = require('../internals/fails');
var createElement = require('../internals/document-create-element');
// Thank's IE8 for his funny defineProperty
module.exports = !DESCRIPTORS && !fails(function() {
    // eslint-disable-next-line es/no-object-defineproperty -- requied for testing
    return Object.defineProperty(createElement('div'), 'a', {
        get: function() {
            return 7;
        }
    }).a != 7;
});

},{"../internals/descriptors":"AOzbW","../internals/fails":"5dsdP","../internals/document-create-element":"7rAVR"}],"7rAVR":[function(require,module,exports) {
var global = require('../internals/global');
var isObject = require('../internals/is-object');
var document = global.document;
// typeof document.createElement is 'object' in old IE
var EXISTS = isObject(document) && isObject(document.createElement);
module.exports = function(it) {
    return EXISTS ? document.createElement(it) : {
    };
};

},{"../internals/global":"4E9rT","../internals/is-object":"5j9oO"}],"7tRkq":[function(require,module,exports) {
var DESCRIPTORS = require('../internals/descriptors');
var definePropertyModule = require('../internals/object-define-property');
var createPropertyDescriptor = require('../internals/create-property-descriptor');
module.exports = DESCRIPTORS ? function(object, key, value) {
    return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
} : function(object, key, value) {
    object[key] = value;
    return object;
};

},{"../internals/descriptors":"AOzbW","../internals/object-define-property":"1pkua","../internals/create-property-descriptor":"14mKL"}],"1pkua":[function(require,module,exports) {
var DESCRIPTORS = require('../internals/descriptors');
var IE8_DOM_DEFINE = require('../internals/ie8-dom-define');
var anObject = require('../internals/an-object');
var toPrimitive = require('../internals/to-primitive');
// eslint-disable-next-line es/no-object-defineproperty -- safe
var $defineProperty = Object.defineProperty;
// `Object.defineProperty` method
// https://tc39.es/ecma262/#sec-object.defineproperty
exports.f = DESCRIPTORS ? $defineProperty : function defineProperty(O, P, Attributes) {
    anObject(O);
    P = toPrimitive(P, true);
    anObject(Attributes);
    if (IE8_DOM_DEFINE) try {
        return $defineProperty(O, P, Attributes);
    } catch (error) {
    }
    if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
    if ('value' in Attributes) O[P] = Attributes.value;
    return O;
};

},{"../internals/descriptors":"AOzbW","../internals/ie8-dom-define":"IR0H3","../internals/an-object":"6as2W","../internals/to-primitive":"oTUf2"}],"6as2W":[function(require,module,exports) {
var isObject = require('../internals/is-object');
module.exports = function(it) {
    if (!isObject(it)) throw TypeError(String(it) + ' is not an object');
    return it;
};

},{"../internals/is-object":"5j9oO"}],"1SlpM":[function(require,module,exports) {
var global = require('../internals/global');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var has = require('../internals/has');
var setGlobal = require('../internals/set-global');
var inspectSource = require('../internals/inspect-source');
var InternalStateModule = require('../internals/internal-state');
var getInternalState = InternalStateModule.get;
var enforceInternalState = InternalStateModule.enforce;
var TEMPLATE = String(String).split('String');
(module.exports = function(O, key, value, options) {
    var unsafe = options ? !!options.unsafe : false;
    var simple = options ? !!options.enumerable : false;
    var noTargetGet = options ? !!options.noTargetGet : false;
    var state;
    if (typeof value == 'function') {
        if (typeof key == 'string' && !has(value, 'name')) createNonEnumerableProperty(value, 'name', key);
        state = enforceInternalState(value);
        if (!state.source) state.source = TEMPLATE.join(typeof key == 'string' ? key : '');
    }
    if (O === global) {
        if (simple) O[key] = value;
        else setGlobal(key, value);
        return;
    } else if (!unsafe) delete O[key];
    else if (!noTargetGet && O[key]) simple = true;
    if (simple) O[key] = value;
    else createNonEnumerableProperty(O, key, value);
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, 'toString', function toString() {
    return typeof this == 'function' && getInternalState(this).source || inspectSource(this);
});

},{"../internals/global":"4E9rT","../internals/create-non-enumerable-property":"7tRkq","../internals/has":"1rjL0","../internals/set-global":"1g0Kn","../internals/inspect-source":"7HHRG","../internals/internal-state":"32AmZ"}],"1g0Kn":[function(require,module,exports) {
var global = require('../internals/global');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
module.exports = function(key, value) {
    try {
        createNonEnumerableProperty(global, key, value);
    } catch (error) {
        global[key] = value;
    }
    return value;
};

},{"../internals/global":"4E9rT","../internals/create-non-enumerable-property":"7tRkq"}],"7HHRG":[function(require,module,exports) {
var store = require('../internals/shared-store');
var functionToString = Function.toString;
// this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper
if (typeof store.inspectSource != 'function') store.inspectSource = function(it) {
    return functionToString.call(it);
};
module.exports = store.inspectSource;

},{"../internals/shared-store":"5xymI"}],"5xymI":[function(require,module,exports) {
var global = require('../internals/global');
var setGlobal = require('../internals/set-global');
var SHARED = '__core-js_shared__';
var store = global[SHARED] || setGlobal(SHARED, {
});
module.exports = store;

},{"../internals/global":"4E9rT","../internals/set-global":"1g0Kn"}],"32AmZ":[function(require,module,exports) {
var NATIVE_WEAK_MAP = require('../internals/native-weak-map');
var global = require('../internals/global');
var isObject = require('../internals/is-object');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var objectHas = require('../internals/has');
var shared = require('../internals/shared-store');
var sharedKey = require('../internals/shared-key');
var hiddenKeys = require('../internals/hidden-keys');
var OBJECT_ALREADY_INITIALIZED = 'Object already initialized';
var WeakMap1 = global.WeakMap;
var set, get, has;
var enforce = function(it) {
    return has(it) ? get(it) : set(it, {
    });
};
var getterFor = function(TYPE) {
    return function(it) {
        var state;
        if (!isObject(it) || (state = get(it)).type !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required');
        return state;
    };
};
if (NATIVE_WEAK_MAP || shared.state) {
    var store = shared.state || (shared.state = new WeakMap1());
    var wmget = store.get;
    var wmhas = store.has;
    var wmset = store.set;
    set = function(it, metadata) {
        if (wmhas.call(store, it)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);
        metadata.facade = it;
        wmset.call(store, it, metadata);
        return metadata;
    };
    get = function(it) {
        return wmget.call(store, it) || {
        };
    };
    has = function(it) {
        return wmhas.call(store, it);
    };
} else {
    var STATE = sharedKey('state');
    hiddenKeys[STATE] = true;
    set = function(it, metadata) {
        if (objectHas(it, STATE)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);
        metadata.facade = it;
        createNonEnumerableProperty(it, STATE, metadata);
        return metadata;
    };
    get = function(it) {
        return objectHas(it, STATE) ? it[STATE] : {
        };
    };
    has = function(it) {
        return objectHas(it, STATE);
    };
}
module.exports = {
    set: set,
    get: get,
    has: has,
    enforce: enforce,
    getterFor: getterFor
};

},{"../internals/native-weak-map":"5YFcN","../internals/global":"4E9rT","../internals/is-object":"5j9oO","../internals/create-non-enumerable-property":"7tRkq","../internals/has":"1rjL0","../internals/shared-store":"5xymI","../internals/shared-key":"6Ds90","../internals/hidden-keys":"1wNv8"}],"5YFcN":[function(require,module,exports) {
var global = require('../internals/global');
var inspectSource = require('../internals/inspect-source');
var WeakMap1 = global.WeakMap;
module.exports = typeof WeakMap1 === 'function' && /native code/.test(inspectSource(WeakMap1));

},{"../internals/global":"4E9rT","../internals/inspect-source":"7HHRG"}],"6Ds90":[function(require,module,exports) {
var shared = require('../internals/shared');
var uid = require('../internals/uid');
var keys = shared('keys');
module.exports = function(key) {
    return keys[key] || (keys[key] = uid(key));
};

},{"../internals/shared":"4CGOh","../internals/uid":"CWjPL"}],"4CGOh":[function(require,module,exports) {
var IS_PURE = require('../internals/is-pure');
var store = require('../internals/shared-store');
(module.exports = function(key, value) {
    return store[key] || (store[key] = value !== undefined ? value : {
    });
})('versions', []).push({
    version: '3.14.0',
    mode: IS_PURE ? 'pure' : 'global',
    copyright: '© 2021 Denis Pushkarev (zloirock.ru)'
});

},{"../internals/is-pure":"7KzvF","../internals/shared-store":"5xymI"}],"7KzvF":[function(require,module,exports) {
module.exports = false;

},{}],"CWjPL":[function(require,module,exports) {
var id = 0;
var postfix = Math.random();
module.exports = function(key) {
    return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + ((++id) + postfix).toString(36);
};

},{}],"1wNv8":[function(require,module,exports) {
module.exports = {
};

},{}],"1OsyY":[function(require,module,exports) {
var has = require('../internals/has');
var ownKeys = require('../internals/own-keys');
var getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');
var definePropertyModule = require('../internals/object-define-property');
module.exports = function(target, source) {
    var keys = ownKeys(source);
    var defineProperty = definePropertyModule.f;
    var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
    for(var i = 0; i < keys.length; i++){
        var key = keys[i];
        if (!has(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));
    }
};

},{"../internals/has":"1rjL0","../internals/own-keys":"49Dcz","../internals/object-get-own-property-descriptor":"60pmx","../internals/object-define-property":"1pkua"}],"49Dcz":[function(require,module,exports) {
var getBuiltIn = require('../internals/get-built-in');
var getOwnPropertyNamesModule = require('../internals/object-get-own-property-names');
var getOwnPropertySymbolsModule = require('../internals/object-get-own-property-symbols');
var anObject = require('../internals/an-object');
// all object keys, includes non-enumerable and symbols
module.exports = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
    var keys = getOwnPropertyNamesModule.f(anObject(it));
    var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
    return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;
};

},{"../internals/get-built-in":"7zwJE","../internals/object-get-own-property-names":"38Utf","../internals/object-get-own-property-symbols":"36Y77","../internals/an-object":"6as2W"}],"7zwJE":[function(require,module,exports) {
var path = require('../internals/path');
var global = require('../internals/global');
var aFunction = function(variable) {
    return typeof variable == 'function' ? variable : undefined;
};
module.exports = function(namespace, method) {
    return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global[namespace]) : path[namespace] && path[namespace][method] || global[namespace] && global[namespace][method];
};

},{"../internals/path":"1sun5","../internals/global":"4E9rT"}],"1sun5":[function(require,module,exports) {
var global = require('../internals/global');
module.exports = global;

},{"../internals/global":"4E9rT"}],"38Utf":[function(require,module,exports) {
var internalObjectKeys = require('../internals/object-keys-internal');
var enumBugKeys = require('../internals/enum-bug-keys');
var hiddenKeys = enumBugKeys.concat('length', 'prototype');
// `Object.getOwnPropertyNames` method
// https://tc39.es/ecma262/#sec-object.getownpropertynames
// eslint-disable-next-line es/no-object-getownpropertynames -- safe
exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
    return internalObjectKeys(O, hiddenKeys);
};

},{"../internals/object-keys-internal":"6wY3H","../internals/enum-bug-keys":"4YktQ"}],"6wY3H":[function(require,module,exports) {
var has = require('../internals/has');
var toIndexedObject = require('../internals/to-indexed-object');
var indexOf = require('../internals/array-includes').indexOf;
var hiddenKeys = require('../internals/hidden-keys');
module.exports = function(object, names) {
    var O = toIndexedObject(object);
    var i = 0;
    var result = [];
    var key;
    for(key in O)!has(hiddenKeys, key) && has(O, key) && result.push(key);
    // Don't enum bug & hidden keys
    while(names.length > i)if (has(O, key = names[i++])) ~indexOf(result, key) || result.push(key);
    return result;
};

},{"../internals/has":"1rjL0","../internals/to-indexed-object":"DEeSJ","../internals/array-includes":"1GY9g","../internals/hidden-keys":"1wNv8"}],"1GY9g":[function(require,module,exports) {
var toIndexedObject = require('../internals/to-indexed-object');
var toLength = require('../internals/to-length');
var toAbsoluteIndex = require('../internals/to-absolute-index');
// `Array.prototype.{ indexOf, includes }` methods implementation
var createMethod = function(IS_INCLUDES) {
    return function($this, el, fromIndex) {
        var O = toIndexedObject($this);
        var length = toLength(O.length);
        var index = toAbsoluteIndex(fromIndex, length);
        var value;
        // Array#includes uses SameValueZero equality algorithm
        // eslint-disable-next-line no-self-compare -- NaN check
        if (IS_INCLUDES && el != el) while(length > index){
            value = O[index++];
            // eslint-disable-next-line no-self-compare -- NaN check
            if (value != value) return true;
        // Array#indexOf ignores holes, Array#includes - not
        }
        else for(; length > index; index++){
            if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
        }
        return !IS_INCLUDES && -1;
    };
};
module.exports = {
    // `Array.prototype.includes` method
    // https://tc39.es/ecma262/#sec-array.prototype.includes
    includes: createMethod(true),
    // `Array.prototype.indexOf` method
    // https://tc39.es/ecma262/#sec-array.prototype.indexof
    indexOf: createMethod(false)
};

},{"../internals/to-indexed-object":"DEeSJ","../internals/to-length":"7tq8w","../internals/to-absolute-index":"5D7Fy"}],"7tq8w":[function(require,module,exports) {
var toInteger = require('../internals/to-integer');
var min = Math.min;
// `ToLength` abstract operation
// https://tc39.es/ecma262/#sec-tolength
module.exports = function(argument) {
    return argument > 0 ? min(toInteger(argument), 9007199254740991) : 0; // 2 ** 53 - 1 == 9007199254740991
};

},{"../internals/to-integer":"6y5fX"}],"6y5fX":[function(require,module,exports) {
var ceil = Math.ceil;
var floor = Math.floor;
// `ToInteger` abstract operation
// https://tc39.es/ecma262/#sec-tointeger
module.exports = function(argument) {
    return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
};

},{}],"5D7Fy":[function(require,module,exports) {
var toInteger = require('../internals/to-integer');
var max = Math.max;
var min = Math.min;
// Helper for a popular repeating case of the spec:
// Let integer be ? ToInteger(index).
// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
module.exports = function(index, length) {
    var integer = toInteger(index);
    return integer < 0 ? max(integer + length, 0) : min(integer, length);
};

},{"../internals/to-integer":"6y5fX"}],"4YktQ":[function(require,module,exports) {
// IE8- don't enum bug keys
module.exports = [
    'constructor',
    'hasOwnProperty',
    'isPrototypeOf',
    'propertyIsEnumerable',
    'toLocaleString',
    'toString',
    'valueOf'
];

},{}],"36Y77":[function(require,module,exports) {
// eslint-disable-next-line es/no-object-getownpropertysymbols -- safe
exports.f = Object.getOwnPropertySymbols;

},{}],"EXRg1":[function(require,module,exports) {
var fails = require('../internals/fails');
var replacement = /#|\.prototype\./;
var isForced = function(feature, detection) {
    var value = data[normalize(feature)];
    return value == POLYFILL ? true : value == NATIVE ? false : typeof detection == 'function' ? fails(detection) : !!detection;
};
var normalize = isForced.normalize = function(string) {
    return String(string).replace(replacement, '.').toLowerCase();
};
var data = isForced.data = {
};
var NATIVE = isForced.NATIVE = 'N';
var POLYFILL = isForced.POLYFILL = 'P';
module.exports = isForced;

},{"../internals/fails":"5dsdP"}],"2zi57":[function(require,module,exports) {
/* eslint-disable es/no-symbol -- required for testing */ var V8_VERSION = require('../internals/engine-v8-version');
var fails = require('../internals/fails');
// eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing
module.exports = !!Object.getOwnPropertySymbols && !fails(function() {
    var symbol = Symbol();
    // Chrome 38 Symbol has incorrect toString conversion
    // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances
    return !String(symbol) || !(Object(symbol) instanceof Symbol) || // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
    !Symbol.sham && V8_VERSION && V8_VERSION < 41;
});

},{"../internals/engine-v8-version":"6jjMH","../internals/fails":"5dsdP"}],"6jjMH":[function(require,module,exports) {
var global = require('../internals/global');
var userAgent = require('../internals/engine-user-agent');
var process = global.process;
var versions = process && process.versions;
var v8 = versions && versions.v8;
var match, version;
if (v8) {
    match = v8.split('.');
    version = match[0] < 4 ? 1 : match[0] + match[1];
} else if (userAgent) {
    match = userAgent.match(/Edge\/(\d+)/);
    if (!match || match[1] >= 74) {
        match = userAgent.match(/Chrome\/(\d+)/);
        if (match) version = match[1];
    }
}
module.exports = version && +version;

},{"../internals/global":"4E9rT","../internals/engine-user-agent":"69cCi"}],"69cCi":[function(require,module,exports) {
var getBuiltIn = require('../internals/get-built-in');
module.exports = getBuiltIn('navigator', 'userAgent') || '';

},{"../internals/get-built-in":"7zwJE"}],"3gBUg":[function(require,module,exports) {
/* eslint-disable es/no-symbol -- required for testing */ var NATIVE_SYMBOL = require('../internals/native-symbol');
module.exports = NATIVE_SYMBOL && !Symbol.sham && typeof Symbol.iterator == 'symbol';

},{"../internals/native-symbol":"2zi57"}],"CSoeC":[function(require,module,exports) {
var classof = require('../internals/classof-raw');
// `IsArray` abstract operation
// https://tc39.es/ecma262/#sec-isarray
// eslint-disable-next-line es/no-array-isarray -- safe
module.exports = Array.isArray || function isArray(arg) {
    return classof(arg) == 'Array';
};

},{"../internals/classof-raw":"2KP6c"}],"2DlVm":[function(require,module,exports) {
var anObject = require('../internals/an-object');
var defineProperties = require('../internals/object-define-properties');
var enumBugKeys = require('../internals/enum-bug-keys');
var hiddenKeys = require('../internals/hidden-keys');
var html = require('../internals/html');
var documentCreateElement = require('../internals/document-create-element');
var sharedKey = require('../internals/shared-key');
var GT = '>';
var LT = '<';
var PROTOTYPE = 'prototype';
var SCRIPT = 'script';
var IE_PROTO = sharedKey('IE_PROTO');
var EmptyConstructor = function() {
};
var scriptTag = function(content) {
    return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
};
// Create object with fake `null` prototype: use ActiveX Object with cleared prototype
var NullProtoObjectViaActiveX = function(activeXDocument) {
    activeXDocument.write(scriptTag(''));
    activeXDocument.close();
    var temp = activeXDocument.parentWindow.Object;
    activeXDocument = null; // avoid memory leak
    return temp;
};
// Create object with fake `null` prototype: use iframe Object with cleared prototype
var NullProtoObjectViaIFrame = function() {
    // Thrash, waste and sodomy: IE GC bug
    var iframe = documentCreateElement('iframe');
    var JS = 'java' + SCRIPT + ':';
    var iframeDocument;
    iframe.style.display = 'none';
    html.appendChild(iframe);
    // https://github.com/zloirock/core-js/issues/475
    iframe.src = String(JS);
    iframeDocument = iframe.contentWindow.document;
    iframeDocument.open();
    iframeDocument.write(scriptTag('document.F=Object'));
    iframeDocument.close();
    return iframeDocument.F;
};
// Check for document.domain and active x support
// No need to use active x approach when document.domain is not set
// see https://github.com/es-shims/es5-shim/issues/150
// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
// avoid IE GC bug
var activeXDocument;
var NullProtoObject = function() {
    try {
        /* global ActiveXObject -- old IE */ activeXDocument = document.domain && new ActiveXObject('htmlfile');
    } catch (error) {
    }
    NullProtoObject = activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame();
    var length = enumBugKeys.length;
    while(length--)delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
    return NullProtoObject();
};
hiddenKeys[IE_PROTO] = true;
// `Object.create` method
// https://tc39.es/ecma262/#sec-object.create
module.exports = Object.create || function create(O, Properties) {
    var result;
    if (O !== null) {
        EmptyConstructor[PROTOTYPE] = anObject(O);
        result = new EmptyConstructor();
        EmptyConstructor[PROTOTYPE] = null;
        // add "__proto__" for Object.getPrototypeOf polyfill
        result[IE_PROTO] = O;
    } else result = NullProtoObject();
    return Properties === undefined ? result : defineProperties(result, Properties);
};

},{"../internals/an-object":"6as2W","../internals/object-define-properties":"4RDOq","../internals/enum-bug-keys":"4YktQ","../internals/hidden-keys":"1wNv8","../internals/html":"5K6pp","../internals/document-create-element":"7rAVR","../internals/shared-key":"6Ds90"}],"4RDOq":[function(require,module,exports) {
var DESCRIPTORS = require('../internals/descriptors');
var definePropertyModule = require('../internals/object-define-property');
var anObject = require('../internals/an-object');
var objectKeys = require('../internals/object-keys');
// `Object.defineProperties` method
// https://tc39.es/ecma262/#sec-object.defineproperties
// eslint-disable-next-line es/no-object-defineproperties -- safe
module.exports = DESCRIPTORS ? Object.defineProperties : function defineProperties(O, Properties) {
    anObject(O);
    var keys = objectKeys(Properties);
    var length = keys.length;
    var index = 0;
    var key;
    while(length > index)definePropertyModule.f(O, key = keys[index++], Properties[key]);
    return O;
};

},{"../internals/descriptors":"AOzbW","../internals/object-define-property":"1pkua","../internals/an-object":"6as2W","../internals/object-keys":"3t02w"}],"3t02w":[function(require,module,exports) {
var internalObjectKeys = require('../internals/object-keys-internal');
var enumBugKeys = require('../internals/enum-bug-keys');
// `Object.keys` method
// https://tc39.es/ecma262/#sec-object.keys
// eslint-disable-next-line es/no-object-keys -- safe
module.exports = Object.keys || function keys(O) {
    return internalObjectKeys(O, enumBugKeys);
};

},{"../internals/object-keys-internal":"6wY3H","../internals/enum-bug-keys":"4YktQ"}],"5K6pp":[function(require,module,exports) {
var getBuiltIn = require('../internals/get-built-in');
module.exports = getBuiltIn('document', 'documentElement');

},{"../internals/get-built-in":"7zwJE"}],"4PXQz":[function(require,module,exports) {
/* eslint-disable es/no-object-getownpropertynames -- safe */ var toIndexedObject = require('../internals/to-indexed-object');
var $getOwnPropertyNames = require('../internals/object-get-own-property-names').f;
var toString = {
}.toString;
var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
var getWindowNames = function(it) {
    try {
        return $getOwnPropertyNames(it);
    } catch (error) {
        return windowNames.slice();
    }
};
// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
module.exports.f = function getOwnPropertyNames(it) {
    return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : $getOwnPropertyNames(toIndexedObject(it));
};

},{"../internals/to-indexed-object":"DEeSJ","../internals/object-get-own-property-names":"38Utf"}],"23Lpi":[function(require,module,exports) {
var global = require('../internals/global');
var shared = require('../internals/shared');
var has = require('../internals/has');
var uid = require('../internals/uid');
var NATIVE_SYMBOL = require('../internals/native-symbol');
var USE_SYMBOL_AS_UID = require('../internals/use-symbol-as-uid');
var WellKnownSymbolsStore = shared('wks');
var Symbol1 = global.Symbol;
var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol1 : Symbol1 && Symbol1.withoutSetter || uid;
module.exports = function(name) {
    if (!has(WellKnownSymbolsStore, name) || !(NATIVE_SYMBOL || typeof WellKnownSymbolsStore[name] == 'string')) {
        if (NATIVE_SYMBOL && has(Symbol1, name)) WellKnownSymbolsStore[name] = Symbol1[name];
        else WellKnownSymbolsStore[name] = createWellKnownSymbol('Symbol.' + name);
    }
    return WellKnownSymbolsStore[name];
};

},{"../internals/global":"4E9rT","../internals/shared":"4CGOh","../internals/has":"1rjL0","../internals/uid":"CWjPL","../internals/native-symbol":"2zi57","../internals/use-symbol-as-uid":"3gBUg"}],"4n6I6":[function(require,module,exports) {
var wellKnownSymbol = require('../internals/well-known-symbol');
exports.f = wellKnownSymbol;

},{"../internals/well-known-symbol":"23Lpi"}],"3xPOk":[function(require,module,exports) {
var path = require('../internals/path');
var has = require('../internals/has');
var wrappedWellKnownSymbolModule = require('../internals/well-known-symbol-wrapped');
var defineProperty = require('../internals/object-define-property').f;
module.exports = function(NAME) {
    var Symbol1 = path.Symbol || (path.Symbol = {
    });
    if (!has(Symbol1, NAME)) defineProperty(Symbol1, NAME, {
        value: wrappedWellKnownSymbolModule.f(NAME)
    });
};

},{"../internals/path":"1sun5","../internals/has":"1rjL0","../internals/well-known-symbol-wrapped":"4n6I6","../internals/object-define-property":"1pkua"}],"73zwY":[function(require,module,exports) {
var defineProperty = require('../internals/object-define-property').f;
var has = require('../internals/has');
var wellKnownSymbol = require('../internals/well-known-symbol');
var TO_STRING_TAG = wellKnownSymbol('toStringTag');
module.exports = function(it, TAG, STATIC) {
    if (it && !has(it = STATIC ? it : it.prototype, TO_STRING_TAG)) defineProperty(it, TO_STRING_TAG, {
        configurable: true,
        value: TAG
    });
};

},{"../internals/object-define-property":"1pkua","../internals/has":"1rjL0","../internals/well-known-symbol":"23Lpi"}],"2s7u3":[function(require,module,exports) {
var bind = require('../internals/function-bind-context');
var IndexedObject = require('../internals/indexed-object');
var toObject = require('../internals/to-object');
var toLength = require('../internals/to-length');
var arraySpeciesCreate = require('../internals/array-species-create');
var push = [].push;
// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex, filterOut }` methods implementation
var createMethod = function(TYPE) {
    var IS_MAP = TYPE == 1;
    var IS_FILTER = TYPE == 2;
    var IS_SOME = TYPE == 3;
    var IS_EVERY = TYPE == 4;
    var IS_FIND_INDEX = TYPE == 6;
    var IS_FILTER_OUT = TYPE == 7;
    var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
    return function($this, callbackfn, that, specificCreate) {
        var O = toObject($this);
        var self = IndexedObject(O);
        var boundFunction = bind(callbackfn, that, 3);
        var length = toLength(self.length);
        var index = 0;
        var create = specificCreate || arraySpeciesCreate;
        var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_OUT ? create($this, 0) : undefined;
        var value, result;
        for(; length > index; index++)if (NO_HOLES || index in self) {
            value = self[index];
            result = boundFunction(value, index, O);
            if (TYPE) {
                if (IS_MAP) target[index] = result; // map
                else if (result) switch(TYPE){
                    case 3:
                        return true; // some
                    case 5:
                        return value; // find
                    case 6:
                        return index; // findIndex
                    case 2:
                        push.call(target, value); // filter
                }
                else switch(TYPE){
                    case 4:
                        return false; // every
                    case 7:
                        push.call(target, value); // filterOut
                }
            }
        }
        return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
    };
};
module.exports = {
    // `Array.prototype.forEach` method
    // https://tc39.es/ecma262/#sec-array.prototype.foreach
    forEach: createMethod(0),
    // `Array.prototype.map` method
    // https://tc39.es/ecma262/#sec-array.prototype.map
    map: createMethod(1),
    // `Array.prototype.filter` method
    // https://tc39.es/ecma262/#sec-array.prototype.filter
    filter: createMethod(2),
    // `Array.prototype.some` method
    // https://tc39.es/ecma262/#sec-array.prototype.some
    some: createMethod(3),
    // `Array.prototype.every` method
    // https://tc39.es/ecma262/#sec-array.prototype.every
    every: createMethod(4),
    // `Array.prototype.find` method
    // https://tc39.es/ecma262/#sec-array.prototype.find
    find: createMethod(5),
    // `Array.prototype.findIndex` method
    // https://tc39.es/ecma262/#sec-array.prototype.findIndex
    findIndex: createMethod(6),
    // `Array.prototype.filterOut` method
    // https://github.com/tc39/proposal-array-filtering
    filterOut: createMethod(7)
};

},{"../internals/function-bind-context":"526sd","../internals/indexed-object":"vbpOP","../internals/to-object":"1Jr8n","../internals/to-length":"7tq8w","../internals/array-species-create":"4eSzJ"}],"526sd":[function(require,module,exports) {
var aFunction = require('../internals/a-function');
// optional / simple context binding
module.exports = function(fn, that, length) {
    aFunction(fn);
    if (that === undefined) return fn;
    switch(length){
        case 0:
            return function() {
                return fn.call(that);
            };
        case 1:
            return function(a) {
                return fn.call(that, a);
            };
        case 2:
            return function(a, b) {
                return fn.call(that, a, b);
            };
        case 3:
            return function(a, b, c) {
                return fn.call(that, a, b, c);
            };
    }
    return function() {
        return fn.apply(that, arguments);
    };
};

},{"../internals/a-function":"14VVf"}],"14VVf":[function(require,module,exports) {
module.exports = function(it) {
    if (typeof it != 'function') throw TypeError(String(it) + ' is not a function');
    return it;
};

},{}],"4eSzJ":[function(require,module,exports) {
var isObject = require('../internals/is-object');
var isArray = require('../internals/is-array');
var wellKnownSymbol = require('../internals/well-known-symbol');
var SPECIES = wellKnownSymbol('species');
// `ArraySpeciesCreate` abstract operation
// https://tc39.es/ecma262/#sec-arrayspeciescreate
module.exports = function(originalArray, length) {
    var C;
    if (isArray(originalArray)) {
        C = originalArray.constructor;
        // cross-realm fallback
        if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
        else if (isObject(C)) {
            C = C[SPECIES];
            if (C === null) C = undefined;
        }
    }
    return new (C === undefined ? Array : C)(length === 0 ? 0 : length);
};

},{"../internals/is-object":"5j9oO","../internals/is-array":"CSoeC","../internals/well-known-symbol":"23Lpi"}],"4Ou1t":[function(require,module,exports) {
// `Symbol.prototype.description` getter
// https://tc39.es/ecma262/#sec-symbol.prototype.description
'use strict';
var $ = require('../internals/export');
var DESCRIPTORS = require('../internals/descriptors');
var global = require('../internals/global');
var has = require('../internals/has');
var isObject = require('../internals/is-object');
var defineProperty = require('../internals/object-define-property').f;
var copyConstructorProperties = require('../internals/copy-constructor-properties');
var NativeSymbol = global.Symbol;
if (DESCRIPTORS && typeof NativeSymbol == 'function' && (!('description' in NativeSymbol.prototype) || // Safari 12 bug
NativeSymbol().description !== undefined)) {
    var EmptyStringDescriptionStore = {
    };
    // wrap Symbol constructor for correct work with undefined description
    var SymbolWrapper = function Symbol1() {
        var description = arguments.length < 1 || arguments[0] === undefined ? undefined : String(arguments[0]);
        var result = this instanceof SymbolWrapper ? new NativeSymbol(description) : description === undefined ? NativeSymbol() : NativeSymbol(description);
        if (description === '') EmptyStringDescriptionStore[result] = true;
        return result;
    };
    copyConstructorProperties(SymbolWrapper, NativeSymbol);
    var symbolPrototype = SymbolWrapper.prototype = NativeSymbol.prototype;
    symbolPrototype.constructor = SymbolWrapper;
    var symbolToString = symbolPrototype.toString;
    var native = String(NativeSymbol('test')) == 'Symbol(test)';
    var regexp = /^Symbol\((.*)\)[^)]+$/;
    defineProperty(symbolPrototype, 'description', {
        configurable: true,
        get: function description() {
            var symbol = isObject(this) ? this.valueOf() : this;
            var string = symbolToString.call(symbol);
            if (has(EmptyStringDescriptionStore, symbol)) return '';
            var desc = native ? string.slice(7, -1) : string.replace(regexp, '$1');
            return desc === '' ? undefined : desc;
        }
    });
    $({
        global: true,
        forced: true
    }, {
        Symbol: SymbolWrapper
    });
}

},{"../internals/export":"2y5a0","../internals/descriptors":"AOzbW","../internals/global":"4E9rT","../internals/has":"1rjL0","../internals/is-object":"5j9oO","../internals/object-define-property":"1pkua","../internals/copy-constructor-properties":"1OsyY"}],"6ytvL":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');
// `Symbol.asyncIterator` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.asynciterator
defineWellKnownSymbol('asyncIterator');

},{"../internals/define-well-known-symbol":"3xPOk"}],"1HOtF":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');
// `Symbol.hasInstance` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.hasinstance
defineWellKnownSymbol('hasInstance');

},{"../internals/define-well-known-symbol":"3xPOk"}],"7IwYD":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');
// `Symbol.isConcatSpreadable` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.isconcatspreadable
defineWellKnownSymbol('isConcatSpreadable');

},{"../internals/define-well-known-symbol":"3xPOk"}],"2LIVp":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');
// `Symbol.iterator` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.iterator
defineWellKnownSymbol('iterator');

},{"../internals/define-well-known-symbol":"3xPOk"}],"1PKLw":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');
// `Symbol.match` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.match
defineWellKnownSymbol('match');

},{"../internals/define-well-known-symbol":"3xPOk"}],"3KlKC":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');
// `Symbol.matchAll` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.matchall
defineWellKnownSymbol('matchAll');

},{"../internals/define-well-known-symbol":"3xPOk"}],"7nnaE":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');
// `Symbol.replace` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.replace
defineWellKnownSymbol('replace');

},{"../internals/define-well-known-symbol":"3xPOk"}],"bG439":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');
// `Symbol.search` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.search
defineWellKnownSymbol('search');

},{"../internals/define-well-known-symbol":"3xPOk"}],"6GMtb":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');
// `Symbol.species` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.species
defineWellKnownSymbol('species');

},{"../internals/define-well-known-symbol":"3xPOk"}],"5xc79":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');
// `Symbol.split` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.split
defineWellKnownSymbol('split');

},{"../internals/define-well-known-symbol":"3xPOk"}],"2UBHX":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');
// `Symbol.toPrimitive` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.toprimitive
defineWellKnownSymbol('toPrimitive');

},{"../internals/define-well-known-symbol":"3xPOk"}],"1I2EP":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');
// `Symbol.toStringTag` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.tostringtag
defineWellKnownSymbol('toStringTag');

},{"../internals/define-well-known-symbol":"3xPOk"}],"7MceI":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');
// `Symbol.unscopables` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.unscopables
defineWellKnownSymbol('unscopables');

},{"../internals/define-well-known-symbol":"3xPOk"}],"2dFKS":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var getPrototypeOf = require('../internals/object-get-prototype-of');
var setPrototypeOf = require('../internals/object-set-prototype-of');
var create = require('../internals/object-create');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var createPropertyDescriptor = require('../internals/create-property-descriptor');
var iterate = require('../internals/iterate');
var $AggregateError = function AggregateError(errors, message) {
    var that = this;
    if (!(that instanceof $AggregateError)) return new $AggregateError(errors, message);
    if (setPrototypeOf) // eslint-disable-next-line unicorn/error-message -- expected
    that = setPrototypeOf(new Error(undefined), getPrototypeOf(that));
    if (message !== undefined) createNonEnumerableProperty(that, 'message', String(message));
    var errorsArray = [];
    iterate(errors, errorsArray.push, {
        that: errorsArray
    });
    createNonEnumerableProperty(that, 'errors', errorsArray);
    return that;
};
$AggregateError.prototype = create(Error.prototype, {
    constructor: createPropertyDescriptor(5, $AggregateError),
    message: createPropertyDescriptor(5, ''),
    name: createPropertyDescriptor(5, 'AggregateError')
});
// `AggregateError` constructor
// https://tc39.es/ecma262/#sec-aggregate-error-constructor
$({
    global: true
}, {
    AggregateError: $AggregateError
});

},{"../internals/export":"2y5a0","../internals/object-get-prototype-of":"2iPhc","../internals/object-set-prototype-of":"5NYHm","../internals/object-create":"2DlVm","../internals/create-non-enumerable-property":"7tRkq","../internals/create-property-descriptor":"14mKL","../internals/iterate":"44GYt"}],"2iPhc":[function(require,module,exports) {
var has = require('../internals/has');
var toObject = require('../internals/to-object');
var sharedKey = require('../internals/shared-key');
var CORRECT_PROTOTYPE_GETTER = require('../internals/correct-prototype-getter');
var IE_PROTO = sharedKey('IE_PROTO');
var ObjectPrototype = Object.prototype;
// `Object.getPrototypeOf` method
// https://tc39.es/ecma262/#sec-object.getprototypeof
// eslint-disable-next-line es/no-object-getprototypeof -- safe
module.exports = CORRECT_PROTOTYPE_GETTER ? Object.getPrototypeOf : function(O) {
    O = toObject(O);
    if (has(O, IE_PROTO)) return O[IE_PROTO];
    if (typeof O.constructor == 'function' && O instanceof O.constructor) return O.constructor.prototype;
    return O instanceof Object ? ObjectPrototype : null;
};

},{"../internals/has":"1rjL0","../internals/to-object":"1Jr8n","../internals/shared-key":"6Ds90","../internals/correct-prototype-getter":"7HY5D"}],"7HY5D":[function(require,module,exports) {
var fails = require('../internals/fails');
module.exports = !fails(function() {
    function F() {
    }
    F.prototype.constructor = null;
    // eslint-disable-next-line es/no-object-getprototypeof -- required for testing
    return Object.getPrototypeOf(new F()) !== F.prototype;
});

},{"../internals/fails":"5dsdP"}],"5NYHm":[function(require,module,exports) {
/* eslint-disable no-proto -- safe */ var anObject = require('../internals/an-object');
var aPossiblePrototype = require('../internals/a-possible-prototype');
// `Object.setPrototypeOf` method
// https://tc39.es/ecma262/#sec-object.setprototypeof
// Works with __proto__ only. Old v8 can't work with null proto objects.
// eslint-disable-next-line es/no-object-setprototypeof -- safe
module.exports = Object.setPrototypeOf || ('__proto__' in {
} ? (function() {
    var CORRECT_SETTER = false;
    var test = {
    };
    var setter;
    try {
        // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
        setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;
        setter.call(test, []);
        CORRECT_SETTER = test instanceof Array;
    } catch (error) {
    }
    return function setPrototypeOf(O, proto) {
        anObject(O);
        aPossiblePrototype(proto);
        if (CORRECT_SETTER) setter.call(O, proto);
        else O.__proto__ = proto;
        return O;
    };
})() : undefined);

},{"../internals/an-object":"6as2W","../internals/a-possible-prototype":"6v0Ll"}],"6v0Ll":[function(require,module,exports) {
var isObject = require('../internals/is-object');
module.exports = function(it) {
    if (!isObject(it) && it !== null) throw TypeError("Can't set " + String(it) + ' as a prototype');
    return it;
};

},{"../internals/is-object":"5j9oO"}],"44GYt":[function(require,module,exports) {
var anObject = require('../internals/an-object');
var isArrayIteratorMethod = require('../internals/is-array-iterator-method');
var toLength = require('../internals/to-length');
var bind = require('../internals/function-bind-context');
var getIteratorMethod = require('../internals/get-iterator-method');
var iteratorClose = require('../internals/iterator-close');
var Result = function(stopped, result) {
    this.stopped = stopped;
    this.result = result;
};
module.exports = function(iterable, unboundFunction, options) {
    var that = options && options.that;
    var AS_ENTRIES = !!(options && options.AS_ENTRIES);
    var IS_ITERATOR = !!(options && options.IS_ITERATOR);
    var INTERRUPTED = !!(options && options.INTERRUPTED);
    var fn = bind(unboundFunction, that, 1 + AS_ENTRIES + INTERRUPTED);
    var iterator, iterFn, index, length, result, next, step;
    var stop = function(condition) {
        if (iterator) iteratorClose(iterator);
        return new Result(true, condition);
    };
    var callFn = function(value) {
        if (AS_ENTRIES) {
            anObject(value);
            return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);
        }
        return INTERRUPTED ? fn(value, stop) : fn(value);
    };
    if (IS_ITERATOR) iterator = iterable;
    else {
        iterFn = getIteratorMethod(iterable);
        if (typeof iterFn != 'function') throw TypeError('Target is not iterable');
        // optimisation for array iterators
        if (isArrayIteratorMethod(iterFn)) {
            for(index = 0, length = toLength(iterable.length); length > index; index++){
                result = callFn(iterable[index]);
                if (result && result instanceof Result) return result;
            }
            return new Result(false);
        }
        iterator = iterFn.call(iterable);
    }
    next = iterator.next;
    while(!(step = next.call(iterator)).done){
        try {
            result = callFn(step.value);
        } catch (error) {
            iteratorClose(iterator);
            throw error;
        }
        if (typeof result == 'object' && result && result instanceof Result) return result;
    }
    return new Result(false);
};

},{"../internals/an-object":"6as2W","../internals/is-array-iterator-method":"4C9JM","../internals/to-length":"7tq8w","../internals/function-bind-context":"526sd","../internals/get-iterator-method":"6J57B","../internals/iterator-close":"38t3o"}],"4C9JM":[function(require,module,exports) {
var wellKnownSymbol = require('../internals/well-known-symbol');
var Iterators = require('../internals/iterators');
var ITERATOR = wellKnownSymbol('iterator');
var ArrayPrototype = Array.prototype;
// check on default Array iterator
module.exports = function(it) {
    return it !== undefined && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
};

},{"../internals/well-known-symbol":"23Lpi","../internals/iterators":"6wdPz"}],"6wdPz":[function(require,module,exports) {
module.exports = {
};

},{}],"6J57B":[function(require,module,exports) {
var classof = require('../internals/classof');
var Iterators = require('../internals/iterators');
var wellKnownSymbol = require('../internals/well-known-symbol');
var ITERATOR = wellKnownSymbol('iterator');
module.exports = function(it) {
    if (it != undefined) return it[ITERATOR] || it['@@iterator'] || Iterators[classof(it)];
};

},{"../internals/classof":"5lDE7","../internals/iterators":"6wdPz","../internals/well-known-symbol":"23Lpi"}],"5lDE7":[function(require,module,exports) {
var TO_STRING_TAG_SUPPORT = require('../internals/to-string-tag-support');
var classofRaw = require('../internals/classof-raw');
var wellKnownSymbol = require('../internals/well-known-symbol');
var TO_STRING_TAG = wellKnownSymbol('toStringTag');
// ES3 wrong here
var CORRECT_ARGUMENTS = classofRaw(function() {
    return arguments;
}()) == 'Arguments';
// fallback for IE11 Script Access Denied error
var tryGet = function(it, key) {
    try {
        return it[key];
    } catch (error) {
    }
};
// getting tag from ES6+ `Object.prototype.toString`
module.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function(it) {
    var O, tag, result;
    return it === undefined ? 'Undefined' : it === null ? 'Null' : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG)) == 'string' ? tag : CORRECT_ARGUMENTS ? classofRaw(O) : (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;
};

},{"../internals/to-string-tag-support":"2kI0V","../internals/classof-raw":"2KP6c","../internals/well-known-symbol":"23Lpi"}],"2kI0V":[function(require,module,exports) {
var wellKnownSymbol = require('../internals/well-known-symbol');
var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var test = {
};
test[TO_STRING_TAG] = 'z';
module.exports = String(test) === '[object z]';

},{"../internals/well-known-symbol":"23Lpi"}],"38t3o":[function(require,module,exports) {
var anObject = require('../internals/an-object');
module.exports = function(iterator) {
    var returnMethod = iterator['return'];
    if (returnMethod !== undefined) return anObject(returnMethod.call(iterator)).value;
};

},{"../internals/an-object":"6as2W"}],"7qF75":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var fails = require('../internals/fails');
var isArray = require('../internals/is-array');
var isObject = require('../internals/is-object');
var toObject = require('../internals/to-object');
var toLength = require('../internals/to-length');
var createProperty = require('../internals/create-property');
var arraySpeciesCreate = require('../internals/array-species-create');
var arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');
var wellKnownSymbol = require('../internals/well-known-symbol');
var V8_VERSION = require('../internals/engine-v8-version');
var IS_CONCAT_SPREADABLE = wellKnownSymbol('isConcatSpreadable');
var MAX_SAFE_INTEGER = 9007199254740991;
var MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded';
// We can't use this feature detection in V8 since it causes
// deoptimization and serious performance degradation
// https://github.com/zloirock/core-js/issues/679
var IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION >= 51 || !fails(function() {
    var array = [];
    array[IS_CONCAT_SPREADABLE] = false;
    return array.concat()[0] !== array;
});
var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('concat');
var isConcatSpreadable = function(O) {
    if (!isObject(O)) return false;
    var spreadable = O[IS_CONCAT_SPREADABLE];
    return spreadable !== undefined ? !!spreadable : isArray(O);
};
var FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;
// `Array.prototype.concat` method
// https://tc39.es/ecma262/#sec-array.prototype.concat
// with adding support of @@isConcatSpreadable and @@species
$({
    target: 'Array',
    proto: true,
    forced: FORCED
}, {
    // eslint-disable-next-line no-unused-vars -- required for `.length`
    concat: function concat(arg) {
        var O = toObject(this);
        var A = arraySpeciesCreate(O, 0);
        var n = 0;
        var i, k, length, len, E;
        for(i = -1, length = arguments.length; i < length; i++){
            E = i === -1 ? O : arguments[i];
            if (isConcatSpreadable(E)) {
                len = toLength(E.length);
                if (n + len > MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
                for(k = 0; k < len; k++, n++)if (k in E) createProperty(A, n, E[k]);
            } else {
                if (n >= MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
                createProperty(A, n++, E);
            }
        }
        A.length = n;
        return A;
    }
});

},{"../internals/export":"2y5a0","../internals/fails":"5dsdP","../internals/is-array":"CSoeC","../internals/is-object":"5j9oO","../internals/to-object":"1Jr8n","../internals/to-length":"7tq8w","../internals/create-property":"4vFpJ","../internals/array-species-create":"4eSzJ","../internals/array-method-has-species-support":"6nuF1","../internals/well-known-symbol":"23Lpi","../internals/engine-v8-version":"6jjMH"}],"4vFpJ":[function(require,module,exports) {
'use strict';
var toPrimitive = require('../internals/to-primitive');
var definePropertyModule = require('../internals/object-define-property');
var createPropertyDescriptor = require('../internals/create-property-descriptor');
module.exports = function(object, key, value) {
    var propertyKey = toPrimitive(key);
    if (propertyKey in object) definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));
    else object[propertyKey] = value;
};

},{"../internals/to-primitive":"oTUf2","../internals/object-define-property":"1pkua","../internals/create-property-descriptor":"14mKL"}],"6nuF1":[function(require,module,exports) {
var fails = require('../internals/fails');
var wellKnownSymbol = require('../internals/well-known-symbol');
var V8_VERSION = require('../internals/engine-v8-version');
var SPECIES = wellKnownSymbol('species');
module.exports = function(METHOD_NAME) {
    // We can't use this feature detection in V8 since it causes
    // deoptimization and serious performance degradation
    // https://github.com/zloirock/core-js/issues/677
    return V8_VERSION >= 51 || !fails(function() {
        var array = [];
        var constructor = array.constructor = {
        };
        constructor[SPECIES] = function() {
            return {
                foo: 1
            };
        };
        return array[METHOD_NAME](Boolean).foo !== 1;
    });
};

},{"../internals/fails":"5dsdP","../internals/well-known-symbol":"23Lpi","../internals/engine-v8-version":"6jjMH"}],"Z2KPL":[function(require,module,exports) {
var $ = require('../internals/export');
var copyWithin = require('../internals/array-copy-within');
var addToUnscopables = require('../internals/add-to-unscopables');
// `Array.prototype.copyWithin` method
// https://tc39.es/ecma262/#sec-array.prototype.copywithin
$({
    target: 'Array',
    proto: true
}, {
    copyWithin: copyWithin
});
// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('copyWithin');

},{"../internals/export":"2y5a0","../internals/array-copy-within":"65u6Y","../internals/add-to-unscopables":"15Naf"}],"65u6Y":[function(require,module,exports) {
'use strict';
var toObject = require('../internals/to-object');
var toAbsoluteIndex = require('../internals/to-absolute-index');
var toLength = require('../internals/to-length');
var min = Math.min;
// `Array.prototype.copyWithin` method implementation
// https://tc39.es/ecma262/#sec-array.prototype.copywithin
// eslint-disable-next-line es/no-array-prototype-copywithin -- safe
module.exports = [].copyWithin || function copyWithin(target/* = 0 */ , start/* = 0, end = @length */ ) {
    var O = toObject(this);
    var len = toLength(O.length);
    var to = toAbsoluteIndex(target, len);
    var from = toAbsoluteIndex(start, len);
    var end = arguments.length > 2 ? arguments[2] : undefined;
    var count = min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
    var inc = 1;
    if (from < to && to < from + count) {
        inc = -1;
        from += count - 1;
        to += count - 1;
    }
    while((count--) > 0){
        if (from in O) O[to] = O[from];
        else delete O[to];
        to += inc;
        from += inc;
    }
    return O;
};

},{"../internals/to-object":"1Jr8n","../internals/to-absolute-index":"5D7Fy","../internals/to-length":"7tq8w"}],"15Naf":[function(require,module,exports) {
var wellKnownSymbol = require('../internals/well-known-symbol');
var create = require('../internals/object-create');
var definePropertyModule = require('../internals/object-define-property');
var UNSCOPABLES = wellKnownSymbol('unscopables');
var ArrayPrototype = Array.prototype;
// Array.prototype[@@unscopables]
// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
if (ArrayPrototype[UNSCOPABLES] == undefined) definePropertyModule.f(ArrayPrototype, UNSCOPABLES, {
    configurable: true,
    value: create(null)
});
// add a key to Array.prototype[@@unscopables]
module.exports = function(key) {
    ArrayPrototype[UNSCOPABLES][key] = true;
};

},{"../internals/well-known-symbol":"23Lpi","../internals/object-create":"2DlVm","../internals/object-define-property":"1pkua"}],"5tXrX":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var $every = require('../internals/array-iteration').every;
var arrayMethodIsStrict = require('../internals/array-method-is-strict');
var STRICT_METHOD = arrayMethodIsStrict('every');
// `Array.prototype.every` method
// https://tc39.es/ecma262/#sec-array.prototype.every
$({
    target: 'Array',
    proto: true,
    forced: !STRICT_METHOD
}, {
    every: function every(callbackfn/* , thisArg */ ) {
        return $every(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    }
});

},{"../internals/export":"2y5a0","../internals/array-iteration":"2s7u3","../internals/array-method-is-strict":"5PmX5"}],"5PmX5":[function(require,module,exports) {
'use strict';
var fails = require('../internals/fails');
module.exports = function(METHOD_NAME, argument) {
    var method = [][METHOD_NAME];
    return !!method && fails(function() {
        // eslint-disable-next-line no-useless-call,no-throw-literal -- required for testing
        method.call(null, argument || function() {
            throw 1;
        }, 1);
    });
};

},{"../internals/fails":"5dsdP"}],"4YBNy":[function(require,module,exports) {
var $ = require('../internals/export');
var fill = require('../internals/array-fill');
var addToUnscopables = require('../internals/add-to-unscopables');
// `Array.prototype.fill` method
// https://tc39.es/ecma262/#sec-array.prototype.fill
$({
    target: 'Array',
    proto: true
}, {
    fill: fill
});
// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('fill');

},{"../internals/export":"2y5a0","../internals/array-fill":"5jPQe","../internals/add-to-unscopables":"15Naf"}],"5jPQe":[function(require,module,exports) {
'use strict';
var toObject = require('../internals/to-object');
var toAbsoluteIndex = require('../internals/to-absolute-index');
var toLength = require('../internals/to-length');
// `Array.prototype.fill` method implementation
// https://tc39.es/ecma262/#sec-array.prototype.fill
module.exports = function fill(value/* , start = 0, end = @length */ ) {
    var O = toObject(this);
    var length = toLength(O.length);
    var argumentsLength = arguments.length;
    var index = toAbsoluteIndex(argumentsLength > 1 ? arguments[1] : undefined, length);
    var end = argumentsLength > 2 ? arguments[2] : undefined;
    var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
    while(endPos > index)O[index++] = value;
    return O;
};

},{"../internals/to-object":"1Jr8n","../internals/to-absolute-index":"5D7Fy","../internals/to-length":"7tq8w"}],"62vTA":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var $filter = require('../internals/array-iteration').filter;
var arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');
var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('filter');
// `Array.prototype.filter` method
// https://tc39.es/ecma262/#sec-array.prototype.filter
// with adding support of @@species
$({
    target: 'Array',
    proto: true,
    forced: !HAS_SPECIES_SUPPORT
}, {
    filter: function filter(callbackfn/* , thisArg */ ) {
        return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    }
});

},{"../internals/export":"2y5a0","../internals/array-iteration":"2s7u3","../internals/array-method-has-species-support":"6nuF1"}],"76MUx":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var $find = require('../internals/array-iteration').find;
var addToUnscopables = require('../internals/add-to-unscopables');
var FIND = 'find';
var SKIPS_HOLES = true;
// Shouldn't skip holes
if (FIND in []) Array(1)[FIND](function() {
    SKIPS_HOLES = false;
});
// `Array.prototype.find` method
// https://tc39.es/ecma262/#sec-array.prototype.find
$({
    target: 'Array',
    proto: true,
    forced: SKIPS_HOLES
}, {
    find: function find(callbackfn/* , that = undefined */ ) {
        return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    }
});
// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables(FIND);

},{"../internals/export":"2y5a0","../internals/array-iteration":"2s7u3","../internals/add-to-unscopables":"15Naf"}],"4Ds1g":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var $findIndex = require('../internals/array-iteration').findIndex;
var addToUnscopables = require('../internals/add-to-unscopables');
var FIND_INDEX = 'findIndex';
var SKIPS_HOLES = true;
// Shouldn't skip holes
if (FIND_INDEX in []) Array(1)[FIND_INDEX](function() {
    SKIPS_HOLES = false;
});
// `Array.prototype.findIndex` method
// https://tc39.es/ecma262/#sec-array.prototype.findindex
$({
    target: 'Array',
    proto: true,
    forced: SKIPS_HOLES
}, {
    findIndex: function findIndex(callbackfn/* , that = undefined */ ) {
        return $findIndex(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    }
});
// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables(FIND_INDEX);

},{"../internals/export":"2y5a0","../internals/array-iteration":"2s7u3","../internals/add-to-unscopables":"15Naf"}],"4OrkP":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var flattenIntoArray = require('../internals/flatten-into-array');
var toObject = require('../internals/to-object');
var toLength = require('../internals/to-length');
var toInteger = require('../internals/to-integer');
var arraySpeciesCreate = require('../internals/array-species-create');
// `Array.prototype.flat` method
// https://tc39.es/ecma262/#sec-array.prototype.flat
$({
    target: 'Array',
    proto: true
}, {
    flat: function flat() {
        var depthArg = arguments.length ? arguments[0] : undefined;
        var O = toObject(this);
        var sourceLen = toLength(O.length);
        var A = arraySpeciesCreate(O, 0);
        A.length = flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));
        return A;
    }
});

},{"../internals/export":"2y5a0","../internals/flatten-into-array":"7GLnB","../internals/to-object":"1Jr8n","../internals/to-length":"7tq8w","../internals/to-integer":"6y5fX","../internals/array-species-create":"4eSzJ"}],"7GLnB":[function(require,module,exports) {
'use strict';
var isArray = require('../internals/is-array');
var toLength = require('../internals/to-length');
var bind = require('../internals/function-bind-context');
// `FlattenIntoArray` abstract operation
// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
var flattenIntoArray = function(target, original, source, sourceLen, start, depth, mapper, thisArg) {
    var targetIndex = start;
    var sourceIndex = 0;
    var mapFn = mapper ? bind(mapper, thisArg, 3) : false;
    var element;
    while(sourceIndex < sourceLen){
        if (sourceIndex in source) {
            element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];
            if (depth > 0 && isArray(element)) targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
            else {
                if (targetIndex >= 9007199254740991) throw TypeError('Exceed the acceptable array length');
                target[targetIndex] = element;
            }
            targetIndex++;
        }
        sourceIndex++;
    }
    return targetIndex;
};
module.exports = flattenIntoArray;

},{"../internals/is-array":"CSoeC","../internals/to-length":"7tq8w","../internals/function-bind-context":"526sd"}],"2BDmK":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var flattenIntoArray = require('../internals/flatten-into-array');
var toObject = require('../internals/to-object');
var toLength = require('../internals/to-length');
var aFunction = require('../internals/a-function');
var arraySpeciesCreate = require('../internals/array-species-create');
// `Array.prototype.flatMap` method
// https://tc39.es/ecma262/#sec-array.prototype.flatmap
$({
    target: 'Array',
    proto: true
}, {
    flatMap: function flatMap(callbackfn/* , thisArg */ ) {
        var O = toObject(this);
        var sourceLen = toLength(O.length);
        var A;
        aFunction(callbackfn);
        A = arraySpeciesCreate(O, 0);
        A.length = flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        return A;
    }
});

},{"../internals/export":"2y5a0","../internals/flatten-into-array":"7GLnB","../internals/to-object":"1Jr8n","../internals/to-length":"7tq8w","../internals/a-function":"14VVf","../internals/array-species-create":"4eSzJ"}],"4N9BO":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var forEach = require('../internals/array-for-each');
// `Array.prototype.forEach` method
// https://tc39.es/ecma262/#sec-array.prototype.foreach
// eslint-disable-next-line es/no-array-prototype-foreach -- safe
$({
    target: 'Array',
    proto: true,
    forced: [].forEach != forEach
}, {
    forEach: forEach
});

},{"../internals/export":"2y5a0","../internals/array-for-each":"6p461"}],"6p461":[function(require,module,exports) {
'use strict';
var $forEach = require('../internals/array-iteration').forEach;
var arrayMethodIsStrict = require('../internals/array-method-is-strict');
var STRICT_METHOD = arrayMethodIsStrict('forEach');
// `Array.prototype.forEach` method implementation
// https://tc39.es/ecma262/#sec-array.prototype.foreach
module.exports = !STRICT_METHOD ? function forEach(callbackfn/* , thisArg */ ) {
    return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
// eslint-disable-next-line es/no-array-prototype-foreach -- safe
} : [].forEach;

},{"../internals/array-iteration":"2s7u3","../internals/array-method-is-strict":"5PmX5"}],"2nDHq":[function(require,module,exports) {
var $ = require('../internals/export');
var from = require('../internals/array-from');
var checkCorrectnessOfIteration = require('../internals/check-correctness-of-iteration');
var INCORRECT_ITERATION = !checkCorrectnessOfIteration(function(iterable) {
    // eslint-disable-next-line es/no-array-from -- required for testing
    Array.from(iterable);
});
// `Array.from` method
// https://tc39.es/ecma262/#sec-array.from
$({
    target: 'Array',
    stat: true,
    forced: INCORRECT_ITERATION
}, {
    from: from
});

},{"../internals/export":"2y5a0","../internals/array-from":"1B4D0","../internals/check-correctness-of-iteration":"6HHGz"}],"1B4D0":[function(require,module,exports) {
'use strict';
var bind = require('../internals/function-bind-context');
var toObject = require('../internals/to-object');
var callWithSafeIterationClosing = require('../internals/call-with-safe-iteration-closing');
var isArrayIteratorMethod = require('../internals/is-array-iterator-method');
var toLength = require('../internals/to-length');
var createProperty = require('../internals/create-property');
var getIteratorMethod = require('../internals/get-iterator-method');
// `Array.from` method implementation
// https://tc39.es/ecma262/#sec-array.from
module.exports = function from(arrayLike/* , mapfn = undefined, thisArg = undefined */ ) {
    var O = toObject(arrayLike);
    var C = typeof this == 'function' ? this : Array;
    var argumentsLength = arguments.length;
    var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var iteratorMethod = getIteratorMethod(O);
    var index = 0;
    var length, result, step, iterator, next, value;
    if (mapping) mapfn = bind(mapfn, argumentsLength > 2 ? arguments[2] : undefined, 2);
    // if the target is not iterable or it's an array with the default iterator - use a simple case
    if (iteratorMethod != undefined && !(C == Array && isArrayIteratorMethod(iteratorMethod))) {
        iterator = iteratorMethod.call(O);
        next = iterator.next;
        result = new C();
        for(; !(step = next.call(iterator)).done; index++){
            value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [
                step.value,
                index
            ], true) : step.value;
            createProperty(result, index, value);
        }
    } else {
        length = toLength(O.length);
        result = new C(length);
        for(; length > index; index++){
            value = mapping ? mapfn(O[index], index) : O[index];
            createProperty(result, index, value);
        }
    }
    result.length = index;
    return result;
};

},{"../internals/function-bind-context":"526sd","../internals/to-object":"1Jr8n","../internals/call-with-safe-iteration-closing":"67Oeq","../internals/is-array-iterator-method":"4C9JM","../internals/to-length":"7tq8w","../internals/create-property":"4vFpJ","../internals/get-iterator-method":"6J57B"}],"67Oeq":[function(require,module,exports) {
var anObject = require('../internals/an-object');
var iteratorClose = require('../internals/iterator-close');
// call something on iterator step with safe closing on error
module.exports = function(iterator, fn, value, ENTRIES) {
    try {
        return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
    } catch (error) {
        iteratorClose(iterator);
        throw error;
    }
};

},{"../internals/an-object":"6as2W","../internals/iterator-close":"38t3o"}],"6HHGz":[function(require,module,exports) {
var wellKnownSymbol = require('../internals/well-known-symbol');
var ITERATOR = wellKnownSymbol('iterator');
var SAFE_CLOSING = false;
try {
    var called = 0;
    var iteratorWithReturn = {
        next: function() {
            return {
                done: !!called++
            };
        },
        'return': function() {
            SAFE_CLOSING = true;
        }
    };
    iteratorWithReturn[ITERATOR] = function() {
        return this;
    };
    // eslint-disable-next-line es/no-array-from, no-throw-literal -- required for testing
    Array.from(iteratorWithReturn, function() {
        throw 2;
    });
} catch (error) {
}
module.exports = function(exec, SKIP_CLOSING) {
    if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
    var ITERATION_SUPPORT = false;
    try {
        var object = {
        };
        object[ITERATOR] = function() {
            return {
                next: function() {
                    return {
                        done: ITERATION_SUPPORT = true
                    };
                }
            };
        };
        exec(object);
    } catch (error) {
    }
    return ITERATION_SUPPORT;
};

},{"../internals/well-known-symbol":"23Lpi"}],"57aK4":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var $includes = require('../internals/array-includes').includes;
var addToUnscopables = require('../internals/add-to-unscopables');
// `Array.prototype.includes` method
// https://tc39.es/ecma262/#sec-array.prototype.includes
$({
    target: 'Array',
    proto: true
}, {
    includes: function includes(el/* , fromIndex = 0 */ ) {
        return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
    }
});
// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('includes');

},{"../internals/export":"2y5a0","../internals/array-includes":"1GY9g","../internals/add-to-unscopables":"15Naf"}],"3OHM0":[function(require,module,exports) {
'use strict';
/* eslint-disable es/no-array-prototype-indexof -- required for testing */ var $ = require('../internals/export');
var $indexOf = require('../internals/array-includes').indexOf;
var arrayMethodIsStrict = require('../internals/array-method-is-strict');
var nativeIndexOf = [].indexOf;
var NEGATIVE_ZERO = !!nativeIndexOf && 1 / [
    1
].indexOf(1, -0.0) < 0;
var STRICT_METHOD = arrayMethodIsStrict('indexOf');
// `Array.prototype.indexOf` method
// https://tc39.es/ecma262/#sec-array.prototype.indexof
$({
    target: 'Array',
    proto: true,
    forced: NEGATIVE_ZERO || !STRICT_METHOD
}, {
    indexOf: function indexOf(searchElement/* , fromIndex = 0 */ ) {
        return NEGATIVE_ZERO ? nativeIndexOf.apply(this, arguments) || 0 : $indexOf(this, searchElement, arguments.length > 1 ? arguments[1] : undefined);
    }
});

},{"../internals/export":"2y5a0","../internals/array-includes":"1GY9g","../internals/array-method-is-strict":"5PmX5"}],"3DWFE":[function(require,module,exports) {
var $ = require('../internals/export');
var isArray = require('../internals/is-array');
// `Array.isArray` method
// https://tc39.es/ecma262/#sec-array.isarray
$({
    target: 'Array',
    stat: true
}, {
    isArray: isArray
});

},{"../internals/export":"2y5a0","../internals/is-array":"CSoeC"}],"4FVKU":[function(require,module,exports) {
'use strict';
var toIndexedObject = require('../internals/to-indexed-object');
var addToUnscopables = require('../internals/add-to-unscopables');
var Iterators = require('../internals/iterators');
var InternalStateModule = require('../internals/internal-state');
var defineIterator = require('../internals/define-iterator');
var ARRAY_ITERATOR = 'Array Iterator';
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);
// `Array.prototype.entries` method
// https://tc39.es/ecma262/#sec-array.prototype.entries
// `Array.prototype.keys` method
// https://tc39.es/ecma262/#sec-array.prototype.keys
// `Array.prototype.values` method
// https://tc39.es/ecma262/#sec-array.prototype.values
// `Array.prototype[@@iterator]` method
// https://tc39.es/ecma262/#sec-array.prototype-@@iterator
// `CreateArrayIterator` internal method
// https://tc39.es/ecma262/#sec-createarrayiterator
module.exports = defineIterator(Array, 'Array', function(iterated, kind) {
    setInternalState(this, {
        type: ARRAY_ITERATOR,
        target: toIndexedObject(iterated),
        index: 0,
        kind: kind
    });
// `%ArrayIteratorPrototype%.next` method
// https://tc39.es/ecma262/#sec-%arrayiteratorprototype%.next
}, function() {
    var state = getInternalState(this);
    var target = state.target;
    var kind = state.kind;
    var index = state.index++;
    if (!target || index >= target.length) {
        state.target = undefined;
        return {
            value: undefined,
            done: true
        };
    }
    if (kind == 'keys') return {
        value: index,
        done: false
    };
    if (kind == 'values') return {
        value: target[index],
        done: false
    };
    return {
        value: [
            index,
            target[index]
        ],
        done: false
    };
}, 'values');
// argumentsList[@@iterator] is %ArrayProto_values%
// https://tc39.es/ecma262/#sec-createunmappedargumentsobject
// https://tc39.es/ecma262/#sec-createmappedargumentsobject
Iterators.Arguments = Iterators.Array;
// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

},{"../internals/to-indexed-object":"DEeSJ","../internals/add-to-unscopables":"15Naf","../internals/iterators":"6wdPz","../internals/internal-state":"32AmZ","../internals/define-iterator":"6HqjR"}],"6HqjR":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var createIteratorConstructor = require('../internals/create-iterator-constructor');
var getPrototypeOf = require('../internals/object-get-prototype-of');
var setPrototypeOf = require('../internals/object-set-prototype-of');
var setToStringTag = require('../internals/set-to-string-tag');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var redefine = require('../internals/redefine');
var wellKnownSymbol = require('../internals/well-known-symbol');
var IS_PURE = require('../internals/is-pure');
var Iterators = require('../internals/iterators');
var IteratorsCore = require('../internals/iterators-core');
var IteratorPrototype = IteratorsCore.IteratorPrototype;
var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
var ITERATOR = wellKnownSymbol('iterator');
var KEYS = 'keys';
var VALUES = 'values';
var ENTRIES = 'entries';
var returnThis = function() {
    return this;
};
module.exports = function(Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
    createIteratorConstructor(IteratorConstructor, NAME, next);
    var getIterationMethod = function(KIND) {
        if (KIND === DEFAULT && defaultIterator) return defaultIterator;
        if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];
        switch(KIND){
            case KEYS:
                return function keys() {
                    return new IteratorConstructor(this, KIND);
                };
            case VALUES:
                return function values() {
                    return new IteratorConstructor(this, KIND);
                };
            case ENTRIES:
                return function entries() {
                    return new IteratorConstructor(this, KIND);
                };
        }
        return function() {
            return new IteratorConstructor(this);
        };
    };
    var TO_STRING_TAG = NAME + ' Iterator';
    var INCORRECT_VALUES_NAME = false;
    var IterablePrototype = Iterable.prototype;
    var nativeIterator = IterablePrototype[ITERATOR] || IterablePrototype['@@iterator'] || DEFAULT && IterablePrototype[DEFAULT];
    var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
    var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
    var CurrentIteratorPrototype, methods, KEY;
    // fix native
    if (anyNativeIterator) {
        CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));
        if (IteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
            if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
                if (setPrototypeOf) setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
                else if (typeof CurrentIteratorPrototype[ITERATOR] != 'function') createNonEnumerableProperty(CurrentIteratorPrototype, ITERATOR, returnThis);
            }
            // Set @@toStringTag to native iterators
            setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
            if (IS_PURE) Iterators[TO_STRING_TAG] = returnThis;
        }
    }
    // fix Array.prototype.{ values, @@iterator }.name in V8 / FF
    if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
        INCORRECT_VALUES_NAME = true;
        defaultIterator = function values() {
            return nativeIterator.call(this);
        };
    }
    // define iterator
    if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) createNonEnumerableProperty(IterablePrototype, ITERATOR, defaultIterator);
    Iterators[NAME] = defaultIterator;
    // export additional methods
    if (DEFAULT) {
        methods = {
            values: getIterationMethod(VALUES),
            keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
            entries: getIterationMethod(ENTRIES)
        };
        if (FORCED) for(KEY in methods)if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) redefine(IterablePrototype, KEY, methods[KEY]);
        else $({
            target: NAME,
            proto: true,
            forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME
        }, methods);
    }
    return methods;
};

},{"../internals/export":"2y5a0","../internals/create-iterator-constructor":"785Ty","../internals/object-get-prototype-of":"2iPhc","../internals/object-set-prototype-of":"5NYHm","../internals/set-to-string-tag":"73zwY","../internals/create-non-enumerable-property":"7tRkq","../internals/redefine":"1SlpM","../internals/well-known-symbol":"23Lpi","../internals/is-pure":"7KzvF","../internals/iterators":"6wdPz","../internals/iterators-core":"5TP8V"}],"785Ty":[function(require,module,exports) {
'use strict';
var IteratorPrototype = require('../internals/iterators-core').IteratorPrototype;
var create = require('../internals/object-create');
var createPropertyDescriptor = require('../internals/create-property-descriptor');
var setToStringTag = require('../internals/set-to-string-tag');
var Iterators = require('../internals/iterators');
var returnThis = function() {
    return this;
};
module.exports = function(IteratorConstructor, NAME, next) {
    var TO_STRING_TAG = NAME + ' Iterator';
    IteratorConstructor.prototype = create(IteratorPrototype, {
        next: createPropertyDescriptor(1, next)
    });
    setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
    Iterators[TO_STRING_TAG] = returnThis;
    return IteratorConstructor;
};

},{"../internals/iterators-core":"5TP8V","../internals/object-create":"2DlVm","../internals/create-property-descriptor":"14mKL","../internals/set-to-string-tag":"73zwY","../internals/iterators":"6wdPz"}],"5TP8V":[function(require,module,exports) {
'use strict';
var fails = require('../internals/fails');
var getPrototypeOf = require('../internals/object-get-prototype-of');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var has = require('../internals/has');
var wellKnownSymbol = require('../internals/well-known-symbol');
var IS_PURE = require('../internals/is-pure');
var ITERATOR = wellKnownSymbol('iterator');
var BUGGY_SAFARI_ITERATORS = false;
var returnThis = function() {
    return this;
};
// `%IteratorPrototype%` object
// https://tc39.es/ecma262/#sec-%iteratorprototype%-object
var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;
/* eslint-disable es/no-array-prototype-keys -- safe */ if ([].keys) {
    arrayIterator = [].keys();
    // Safari 8 has buggy iterators w/o `next`
    if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;
    else {
        PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));
        if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;
    }
}
var NEW_ITERATOR_PROTOTYPE = IteratorPrototype == undefined || fails(function() {
    var test = {
    };
    // FF44- legacy iterators case
    return IteratorPrototype[ITERATOR].call(test) !== test;
});
if (NEW_ITERATOR_PROTOTYPE) IteratorPrototype = {
};
// `%IteratorPrototype%[@@iterator]()` method
// https://tc39.es/ecma262/#sec-%iteratorprototype%-@@iterator
if ((!IS_PURE || NEW_ITERATOR_PROTOTYPE) && !has(IteratorPrototype, ITERATOR)) createNonEnumerableProperty(IteratorPrototype, ITERATOR, returnThis);
module.exports = {
    IteratorPrototype: IteratorPrototype,
    BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS
};

},{"../internals/fails":"5dsdP","../internals/object-get-prototype-of":"2iPhc","../internals/create-non-enumerable-property":"7tRkq","../internals/has":"1rjL0","../internals/well-known-symbol":"23Lpi","../internals/is-pure":"7KzvF"}],"1qWvh":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var IndexedObject = require('../internals/indexed-object');
var toIndexedObject = require('../internals/to-indexed-object');
var arrayMethodIsStrict = require('../internals/array-method-is-strict');
var nativeJoin = [].join;
var ES3_STRINGS = IndexedObject != Object;
var STRICT_METHOD = arrayMethodIsStrict('join', ',');
// `Array.prototype.join` method
// https://tc39.es/ecma262/#sec-array.prototype.join
$({
    target: 'Array',
    proto: true,
    forced: ES3_STRINGS || !STRICT_METHOD
}, {
    join: function join(separator) {
        return nativeJoin.call(toIndexedObject(this), separator === undefined ? ',' : separator);
    }
});

},{"../internals/export":"2y5a0","../internals/indexed-object":"vbpOP","../internals/to-indexed-object":"DEeSJ","../internals/array-method-is-strict":"5PmX5"}],"6fwS3":[function(require,module,exports) {
var $ = require('../internals/export');
var lastIndexOf = require('../internals/array-last-index-of');
// `Array.prototype.lastIndexOf` method
// https://tc39.es/ecma262/#sec-array.prototype.lastindexof
// eslint-disable-next-line es/no-array-prototype-lastindexof -- required for testing
$({
    target: 'Array',
    proto: true,
    forced: lastIndexOf !== [].lastIndexOf
}, {
    lastIndexOf: lastIndexOf
});

},{"../internals/export":"2y5a0","../internals/array-last-index-of":"caP8O"}],"caP8O":[function(require,module,exports) {
'use strict';
/* eslint-disable es/no-array-prototype-lastindexof -- safe */ var toIndexedObject = require('../internals/to-indexed-object');
var toInteger = require('../internals/to-integer');
var toLength = require('../internals/to-length');
var arrayMethodIsStrict = require('../internals/array-method-is-strict');
var min = Math.min;
var $lastIndexOf = [].lastIndexOf;
var NEGATIVE_ZERO = !!$lastIndexOf && 1 / [
    1
].lastIndexOf(1, -0.0) < 0;
var STRICT_METHOD = arrayMethodIsStrict('lastIndexOf');
var FORCED = NEGATIVE_ZERO || !STRICT_METHOD;
// `Array.prototype.lastIndexOf` method implementation
// https://tc39.es/ecma262/#sec-array.prototype.lastindexof
module.exports = FORCED ? function lastIndexOf(searchElement/* , fromIndex = @[*-1] */ ) {
    // convert -0 to +0
    if (NEGATIVE_ZERO) return $lastIndexOf.apply(this, arguments) || 0;
    var O = toIndexedObject(this);
    var length = toLength(O.length);
    var index = length - 1;
    if (arguments.length > 1) index = min(index, toInteger(arguments[1]));
    if (index < 0) index = length + index;
    for(; index >= 0; index--)if (index in O && O[index] === searchElement) return index || 0;
    return -1;
} : $lastIndexOf;

},{"../internals/to-indexed-object":"DEeSJ","../internals/to-integer":"6y5fX","../internals/to-length":"7tq8w","../internals/array-method-is-strict":"5PmX5"}],"3MGGg":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var $map = require('../internals/array-iteration').map;
var arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');
var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('map');
// `Array.prototype.map` method
// https://tc39.es/ecma262/#sec-array.prototype.map
// with adding support of @@species
$({
    target: 'Array',
    proto: true,
    forced: !HAS_SPECIES_SUPPORT
}, {
    map: function map(callbackfn/* , thisArg */ ) {
        return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    }
});

},{"../internals/export":"2y5a0","../internals/array-iteration":"2s7u3","../internals/array-method-has-species-support":"6nuF1"}],"2uzA6":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var fails = require('../internals/fails');
var createProperty = require('../internals/create-property');
var ISNT_GENERIC = fails(function() {
    function F() {
    }
    // eslint-disable-next-line es/no-array-of -- required for testing
    return !(Array.of.call(F) instanceof F);
});
// `Array.of` method
// https://tc39.es/ecma262/#sec-array.of
// WebKit Array.of isn't generic
$({
    target: 'Array',
    stat: true,
    forced: ISNT_GENERIC
}, {
    of: function of() {
        var index = 0;
        var argumentsLength = arguments.length;
        var result = new (typeof this == 'function' ? this : Array)(argumentsLength);
        while(argumentsLength > index)createProperty(result, index, arguments[index++]);
        result.length = argumentsLength;
        return result;
    }
});

},{"../internals/export":"2y5a0","../internals/fails":"5dsdP","../internals/create-property":"4vFpJ"}],"01nvk":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var $reduce = require('../internals/array-reduce').left;
var arrayMethodIsStrict = require('../internals/array-method-is-strict');
var CHROME_VERSION = require('../internals/engine-v8-version');
var IS_NODE = require('../internals/engine-is-node');
var STRICT_METHOD = arrayMethodIsStrict('reduce');
// Chrome 80-82 has a critical bug
// https://bugs.chromium.org/p/chromium/issues/detail?id=1049982
var CHROME_BUG = !IS_NODE && CHROME_VERSION > 79 && CHROME_VERSION < 83;
// `Array.prototype.reduce` method
// https://tc39.es/ecma262/#sec-array.prototype.reduce
$({
    target: 'Array',
    proto: true,
    forced: !STRICT_METHOD || CHROME_BUG
}, {
    reduce: function reduce(callbackfn/* , initialValue */ ) {
        return $reduce(this, callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
    }
});

},{"../internals/export":"2y5a0","../internals/array-reduce":"62Gn1","../internals/array-method-is-strict":"5PmX5","../internals/engine-v8-version":"6jjMH","../internals/engine-is-node":"7jmSb"}],"62Gn1":[function(require,module,exports) {
var aFunction = require('../internals/a-function');
var toObject = require('../internals/to-object');
var IndexedObject = require('../internals/indexed-object');
var toLength = require('../internals/to-length');
// `Array.prototype.{ reduce, reduceRight }` methods implementation
var createMethod = function(IS_RIGHT) {
    return function(that, callbackfn, argumentsLength, memo) {
        aFunction(callbackfn);
        var O = toObject(that);
        var self = IndexedObject(O);
        var length = toLength(O.length);
        var index = IS_RIGHT ? length - 1 : 0;
        var i = IS_RIGHT ? -1 : 1;
        if (argumentsLength < 2) while(true){
            if (index in self) {
                memo = self[index];
                index += i;
                break;
            }
            index += i;
            if (IS_RIGHT ? index < 0 : length <= index) throw TypeError('Reduce of empty array with no initial value');
        }
        for(; IS_RIGHT ? index >= 0 : length > index; index += i)if (index in self) memo = callbackfn(memo, self[index], index, O);
        return memo;
    };
};
module.exports = {
    // `Array.prototype.reduce` method
    // https://tc39.es/ecma262/#sec-array.prototype.reduce
    left: createMethod(false),
    // `Array.prototype.reduceRight` method
    // https://tc39.es/ecma262/#sec-array.prototype.reduceright
    right: createMethod(true)
};

},{"../internals/a-function":"14VVf","../internals/to-object":"1Jr8n","../internals/indexed-object":"vbpOP","../internals/to-length":"7tq8w"}],"7jmSb":[function(require,module,exports) {
var classof = require('../internals/classof-raw');
var global = require('../internals/global');
module.exports = classof(global.process) == 'process';

},{"../internals/classof-raw":"2KP6c","../internals/global":"4E9rT"}],"30nNO":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var $reduceRight = require('../internals/array-reduce').right;
var arrayMethodIsStrict = require('../internals/array-method-is-strict');
var CHROME_VERSION = require('../internals/engine-v8-version');
var IS_NODE = require('../internals/engine-is-node');
var STRICT_METHOD = arrayMethodIsStrict('reduceRight');
// Chrome 80-82 has a critical bug
// https://bugs.chromium.org/p/chromium/issues/detail?id=1049982
var CHROME_BUG = !IS_NODE && CHROME_VERSION > 79 && CHROME_VERSION < 83;
// `Array.prototype.reduceRight` method
// https://tc39.es/ecma262/#sec-array.prototype.reduceright
$({
    target: 'Array',
    proto: true,
    forced: !STRICT_METHOD || CHROME_BUG
}, {
    reduceRight: function reduceRight(callbackfn/* , initialValue */ ) {
        return $reduceRight(this, callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
    }
});

},{"../internals/export":"2y5a0","../internals/array-reduce":"62Gn1","../internals/array-method-is-strict":"5PmX5","../internals/engine-v8-version":"6jjMH","../internals/engine-is-node":"7jmSb"}],"46Zw8":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var isArray = require('../internals/is-array');
var nativeReverse = [].reverse;
var test = [
    1,
    2
];
// `Array.prototype.reverse` method
// https://tc39.es/ecma262/#sec-array.prototype.reverse
// fix for Safari 12.0 bug
// https://bugs.webkit.org/show_bug.cgi?id=188794
$({
    target: 'Array',
    proto: true,
    forced: String(test) === String(test.reverse())
}, {
    reverse: function reverse() {
        // eslint-disable-next-line no-self-assign -- dirty hack
        if (isArray(this)) this.length = this.length;
        return nativeReverse.call(this);
    }
});

},{"../internals/export":"2y5a0","../internals/is-array":"CSoeC"}],"RhvHX":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var isObject = require('../internals/is-object');
var isArray = require('../internals/is-array');
var toAbsoluteIndex = require('../internals/to-absolute-index');
var toLength = require('../internals/to-length');
var toIndexedObject = require('../internals/to-indexed-object');
var createProperty = require('../internals/create-property');
var wellKnownSymbol = require('../internals/well-known-symbol');
var arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');
var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('slice');
var SPECIES = wellKnownSymbol('species');
var nativeSlice = [].slice;
var max = Math.max;
// `Array.prototype.slice` method
// https://tc39.es/ecma262/#sec-array.prototype.slice
// fallback for not array-like ES3 strings and DOM objects
$({
    target: 'Array',
    proto: true,
    forced: !HAS_SPECIES_SUPPORT
}, {
    slice: function slice(start, end) {
        var O = toIndexedObject(this);
        var length = toLength(O.length);
        var k = toAbsoluteIndex(start, length);
        var fin = toAbsoluteIndex(end === undefined ? length : end, length);
        // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible
        var Constructor, result, n;
        if (isArray(O)) {
            Constructor = O.constructor;
            // cross-realm fallback
            if (typeof Constructor == 'function' && (Constructor === Array || isArray(Constructor.prototype))) Constructor = undefined;
            else if (isObject(Constructor)) {
                Constructor = Constructor[SPECIES];
                if (Constructor === null) Constructor = undefined;
            }
            if (Constructor === Array || Constructor === undefined) return nativeSlice.call(O, k, fin);
        }
        result = new (Constructor === undefined ? Array : Constructor)(max(fin - k, 0));
        for(n = 0; k < fin; k++, n++)if (k in O) createProperty(result, n, O[k]);
        result.length = n;
        return result;
    }
});

},{"../internals/export":"2y5a0","../internals/is-object":"5j9oO","../internals/is-array":"CSoeC","../internals/to-absolute-index":"5D7Fy","../internals/to-length":"7tq8w","../internals/to-indexed-object":"DEeSJ","../internals/create-property":"4vFpJ","../internals/well-known-symbol":"23Lpi","../internals/array-method-has-species-support":"6nuF1"}],"6qCZA":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var $some = require('../internals/array-iteration').some;
var arrayMethodIsStrict = require('../internals/array-method-is-strict');
var STRICT_METHOD = arrayMethodIsStrict('some');
// `Array.prototype.some` method
// https://tc39.es/ecma262/#sec-array.prototype.some
$({
    target: 'Array',
    proto: true,
    forced: !STRICT_METHOD
}, {
    some: function some(callbackfn/* , thisArg */ ) {
        return $some(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    }
});

},{"../internals/export":"2y5a0","../internals/array-iteration":"2s7u3","../internals/array-method-is-strict":"5PmX5"}],"7F3u0":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var aFunction = require('../internals/a-function');
var toObject = require('../internals/to-object');
var toLength = require('../internals/to-length');
var fails = require('../internals/fails');
var internalSort = require('../internals/array-sort');
var arrayMethodIsStrict = require('../internals/array-method-is-strict');
var FF = require('../internals/engine-ff-version');
var IE_OR_EDGE = require('../internals/engine-is-ie-or-edge');
var V8 = require('../internals/engine-v8-version');
var WEBKIT = require('../internals/engine-webkit-version');
var test = [];
var nativeSort = test.sort;
// IE8-
var FAILS_ON_UNDEFINED = fails(function() {
    test.sort(undefined);
});
// V8 bug
var FAILS_ON_NULL = fails(function() {
    test.sort(null);
});
// Old WebKit
var STRICT_METHOD = arrayMethodIsStrict('sort');
var STABLE_SORT = !fails(function() {
    // feature detection can be too slow, so check engines versions
    if (V8) return V8 < 70;
    if (FF && FF > 3) return;
    if (IE_OR_EDGE) return true;
    if (WEBKIT) return WEBKIT < 603;
    var result = '';
    var code, chr, value, index;
    // generate an array with more 512 elements (Chakra and old V8 fails only in this case)
    for(code = 65; code < 76; code++){
        chr = String.fromCharCode(code);
        switch(code){
            case 66:
            case 69:
            case 70:
            case 72:
                value = 3;
                break;
            case 68:
            case 71:
                value = 4;
                break;
            default:
                value = 2;
        }
        for(index = 0; index < 47; index++)test.push({
            k: chr + index,
            v: value
        });
    }
    test.sort(function(a, b) {
        return b.v - a.v;
    });
    for(index = 0; index < test.length; index++){
        chr = test[index].k.charAt(0);
        if (result.charAt(result.length - 1) !== chr) result += chr;
    }
    return result !== 'DGBEFHACIJK';
});
var FORCED = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || !STRICT_METHOD || !STABLE_SORT;
var getSortCompare = function(comparefn) {
    return function(x, y) {
        if (y === undefined) return -1;
        if (x === undefined) return 1;
        if (comparefn !== undefined) return +comparefn(x, y) || 0;
        return String(x) > String(y) ? 1 : -1;
    };
};
// `Array.prototype.sort` method
// https://tc39.es/ecma262/#sec-array.prototype.sort
$({
    target: 'Array',
    proto: true,
    forced: FORCED
}, {
    sort: function sort(comparefn) {
        if (comparefn !== undefined) aFunction(comparefn);
        var array = toObject(this);
        if (STABLE_SORT) return comparefn === undefined ? nativeSort.call(array) : nativeSort.call(array, comparefn);
        var items = [];
        var arrayLength = toLength(array.length);
        var itemsLength, index;
        for(index = 0; index < arrayLength; index++)if (index in array) items.push(array[index]);
        items = internalSort(items, getSortCompare(comparefn));
        itemsLength = items.length;
        index = 0;
        while(index < itemsLength)array[index] = items[index++];
        while(index < arrayLength)delete array[index++];
        return array;
    }
});

},{"../internals/export":"2y5a0","../internals/a-function":"14VVf","../internals/to-object":"1Jr8n","../internals/to-length":"7tq8w","../internals/fails":"5dsdP","../internals/array-sort":"TnQNx","../internals/array-method-is-strict":"5PmX5","../internals/engine-ff-version":"6fFwb","../internals/engine-is-ie-or-edge":"311b7","../internals/engine-v8-version":"6jjMH","../internals/engine-webkit-version":"V1uB2"}],"TnQNx":[function(require,module,exports) {
// TODO: use something more complex like timsort?
var floor = Math.floor;
var mergeSort = function(array, comparefn) {
    var length = array.length;
    var middle = floor(length / 2);
    return length < 8 ? insertionSort(array, comparefn) : merge(mergeSort(array.slice(0, middle), comparefn), mergeSort(array.slice(middle), comparefn), comparefn);
};
var insertionSort = function(array, comparefn) {
    var length = array.length;
    var i = 1;
    var element, j;
    while(i < length){
        j = i;
        element = array[i];
        while(j && comparefn(array[j - 1], element) > 0)array[j] = array[--j];
        if (j !== i++) array[j] = element;
    }
    return array;
};
var merge = function(left, right, comparefn) {
    var llength = left.length;
    var rlength = right.length;
    var lindex = 0;
    var rindex = 0;
    var result = [];
    while(lindex < llength || rindex < rlength)if (lindex < llength && rindex < rlength) result.push(comparefn(left[lindex], right[rindex]) <= 0 ? left[lindex++] : right[rindex++]);
    else result.push(lindex < llength ? left[lindex++] : right[rindex++]);
    return result;
};
module.exports = mergeSort;

},{}],"6fFwb":[function(require,module,exports) {
var userAgent = require('../internals/engine-user-agent');
var firefox = userAgent.match(/firefox\/(\d+)/i);
module.exports = !!firefox && +firefox[1];

},{"../internals/engine-user-agent":"69cCi"}],"311b7":[function(require,module,exports) {
var UA = require('../internals/engine-user-agent');
module.exports = /MSIE|Trident/.test(UA);

},{"../internals/engine-user-agent":"69cCi"}],"V1uB2":[function(require,module,exports) {
var userAgent = require('../internals/engine-user-agent');
var webkit = userAgent.match(/AppleWebKit\/(\d+)\./);
module.exports = !!webkit && +webkit[1];

},{"../internals/engine-user-agent":"69cCi"}],"5PN9I":[function(require,module,exports) {
var setSpecies = require('../internals/set-species');
// `Array[@@species]` getter
// https://tc39.es/ecma262/#sec-get-array-@@species
setSpecies('Array');

},{"../internals/set-species":"6gzmW"}],"6gzmW":[function(require,module,exports) {
'use strict';
var getBuiltIn = require('../internals/get-built-in');
var definePropertyModule = require('../internals/object-define-property');
var wellKnownSymbol = require('../internals/well-known-symbol');
var DESCRIPTORS = require('../internals/descriptors');
var SPECIES = wellKnownSymbol('species');
module.exports = function(CONSTRUCTOR_NAME) {
    var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
    var defineProperty = definePropertyModule.f;
    if (DESCRIPTORS && Constructor && !Constructor[SPECIES]) defineProperty(Constructor, SPECIES, {
        configurable: true,
        get: function() {
            return this;
        }
    });
};

},{"../internals/get-built-in":"7zwJE","../internals/object-define-property":"1pkua","../internals/well-known-symbol":"23Lpi","../internals/descriptors":"AOzbW"}],"50VRS":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var toAbsoluteIndex = require('../internals/to-absolute-index');
var toInteger = require('../internals/to-integer');
var toLength = require('../internals/to-length');
var toObject = require('../internals/to-object');
var arraySpeciesCreate = require('../internals/array-species-create');
var createProperty = require('../internals/create-property');
var arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');
var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('splice');
var max = Math.max;
var min = Math.min;
var MAX_SAFE_INTEGER = 9007199254740991;
var MAXIMUM_ALLOWED_LENGTH_EXCEEDED = 'Maximum allowed length exceeded';
// `Array.prototype.splice` method
// https://tc39.es/ecma262/#sec-array.prototype.splice
// with adding support of @@species
$({
    target: 'Array',
    proto: true,
    forced: !HAS_SPECIES_SUPPORT
}, {
    splice: function splice(start, deleteCount/* , ...items */ ) {
        var O = toObject(this);
        var len = toLength(O.length);
        var actualStart = toAbsoluteIndex(start, len);
        var argumentsLength = arguments.length;
        var insertCount, actualDeleteCount, A, k, from, to;
        if (argumentsLength === 0) insertCount = actualDeleteCount = 0;
        else if (argumentsLength === 1) {
            insertCount = 0;
            actualDeleteCount = len - actualStart;
        } else {
            insertCount = argumentsLength - 2;
            actualDeleteCount = min(max(toInteger(deleteCount), 0), len - actualStart);
        }
        if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);
        A = arraySpeciesCreate(O, actualDeleteCount);
        for(k = 0; k < actualDeleteCount; k++){
            from = actualStart + k;
            if (from in O) createProperty(A, k, O[from]);
        }
        A.length = actualDeleteCount;
        if (insertCount < actualDeleteCount) {
            for(k = actualStart; k < len - actualDeleteCount; k++){
                from = k + actualDeleteCount;
                to = k + insertCount;
                if (from in O) O[to] = O[from];
                else delete O[to];
            }
            for(k = len; k > len - actualDeleteCount + insertCount; k--)delete O[k - 1];
        } else if (insertCount > actualDeleteCount) for(k = len - actualDeleteCount; k > actualStart; k--){
            from = k + actualDeleteCount - 1;
            to = k + insertCount - 1;
            if (from in O) O[to] = O[from];
            else delete O[to];
        }
        for(k = 0; k < insertCount; k++)O[k + actualStart] = arguments[k + 2];
        O.length = len - actualDeleteCount + insertCount;
        return A;
    }
});

},{"../internals/export":"2y5a0","../internals/to-absolute-index":"5D7Fy","../internals/to-integer":"6y5fX","../internals/to-length":"7tq8w","../internals/to-object":"1Jr8n","../internals/array-species-create":"4eSzJ","../internals/create-property":"4vFpJ","../internals/array-method-has-species-support":"6nuF1"}],"3kPRG":[function(require,module,exports) {
// this method was added to unscopables after implementation
// in popular engines, so it's moved to a separate module
var addToUnscopables = require('../internals/add-to-unscopables');
// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('flat');

},{"../internals/add-to-unscopables":"15Naf"}],"6Wl1N":[function(require,module,exports) {
// this method was added to unscopables after implementation
// in popular engines, so it's moved to a separate module
var addToUnscopables = require('../internals/add-to-unscopables');
// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('flatMap');

},{"../internals/add-to-unscopables":"15Naf"}],"2J012":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var global = require('../internals/global');
var arrayBufferModule = require('../internals/array-buffer');
var setSpecies = require('../internals/set-species');
var ARRAY_BUFFER = 'ArrayBuffer';
var ArrayBuffer1 = arrayBufferModule[ARRAY_BUFFER];
var NativeArrayBuffer = global[ARRAY_BUFFER];
// `ArrayBuffer` constructor
// https://tc39.es/ecma262/#sec-arraybuffer-constructor
$({
    global: true,
    forced: NativeArrayBuffer !== ArrayBuffer1
}, {
    ArrayBuffer: ArrayBuffer1
});
setSpecies(ARRAY_BUFFER);

},{"../internals/export":"2y5a0","../internals/global":"4E9rT","../internals/array-buffer":"7BExG","../internals/set-species":"6gzmW"}],"7BExG":[function(require,module,exports) {
'use strict';
var global = require('../internals/global');
var DESCRIPTORS = require('../internals/descriptors');
var NATIVE_ARRAY_BUFFER = require('../internals/array-buffer-native');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var redefineAll = require('../internals/redefine-all');
var fails = require('../internals/fails');
var anInstance = require('../internals/an-instance');
var toInteger = require('../internals/to-integer');
var toLength = require('../internals/to-length');
var toIndex = require('../internals/to-index');
var IEEE754 = require('../internals/ieee754');
var getPrototypeOf = require('../internals/object-get-prototype-of');
var setPrototypeOf = require('../internals/object-set-prototype-of');
var getOwnPropertyNames = require('../internals/object-get-own-property-names').f;
var defineProperty = require('../internals/object-define-property').f;
var arrayFill = require('../internals/array-fill');
var setToStringTag = require('../internals/set-to-string-tag');
var InternalStateModule = require('../internals/internal-state');
var getInternalState = InternalStateModule.get;
var setInternalState = InternalStateModule.set;
var ARRAY_BUFFER = 'ArrayBuffer';
var DATA_VIEW = 'DataView';
var PROTOTYPE = 'prototype';
var WRONG_LENGTH = 'Wrong length';
var WRONG_INDEX = 'Wrong index';
var NativeArrayBuffer = global[ARRAY_BUFFER];
var $ArrayBuffer = NativeArrayBuffer;
var $DataView = global[DATA_VIEW];
var $DataViewPrototype = $DataView && $DataView[PROTOTYPE];
var ObjectPrototype = Object.prototype;
var RangeError1 = global.RangeError;
var packIEEE754 = IEEE754.pack;
var unpackIEEE754 = IEEE754.unpack;
var packInt8 = function(number) {
    return [
        number & 255
    ];
};
var packInt16 = function(number) {
    return [
        number & 255,
        number >> 8 & 255
    ];
};
var packInt32 = function(number) {
    return [
        number & 255,
        number >> 8 & 255,
        number >> 16 & 255,
        number >> 24 & 255
    ];
};
var unpackInt32 = function(buffer) {
    return buffer[3] << 24 | buffer[2] << 16 | buffer[1] << 8 | buffer[0];
};
var packFloat32 = function(number) {
    return packIEEE754(number, 23, 4);
};
var packFloat64 = function(number) {
    return packIEEE754(number, 52, 8);
};
var addGetter = function(Constructor, key) {
    defineProperty(Constructor[PROTOTYPE], key, {
        get: function() {
            return getInternalState(this)[key];
        }
    });
};
var get = function(view, count, index, isLittleEndian) {
    var intIndex = toIndex(index);
    var store = getInternalState(view);
    if (intIndex + count > store.byteLength) throw RangeError1(WRONG_INDEX);
    var bytes = getInternalState(store.buffer).bytes;
    var start = intIndex + store.byteOffset;
    var pack = bytes.slice(start, start + count);
    return isLittleEndian ? pack : pack.reverse();
};
var set = function(view, count, index, conversion, value, isLittleEndian) {
    var intIndex = toIndex(index);
    var store = getInternalState(view);
    if (intIndex + count > store.byteLength) throw RangeError1(WRONG_INDEX);
    var bytes = getInternalState(store.buffer).bytes;
    var start = intIndex + store.byteOffset;
    var pack = conversion(+value);
    for(var i = 0; i < count; i++)bytes[start + i] = pack[isLittleEndian ? i : count - i - 1];
};
if (!NATIVE_ARRAY_BUFFER) {
    $ArrayBuffer = function ArrayBuffer1(length) {
        anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
        var byteLength = toIndex(length);
        setInternalState(this, {
            bytes: arrayFill.call(new Array(byteLength), 0),
            byteLength: byteLength
        });
        if (!DESCRIPTORS) this.byteLength = byteLength;
    };
    $DataView = function DataView1(buffer, byteOffset, byteLength) {
        anInstance(this, $DataView, DATA_VIEW);
        anInstance(buffer, $ArrayBuffer, DATA_VIEW);
        var bufferLength = getInternalState(buffer).byteLength;
        var offset = toInteger(byteOffset);
        if (offset < 0 || offset > bufferLength) throw RangeError1('Wrong offset');
        byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
        if (offset + byteLength > bufferLength) throw RangeError1(WRONG_LENGTH);
        setInternalState(this, {
            buffer: buffer,
            byteLength: byteLength,
            byteOffset: offset
        });
        if (!DESCRIPTORS) {
            this.buffer = buffer;
            this.byteLength = byteLength;
            this.byteOffset = offset;
        }
    };
    if (DESCRIPTORS) {
        addGetter($ArrayBuffer, 'byteLength');
        addGetter($DataView, 'buffer');
        addGetter($DataView, 'byteLength');
        addGetter($DataView, 'byteOffset');
    }
    redefineAll($DataView[PROTOTYPE], {
        getInt8: function getInt8(byteOffset) {
            return get(this, 1, byteOffset)[0] << 24 >> 24;
        },
        getUint8: function getUint8(byteOffset) {
            return get(this, 1, byteOffset)[0];
        },
        getInt16: function getInt16(byteOffset/* , littleEndian */ ) {
            var bytes = get(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);
            return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
        },
        getUint16: function getUint16(byteOffset/* , littleEndian */ ) {
            var bytes = get(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);
            return bytes[1] << 8 | bytes[0];
        },
        getInt32: function getInt32(byteOffset/* , littleEndian */ ) {
            return unpackInt32(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined));
        },
        getUint32: function getUint32(byteOffset/* , littleEndian */ ) {
            return unpackInt32(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined)) >>> 0;
        },
        getFloat32: function getFloat32(byteOffset/* , littleEndian */ ) {
            return unpackIEEE754(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 23);
        },
        getFloat64: function getFloat64(byteOffset/* , littleEndian */ ) {
            return unpackIEEE754(get(this, 8, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 52);
        },
        setInt8: function setInt8(byteOffset, value) {
            set(this, 1, byteOffset, packInt8, value);
        },
        setUint8: function setUint8(byteOffset, value) {
            set(this, 1, byteOffset, packInt8, value);
        },
        setInt16: function setInt16(byteOffset, value/* , littleEndian */ ) {
            set(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);
        },
        setUint16: function setUint16(byteOffset, value/* , littleEndian */ ) {
            set(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);
        },
        setInt32: function setInt32(byteOffset, value/* , littleEndian */ ) {
            set(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);
        },
        setUint32: function setUint32(byteOffset, value/* , littleEndian */ ) {
            set(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);
        },
        setFloat32: function setFloat32(byteOffset, value/* , littleEndian */ ) {
            set(this, 4, byteOffset, packFloat32, value, arguments.length > 2 ? arguments[2] : undefined);
        },
        setFloat64: function setFloat64(byteOffset, value/* , littleEndian */ ) {
            set(this, 8, byteOffset, packFloat64, value, arguments.length > 2 ? arguments[2] : undefined);
        }
    });
} else {
    /* eslint-disable no-new -- required for testing */ if (!fails(function() {
        NativeArrayBuffer(1);
    }) || !fails(function() {
        new NativeArrayBuffer(-1);
    }) || fails(function() {
        new NativeArrayBuffer();
        new NativeArrayBuffer(1.5);
        new NativeArrayBuffer(NaN);
        return NativeArrayBuffer.name != ARRAY_BUFFER;
    })) {
        /* eslint-enable no-new -- required for testing */ $ArrayBuffer = function ArrayBuffer1(length) {
            anInstance(this, $ArrayBuffer);
            return new NativeArrayBuffer(toIndex(length));
        };
        var ArrayBufferPrototype = $ArrayBuffer[PROTOTYPE] = NativeArrayBuffer[PROTOTYPE];
        for(var keys = getOwnPropertyNames(NativeArrayBuffer), j = 0, key; keys.length > j;)if (!((key = keys[j++]) in $ArrayBuffer)) createNonEnumerableProperty($ArrayBuffer, key, NativeArrayBuffer[key]);
        ArrayBufferPrototype.constructor = $ArrayBuffer;
    }
    // WebKit bug - the same parent prototype for typed arrays and data view
    if (setPrototypeOf && getPrototypeOf($DataViewPrototype) !== ObjectPrototype) setPrototypeOf($DataViewPrototype, ObjectPrototype);
    // iOS Safari 7.x bug
    var testView = new $DataView(new $ArrayBuffer(2));
    var $setInt8 = $DataViewPrototype.setInt8;
    testView.setInt8(0, 2147483648);
    testView.setInt8(1, 2147483649);
    if (testView.getInt8(0) || !testView.getInt8(1)) redefineAll($DataViewPrototype, {
        setInt8: function setInt8(byteOffset, value) {
            $setInt8.call(this, byteOffset, value << 24 >> 24);
        },
        setUint8: function setUint8(byteOffset, value) {
            $setInt8.call(this, byteOffset, value << 24 >> 24);
        }
    }, {
        unsafe: true
    });
}
setToStringTag($ArrayBuffer, ARRAY_BUFFER);
setToStringTag($DataView, DATA_VIEW);
module.exports = {
    ArrayBuffer: $ArrayBuffer,
    DataView: $DataView
};

},{"../internals/global":"4E9rT","../internals/descriptors":"AOzbW","../internals/array-buffer-native":"5u0sp","../internals/create-non-enumerable-property":"7tRkq","../internals/redefine-all":"2ZFGX","../internals/fails":"5dsdP","../internals/an-instance":"1BUHG","../internals/to-integer":"6y5fX","../internals/to-length":"7tq8w","../internals/to-index":"231Fv","../internals/ieee754":"4wIzx","../internals/object-get-prototype-of":"2iPhc","../internals/object-set-prototype-of":"5NYHm","../internals/object-get-own-property-names":"38Utf","../internals/object-define-property":"1pkua","../internals/array-fill":"5jPQe","../internals/set-to-string-tag":"73zwY","../internals/internal-state":"32AmZ"}],"5u0sp":[function(require,module,exports) {
// eslint-disable-next-line es/no-typed-arrays -- safe
module.exports = typeof ArrayBuffer !== 'undefined' && typeof DataView !== 'undefined';

},{}],"2ZFGX":[function(require,module,exports) {
var redefine = require('../internals/redefine');
module.exports = function(target, src, options) {
    for(var key in src)redefine(target, key, src[key], options);
    return target;
};

},{"../internals/redefine":"1SlpM"}],"1BUHG":[function(require,module,exports) {
module.exports = function(it, Constructor, name) {
    if (!(it instanceof Constructor)) throw TypeError('Incorrect ' + (name ? name + ' ' : '') + 'invocation');
    return it;
};

},{}],"231Fv":[function(require,module,exports) {
var toInteger = require('../internals/to-integer');
var toLength = require('../internals/to-length');
// `ToIndex` abstract operation
// https://tc39.es/ecma262/#sec-toindex
module.exports = function(it) {
    if (it === undefined) return 0;
    var number = toInteger(it);
    var length = toLength(number);
    if (number !== length) throw RangeError('Wrong length or index');
    return length;
};

},{"../internals/to-integer":"6y5fX","../internals/to-length":"7tq8w"}],"4wIzx":[function(require,module,exports) {
// IEEE754 conversions based on https://github.com/feross/ieee754
var abs = Math.abs;
var pow = Math.pow;
var floor = Math.floor;
var log = Math.log;
var LN2 = Math.LN2;
var pack = function(number, mantissaLength, bytes) {
    var buffer = new Array(bytes);
    var exponentLength = bytes * 8 - mantissaLength - 1;
    var eMax = (1 << exponentLength) - 1;
    var eBias = eMax >> 1;
    var rt = mantissaLength === 23 ? pow(2, -24) - pow(2, -77) : 0;
    var sign = number < 0 || number === 0 && 1 / number < 0 ? 1 : 0;
    var index = 0;
    var exponent, mantissa, c;
    number = abs(number);
    // eslint-disable-next-line no-self-compare -- NaN check
    if (number != number || number === Infinity) {
        // eslint-disable-next-line no-self-compare -- NaN check
        mantissa = number != number ? 1 : 0;
        exponent = eMax;
    } else {
        exponent = floor(log(number) / LN2);
        if (number * (c = pow(2, -exponent)) < 1) {
            exponent--;
            c *= 2;
        }
        if (exponent + eBias >= 1) number += rt / c;
        else number += rt * pow(2, 1 - eBias);
        if (number * c >= 2) {
            exponent++;
            c /= 2;
        }
        if (exponent + eBias >= eMax) {
            mantissa = 0;
            exponent = eMax;
        } else if (exponent + eBias >= 1) {
            mantissa = (number * c - 1) * pow(2, mantissaLength);
            exponent = exponent + eBias;
        } else {
            mantissa = number * pow(2, eBias - 1) * pow(2, mantissaLength);
            exponent = 0;
        }
    }
    for(; mantissaLength >= 8; buffer[index++] = mantissa & 255, mantissa /= 256, mantissaLength -= 8);
    exponent = exponent << mantissaLength | mantissa;
    exponentLength += mantissaLength;
    for(; exponentLength > 0; buffer[index++] = exponent & 255, exponent /= 256, exponentLength -= 8);
    buffer[--index] |= sign * 128;
    return buffer;
};
var unpack = function(buffer, mantissaLength) {
    var bytes = buffer.length;
    var exponentLength = bytes * 8 - mantissaLength - 1;
    var eMax = (1 << exponentLength) - 1;
    var eBias = eMax >> 1;
    var nBits = exponentLength - 7;
    var index = bytes - 1;
    var sign = buffer[index--];
    var exponent = sign & 127;
    var mantissa;
    sign >>= 7;
    for(; nBits > 0; exponent = exponent * 256 + buffer[index], index--, nBits -= 8);
    mantissa = exponent & (1 << -nBits) - 1;
    exponent >>= -nBits;
    nBits += mantissaLength;
    for(; nBits > 0; mantissa = mantissa * 256 + buffer[index], index--, nBits -= 8);
    if (exponent === 0) exponent = 1 - eBias;
    else if (exponent === eMax) return mantissa ? NaN : sign ? -Infinity : Infinity;
    else {
        mantissa = mantissa + pow(2, mantissaLength);
        exponent = exponent - eBias;
    }
    return (sign ? -1 : 1) * mantissa * pow(2, exponent - mantissaLength);
};
module.exports = {
    pack: pack,
    unpack: unpack
};

},{}],"6P8oC":[function(require,module,exports) {
var $ = require('../internals/export');
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var NATIVE_ARRAY_BUFFER_VIEWS = ArrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;
// `ArrayBuffer.isView` method
// https://tc39.es/ecma262/#sec-arraybuffer.isview
$({
    target: 'ArrayBuffer',
    stat: true,
    forced: !NATIVE_ARRAY_BUFFER_VIEWS
}, {
    isView: ArrayBufferViewCore.isView
});

},{"../internals/export":"2y5a0","../internals/array-buffer-view-core":"3iftb"}],"3iftb":[function(require,module,exports) {
'use strict';
var NATIVE_ARRAY_BUFFER = require('../internals/array-buffer-native');
var DESCRIPTORS = require('../internals/descriptors');
var global = require('../internals/global');
var isObject = require('../internals/is-object');
var has = require('../internals/has');
var classof = require('../internals/classof');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var redefine = require('../internals/redefine');
var defineProperty = require('../internals/object-define-property').f;
var getPrototypeOf = require('../internals/object-get-prototype-of');
var setPrototypeOf = require('../internals/object-set-prototype-of');
var wellKnownSymbol = require('../internals/well-known-symbol');
var uid = require('../internals/uid');
var Int8Array1 = global.Int8Array;
var Int8ArrayPrototype = Int8Array1 && Int8Array1.prototype;
var Uint8ClampedArray1 = global.Uint8ClampedArray;
var Uint8ClampedArrayPrototype = Uint8ClampedArray1 && Uint8ClampedArray1.prototype;
var TypedArray = Int8Array1 && getPrototypeOf(Int8Array1);
var TypedArrayPrototype = Int8ArrayPrototype && getPrototypeOf(Int8ArrayPrototype);
var ObjectPrototype = Object.prototype;
var isPrototypeOf = ObjectPrototype.isPrototypeOf;
var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var TYPED_ARRAY_TAG = uid('TYPED_ARRAY_TAG');
// Fixing native typed arrays in Opera Presto crashes the browser, see #595
var NATIVE_ARRAY_BUFFER_VIEWS = NATIVE_ARRAY_BUFFER && !!setPrototypeOf && classof(global.opera) !== 'Opera';
var TYPED_ARRAY_TAG_REQIRED = false;
var NAME;
var TypedArrayConstructorsList = {
    Int8Array: 1,
    Uint8Array: 1,
    Uint8ClampedArray: 1,
    Int16Array: 2,
    Uint16Array: 2,
    Int32Array: 4,
    Uint32Array: 4,
    Float32Array: 4,
    Float64Array: 8
};
var BigIntArrayConstructorsList = {
    BigInt64Array: 8,
    BigUint64Array: 8
};
var isView = function isView1(it) {
    if (!isObject(it)) return false;
    var klass = classof(it);
    return klass === 'DataView' || has(TypedArrayConstructorsList, klass) || has(BigIntArrayConstructorsList, klass);
};
var isTypedArray = function(it) {
    if (!isObject(it)) return false;
    var klass = classof(it);
    return has(TypedArrayConstructorsList, klass) || has(BigIntArrayConstructorsList, klass);
};
var aTypedArray = function(it) {
    if (isTypedArray(it)) return it;
    throw TypeError('Target is not a typed array');
};
var aTypedArrayConstructor = function(C) {
    if (setPrototypeOf) {
        if (isPrototypeOf.call(TypedArray, C)) return C;
    } else for(var ARRAY in TypedArrayConstructorsList)if (has(TypedArrayConstructorsList, NAME)) {
        var TypedArrayConstructor = global[ARRAY];
        if (TypedArrayConstructor && (C === TypedArrayConstructor || isPrototypeOf.call(TypedArrayConstructor, C))) return C;
    }
    throw TypeError('Target is not a typed array constructor');
};
var exportTypedArrayMethod = function(KEY, property, forced) {
    if (!DESCRIPTORS) return;
    if (forced) for(var ARRAY in TypedArrayConstructorsList){
        var TypedArrayConstructor = global[ARRAY];
        if (TypedArrayConstructor && has(TypedArrayConstructor.prototype, KEY)) try {
            delete TypedArrayConstructor.prototype[KEY];
        } catch (error) {
        }
    }
    if (!TypedArrayPrototype[KEY] || forced) redefine(TypedArrayPrototype, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS && Int8ArrayPrototype[KEY] || property);
};
var exportTypedArrayStaticMethod = function(KEY, property, forced) {
    var ARRAY, TypedArrayConstructor;
    if (!DESCRIPTORS) return;
    if (setPrototypeOf) {
        if (forced) for(ARRAY in TypedArrayConstructorsList){
            TypedArrayConstructor = global[ARRAY];
            if (TypedArrayConstructor && has(TypedArrayConstructor, KEY)) try {
                delete TypedArrayConstructor[KEY];
            } catch (error) {
            }
        }
        if (!TypedArray[KEY] || forced) // V8 ~ Chrome 49-50 `%TypedArray%` methods are non-writable non-configurable
        try {
            return redefine(TypedArray, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS && TypedArray[KEY] || property);
        } catch (error) {
        }
        else return;
    }
    for(ARRAY in TypedArrayConstructorsList){
        TypedArrayConstructor = global[ARRAY];
        if (TypedArrayConstructor && (!TypedArrayConstructor[KEY] || forced)) redefine(TypedArrayConstructor, KEY, property);
    }
};
for(NAME in TypedArrayConstructorsList)if (!global[NAME]) NATIVE_ARRAY_BUFFER_VIEWS = false;
// WebKit bug - typed arrays constructors prototype is Object.prototype
if (!NATIVE_ARRAY_BUFFER_VIEWS || typeof TypedArray != 'function' || TypedArray === Function.prototype) {
    // eslint-disable-next-line no-shadow -- safe
    TypedArray = function TypedArray1() {
        throw TypeError('Incorrect invocation');
    };
    if (NATIVE_ARRAY_BUFFER_VIEWS) for(NAME in TypedArrayConstructorsList)if (global[NAME]) setPrototypeOf(global[NAME], TypedArray);
}
if (!NATIVE_ARRAY_BUFFER_VIEWS || !TypedArrayPrototype || TypedArrayPrototype === ObjectPrototype) {
    TypedArrayPrototype = TypedArray.prototype;
    if (NATIVE_ARRAY_BUFFER_VIEWS) for(NAME in TypedArrayConstructorsList)if (global[NAME]) setPrototypeOf(global[NAME].prototype, TypedArrayPrototype);
}
// WebKit bug - one more object in Uint8ClampedArray prototype chain
if (NATIVE_ARRAY_BUFFER_VIEWS && getPrototypeOf(Uint8ClampedArrayPrototype) !== TypedArrayPrototype) setPrototypeOf(Uint8ClampedArrayPrototype, TypedArrayPrototype);
if (DESCRIPTORS && !has(TypedArrayPrototype, TO_STRING_TAG)) {
    TYPED_ARRAY_TAG_REQIRED = true;
    defineProperty(TypedArrayPrototype, TO_STRING_TAG, {
        get: function() {
            return isObject(this) ? this[TYPED_ARRAY_TAG] : undefined;
        }
    });
    for(NAME in TypedArrayConstructorsList)if (global[NAME]) createNonEnumerableProperty(global[NAME], TYPED_ARRAY_TAG, NAME);
}
module.exports = {
    NATIVE_ARRAY_BUFFER_VIEWS: NATIVE_ARRAY_BUFFER_VIEWS,
    TYPED_ARRAY_TAG: TYPED_ARRAY_TAG_REQIRED && TYPED_ARRAY_TAG,
    aTypedArray: aTypedArray,
    aTypedArrayConstructor: aTypedArrayConstructor,
    exportTypedArrayMethod: exportTypedArrayMethod,
    exportTypedArrayStaticMethod: exportTypedArrayStaticMethod,
    isView: isView,
    isTypedArray: isTypedArray,
    TypedArray: TypedArray,
    TypedArrayPrototype: TypedArrayPrototype
};

},{"../internals/array-buffer-native":"5u0sp","../internals/descriptors":"AOzbW","../internals/global":"4E9rT","../internals/is-object":"5j9oO","../internals/has":"1rjL0","../internals/classof":"5lDE7","../internals/create-non-enumerable-property":"7tRkq","../internals/redefine":"1SlpM","../internals/object-define-property":"1pkua","../internals/object-get-prototype-of":"2iPhc","../internals/object-set-prototype-of":"5NYHm","../internals/well-known-symbol":"23Lpi","../internals/uid":"CWjPL"}],"6M2Wu":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var fails = require('../internals/fails');
var ArrayBufferModule = require('../internals/array-buffer');
var anObject = require('../internals/an-object');
var toAbsoluteIndex = require('../internals/to-absolute-index');
var toLength = require('../internals/to-length');
var speciesConstructor = require('../internals/species-constructor');
var ArrayBuffer1 = ArrayBufferModule.ArrayBuffer;
var DataView1 = ArrayBufferModule.DataView;
var nativeArrayBufferSlice = ArrayBuffer1.prototype.slice;
var INCORRECT_SLICE = fails(function() {
    return !new ArrayBuffer1(2).slice(1, undefined).byteLength;
});
// `ArrayBuffer.prototype.slice` method
// https://tc39.es/ecma262/#sec-arraybuffer.prototype.slice
$({
    target: 'ArrayBuffer',
    proto: true,
    unsafe: true,
    forced: INCORRECT_SLICE
}, {
    slice: function slice(start, end) {
        if (nativeArrayBufferSlice !== undefined && end === undefined) return nativeArrayBufferSlice.call(anObject(this), start); // FF fix
        var length = anObject(this).byteLength;
        var first = toAbsoluteIndex(start, length);
        var fin = toAbsoluteIndex(end === undefined ? length : end, length);
        var result = new (speciesConstructor(this, ArrayBuffer1))(toLength(fin - first));
        var viewSource = new DataView1(this);
        var viewTarget = new DataView1(result);
        var index = 0;
        while(first < fin)viewTarget.setUint8(index++, viewSource.getUint8(first++));
        return result;
    }
});

},{"../internals/export":"2y5a0","../internals/fails":"5dsdP","../internals/array-buffer":"7BExG","../internals/an-object":"6as2W","../internals/to-absolute-index":"5D7Fy","../internals/to-length":"7tq8w","../internals/species-constructor":"8dIcf"}],"8dIcf":[function(require,module,exports) {
var anObject = require('../internals/an-object');
var aFunction = require('../internals/a-function');
var wellKnownSymbol = require('../internals/well-known-symbol');
var SPECIES = wellKnownSymbol('species');
// `SpeciesConstructor` abstract operation
// https://tc39.es/ecma262/#sec-speciesconstructor
module.exports = function(O, defaultConstructor) {
    var C = anObject(O).constructor;
    var S;
    return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? defaultConstructor : aFunction(S);
};

},{"../internals/an-object":"6as2W","../internals/a-function":"14VVf","../internals/well-known-symbol":"23Lpi"}],"1VE7g":[function(require,module,exports) {
var $ = require('../internals/export');
var ArrayBufferModule = require('../internals/array-buffer');
var NATIVE_ARRAY_BUFFER = require('../internals/array-buffer-native');
// `DataView` constructor
// https://tc39.es/ecma262/#sec-dataview-constructor
$({
    global: true,
    forced: !NATIVE_ARRAY_BUFFER
}, {
    DataView: ArrayBufferModule.DataView
});

},{"../internals/export":"2y5a0","../internals/array-buffer":"7BExG","../internals/array-buffer-native":"5u0sp"}],"3g9un":[function(require,module,exports) {
var $ = require('../internals/export');
// `Date.now` method
// https://tc39.es/ecma262/#sec-date.now
$({
    target: 'Date',
    stat: true
}, {
    now: function now() {
        return new Date().getTime();
    }
});

},{"../internals/export":"2y5a0"}],"4mpH2":[function(require,module,exports) {
var $ = require('../internals/export');
var toISOString = require('../internals/date-to-iso-string');
// `Date.prototype.toISOString` method
// https://tc39.es/ecma262/#sec-date.prototype.toisostring
// PhantomJS / old WebKit has a broken implementations
$({
    target: 'Date',
    proto: true,
    forced: Date.prototype.toISOString !== toISOString
}, {
    toISOString: toISOString
});

},{"../internals/export":"2y5a0","../internals/date-to-iso-string":"6AMvh"}],"6AMvh":[function(require,module,exports) {
'use strict';
var fails = require('../internals/fails');
var padStart = require('../internals/string-pad').start;
var abs = Math.abs;
var DatePrototype = Date.prototype;
var getTime = DatePrototype.getTime;
var nativeDateToISOString = DatePrototype.toISOString;
// `Date.prototype.toISOString` method implementation
// https://tc39.es/ecma262/#sec-date.prototype.toisostring
// PhantomJS / old WebKit fails here:
module.exports = fails(function() {
    return nativeDateToISOString.call(new Date(-50000000000000 - 1)) != '0385-07-25T07:06:39.999Z';
}) || !fails(function() {
    nativeDateToISOString.call(new Date(NaN));
}) ? function toISOString() {
    if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
    var date = this;
    var year = date.getUTCFullYear();
    var milliseconds = date.getUTCMilliseconds();
    var sign = year < 0 ? '-' : year > 9999 ? '+' : '';
    return sign + padStart(abs(year), sign ? 6 : 4, 0) + '-' + padStart(date.getUTCMonth() + 1, 2, 0) + '-' + padStart(date.getUTCDate(), 2, 0) + 'T' + padStart(date.getUTCHours(), 2, 0) + ':' + padStart(date.getUTCMinutes(), 2, 0) + ':' + padStart(date.getUTCSeconds(), 2, 0) + '.' + padStart(milliseconds, 3, 0) + 'Z';
} : nativeDateToISOString;

},{"../internals/fails":"5dsdP","../internals/string-pad":"1BOD0"}],"1BOD0":[function(require,module,exports) {
// https://github.com/tc39/proposal-string-pad-start-end
var toLength = require('../internals/to-length');
var repeat = require('../internals/string-repeat');
var requireObjectCoercible = require('../internals/require-object-coercible');
var ceil = Math.ceil;
// `String.prototype.{ padStart, padEnd }` methods implementation
var createMethod = function(IS_END) {
    return function($this, maxLength, fillString) {
        var S = String(requireObjectCoercible($this));
        var stringLength = S.length;
        var fillStr = fillString === undefined ? ' ' : String(fillString);
        var intMaxLength = toLength(maxLength);
        var fillLen, stringFiller;
        if (intMaxLength <= stringLength || fillStr == '') return S;
        fillLen = intMaxLength - stringLength;
        stringFiller = repeat.call(fillStr, ceil(fillLen / fillStr.length));
        if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
        return IS_END ? S + stringFiller : stringFiller + S;
    };
};
module.exports = {
    // `String.prototype.padStart` method
    // https://tc39.es/ecma262/#sec-string.prototype.padstart
    start: createMethod(false),
    // `String.prototype.padEnd` method
    // https://tc39.es/ecma262/#sec-string.prototype.padend
    end: createMethod(true)
};

},{"../internals/to-length":"7tq8w","../internals/string-repeat":"3xljJ","../internals/require-object-coercible":"7J9xg"}],"3xljJ":[function(require,module,exports) {
'use strict';
var toInteger = require('../internals/to-integer');
var requireObjectCoercible = require('../internals/require-object-coercible');
// `String.prototype.repeat` method implementation
// https://tc39.es/ecma262/#sec-string.prototype.repeat
module.exports = function repeat(count) {
    var str = String(requireObjectCoercible(this));
    var result = '';
    var n = toInteger(count);
    if (n < 0 || n == Infinity) throw RangeError('Wrong number of repetitions');
    for(; n > 0; n >>>= 1, str += str)if (n & 1) result += str;
    return result;
};

},{"../internals/to-integer":"6y5fX","../internals/require-object-coercible":"7J9xg"}],"3ugRc":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var fails = require('../internals/fails');
var toObject = require('../internals/to-object');
var toPrimitive = require('../internals/to-primitive');
var FORCED = fails(function() {
    return new Date(NaN).toJSON() !== null || Date.prototype.toJSON.call({
        toISOString: function() {
            return 1;
        }
    }) !== 1;
});
// `Date.prototype.toJSON` method
// https://tc39.es/ecma262/#sec-date.prototype.tojson
$({
    target: 'Date',
    proto: true,
    forced: FORCED
}, {
    // eslint-disable-next-line no-unused-vars -- required for `.length`
    toJSON: function toJSON(key) {
        var O = toObject(this);
        var pv = toPrimitive(O);
        return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
    }
});

},{"../internals/export":"2y5a0","../internals/fails":"5dsdP","../internals/to-object":"1Jr8n","../internals/to-primitive":"oTUf2"}],"6vxlK":[function(require,module,exports) {
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var dateToPrimitive = require('../internals/date-to-primitive');
var wellKnownSymbol = require('../internals/well-known-symbol');
var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');
var DatePrototype = Date.prototype;
// `Date.prototype[@@toPrimitive]` method
// https://tc39.es/ecma262/#sec-date.prototype-@@toprimitive
if (!(TO_PRIMITIVE in DatePrototype)) createNonEnumerableProperty(DatePrototype, TO_PRIMITIVE, dateToPrimitive);

},{"../internals/create-non-enumerable-property":"7tRkq","../internals/date-to-primitive":"5UszP","../internals/well-known-symbol":"23Lpi"}],"5UszP":[function(require,module,exports) {
'use strict';
var anObject = require('../internals/an-object');
var toPrimitive = require('../internals/to-primitive');
// `Date.prototype[@@toPrimitive](hint)` method implementation
// https://tc39.es/ecma262/#sec-date.prototype-@@toprimitive
module.exports = function(hint) {
    if (hint !== 'string' && hint !== 'number' && hint !== 'default') throw TypeError('Incorrect hint');
    return toPrimitive(anObject(this), hint !== 'number');
};

},{"../internals/an-object":"6as2W","../internals/to-primitive":"oTUf2"}],"4UgPB":[function(require,module,exports) {
var redefine = require('../internals/redefine');
var DatePrototype = Date.prototype;
var INVALID_DATE = 'Invalid Date';
var TO_STRING = 'toString';
var nativeDateToString = DatePrototype[TO_STRING];
var getTime = DatePrototype.getTime;
// `Date.prototype.toString` method
// https://tc39.es/ecma262/#sec-date.prototype.tostring
if (new Date(NaN) + '' != INVALID_DATE) redefine(DatePrototype, TO_STRING, function toString() {
    var value = getTime.call(this);
    // eslint-disable-next-line no-self-compare -- NaN check
    return value === value ? nativeDateToString.call(this) : INVALID_DATE;
});

},{"../internals/redefine":"1SlpM"}],"sGZVY":[function(require,module,exports) {
var $ = require('../internals/export');
var bind = require('../internals/function-bind');
// `Function.prototype.bind` method
// https://tc39.es/ecma262/#sec-function.prototype.bind
$({
    target: 'Function',
    proto: true
}, {
    bind: bind
});

},{"../internals/export":"2y5a0","../internals/function-bind":"6GXaq"}],"6GXaq":[function(require,module,exports) {
'use strict';
var aFunction = require('../internals/a-function');
var isObject = require('../internals/is-object');
var slice = [].slice;
var factories = {
};
var construct = function(C, argsLength, args) {
    if (!(argsLength in factories)) {
        for(var list = [], i = 0; i < argsLength; i++)list[i] = 'a[' + i + ']';
        // eslint-disable-next-line no-new-func -- we have no proper alternatives, IE8- only
        factories[argsLength] = Function('C,a', 'return new C(' + list.join(',') + ')');
    }
    return factories[argsLength](C, args);
};
// `Function.prototype.bind` method implementation
// https://tc39.es/ecma262/#sec-function.prototype.bind
module.exports = Function.bind || function bind(that/* , ...args */ ) {
    var fn = aFunction(this);
    var partArgs = slice.call(arguments, 1);
    var boundFunction = function bound() {
        var args = partArgs.concat(slice.call(arguments));
        return this instanceof boundFunction ? construct(fn, args.length, args) : fn.apply(that, args);
    };
    if (isObject(fn.prototype)) boundFunction.prototype = fn.prototype;
    return boundFunction;
};

},{"../internals/a-function":"14VVf","../internals/is-object":"5j9oO"}],"5L6to":[function(require,module,exports) {
'use strict';
var isObject = require('../internals/is-object');
var definePropertyModule = require('../internals/object-define-property');
var getPrototypeOf = require('../internals/object-get-prototype-of');
var wellKnownSymbol = require('../internals/well-known-symbol');
var HAS_INSTANCE = wellKnownSymbol('hasInstance');
var FunctionPrototype = Function.prototype;
// `Function.prototype[@@hasInstance]` method
// https://tc39.es/ecma262/#sec-function.prototype-@@hasinstance
if (!(HAS_INSTANCE in FunctionPrototype)) definePropertyModule.f(FunctionPrototype, HAS_INSTANCE, {
    value: function(O) {
        if (typeof this != 'function' || !isObject(O)) return false;
        if (!isObject(this.prototype)) return O instanceof this;
        // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
        while(O = getPrototypeOf(O))if (this.prototype === O) return true;
        return false;
    }
});

},{"../internals/is-object":"5j9oO","../internals/object-define-property":"1pkua","../internals/object-get-prototype-of":"2iPhc","../internals/well-known-symbol":"23Lpi"}],"1Kox3":[function(require,module,exports) {
var DESCRIPTORS = require('../internals/descriptors');
var defineProperty = require('../internals/object-define-property').f;
var FunctionPrototype = Function.prototype;
var FunctionPrototypeToString = FunctionPrototype.toString;
var nameRE = /^\s*function ([^ (]*)/;
var NAME = 'name';
// Function instances `.name` property
// https://tc39.es/ecma262/#sec-function-instances-name
if (DESCRIPTORS && !(NAME in FunctionPrototype)) defineProperty(FunctionPrototype, NAME, {
    configurable: true,
    get: function() {
        try {
            return FunctionPrototypeToString.call(this).match(nameRE)[1];
        } catch (error) {
            return '';
        }
    }
});

},{"../internals/descriptors":"AOzbW","../internals/object-define-property":"1pkua"}],"1KjpN":[function(require,module,exports) {
var $ = require('../internals/export');
var global = require('../internals/global');
// `globalThis` object
// https://tc39.es/ecma262/#sec-globalthis
$({
    global: true
}, {
    globalThis: global
});

},{"../internals/export":"2y5a0","../internals/global":"4E9rT"}],"4jUrw":[function(require,module,exports) {
var $ = require('../internals/export');
var getBuiltIn = require('../internals/get-built-in');
var fails = require('../internals/fails');
var $stringify = getBuiltIn('JSON', 'stringify');
var re = /[\uD800-\uDFFF]/g;
var low = /^[\uD800-\uDBFF]$/;
var hi = /^[\uDC00-\uDFFF]$/;
var fix = function(match, offset, string) {
    var prev = string.charAt(offset - 1);
    var next = string.charAt(offset + 1);
    if (low.test(match) && !hi.test(next) || hi.test(match) && !low.test(prev)) return '\\u' + match.charCodeAt(0).toString(16);
    return match;
};
var FORCED = fails(function() {
    return $stringify('\uDF06\uD834') !== '"\\udf06\\ud834"' || $stringify('\uDEAD') !== '"\\udead"';
});
if ($stringify) // `JSON.stringify` method
// https://tc39.es/ecma262/#sec-json.stringify
// https://github.com/tc39/proposal-well-formed-stringify
$({
    target: 'JSON',
    stat: true,
    forced: FORCED
}, {
    // eslint-disable-next-line no-unused-vars -- required for `.length`
    stringify: function stringify(it, replacer, space) {
        var result = $stringify.apply(null, arguments);
        return typeof result == 'string' ? result.replace(re, fix) : result;
    }
});

},{"../internals/export":"2y5a0","../internals/get-built-in":"7zwJE","../internals/fails":"5dsdP"}],"1Im52":[function(require,module,exports) {
var global = require('../internals/global');
var setToStringTag = require('../internals/set-to-string-tag');
// JSON[@@toStringTag] property
// https://tc39.es/ecma262/#sec-json-@@tostringtag
setToStringTag(global.JSON, 'JSON', true);

},{"../internals/global":"4E9rT","../internals/set-to-string-tag":"73zwY"}],"7Hojg":[function(require,module,exports) {
'use strict';
var collection = require('../internals/collection');
var collectionStrong = require('../internals/collection-strong');
// `Map` constructor
// https://tc39.es/ecma262/#sec-map-objects
module.exports = collection('Map', function(init) {
    return function Map1() {
        return init(this, arguments.length ? arguments[0] : undefined);
    };
}, collectionStrong);

},{"../internals/collection":"1bXcJ","../internals/collection-strong":"x6dC6"}],"1bXcJ":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var global = require('../internals/global');
var isForced = require('../internals/is-forced');
var redefine = require('../internals/redefine');
var InternalMetadataModule = require('../internals/internal-metadata');
var iterate = require('../internals/iterate');
var anInstance = require('../internals/an-instance');
var isObject = require('../internals/is-object');
var fails = require('../internals/fails');
var checkCorrectnessOfIteration = require('../internals/check-correctness-of-iteration');
var setToStringTag = require('../internals/set-to-string-tag');
var inheritIfRequired = require('../internals/inherit-if-required');
module.exports = function(CONSTRUCTOR_NAME, wrapper, common) {
    var IS_MAP = CONSTRUCTOR_NAME.indexOf('Map') !== -1;
    var IS_WEAK = CONSTRUCTOR_NAME.indexOf('Weak') !== -1;
    var ADDER = IS_MAP ? 'set' : 'add';
    var NativeConstructor = global[CONSTRUCTOR_NAME];
    var NativePrototype = NativeConstructor && NativeConstructor.prototype;
    var Constructor = NativeConstructor;
    var exported = {
    };
    var fixMethod = function(KEY) {
        var nativeMethod = NativePrototype[KEY];
        redefine(NativePrototype, KEY, KEY == 'add' ? function add(value) {
            nativeMethod.call(this, value === 0 ? 0 : value);
            return this;
        } : KEY == 'delete' ? function(key) {
            return IS_WEAK && !isObject(key) ? false : nativeMethod.call(this, key === 0 ? 0 : key);
        } : KEY == 'get' ? function get(key) {
            return IS_WEAK && !isObject(key) ? undefined : nativeMethod.call(this, key === 0 ? 0 : key);
        } : KEY == 'has' ? function has(key) {
            return IS_WEAK && !isObject(key) ? false : nativeMethod.call(this, key === 0 ? 0 : key);
        } : function set(key, value) {
            nativeMethod.call(this, key === 0 ? 0 : key, value);
            return this;
        });
    };
    var REPLACE = isForced(CONSTRUCTOR_NAME, typeof NativeConstructor != 'function' || !(IS_WEAK || NativePrototype.forEach && !fails(function() {
        new NativeConstructor().entries().next();
    })));
    if (REPLACE) {
        // create collection constructor
        Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);
        InternalMetadataModule.REQUIRED = true;
    } else if (isForced(CONSTRUCTOR_NAME, true)) {
        var instance = new Constructor();
        // early implementations not supports chaining
        var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {
        } : -0.0, 1) != instance;
        // V8 ~ Chromium 40- weak-collections throws on primitives, but should return false
        var THROWS_ON_PRIMITIVES = fails(function() {
            instance.has(1);
        });
        // most early implementations doesn't supports iterables, most modern - not close it correctly
        // eslint-disable-next-line no-new -- required for testing
        var ACCEPT_ITERABLES = checkCorrectnessOfIteration(function(iterable) {
            new NativeConstructor(iterable);
        });
        // for early implementations -0 and +0 not the same
        var BUGGY_ZERO = !IS_WEAK && fails(function() {
            // V8 ~ Chromium 42- fails only with 5+ elements
            var $instance = new NativeConstructor();
            var index = 5;
            while(index--)$instance[ADDER](index, index);
            return !$instance.has(-0.0);
        });
        if (!ACCEPT_ITERABLES) {
            Constructor = wrapper(function(dummy, iterable) {
                anInstance(dummy, Constructor, CONSTRUCTOR_NAME);
                var that = inheritIfRequired(new NativeConstructor(), dummy, Constructor);
                if (iterable != undefined) iterate(iterable, that[ADDER], {
                    that: that,
                    AS_ENTRIES: IS_MAP
                });
                return that;
            });
            Constructor.prototype = NativePrototype;
            NativePrototype.constructor = Constructor;
        }
        if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
            fixMethod('delete');
            fixMethod('has');
            IS_MAP && fixMethod('get');
        }
        if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
        // weak collections should not contains .clear method
        if (IS_WEAK && NativePrototype.clear) delete NativePrototype.clear;
    }
    exported[CONSTRUCTOR_NAME] = Constructor;
    $({
        global: true,
        forced: Constructor != NativeConstructor
    }, exported);
    setToStringTag(Constructor, CONSTRUCTOR_NAME);
    if (!IS_WEAK) common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);
    return Constructor;
};

},{"../internals/export":"2y5a0","../internals/global":"4E9rT","../internals/is-forced":"EXRg1","../internals/redefine":"1SlpM","../internals/internal-metadata":"6eai4","../internals/iterate":"44GYt","../internals/an-instance":"1BUHG","../internals/is-object":"5j9oO","../internals/fails":"5dsdP","../internals/check-correctness-of-iteration":"6HHGz","../internals/set-to-string-tag":"73zwY","../internals/inherit-if-required":"7m35x"}],"6eai4":[function(require,module,exports) {
var hiddenKeys = require('../internals/hidden-keys');
var isObject = require('../internals/is-object');
var has = require('../internals/has');
var defineProperty = require('../internals/object-define-property').f;
var uid = require('../internals/uid');
var FREEZING = require('../internals/freezing');
var METADATA = uid('meta');
var id = 0;
// eslint-disable-next-line es/no-object-isextensible -- safe
var isExtensible = Object.isExtensible || function() {
    return true;
};
var setMetadata = function(it) {
    defineProperty(it, METADATA, {
        value: {
            objectID: 'O' + ++id,
            weakData: {
            }
        }
    });
};
var fastKey = function(it, create) {
    // return a primitive with prefix
    if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
    if (!has(it, METADATA)) {
        // can't set metadata to uncaught frozen object
        if (!isExtensible(it)) return 'F';
        // not necessary to add metadata
        if (!create) return 'E';
        // add missing metadata
        setMetadata(it);
    // return object ID
    }
    return it[METADATA].objectID;
};
var getWeakData = function(it, create) {
    if (!has(it, METADATA)) {
        // can't set metadata to uncaught frozen object
        if (!isExtensible(it)) return true;
        // not necessary to add metadata
        if (!create) return false;
        // add missing metadata
        setMetadata(it);
    // return the store of weak collections IDs
    }
    return it[METADATA].weakData;
};
// add metadata on freeze-family methods calling
var onFreeze = function(it) {
    if (FREEZING && meta.REQUIRED && isExtensible(it) && !has(it, METADATA)) setMetadata(it);
    return it;
};
var meta = module.exports = {
    REQUIRED: false,
    fastKey: fastKey,
    getWeakData: getWeakData,
    onFreeze: onFreeze
};
hiddenKeys[METADATA] = true;

},{"../internals/hidden-keys":"1wNv8","../internals/is-object":"5j9oO","../internals/has":"1rjL0","../internals/object-define-property":"1pkua","../internals/uid":"CWjPL","../internals/freezing":"1g6Iy"}],"1g6Iy":[function(require,module,exports) {
var fails = require('../internals/fails');
module.exports = !fails(function() {
    // eslint-disable-next-line es/no-object-isextensible, es/no-object-preventextensions -- required for testing
    return Object.isExtensible(Object.preventExtensions({
    }));
});

},{"../internals/fails":"5dsdP"}],"7m35x":[function(require,module,exports) {
var isObject = require('../internals/is-object');
var setPrototypeOf = require('../internals/object-set-prototype-of');
// makes subclassing work correct for wrapped built-ins
module.exports = function($this, dummy, Wrapper) {
    var NewTarget, NewTargetPrototype;
    if (// it can work only with native `setPrototypeOf`
    setPrototypeOf && // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
    typeof (NewTarget = dummy.constructor) == 'function' && NewTarget !== Wrapper && isObject(NewTargetPrototype = NewTarget.prototype) && NewTargetPrototype !== Wrapper.prototype) setPrototypeOf($this, NewTargetPrototype);
    return $this;
};

},{"../internals/is-object":"5j9oO","../internals/object-set-prototype-of":"5NYHm"}],"x6dC6":[function(require,module,exports) {
'use strict';
var defineProperty = require('../internals/object-define-property').f;
var create = require('../internals/object-create');
var redefineAll = require('../internals/redefine-all');
var bind = require('../internals/function-bind-context');
var anInstance = require('../internals/an-instance');
var iterate = require('../internals/iterate');
var defineIterator = require('../internals/define-iterator');
var setSpecies = require('../internals/set-species');
var DESCRIPTORS = require('../internals/descriptors');
var fastKey = require('../internals/internal-metadata').fastKey;
var InternalStateModule = require('../internals/internal-state');
var setInternalState = InternalStateModule.set;
var internalStateGetterFor = InternalStateModule.getterFor;
module.exports = {
    getConstructor: function(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
        var C = wrapper(function(that, iterable) {
            anInstance(that, C, CONSTRUCTOR_NAME);
            setInternalState(that, {
                type: CONSTRUCTOR_NAME,
                index: create(null),
                first: undefined,
                last: undefined,
                size: 0
            });
            if (!DESCRIPTORS) that.size = 0;
            if (iterable != undefined) iterate(iterable, that[ADDER], {
                that: that,
                AS_ENTRIES: IS_MAP
            });
        });
        var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);
        var define = function(that, key, value) {
            var state = getInternalState(that);
            var entry = getEntry(that, key);
            var previous, index;
            // change existing entry
            if (entry) entry.value = value;
            else {
                state.last = entry = {
                    index: index = fastKey(key, true),
                    key: key,
                    value: value,
                    previous: previous = state.last,
                    next: undefined,
                    removed: false
                };
                if (!state.first) state.first = entry;
                if (previous) previous.next = entry;
                if (DESCRIPTORS) state.size++;
                else that.size++;
                // add to index
                if (index !== 'F') state.index[index] = entry;
            }
            return that;
        };
        var getEntry = function(that, key) {
            var state = getInternalState(that);
            // fast case
            var index = fastKey(key);
            var entry;
            if (index !== 'F') return state.index[index];
            // frozen object case
            for(entry = state.first; entry; entry = entry.next){
                if (entry.key == key) return entry;
            }
        };
        redefineAll(C.prototype, {
            // `{ Map, Set }.prototype.clear()` methods
            // https://tc39.es/ecma262/#sec-map.prototype.clear
            // https://tc39.es/ecma262/#sec-set.prototype.clear
            clear: function clear() {
                var that = this;
                var state = getInternalState(that);
                var data = state.index;
                var entry = state.first;
                while(entry){
                    entry.removed = true;
                    if (entry.previous) entry.previous = entry.previous.next = undefined;
                    delete data[entry.index];
                    entry = entry.next;
                }
                state.first = state.last = undefined;
                if (DESCRIPTORS) state.size = 0;
                else that.size = 0;
            },
            // `{ Map, Set }.prototype.delete(key)` methods
            // https://tc39.es/ecma262/#sec-map.prototype.delete
            // https://tc39.es/ecma262/#sec-set.prototype.delete
            'delete': function(key) {
                var that = this;
                var state = getInternalState(that);
                var entry = getEntry(that, key);
                if (entry) {
                    var next = entry.next;
                    var prev = entry.previous;
                    delete state.index[entry.index];
                    entry.removed = true;
                    if (prev) prev.next = next;
                    if (next) next.previous = prev;
                    if (state.first == entry) state.first = next;
                    if (state.last == entry) state.last = prev;
                    if (DESCRIPTORS) state.size--;
                    else that.size--;
                }
                return !!entry;
            },
            // `{ Map, Set }.prototype.forEach(callbackfn, thisArg = undefined)` methods
            // https://tc39.es/ecma262/#sec-map.prototype.foreach
            // https://tc39.es/ecma262/#sec-set.prototype.foreach
            forEach: function forEach(callbackfn/* , that = undefined */ ) {
                var state = getInternalState(this);
                var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
                var entry;
                while(entry = entry ? entry.next : state.first){
                    boundFunction(entry.value, entry.key, this);
                    // revert to the last existing entry
                    while(entry && entry.removed)entry = entry.previous;
                }
            },
            // `{ Map, Set}.prototype.has(key)` methods
            // https://tc39.es/ecma262/#sec-map.prototype.has
            // https://tc39.es/ecma262/#sec-set.prototype.has
            has: function has(key) {
                return !!getEntry(this, key);
            }
        });
        redefineAll(C.prototype, IS_MAP ? {
            // `Map.prototype.get(key)` method
            // https://tc39.es/ecma262/#sec-map.prototype.get
            get: function get(key) {
                var entry = getEntry(this, key);
                return entry && entry.value;
            },
            // `Map.prototype.set(key, value)` method
            // https://tc39.es/ecma262/#sec-map.prototype.set
            set: function set(key, value) {
                return define(this, key === 0 ? 0 : key, value);
            }
        } : {
            // `Set.prototype.add(value)` method
            // https://tc39.es/ecma262/#sec-set.prototype.add
            add: function add(value) {
                return define(this, value = value === 0 ? 0 : value, value);
            }
        });
        if (DESCRIPTORS) defineProperty(C.prototype, 'size', {
            get: function() {
                return getInternalState(this).size;
            }
        });
        return C;
    },
    setStrong: function(C, CONSTRUCTOR_NAME, IS_MAP) {
        var ITERATOR_NAME = CONSTRUCTOR_NAME + ' Iterator';
        var getInternalCollectionState = internalStateGetterFor(CONSTRUCTOR_NAME);
        var getInternalIteratorState = internalStateGetterFor(ITERATOR_NAME);
        // `{ Map, Set }.prototype.{ keys, values, entries, @@iterator }()` methods
        // https://tc39.es/ecma262/#sec-map.prototype.entries
        // https://tc39.es/ecma262/#sec-map.prototype.keys
        // https://tc39.es/ecma262/#sec-map.prototype.values
        // https://tc39.es/ecma262/#sec-map.prototype-@@iterator
        // https://tc39.es/ecma262/#sec-set.prototype.entries
        // https://tc39.es/ecma262/#sec-set.prototype.keys
        // https://tc39.es/ecma262/#sec-set.prototype.values
        // https://tc39.es/ecma262/#sec-set.prototype-@@iterator
        defineIterator(C, CONSTRUCTOR_NAME, function(iterated, kind) {
            setInternalState(this, {
                type: ITERATOR_NAME,
                target: iterated,
                state: getInternalCollectionState(iterated),
                kind: kind,
                last: undefined
            });
        }, function() {
            var state = getInternalIteratorState(this);
            var kind = state.kind;
            var entry = state.last;
            // revert to the last existing entry
            while(entry && entry.removed)entry = entry.previous;
            // get next entry
            if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {
                // or finish the iteration
                state.target = undefined;
                return {
                    value: undefined,
                    done: true
                };
            }
            // return step by kind
            if (kind == 'keys') return {
                value: entry.key,
                done: false
            };
            if (kind == 'values') return {
                value: entry.value,
                done: false
            };
            return {
                value: [
                    entry.key,
                    entry.value
                ],
                done: false
            };
        }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);
        // `{ Map, Set }.prototype[@@species]` accessors
        // https://tc39.es/ecma262/#sec-get-map-@@species
        // https://tc39.es/ecma262/#sec-get-set-@@species
        setSpecies(CONSTRUCTOR_NAME);
    }
};

},{"../internals/object-define-property":"1pkua","../internals/object-create":"2DlVm","../internals/redefine-all":"2ZFGX","../internals/function-bind-context":"526sd","../internals/an-instance":"1BUHG","../internals/iterate":"44GYt","../internals/define-iterator":"6HqjR","../internals/set-species":"6gzmW","../internals/descriptors":"AOzbW","../internals/internal-metadata":"6eai4","../internals/internal-state":"32AmZ"}],"1rqDl":[function(require,module,exports) {
var $ = require('../internals/export');
var log1p = require('../internals/math-log1p');
// eslint-disable-next-line es/no-math-acosh -- required for testing
var $acosh = Math.acosh;
var log = Math.log;
var sqrt = Math.sqrt;
var LN2 = Math.LN2;
var FORCED = !$acosh || Math.floor($acosh(Number.MAX_VALUE)) != 710 || $acosh(Infinity) != Infinity;
// `Math.acosh` method
// https://tc39.es/ecma262/#sec-math.acosh
$({
    target: 'Math',
    stat: true,
    forced: FORCED
}, {
    acosh: function acosh(x) {
        return (x = +x) < 1 ? NaN : x > 94906265.62425156 ? log(x) + LN2 : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
    }
});

},{"../internals/export":"2y5a0","../internals/math-log1p":"5bzIP"}],"5bzIP":[function(require,module,exports) {
var log = Math.log;
// `Math.log1p` method implementation
// https://tc39.es/ecma262/#sec-math.log1p
// eslint-disable-next-line es/no-math-log1p -- safe
module.exports = Math.log1p || function log1p(x) {
    return (x = +x) > -0.00000001 && x < 0.00000001 ? x - x * x / 2 : log(1 + x);
};

},{}],"20NIn":[function(require,module,exports) {
var $ = require('../internals/export');
// eslint-disable-next-line es/no-math-asinh -- required for testing
var $asinh = Math.asinh;
var log = Math.log;
var sqrt = Math.sqrt;
function asinh(x) {
    return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : log(x + sqrt(x * x + 1));
}
// `Math.asinh` method
// https://tc39.es/ecma262/#sec-math.asinh
// Tor Browser bug: Math.asinh(0) -> -0
$({
    target: 'Math',
    stat: true,
    forced: !($asinh && 1 / $asinh(0) > 0)
}, {
    asinh: asinh
});

},{"../internals/export":"2y5a0"}],"6WdJm":[function(require,module,exports) {
var $ = require('../internals/export');
// eslint-disable-next-line es/no-math-atanh -- required for testing
var $atanh = Math.atanh;
var log = Math.log;
// `Math.atanh` method
// https://tc39.es/ecma262/#sec-math.atanh
// Tor Browser bug: Math.atanh(-0) -> 0
$({
    target: 'Math',
    stat: true,
    forced: !($atanh && 1 / $atanh(-0.0) < 0)
}, {
    atanh: function atanh(x) {
        return (x = +x) == 0 ? x : log((1 + x) / (1 - x)) / 2;
    }
});

},{"../internals/export":"2y5a0"}],"7iScp":[function(require,module,exports) {
var $ = require('../internals/export');
var sign = require('../internals/math-sign');
var abs = Math.abs;
var pow = Math.pow;
// `Math.cbrt` method
// https://tc39.es/ecma262/#sec-math.cbrt
$({
    target: 'Math',
    stat: true
}, {
    cbrt: function cbrt(x) {
        return sign(x = +x) * pow(abs(x), 1 / 3);
    }
});

},{"../internals/export":"2y5a0","../internals/math-sign":"790yo"}],"790yo":[function(require,module,exports) {
// `Math.sign` method implementation
// https://tc39.es/ecma262/#sec-math.sign
// eslint-disable-next-line es/no-math-sign -- safe
module.exports = Math.sign || function sign(x) {
    // eslint-disable-next-line no-self-compare -- NaN check
    return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
};

},{}],"4qIcM":[function(require,module,exports) {
var $ = require('../internals/export');
var floor = Math.floor;
var log = Math.log;
var LOG2E = Math.LOG2E;
// `Math.clz32` method
// https://tc39.es/ecma262/#sec-math.clz32
$({
    target: 'Math',
    stat: true
}, {
    clz32: function clz32(x) {
        return x >>>= 0, 32;
    }
});

},{"../internals/export":"2y5a0"}],"4vEbq":[function(require,module,exports) {
var $ = require('../internals/export');
var expm1 = require('../internals/math-expm1');
// eslint-disable-next-line es/no-math-cosh -- required for testing
var $cosh = Math.cosh;
var abs = Math.abs;
var E = Math.E;
// `Math.cosh` method
// https://tc39.es/ecma262/#sec-math.cosh
$({
    target: 'Math',
    stat: true,
    forced: !$cosh || $cosh(710) === Infinity
}, {
    cosh: function cosh(x) {
        var t = expm1(abs(x) - 1) + 1;
        return (t + 1 / (t * E * E)) * (E / 2);
    }
});

},{"../internals/export":"2y5a0","../internals/math-expm1":"1SSuX"}],"1SSuX":[function(require,module,exports) {
// eslint-disable-next-line es/no-math-expm1 -- safe
var $expm1 = Math.expm1;
var exp = Math.exp;
// `Math.expm1` method implementation
// https://tc39.es/ecma262/#sec-math.expm1
module.exports = !$expm1 || $expm1(10) > 22025.465794806718 || $expm1(10) < 22025.465794806718 || $expm1(-0.00000000000000002) != -0.00000000000000002 ? function expm1(x) {
    return (x = +x) == 0 ? x : x > -0.000001 && x < 0.000001 ? x + x * x / 2 : exp(x) - 1;
} : $expm1;

},{}],"1VxZr":[function(require,module,exports) {
var $ = require('../internals/export');
var expm1 = require('../internals/math-expm1');
// `Math.expm1` method
// https://tc39.es/ecma262/#sec-math.expm1
// eslint-disable-next-line es/no-math-expm1 -- required for testing
$({
    target: 'Math',
    stat: true,
    forced: expm1 != Math.expm1
}, {
    expm1: expm1
});

},{"../internals/export":"2y5a0","../internals/math-expm1":"1SSuX"}],"3iYhc":[function(require,module,exports) {
var $ = require('../internals/export');
var fround = require('../internals/math-fround');
// `Math.fround` method
// https://tc39.es/ecma262/#sec-math.fround
$({
    target: 'Math',
    stat: true
}, {
    fround: fround
});

},{"../internals/export":"2y5a0","../internals/math-fround":"59CgS"}],"59CgS":[function(require,module,exports) {
var sign = require('../internals/math-sign');
var abs = Math.abs;
var pow = Math.pow;
var EPSILON = pow(2, -52);
var EPSILON32 = pow(2, -23);
var MAX32 = pow(2, 127) * (2 - EPSILON32);
var MIN32 = pow(2, -126);
var roundTiesToEven = function(n) {
    return n + 1 / EPSILON - 1 / EPSILON;
};
// `Math.fround` method implementation
// https://tc39.es/ecma262/#sec-math.fround
// eslint-disable-next-line es/no-math-fround -- safe
module.exports = Math.fround || function fround(x) {
    var $abs = abs(x);
    var $sign = sign(x);
    var a, result;
    if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
    a = (1 + EPSILON32 / EPSILON) * $abs;
    result = a - (a - $abs);
    // eslint-disable-next-line no-self-compare -- NaN check
    if (result > MAX32 || result != result) return $sign * Infinity;
    return $sign * result;
};

},{"../internals/math-sign":"790yo"}],"6DwBI":[function(require,module,exports) {
var $ = require('../internals/export');
// eslint-disable-next-line es/no-math-hypot -- required for testing
var $hypot = Math.hypot;
var abs = Math.abs;
var sqrt = Math.sqrt;
// Chrome 77 bug
// https://bugs.chromium.org/p/v8/issues/detail?id=9546
var BUGGY = !!$hypot && $hypot(Infinity, NaN) !== Infinity;
// `Math.hypot` method
// https://tc39.es/ecma262/#sec-math.hypot
$({
    target: 'Math',
    stat: true,
    forced: BUGGY
}, {
    // eslint-disable-next-line no-unused-vars -- required for `.length`
    hypot: function hypot(value1, value2) {
        var sum = 0;
        var i = 0;
        var aLen = arguments.length;
        var larg = 0;
        var arg, div;
        while(i < aLen){
            arg = abs(arguments[i++]);
            if (larg < arg) {
                div = larg / arg;
                sum = sum * div * div + 1;
                larg = arg;
            } else if (arg > 0) {
                div = arg / larg;
                sum += div * div;
            } else sum += arg;
        }
        return larg === Infinity ? Infinity : larg * sqrt(sum);
    }
});

},{"../internals/export":"2y5a0"}],"Aae7X":[function(require,module,exports) {
var $ = require('../internals/export');
var fails = require('../internals/fails');
// eslint-disable-next-line es/no-math-imul -- required for testing
var $imul = Math.imul;
var FORCED = fails(function() {
    return $imul(4294967295, 5) != -5 || $imul.length != 2;
});
// `Math.imul` method
// https://tc39.es/ecma262/#sec-math.imul
// some WebKit versions fails with big numbers, some has wrong arity
$({
    target: 'Math',
    stat: true,
    forced: FORCED
}, {
    imul: function imul(x, y) {
        var UINT16 = 65535;
        var xn = +x;
        var yn = +y;
        var xl = UINT16 & xn;
        var yl = UINT16 & yn;
        return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
    }
});

},{"../internals/export":"2y5a0","../internals/fails":"5dsdP"}],"6HJkq":[function(require,module,exports) {
var $ = require('../internals/export');
var log = Math.log;
var LOG10E = Math.LOG10E;
// `Math.log10` method
// https://tc39.es/ecma262/#sec-math.log10
$({
    target: 'Math',
    stat: true
}, {
    log10: function log10(x) {
        return log(x) * LOG10E;
    }
});

},{"../internals/export":"2y5a0"}],"1d2Nq":[function(require,module,exports) {
var $ = require('../internals/export');
var log1p = require('../internals/math-log1p');
// `Math.log1p` method
// https://tc39.es/ecma262/#sec-math.log1p
$({
    target: 'Math',
    stat: true
}, {
    log1p: log1p
});

},{"../internals/export":"2y5a0","../internals/math-log1p":"5bzIP"}],"uKxUJ":[function(require,module,exports) {
var $ = require('../internals/export');
var log = Math.log;
var LN2 = Math.LN2;
// `Math.log2` method
// https://tc39.es/ecma262/#sec-math.log2
$({
    target: 'Math',
    stat: true
}, {
    log2: function log2(x) {
        return log(x) / LN2;
    }
});

},{"../internals/export":"2y5a0"}],"4WhKk":[function(require,module,exports) {
var $ = require('../internals/export');
var sign = require('../internals/math-sign');
// `Math.sign` method
// https://tc39.es/ecma262/#sec-math.sign
$({
    target: 'Math',
    stat: true
}, {
    sign: sign
});

},{"../internals/export":"2y5a0","../internals/math-sign":"790yo"}],"4vnIe":[function(require,module,exports) {
var $ = require('../internals/export');
var fails = require('../internals/fails');
var expm1 = require('../internals/math-expm1');
var abs = Math.abs;
var exp = Math.exp;
var E = Math.E;
var FORCED = fails(function() {
    // eslint-disable-next-line es/no-math-sinh -- required for testing
    return Math.sinh(-0.00000000000000002) != -0.00000000000000002;
});
// `Math.sinh` method
// https://tc39.es/ecma262/#sec-math.sinh
// V8 near Chromium 38 has a problem with very small numbers
$({
    target: 'Math',
    stat: true,
    forced: FORCED
}, {
    sinh: function sinh(x) {
        return abs(x = +x) < 1 ? (expm1(x) - expm1(-x)) / 2 : (exp(x - 1) - exp(-x - 1)) * (E / 2);
    }
});

},{"../internals/export":"2y5a0","../internals/fails":"5dsdP","../internals/math-expm1":"1SSuX"}],"1HmeH":[function(require,module,exports) {
var $ = require('../internals/export');
var expm1 = require('../internals/math-expm1');
var exp = Math.exp;
// `Math.tanh` method
// https://tc39.es/ecma262/#sec-math.tanh
$({
    target: 'Math',
    stat: true
}, {
    tanh: function tanh(x) {
        var a = expm1(x = +x);
        var b = expm1(-x);
        return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
    }
});

},{"../internals/export":"2y5a0","../internals/math-expm1":"1SSuX"}],"68Otw":[function(require,module,exports) {
var setToStringTag = require('../internals/set-to-string-tag');
// Math[@@toStringTag] property
// https://tc39.es/ecma262/#sec-math-@@tostringtag
setToStringTag(Math, 'Math', true);

},{"../internals/set-to-string-tag":"73zwY"}],"2zzSb":[function(require,module,exports) {
var $ = require('../internals/export');
var ceil = Math.ceil;
var floor = Math.floor;
// `Math.trunc` method
// https://tc39.es/ecma262/#sec-math.trunc
$({
    target: 'Math',
    stat: true
}, {
    trunc: function trunc(it) {
        return (it > 0 ? floor : ceil)(it);
    }
});

},{"../internals/export":"2y5a0"}],"4zXCZ":[function(require,module,exports) {
'use strict';
var DESCRIPTORS = require('../internals/descriptors');
var global = require('../internals/global');
var isForced = require('../internals/is-forced');
var redefine = require('../internals/redefine');
var has = require('../internals/has');
var classof = require('../internals/classof-raw');
var inheritIfRequired = require('../internals/inherit-if-required');
var toPrimitive = require('../internals/to-primitive');
var fails = require('../internals/fails');
var create = require('../internals/object-create');
var getOwnPropertyNames = require('../internals/object-get-own-property-names').f;
var getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;
var defineProperty = require('../internals/object-define-property').f;
var trim = require('../internals/string-trim').trim;
var NUMBER = 'Number';
var NativeNumber = global[NUMBER];
var NumberPrototype = NativeNumber.prototype;
// Opera ~12 has broken Object#toString
var BROKEN_CLASSOF = classof(create(NumberPrototype)) == NUMBER;
// `ToNumber` abstract operation
// https://tc39.es/ecma262/#sec-tonumber
var toNumber = function(argument) {
    var it = toPrimitive(argument, false);
    var first, third, radix, maxCode, digits, length, index, code;
    if (typeof it == 'string' && it.length > 2) {
        it = trim(it);
        first = it.charCodeAt(0);
        if (first === 43 || first === 45) {
            third = it.charCodeAt(2);
            if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
        } else if (first === 48) {
            switch(it.charCodeAt(1)){
                case 66:
                case 98:
                    radix = 2;
                    maxCode = 49;
                    break; // fast equal of /^0b[01]+$/i
                case 79:
                case 111:
                    radix = 8;
                    maxCode = 55;
                    break; // fast equal of /^0o[0-7]+$/i
                default:
                    return +it;
            }
            digits = it.slice(2);
            length = digits.length;
            for(index = 0; index < length; index++){
                code = digits.charCodeAt(index);
                // parseInt parses a string to a first unavailable symbol
                // but ToNumber should return NaN if a string contains unavailable symbols
                if (code < 48 || code > maxCode) return NaN;
            }
            return parseInt(digits, radix);
        }
    }
    return +it;
};
// `Number` constructor
// https://tc39.es/ecma262/#sec-number-constructor
if (isForced(NUMBER, !NativeNumber(' 0o1') || !NativeNumber('0b1') || NativeNumber('+0x1'))) {
    var NumberWrapper = function Number1(value) {
        var it = arguments.length < 1 ? 0 : value;
        var dummy = this;
        return dummy instanceof NumberWrapper && (BROKEN_CLASSOF ? fails(function() {
            NumberPrototype.valueOf.call(dummy);
        }) : classof(dummy) != NUMBER) ? inheritIfRequired(new NativeNumber(toNumber(it)), dummy, NumberWrapper) : toNumber(it);
    };
    for(var keys = DESCRIPTORS ? getOwnPropertyNames(NativeNumber) : // ES3:
    "MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger,fromString,range".split(','), j = 0, key; keys.length > j; j++)if (has(NativeNumber, key = keys[j]) && !has(NumberWrapper, key)) defineProperty(NumberWrapper, key, getOwnPropertyDescriptor(NativeNumber, key));
    NumberWrapper.prototype = NumberPrototype;
    NumberPrototype.constructor = NumberWrapper;
    redefine(global, NUMBER, NumberWrapper);
}

},{"../internals/descriptors":"AOzbW","../internals/global":"4E9rT","../internals/is-forced":"EXRg1","../internals/redefine":"1SlpM","../internals/has":"1rjL0","../internals/classof-raw":"2KP6c","../internals/inherit-if-required":"7m35x","../internals/to-primitive":"oTUf2","../internals/fails":"5dsdP","../internals/object-create":"2DlVm","../internals/object-get-own-property-names":"38Utf","../internals/object-get-own-property-descriptor":"60pmx","../internals/object-define-property":"1pkua","../internals/string-trim":"5KG8d"}],"5KG8d":[function(require,module,exports) {
var requireObjectCoercible = require('../internals/require-object-coercible');
var whitespaces = require('../internals/whitespaces');
var whitespace = '[' + whitespaces + ']';
var ltrim = RegExp('^' + whitespace + whitespace + '*');
var rtrim = RegExp(whitespace + whitespace + '*$');
// `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation
var createMethod = function(TYPE) {
    return function($this) {
        var string = String(requireObjectCoercible($this));
        if (TYPE & 1) string = string.replace(ltrim, '');
        if (TYPE & 2) string = string.replace(rtrim, '');
        return string;
    };
};
module.exports = {
    // `String.prototype.{ trimLeft, trimStart }` methods
    // https://tc39.es/ecma262/#sec-string.prototype.trimstart
    start: createMethod(1),
    // `String.prototype.{ trimRight, trimEnd }` methods
    // https://tc39.es/ecma262/#sec-string.prototype.trimend
    end: createMethod(2),
    // `String.prototype.trim` method
    // https://tc39.es/ecma262/#sec-string.prototype.trim
    trim: createMethod(3)
};

},{"../internals/require-object-coercible":"7J9xg","../internals/whitespaces":"2PFEO"}],"2PFEO":[function(require,module,exports) {
// a string of all valid unicode whitespaces
module.exports = "\t\n\v\f\r \xa0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029\ufeff";

},{}],"5npu0":[function(require,module,exports) {
var $ = require('../internals/export');
// `Number.EPSILON` constant
// https://tc39.es/ecma262/#sec-number.epsilon
$({
    target: 'Number',
    stat: true
}, {
    EPSILON: Math.pow(2, -52)
});

},{"../internals/export":"2y5a0"}],"6bA9g":[function(require,module,exports) {
var $ = require('../internals/export');
var numberIsFinite = require('../internals/number-is-finite');
// `Number.isFinite` method
// https://tc39.es/ecma262/#sec-number.isfinite
$({
    target: 'Number',
    stat: true
}, {
    isFinite: numberIsFinite
});

},{"../internals/export":"2y5a0","../internals/number-is-finite":"1SJbI"}],"1SJbI":[function(require,module,exports) {
var global = require('../internals/global');
var globalIsFinite = global.isFinite;
// `Number.isFinite` method
// https://tc39.es/ecma262/#sec-number.isfinite
// eslint-disable-next-line es/no-number-isfinite -- safe
module.exports = Number.isFinite || function isFinite(it) {
    return typeof it == 'number' && globalIsFinite(it);
};

},{"../internals/global":"4E9rT"}],"1GInF":[function(require,module,exports) {
var $ = require('../internals/export');
var isInteger = require('../internals/is-integer');
// `Number.isInteger` method
// https://tc39.es/ecma262/#sec-number.isinteger
$({
    target: 'Number',
    stat: true
}, {
    isInteger: isInteger
});

},{"../internals/export":"2y5a0","../internals/is-integer":"l4au6"}],"l4au6":[function(require,module,exports) {
var isObject = require('../internals/is-object');
var floor = Math.floor;
// `Number.isInteger` method implementation
// https://tc39.es/ecma262/#sec-number.isinteger
module.exports = function isInteger(it) {
    return !isObject(it) && isFinite(it) && floor(it) === it;
};

},{"../internals/is-object":"5j9oO"}],"1Eatt":[function(require,module,exports) {
var $ = require('../internals/export');
// `Number.isNaN` method
// https://tc39.es/ecma262/#sec-number.isnan
$({
    target: 'Number',
    stat: true
}, {
    isNaN: function isNaN(number) {
        // eslint-disable-next-line no-self-compare -- NaN check
        return number != number;
    }
});

},{"../internals/export":"2y5a0"}],"1r7x5":[function(require,module,exports) {
var $ = require('../internals/export');
var isInteger = require('../internals/is-integer');
var abs = Math.abs;
// `Number.isSafeInteger` method
// https://tc39.es/ecma262/#sec-number.issafeinteger
$({
    target: 'Number',
    stat: true
}, {
    isSafeInteger: function isSafeInteger(number) {
        return isInteger(number) && abs(number) <= 9007199254740991;
    }
});

},{"../internals/export":"2y5a0","../internals/is-integer":"l4au6"}],"794za":[function(require,module,exports) {
var $ = require('../internals/export');
// `Number.MAX_SAFE_INTEGER` constant
// https://tc39.es/ecma262/#sec-number.max_safe_integer
$({
    target: 'Number',
    stat: true
}, {
    MAX_SAFE_INTEGER: 9007199254740991
});

},{"../internals/export":"2y5a0"}],"2rBbx":[function(require,module,exports) {
var $ = require('../internals/export');
// `Number.MIN_SAFE_INTEGER` constant
// https://tc39.es/ecma262/#sec-number.min_safe_integer
$({
    target: 'Number',
    stat: true
}, {
    MIN_SAFE_INTEGER: -9007199254740991
});

},{"../internals/export":"2y5a0"}],"6yQe5":[function(require,module,exports) {
var $ = require('../internals/export');
var parseFloat = require('../internals/number-parse-float');
// `Number.parseFloat` method
// https://tc39.es/ecma262/#sec-number.parseFloat
// eslint-disable-next-line es/no-number-parsefloat -- required for testing
$({
    target: 'Number',
    stat: true,
    forced: Number.parseFloat != parseFloat
}, {
    parseFloat: parseFloat
});

},{"../internals/export":"2y5a0","../internals/number-parse-float":"sF1QD"}],"sF1QD":[function(require,module,exports) {
var global = require('../internals/global');
var trim = require('../internals/string-trim').trim;
var whitespaces = require('../internals/whitespaces');
var $parseFloat = global.parseFloat;
var FORCED = 1 / $parseFloat(whitespaces + '-0') !== -Infinity;
// `parseFloat` method
// https://tc39.es/ecma262/#sec-parsefloat-string
module.exports = FORCED ? function parseFloat(string) {
    var trimmedString = trim(String(string));
    var result = $parseFloat(trimmedString);
    return result === 0 && trimmedString.charAt(0) == '-' ? -0.0 : result;
} : $parseFloat;

},{"../internals/global":"4E9rT","../internals/string-trim":"5KG8d","../internals/whitespaces":"2PFEO"}],"343Nr":[function(require,module,exports) {
var $ = require('../internals/export');
var parseInt = require('../internals/number-parse-int');
// `Number.parseInt` method
// https://tc39.es/ecma262/#sec-number.parseint
// eslint-disable-next-line es/no-number-parseint -- required for testing
$({
    target: 'Number',
    stat: true,
    forced: Number.parseInt != parseInt
}, {
    parseInt: parseInt
});

},{"../internals/export":"2y5a0","../internals/number-parse-int":"3dA8C"}],"3dA8C":[function(require,module,exports) {
var global = require('../internals/global');
var trim = require('../internals/string-trim').trim;
var whitespaces = require('../internals/whitespaces');
var $parseInt = global.parseInt;
var hex = /^[+-]?0[Xx]/;
var FORCED = $parseInt(whitespaces + '08') !== 8 || $parseInt(whitespaces + '0x16') !== 22;
// `parseInt` method
// https://tc39.es/ecma262/#sec-parseint-string-radix
module.exports = FORCED ? function parseInt(string, radix) {
    var S = trim(String(string));
    return $parseInt(S, radix >>> 0 || (hex.test(S) ? 16 : 10));
} : $parseInt;

},{"../internals/global":"4E9rT","../internals/string-trim":"5KG8d","../internals/whitespaces":"2PFEO"}],"2IMaY":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var toInteger = require('../internals/to-integer');
var thisNumberValue = require('../internals/this-number-value');
var repeat = require('../internals/string-repeat');
var fails = require('../internals/fails');
var nativeToFixed = 1..toFixed;
var floor = Math.floor;
var pow = function(x, n, acc) {
    return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
};
var log = function(x) {
    var n = 0;
    var x2 = x;
    while(x2 >= 4096){
        n += 12;
        x2 /= 4096;
    }
    while(x2 >= 2){
        n += 1;
        x2 /= 2;
    }
    return n;
};
var multiply = function(data, n, c) {
    var index = -1;
    var c2 = c;
    while((++index) < 6){
        c2 += n * data[index];
        data[index] = c2 % 10000000;
        c2 = floor(c2 / 10000000);
    }
};
var divide = function(data, n) {
    var index = 6;
    var c = 0;
    while((--index) >= 0){
        c += data[index];
        data[index] = floor(c / n);
        c = c % n * 10000000;
    }
};
var dataToString = function(data) {
    var index = 6;
    var s = '';
    while((--index) >= 0)if (s !== '' || index === 0 || data[index] !== 0) {
        var t = String(data[index]);
        s = s === '' ? t : s + repeat.call('0', 7 - t.length) + t;
    }
    return s;
};
var FORCED = nativeToFixed && (0.00008.toFixed(3) !== '0.000' || 0.9.toFixed(0) !== '1' || 1.255.toFixed(2) !== '1.25' || 1000000000000000000..toFixed(0) !== '1000000000000000128') || !fails(function() {
    // V8 ~ Android 4.3-
    nativeToFixed.call({
    });
});
// `Number.prototype.toFixed` method
// https://tc39.es/ecma262/#sec-number.prototype.tofixed
$({
    target: 'Number',
    proto: true,
    forced: FORCED
}, {
    toFixed: function toFixed(fractionDigits) {
        var number = thisNumberValue(this);
        var fractDigits = toInteger(fractionDigits);
        var data = [
            0,
            0,
            0,
            0,
            0,
            0
        ];
        var sign = '';
        var result = '0';
        var e, z, j, k;
        if (fractDigits < 0 || fractDigits > 20) throw RangeError('Incorrect fraction digits');
        // eslint-disable-next-line no-self-compare -- NaN check
        if (number != number) return 'NaN';
        if (number <= -1000000000000000000000 || number >= 1000000000000000000000) return String(number);
        if (number < 0) {
            sign = '-';
            number = -number;
        }
        if (number > 0.000000000000000000001) {
            e = log(number * pow(2, 69, 1)) - 69;
            z = e < 0 ? number * pow(2, -e, 1) : number / pow(2, e, 1);
            z *= 4503599627370496;
            e = 52 - e;
            if (e > 0) {
                multiply(data, 0, z);
                j = fractDigits;
                while(j >= 7){
                    multiply(data, 10000000, 0);
                    j -= 7;
                }
                multiply(data, pow(10, j, 1), 0);
                j = e - 1;
                while(j >= 23){
                    divide(data, 8388608);
                    j -= 23;
                }
                divide(data, 1 << j);
                multiply(data, 1, 1);
                divide(data, 2);
                result = dataToString(data);
            } else {
                multiply(data, 0, z);
                multiply(data, 1 << -e, 0);
                result = dataToString(data) + repeat.call('0', fractDigits);
            }
        }
        if (fractDigits > 0) {
            k = result.length;
            result = sign + (k <= fractDigits ? '0.' + repeat.call('0', fractDigits - k) + result : result.slice(0, k - fractDigits) + '.' + result.slice(k - fractDigits));
        } else result = sign + result;
        return result;
    }
});

},{"../internals/export":"2y5a0","../internals/to-integer":"6y5fX","../internals/this-number-value":"6CUI5","../internals/string-repeat":"3xljJ","../internals/fails":"5dsdP"}],"6CUI5":[function(require,module,exports) {
var classof = require('../internals/classof-raw');
// `thisNumberValue` abstract operation
// https://tc39.es/ecma262/#sec-thisnumbervalue
module.exports = function(value) {
    if (typeof value != 'number' && classof(value) != 'Number') throw TypeError('Incorrect invocation');
    return +value;
};

},{"../internals/classof-raw":"2KP6c"}],"ZDD0W":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var fails = require('../internals/fails');
var thisNumberValue = require('../internals/this-number-value');
var nativeToPrecision = 1..toPrecision;
var FORCED = fails(function() {
    // IE7-
    return nativeToPrecision.call(1, undefined) !== '1';
}) || !fails(function() {
    // V8 ~ Android 4.3-
    nativeToPrecision.call({
    });
});
// `Number.prototype.toPrecision` method
// https://tc39.es/ecma262/#sec-number.prototype.toprecision
$({
    target: 'Number',
    proto: true,
    forced: FORCED
}, {
    toPrecision: function toPrecision(precision) {
        return precision === undefined ? nativeToPrecision.call(thisNumberValue(this)) : nativeToPrecision.call(thisNumberValue(this), precision);
    }
});

},{"../internals/export":"2y5a0","../internals/fails":"5dsdP","../internals/this-number-value":"6CUI5"}],"4IFTU":[function(require,module,exports) {
var $ = require('../internals/export');
var assign = require('../internals/object-assign');
// `Object.assign` method
// https://tc39.es/ecma262/#sec-object.assign
// eslint-disable-next-line es/no-object-assign -- required for testing
$({
    target: 'Object',
    stat: true,
    forced: Object.assign !== assign
}, {
    assign: assign
});

},{"../internals/export":"2y5a0","../internals/object-assign":"53jj6"}],"53jj6":[function(require,module,exports) {
'use strict';
var DESCRIPTORS = require('../internals/descriptors');
var fails = require('../internals/fails');
var objectKeys = require('../internals/object-keys');
var getOwnPropertySymbolsModule = require('../internals/object-get-own-property-symbols');
var propertyIsEnumerableModule = require('../internals/object-property-is-enumerable');
var toObject = require('../internals/to-object');
var IndexedObject = require('../internals/indexed-object');
// eslint-disable-next-line es/no-object-assign -- safe
var $assign = Object.assign;
// eslint-disable-next-line es/no-object-defineproperty -- required for testing
var defineProperty = Object.defineProperty;
// `Object.assign` method
// https://tc39.es/ecma262/#sec-object.assign
module.exports = !$assign || fails(function() {
    // should have correct order of operations (Edge bug)
    if (DESCRIPTORS && $assign({
        b: 1
    }, $assign(defineProperty({
    }, 'a', {
        enumerable: true,
        get: function() {
            defineProperty(this, 'b', {
                value: 3,
                enumerable: false
            });
        }
    }), {
        b: 2
    })).b !== 1) return true;
    // should work with symbols and should have deterministic property order (V8 bug)
    var A = {
    };
    var B = {
    };
    // eslint-disable-next-line es/no-symbol -- safe
    var symbol = Symbol();
    var alphabet = 'abcdefghijklmnopqrst';
    A[symbol] = 7;
    alphabet.split('').forEach(function(chr) {
        B[chr] = chr;
    });
    return $assign({
    }, A)[symbol] != 7 || objectKeys($assign({
    }, B)).join('') != alphabet;
}) ? function assign(target, source) {
    var T = toObject(target);
    var argumentsLength = arguments.length;
    var index = 1;
    var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
    var propertyIsEnumerable = propertyIsEnumerableModule.f;
    while(argumentsLength > index){
        var S = IndexedObject(arguments[index++]);
        var keys = getOwnPropertySymbols ? objectKeys(S).concat(getOwnPropertySymbols(S)) : objectKeys(S);
        var length = keys.length;
        var j = 0;
        var key;
        while(length > j){
            key = keys[j++];
            if (!DESCRIPTORS || propertyIsEnumerable.call(S, key)) T[key] = S[key];
        }
    }
    return T;
} : $assign;

},{"../internals/descriptors":"AOzbW","../internals/fails":"5dsdP","../internals/object-keys":"3t02w","../internals/object-get-own-property-symbols":"36Y77","../internals/object-property-is-enumerable":"2LEpr","../internals/to-object":"1Jr8n","../internals/indexed-object":"vbpOP"}],"6gpYb":[function(require,module,exports) {
var $ = require('../internals/export');
var DESCRIPTORS = require('../internals/descriptors');
var create = require('../internals/object-create');
// `Object.create` method
// https://tc39.es/ecma262/#sec-object.create
$({
    target: 'Object',
    stat: true,
    sham: !DESCRIPTORS
}, {
    create: create
});

},{"../internals/export":"2y5a0","../internals/descriptors":"AOzbW","../internals/object-create":"2DlVm"}],"7Axnt":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var DESCRIPTORS = require('../internals/descriptors');
var FORCED = require('../internals/object-prototype-accessors-forced');
var toObject = require('../internals/to-object');
var aFunction = require('../internals/a-function');
var definePropertyModule = require('../internals/object-define-property');
// `Object.prototype.__defineGetter__` method
// https://tc39.es/ecma262/#sec-object.prototype.__defineGetter__
if (DESCRIPTORS) $({
    target: 'Object',
    proto: true,
    forced: FORCED
}, {
    __defineGetter__: function __defineGetter__(P, getter) {
        definePropertyModule.f(toObject(this), P, {
            get: aFunction(getter),
            enumerable: true,
            configurable: true
        });
    }
});

},{"../internals/export":"2y5a0","../internals/descriptors":"AOzbW","../internals/object-prototype-accessors-forced":"ry1pG","../internals/to-object":"1Jr8n","../internals/a-function":"14VVf","../internals/object-define-property":"1pkua"}],"ry1pG":[function(require,module,exports) {
'use strict';
var IS_PURE = require('../internals/is-pure');
var global = require('../internals/global');
var fails = require('../internals/fails');
var WEBKIT = require('../internals/engine-webkit-version');
// Forced replacement object prototype accessors methods
module.exports = IS_PURE || !fails(function() {
    // This feature detection crashes old WebKit
    // https://github.com/zloirock/core-js/issues/232
    if (WEBKIT && WEBKIT < 535) return;
    var key = Math.random();
    // In FF throws only define methods
    // eslint-disable-next-line no-undef, no-useless-call -- required for testing
    __defineSetter__.call(null, key, function() {
    });
    delete global[key];
});

},{"../internals/is-pure":"7KzvF","../internals/global":"4E9rT","../internals/fails":"5dsdP","../internals/engine-webkit-version":"V1uB2"}],"6iguQ":[function(require,module,exports) {
var $ = require('../internals/export');
var DESCRIPTORS = require('../internals/descriptors');
var defineProperties = require('../internals/object-define-properties');
// `Object.defineProperties` method
// https://tc39.es/ecma262/#sec-object.defineproperties
$({
    target: 'Object',
    stat: true,
    forced: !DESCRIPTORS,
    sham: !DESCRIPTORS
}, {
    defineProperties: defineProperties
});

},{"../internals/export":"2y5a0","../internals/descriptors":"AOzbW","../internals/object-define-properties":"4RDOq"}],"1mBV7":[function(require,module,exports) {
var $ = require('../internals/export');
var DESCRIPTORS = require('../internals/descriptors');
var objectDefinePropertyModile = require('../internals/object-define-property');
// `Object.defineProperty` method
// https://tc39.es/ecma262/#sec-object.defineproperty
$({
    target: 'Object',
    stat: true,
    forced: !DESCRIPTORS,
    sham: !DESCRIPTORS
}, {
    defineProperty: objectDefinePropertyModile.f
});

},{"../internals/export":"2y5a0","../internals/descriptors":"AOzbW","../internals/object-define-property":"1pkua"}],"6b6aN":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var DESCRIPTORS = require('../internals/descriptors');
var FORCED = require('../internals/object-prototype-accessors-forced');
var toObject = require('../internals/to-object');
var aFunction = require('../internals/a-function');
var definePropertyModule = require('../internals/object-define-property');
// `Object.prototype.__defineSetter__` method
// https://tc39.es/ecma262/#sec-object.prototype.__defineSetter__
if (DESCRIPTORS) $({
    target: 'Object',
    proto: true,
    forced: FORCED
}, {
    __defineSetter__: function __defineSetter__(P, setter) {
        definePropertyModule.f(toObject(this), P, {
            set: aFunction(setter),
            enumerable: true,
            configurable: true
        });
    }
});

},{"../internals/export":"2y5a0","../internals/descriptors":"AOzbW","../internals/object-prototype-accessors-forced":"ry1pG","../internals/to-object":"1Jr8n","../internals/a-function":"14VVf","../internals/object-define-property":"1pkua"}],"4tiAn":[function(require,module,exports) {
var $ = require('../internals/export');
var $entries = require('../internals/object-to-array').entries;
// `Object.entries` method
// https://tc39.es/ecma262/#sec-object.entries
$({
    target: 'Object',
    stat: true
}, {
    entries: function entries(O) {
        return $entries(O);
    }
});

},{"../internals/export":"2y5a0","../internals/object-to-array":"5q2bK"}],"5q2bK":[function(require,module,exports) {
var DESCRIPTORS = require('../internals/descriptors');
var objectKeys = require('../internals/object-keys');
var toIndexedObject = require('../internals/to-indexed-object');
var propertyIsEnumerable = require('../internals/object-property-is-enumerable').f;
// `Object.{ entries, values }` methods implementation
var createMethod = function(TO_ENTRIES) {
    return function(it) {
        var O = toIndexedObject(it);
        var keys = objectKeys(O);
        var length = keys.length;
        var i = 0;
        var result = [];
        var key;
        while(length > i){
            key = keys[i++];
            if (!DESCRIPTORS || propertyIsEnumerable.call(O, key)) result.push(TO_ENTRIES ? [
                key,
                O[key]
            ] : O[key]);
        }
        return result;
    };
};
module.exports = {
    // `Object.entries` method
    // https://tc39.es/ecma262/#sec-object.entries
    entries: createMethod(true),
    // `Object.values` method
    // https://tc39.es/ecma262/#sec-object.values
    values: createMethod(false)
};

},{"../internals/descriptors":"AOzbW","../internals/object-keys":"3t02w","../internals/to-indexed-object":"DEeSJ","../internals/object-property-is-enumerable":"2LEpr"}],"1Hib2":[function(require,module,exports) {
var $ = require('../internals/export');
var FREEZING = require('../internals/freezing');
var fails = require('../internals/fails');
var isObject = require('../internals/is-object');
var onFreeze = require('../internals/internal-metadata').onFreeze;
// eslint-disable-next-line es/no-object-freeze -- safe
var $freeze = Object.freeze;
var FAILS_ON_PRIMITIVES = fails(function() {
    $freeze(1);
});
// `Object.freeze` method
// https://tc39.es/ecma262/#sec-object.freeze
$({
    target: 'Object',
    stat: true,
    forced: FAILS_ON_PRIMITIVES,
    sham: !FREEZING
}, {
    freeze: function freeze(it) {
        return $freeze && isObject(it) ? $freeze(onFreeze(it)) : it;
    }
});

},{"../internals/export":"2y5a0","../internals/freezing":"1g6Iy","../internals/fails":"5dsdP","../internals/is-object":"5j9oO","../internals/internal-metadata":"6eai4"}],"18HRa":[function(require,module,exports) {
var $ = require('../internals/export');
var iterate = require('../internals/iterate');
var createProperty = require('../internals/create-property');
// `Object.fromEntries` method
// https://github.com/tc39/proposal-object-from-entries
$({
    target: 'Object',
    stat: true
}, {
    fromEntries: function fromEntries(iterable) {
        var obj = {
        };
        iterate(iterable, function(k, v) {
            createProperty(obj, k, v);
        }, {
            AS_ENTRIES: true
        });
        return obj;
    }
});

},{"../internals/export":"2y5a0","../internals/iterate":"44GYt","../internals/create-property":"4vFpJ"}],"6qCyt":[function(require,module,exports) {
var $ = require('../internals/export');
var fails = require('../internals/fails');
var toIndexedObject = require('../internals/to-indexed-object');
var nativeGetOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;
var DESCRIPTORS = require('../internals/descriptors');
var FAILS_ON_PRIMITIVES = fails(function() {
    nativeGetOwnPropertyDescriptor(1);
});
var FORCED = !DESCRIPTORS || FAILS_ON_PRIMITIVES;
// `Object.getOwnPropertyDescriptor` method
// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
$({
    target: 'Object',
    stat: true,
    forced: FORCED,
    sham: !DESCRIPTORS
}, {
    getOwnPropertyDescriptor: function getOwnPropertyDescriptor(it, key) {
        return nativeGetOwnPropertyDescriptor(toIndexedObject(it), key);
    }
});

},{"../internals/export":"2y5a0","../internals/fails":"5dsdP","../internals/to-indexed-object":"DEeSJ","../internals/object-get-own-property-descriptor":"60pmx","../internals/descriptors":"AOzbW"}],"6rxB6":[function(require,module,exports) {
var $ = require('../internals/export');
var DESCRIPTORS = require('../internals/descriptors');
var ownKeys = require('../internals/own-keys');
var toIndexedObject = require('../internals/to-indexed-object');
var getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');
var createProperty = require('../internals/create-property');
// `Object.getOwnPropertyDescriptors` method
// https://tc39.es/ecma262/#sec-object.getownpropertydescriptors
$({
    target: 'Object',
    stat: true,
    sham: !DESCRIPTORS
}, {
    getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
        var O = toIndexedObject(object);
        var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
        var keys = ownKeys(O);
        var result = {
        };
        var index = 0;
        var key, descriptor;
        while(keys.length > index){
            descriptor = getOwnPropertyDescriptor(O, key = keys[index++]);
            if (descriptor !== undefined) createProperty(result, key, descriptor);
        }
        return result;
    }
});

},{"../internals/export":"2y5a0","../internals/descriptors":"AOzbW","../internals/own-keys":"49Dcz","../internals/to-indexed-object":"DEeSJ","../internals/object-get-own-property-descriptor":"60pmx","../internals/create-property":"4vFpJ"}],"5udqw":[function(require,module,exports) {
var $ = require('../internals/export');
var fails = require('../internals/fails');
var getOwnPropertyNames = require('../internals/object-get-own-property-names-external').f;
// eslint-disable-next-line es/no-object-getownpropertynames -- required for testing
var FAILS_ON_PRIMITIVES = fails(function() {
    return !Object.getOwnPropertyNames(1);
});
// `Object.getOwnPropertyNames` method
// https://tc39.es/ecma262/#sec-object.getownpropertynames
$({
    target: 'Object',
    stat: true,
    forced: FAILS_ON_PRIMITIVES
}, {
    getOwnPropertyNames: getOwnPropertyNames
});

},{"../internals/export":"2y5a0","../internals/fails":"5dsdP","../internals/object-get-own-property-names-external":"4PXQz"}],"3dwXL":[function(require,module,exports) {
var $ = require('../internals/export');
var fails = require('../internals/fails');
var toObject = require('../internals/to-object');
var nativeGetPrototypeOf = require('../internals/object-get-prototype-of');
var CORRECT_PROTOTYPE_GETTER = require('../internals/correct-prototype-getter');
var FAILS_ON_PRIMITIVES = fails(function() {
    nativeGetPrototypeOf(1);
});
// `Object.getPrototypeOf` method
// https://tc39.es/ecma262/#sec-object.getprototypeof
$({
    target: 'Object',
    stat: true,
    forced: FAILS_ON_PRIMITIVES,
    sham: !CORRECT_PROTOTYPE_GETTER
}, {
    getPrototypeOf: function getPrototypeOf(it) {
        return nativeGetPrototypeOf(toObject(it));
    }
});

},{"../internals/export":"2y5a0","../internals/fails":"5dsdP","../internals/to-object":"1Jr8n","../internals/object-get-prototype-of":"2iPhc","../internals/correct-prototype-getter":"7HY5D"}],"2SDiB":[function(require,module,exports) {
var $ = require('../internals/export');
var is = require('../internals/same-value');
// `Object.is` method
// https://tc39.es/ecma262/#sec-object.is
$({
    target: 'Object',
    stat: true
}, {
    is: is
});

},{"../internals/export":"2y5a0","../internals/same-value":"7Gzb5"}],"7Gzb5":[function(require,module,exports) {
// `SameValue` abstract operation
// https://tc39.es/ecma262/#sec-samevalue
// eslint-disable-next-line es/no-object-is -- safe
module.exports = Object.is || function is(x, y) {
    // eslint-disable-next-line no-self-compare -- NaN check
    return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
};

},{}],"3JC2S":[function(require,module,exports) {
var $ = require('../internals/export');
var fails = require('../internals/fails');
var isObject = require('../internals/is-object');
// eslint-disable-next-line es/no-object-isextensible -- safe
var $isExtensible = Object.isExtensible;
var FAILS_ON_PRIMITIVES = fails(function() {
    $isExtensible(1);
});
// `Object.isExtensible` method
// https://tc39.es/ecma262/#sec-object.isextensible
$({
    target: 'Object',
    stat: true,
    forced: FAILS_ON_PRIMITIVES
}, {
    isExtensible: function isExtensible(it) {
        return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
    }
});

},{"../internals/export":"2y5a0","../internals/fails":"5dsdP","../internals/is-object":"5j9oO"}],"N15Sb":[function(require,module,exports) {
var $ = require('../internals/export');
var fails = require('../internals/fails');
var isObject = require('../internals/is-object');
// eslint-disable-next-line es/no-object-isfrozen -- safe
var $isFrozen = Object.isFrozen;
var FAILS_ON_PRIMITIVES = fails(function() {
    $isFrozen(1);
});
// `Object.isFrozen` method
// https://tc39.es/ecma262/#sec-object.isfrozen
$({
    target: 'Object',
    stat: true,
    forced: FAILS_ON_PRIMITIVES
}, {
    isFrozen: function isFrozen(it) {
        return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
    }
});

},{"../internals/export":"2y5a0","../internals/fails":"5dsdP","../internals/is-object":"5j9oO"}],"4Z5os":[function(require,module,exports) {
var $ = require('../internals/export');
var fails = require('../internals/fails');
var isObject = require('../internals/is-object');
// eslint-disable-next-line es/no-object-issealed -- safe
var $isSealed = Object.isSealed;
var FAILS_ON_PRIMITIVES = fails(function() {
    $isSealed(1);
});
// `Object.isSealed` method
// https://tc39.es/ecma262/#sec-object.issealed
$({
    target: 'Object',
    stat: true,
    forced: FAILS_ON_PRIMITIVES
}, {
    isSealed: function isSealed(it) {
        return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
    }
});

},{"../internals/export":"2y5a0","../internals/fails":"5dsdP","../internals/is-object":"5j9oO"}],"Z2WL3":[function(require,module,exports) {
var $ = require('../internals/export');
var toObject = require('../internals/to-object');
var nativeKeys = require('../internals/object-keys');
var fails = require('../internals/fails');
var FAILS_ON_PRIMITIVES = fails(function() {
    nativeKeys(1);
});
// `Object.keys` method
// https://tc39.es/ecma262/#sec-object.keys
$({
    target: 'Object',
    stat: true,
    forced: FAILS_ON_PRIMITIVES
}, {
    keys: function keys(it) {
        return nativeKeys(toObject(it));
    }
});

},{"../internals/export":"2y5a0","../internals/to-object":"1Jr8n","../internals/object-keys":"3t02w","../internals/fails":"5dsdP"}],"eCpLO":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var DESCRIPTORS = require('../internals/descriptors');
var FORCED = require('../internals/object-prototype-accessors-forced');
var toObject = require('../internals/to-object');
var toPrimitive = require('../internals/to-primitive');
var getPrototypeOf = require('../internals/object-get-prototype-of');
var getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;
// `Object.prototype.__lookupGetter__` method
// https://tc39.es/ecma262/#sec-object.prototype.__lookupGetter__
if (DESCRIPTORS) $({
    target: 'Object',
    proto: true,
    forced: FORCED
}, {
    __lookupGetter__: function __lookupGetter__(P) {
        var O = toObject(this);
        var key = toPrimitive(P, true);
        var desc;
        do {
            if (desc = getOwnPropertyDescriptor(O, key)) return desc.get;
        }while (O = getPrototypeOf(O))
    }
});

},{"../internals/export":"2y5a0","../internals/descriptors":"AOzbW","../internals/object-prototype-accessors-forced":"ry1pG","../internals/to-object":"1Jr8n","../internals/to-primitive":"oTUf2","../internals/object-get-prototype-of":"2iPhc","../internals/object-get-own-property-descriptor":"60pmx"}],"58u4L":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var DESCRIPTORS = require('../internals/descriptors');
var FORCED = require('../internals/object-prototype-accessors-forced');
var toObject = require('../internals/to-object');
var toPrimitive = require('../internals/to-primitive');
var getPrototypeOf = require('../internals/object-get-prototype-of');
var getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;
// `Object.prototype.__lookupSetter__` method
// https://tc39.es/ecma262/#sec-object.prototype.__lookupSetter__
if (DESCRIPTORS) $({
    target: 'Object',
    proto: true,
    forced: FORCED
}, {
    __lookupSetter__: function __lookupSetter__(P) {
        var O = toObject(this);
        var key = toPrimitive(P, true);
        var desc;
        do {
            if (desc = getOwnPropertyDescriptor(O, key)) return desc.set;
        }while (O = getPrototypeOf(O))
    }
});

},{"../internals/export":"2y5a0","../internals/descriptors":"AOzbW","../internals/object-prototype-accessors-forced":"ry1pG","../internals/to-object":"1Jr8n","../internals/to-primitive":"oTUf2","../internals/object-get-prototype-of":"2iPhc","../internals/object-get-own-property-descriptor":"60pmx"}],"1uA79":[function(require,module,exports) {
var $ = require('../internals/export');
var isObject = require('../internals/is-object');
var onFreeze = require('../internals/internal-metadata').onFreeze;
var FREEZING = require('../internals/freezing');
var fails = require('../internals/fails');
// eslint-disable-next-line es/no-object-preventextensions -- safe
var $preventExtensions = Object.preventExtensions;
var FAILS_ON_PRIMITIVES = fails(function() {
    $preventExtensions(1);
});
// `Object.preventExtensions` method
// https://tc39.es/ecma262/#sec-object.preventextensions
$({
    target: 'Object',
    stat: true,
    forced: FAILS_ON_PRIMITIVES,
    sham: !FREEZING
}, {
    preventExtensions: function preventExtensions(it) {
        return $preventExtensions && isObject(it) ? $preventExtensions(onFreeze(it)) : it;
    }
});

},{"../internals/export":"2y5a0","../internals/is-object":"5j9oO","../internals/internal-metadata":"6eai4","../internals/freezing":"1g6Iy","../internals/fails":"5dsdP"}],"3e1Nu":[function(require,module,exports) {
var $ = require('../internals/export');
var isObject = require('../internals/is-object');
var onFreeze = require('../internals/internal-metadata').onFreeze;
var FREEZING = require('../internals/freezing');
var fails = require('../internals/fails');
// eslint-disable-next-line es/no-object-seal -- safe
var $seal = Object.seal;
var FAILS_ON_PRIMITIVES = fails(function() {
    $seal(1);
});
// `Object.seal` method
// https://tc39.es/ecma262/#sec-object.seal
$({
    target: 'Object',
    stat: true,
    forced: FAILS_ON_PRIMITIVES,
    sham: !FREEZING
}, {
    seal: function seal(it) {
        return $seal && isObject(it) ? $seal(onFreeze(it)) : it;
    }
});

},{"../internals/export":"2y5a0","../internals/is-object":"5j9oO","../internals/internal-metadata":"6eai4","../internals/freezing":"1g6Iy","../internals/fails":"5dsdP"}],"51AEH":[function(require,module,exports) {
var $ = require('../internals/export');
var setPrototypeOf = require('../internals/object-set-prototype-of');
// `Object.setPrototypeOf` method
// https://tc39.es/ecma262/#sec-object.setprototypeof
$({
    target: 'Object',
    stat: true
}, {
    setPrototypeOf: setPrototypeOf
});

},{"../internals/export":"2y5a0","../internals/object-set-prototype-of":"5NYHm"}],"nrQFY":[function(require,module,exports) {
var TO_STRING_TAG_SUPPORT = require('../internals/to-string-tag-support');
var redefine = require('../internals/redefine');
var toString = require('../internals/object-to-string');
// `Object.prototype.toString` method
// https://tc39.es/ecma262/#sec-object.prototype.tostring
if (!TO_STRING_TAG_SUPPORT) redefine(Object.prototype, 'toString', toString, {
    unsafe: true
});

},{"../internals/to-string-tag-support":"2kI0V","../internals/redefine":"1SlpM","../internals/object-to-string":"3Ga8y"}],"3Ga8y":[function(require,module,exports) {
'use strict';
var TO_STRING_TAG_SUPPORT = require('../internals/to-string-tag-support');
var classof = require('../internals/classof');
// `Object.prototype.toString` method implementation
// https://tc39.es/ecma262/#sec-object.prototype.tostring
module.exports = TO_STRING_TAG_SUPPORT ? ({
}).toString : function toString() {
    return '[object ' + classof(this) + ']';
};

},{"../internals/to-string-tag-support":"2kI0V","../internals/classof":"5lDE7"}],"39YEH":[function(require,module,exports) {
var $ = require('../internals/export');
var $values = require('../internals/object-to-array').values;
// `Object.values` method
// https://tc39.es/ecma262/#sec-object.values
$({
    target: 'Object',
    stat: true
}, {
    values: function values(O) {
        return $values(O);
    }
});

},{"../internals/export":"2y5a0","../internals/object-to-array":"5q2bK"}],"2KaX2":[function(require,module,exports) {
var $ = require('../internals/export');
var parseFloatImplementation = require('../internals/number-parse-float');
// `parseFloat` method
// https://tc39.es/ecma262/#sec-parsefloat-string
$({
    global: true,
    forced: parseFloat != parseFloatImplementation
}, {
    parseFloat: parseFloatImplementation
});

},{"../internals/export":"2y5a0","../internals/number-parse-float":"sF1QD"}],"7rJy7":[function(require,module,exports) {
var $ = require('../internals/export');
var parseIntImplementation = require('../internals/number-parse-int');
// `parseInt` method
// https://tc39.es/ecma262/#sec-parseint-string-radix
$({
    global: true,
    forced: parseInt != parseIntImplementation
}, {
    parseInt: parseIntImplementation
});

},{"../internals/export":"2y5a0","../internals/number-parse-int":"3dA8C"}],"6WC14":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var IS_PURE = require('../internals/is-pure');
var global = require('../internals/global');
var getBuiltIn = require('../internals/get-built-in');
var NativePromise = require('../internals/native-promise-constructor');
var redefine = require('../internals/redefine');
var redefineAll = require('../internals/redefine-all');
var setPrototypeOf = require('../internals/object-set-prototype-of');
var setToStringTag = require('../internals/set-to-string-tag');
var setSpecies = require('../internals/set-species');
var isObject = require('../internals/is-object');
var aFunction = require('../internals/a-function');
var anInstance = require('../internals/an-instance');
var inspectSource = require('../internals/inspect-source');
var iterate = require('../internals/iterate');
var checkCorrectnessOfIteration = require('../internals/check-correctness-of-iteration');
var speciesConstructor = require('../internals/species-constructor');
var task = require('../internals/task').set;
var microtask = require('../internals/microtask');
var promiseResolve = require('../internals/promise-resolve');
var hostReportErrors = require('../internals/host-report-errors');
var newPromiseCapabilityModule = require('../internals/new-promise-capability');
var perform = require('../internals/perform');
var InternalStateModule = require('../internals/internal-state');
var isForced = require('../internals/is-forced');
var wellKnownSymbol = require('../internals/well-known-symbol');
var IS_BROWSER = require('../internals/engine-is-browser');
var IS_NODE = require('../internals/engine-is-node');
var V8_VERSION = require('../internals/engine-v8-version');
var SPECIES = wellKnownSymbol('species');
var PROMISE = 'Promise';
var getInternalState = InternalStateModule.get;
var setInternalState = InternalStateModule.set;
var getInternalPromiseState = InternalStateModule.getterFor(PROMISE);
var NativePromisePrototype = NativePromise && NativePromise.prototype;
var PromiseConstructor = NativePromise;
var PromiseConstructorPrototype = NativePromisePrototype;
var TypeError1 = global.TypeError;
var document = global.document;
var process = global.process;
var newPromiseCapability = newPromiseCapabilityModule.f;
var newGenericPromiseCapability = newPromiseCapability;
var DISPATCH_EVENT = !!(document && document.createEvent && global.dispatchEvent);
var NATIVE_REJECTION_EVENT = typeof PromiseRejectionEvent == 'function';
var UNHANDLED_REJECTION = 'unhandledrejection';
var REJECTION_HANDLED = 'rejectionhandled';
var PENDING = 0;
var FULFILLED = 1;
var REJECTED = 2;
var HANDLED = 1;
var UNHANDLED = 2;
var SUBCLASSING = false;
var Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;
var FORCED = isForced(PROMISE, function() {
    var GLOBAL_CORE_JS_PROMISE = inspectSource(PromiseConstructor) !== String(PromiseConstructor);
    // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
    // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
    // We can't detect it synchronously, so just check versions
    if (!GLOBAL_CORE_JS_PROMISE && V8_VERSION === 66) return true;
    // We need Promise#finally in the pure version for preventing prototype pollution
    if (IS_PURE && !PromiseConstructorPrototype['finally']) return true;
    // We can't use @@species feature detection in V8 since it causes
    // deoptimization and performance degradation
    // https://github.com/zloirock/core-js/issues/679
    if (V8_VERSION >= 51 && /native code/.test(PromiseConstructor)) return false;
    // Detect correctness of subclassing with @@species support
    var promise = new PromiseConstructor(function(resolve) {
        resolve(1);
    });
    var FakePromise = function(exec) {
        exec(function() {
        }, function() {
        });
    };
    var constructor = promise.constructor = {
    };
    constructor[SPECIES] = FakePromise;
    SUBCLASSING = promise.then(function() {
    }) instanceof FakePromise;
    if (!SUBCLASSING) return true;
    // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return !GLOBAL_CORE_JS_PROMISE && IS_BROWSER && !NATIVE_REJECTION_EVENT;
});
var INCORRECT_ITERATION = FORCED || !checkCorrectnessOfIteration(function(iterable) {
    PromiseConstructor.all(iterable)['catch'](function() {
    });
});
// helpers
var isThenable = function(it) {
    var then;
    return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var notify = function(state, isReject) {
    if (state.notified) return;
    state.notified = true;
    var chain = state.reactions;
    microtask(function() {
        var value = state.value;
        var ok = state.state == FULFILLED;
        var index = 0;
        // variable length - can't use forEach
        while(chain.length > index){
            var reaction = chain[index++];
            var handler = ok ? reaction.ok : reaction.fail;
            var resolve = reaction.resolve;
            var reject = reaction.reject;
            var domain = reaction.domain;
            var result, then, exited;
            try {
                if (handler) {
                    if (!ok) {
                        if (state.rejection === UNHANDLED) onHandleUnhandled(state);
                        state.rejection = HANDLED;
                    }
                    if (handler === true) result = value;
                    else {
                        if (domain) domain.enter();
                        result = handler(value); // can throw
                        if (domain) {
                            domain.exit();
                            exited = true;
                        }
                    }
                    if (result === reaction.promise) reject(TypeError1('Promise-chain cycle'));
                    else if (then = isThenable(result)) then.call(result, resolve, reject);
                    else resolve(result);
                } else reject(value);
            } catch (error) {
                if (domain && !exited) domain.exit();
                reject(error);
            }
        }
        state.reactions = [];
        state.notified = false;
        if (isReject && !state.rejection) onUnhandled(state);
    });
};
var dispatchEvent = function(name, promise, reason) {
    var event, handler;
    if (DISPATCH_EVENT) {
        event = document.createEvent('Event');
        event.promise = promise;
        event.reason = reason;
        event.initEvent(name, false, true);
        global.dispatchEvent(event);
    } else event = {
        promise: promise,
        reason: reason
    };
    if (!NATIVE_REJECTION_EVENT && (handler = global['on' + name])) handler(event);
    else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);
};
var onUnhandled = function(state) {
    task.call(global, function() {
        var promise = state.facade;
        var value = state.value;
        var IS_UNHANDLED = isUnhandled(state);
        var result;
        if (IS_UNHANDLED) {
            result = perform(function() {
                if (IS_NODE) process.emit('unhandledRejection', value, promise);
                else dispatchEvent(UNHANDLED_REJECTION, promise, value);
            });
            // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
            state.rejection = IS_NODE || isUnhandled(state) ? UNHANDLED : HANDLED;
            if (result.error) throw result.value;
        }
    });
};
var isUnhandled = function(state) {
    return state.rejection !== HANDLED && !state.parent;
};
var onHandleUnhandled = function(state) {
    task.call(global, function() {
        var promise = state.facade;
        if (IS_NODE) process.emit('rejectionHandled', promise);
        else dispatchEvent(REJECTION_HANDLED, promise, state.value);
    });
};
var bind = function(fn, state, unwrap) {
    return function(value) {
        fn(state, value, unwrap);
    };
};
var internalReject = function(state, value, unwrap) {
    if (state.done) return;
    state.done = true;
    if (unwrap) state = unwrap;
    state.value = value;
    state.state = REJECTED;
    notify(state, true);
};
var internalResolve = function(state, value, unwrap) {
    if (state.done) return;
    state.done = true;
    if (unwrap) state = unwrap;
    try {
        if (state.facade === value) throw TypeError1("Promise can't be resolved itself");
        var then = isThenable(value);
        if (then) microtask(function() {
            var wrapper = {
                done: false
            };
            try {
                then.call(value, bind(internalResolve, wrapper, state), bind(internalReject, wrapper, state));
            } catch (error) {
                internalReject(wrapper, error, state);
            }
        });
        else {
            state.value = value;
            state.state = FULFILLED;
            notify(state, false);
        }
    } catch (error) {
        internalReject({
            done: false
        }, error, state);
    }
};
// constructor polyfill
if (FORCED) {
    // 25.4.3.1 Promise(executor)
    PromiseConstructor = function Promise1(executor) {
        anInstance(this, PromiseConstructor, PROMISE);
        aFunction(executor);
        Internal.call(this);
        var state = getInternalState(this);
        try {
            executor(bind(internalResolve, state), bind(internalReject, state));
        } catch (error) {
            internalReject(state, error);
        }
    };
    PromiseConstructorPrototype = PromiseConstructor.prototype;
    // eslint-disable-next-line no-unused-vars -- required for `.length`
    Internal = function Promise2(executor) {
        setInternalState(this, {
            type: PROMISE,
            done: false,
            notified: false,
            parent: false,
            reactions: [],
            rejection: false,
            state: PENDING,
            value: undefined
        });
    };
    Internal.prototype = redefineAll(PromiseConstructorPrototype, {
        // `Promise.prototype.then` method
        // https://tc39.es/ecma262/#sec-promise.prototype.then
        then: function then(onFulfilled, onRejected) {
            var state = getInternalPromiseState(this);
            var reaction = newPromiseCapability(speciesConstructor(this, PromiseConstructor));
            reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
            reaction.fail = typeof onRejected == 'function' && onRejected;
            reaction.domain = IS_NODE ? process.domain : undefined;
            state.parent = true;
            state.reactions.push(reaction);
            if (state.state != PENDING) notify(state, false);
            return reaction.promise;
        },
        // `Promise.prototype.catch` method
        // https://tc39.es/ecma262/#sec-promise.prototype.catch
        'catch': function(onRejected) {
            return this.then(undefined, onRejected);
        }
    });
    OwnPromiseCapability = function() {
        var promise = new Internal();
        var state = getInternalState(promise);
        this.promise = promise;
        this.resolve = bind(internalResolve, state);
        this.reject = bind(internalReject, state);
    };
    newPromiseCapabilityModule.f = newPromiseCapability = function(C) {
        return C === PromiseConstructor || C === PromiseWrapper ? new OwnPromiseCapability(C) : newGenericPromiseCapability(C);
    };
    if (!IS_PURE && typeof NativePromise == 'function' && NativePromisePrototype !== Object.prototype) {
        nativeThen = NativePromisePrototype.then;
        if (!SUBCLASSING) {
            // make `Promise#then` return a polyfilled `Promise` for native promise-based APIs
            redefine(NativePromisePrototype, 'then', function then(onFulfilled, onRejected) {
                var that = this;
                return new PromiseConstructor(function(resolve, reject) {
                    nativeThen.call(that, resolve, reject);
                }).then(onFulfilled, onRejected);
            // https://github.com/zloirock/core-js/issues/640
            }, {
                unsafe: true
            });
            // makes sure that native promise-based APIs `Promise#catch` properly works with patched `Promise#then`
            redefine(NativePromisePrototype, 'catch', PromiseConstructorPrototype['catch'], {
                unsafe: true
            });
        }
        // make `.constructor === Promise` work for native promise-based APIs
        try {
            delete NativePromisePrototype.constructor;
        } catch (error) {
        }
        // make `instanceof Promise` work for native promise-based APIs
        if (setPrototypeOf) setPrototypeOf(NativePromisePrototype, PromiseConstructorPrototype);
    }
}
$({
    global: true,
    wrap: true,
    forced: FORCED
}, {
    Promise: PromiseConstructor
});
setToStringTag(PromiseConstructor, PROMISE, false, true);
setSpecies(PROMISE);
PromiseWrapper = getBuiltIn(PROMISE);
// statics
$({
    target: PROMISE,
    stat: true,
    forced: FORCED
}, {
    // `Promise.reject` method
    // https://tc39.es/ecma262/#sec-promise.reject
    reject: function reject(r) {
        var capability = newPromiseCapability(this);
        capability.reject.call(undefined, r);
        return capability.promise;
    }
});
$({
    target: PROMISE,
    stat: true,
    forced: IS_PURE || FORCED
}, {
    // `Promise.resolve` method
    // https://tc39.es/ecma262/#sec-promise.resolve
    resolve: function resolve(x) {
        return promiseResolve(IS_PURE && this === PromiseWrapper ? PromiseConstructor : this, x);
    }
});
$({
    target: PROMISE,
    stat: true,
    forced: INCORRECT_ITERATION
}, {
    // `Promise.all` method
    // https://tc39.es/ecma262/#sec-promise.all
    all: function all(iterable) {
        var C = this;
        var capability = newPromiseCapability(C);
        var resolve = capability.resolve;
        var reject = capability.reject;
        var result = perform(function() {
            var $promiseResolve = aFunction(C.resolve);
            var values = [];
            var counter = 0;
            var remaining = 1;
            iterate(iterable, function(promise) {
                var index = counter++;
                var alreadyCalled = false;
                values.push(undefined);
                remaining++;
                $promiseResolve.call(C, promise).then(function(value) {
                    if (alreadyCalled) return;
                    alreadyCalled = true;
                    values[index] = value;
                    (--remaining) || resolve(values);
                }, reject);
            });
            (--remaining) || resolve(values);
        });
        if (result.error) reject(result.value);
        return capability.promise;
    },
    // `Promise.race` method
    // https://tc39.es/ecma262/#sec-promise.race
    race: function race(iterable) {
        var C = this;
        var capability = newPromiseCapability(C);
        var reject = capability.reject;
        var result = perform(function() {
            var $promiseResolve = aFunction(C.resolve);
            iterate(iterable, function(promise) {
                $promiseResolve.call(C, promise).then(capability.resolve, reject);
            });
        });
        if (result.error) reject(result.value);
        return capability.promise;
    }
});

},{"../internals/export":"2y5a0","../internals/is-pure":"7KzvF","../internals/global":"4E9rT","../internals/get-built-in":"7zwJE","../internals/native-promise-constructor":"6ZMOr","../internals/redefine":"1SlpM","../internals/redefine-all":"2ZFGX","../internals/object-set-prototype-of":"5NYHm","../internals/set-to-string-tag":"73zwY","../internals/set-species":"6gzmW","../internals/is-object":"5j9oO","../internals/a-function":"14VVf","../internals/an-instance":"1BUHG","../internals/inspect-source":"7HHRG","../internals/iterate":"44GYt","../internals/check-correctness-of-iteration":"6HHGz","../internals/species-constructor":"8dIcf","../internals/task":"4jQeX","../internals/microtask":"6lvt7","../internals/promise-resolve":"4VUGq","../internals/host-report-errors":"52sAd","../internals/new-promise-capability":"lCwUn","../internals/perform":"5DdAW","../internals/internal-state":"32AmZ","../internals/is-forced":"EXRg1","../internals/well-known-symbol":"23Lpi","../internals/engine-is-browser":"1SvTl","../internals/engine-is-node":"7jmSb","../internals/engine-v8-version":"6jjMH"}],"6ZMOr":[function(require,module,exports) {
var global = require('../internals/global');
module.exports = global.Promise;

},{"../internals/global":"4E9rT"}],"4jQeX":[function(require,module,exports) {
var global = require('../internals/global');
var fails = require('../internals/fails');
var bind = require('../internals/function-bind-context');
var html = require('../internals/html');
var createElement = require('../internals/document-create-element');
var IS_IOS = require('../internals/engine-is-ios');
var IS_NODE = require('../internals/engine-is-node');
var location = global.location;
var set = global.setImmediate;
var clear = global.clearImmediate;
var process = global.process;
var MessageChannel1 = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {
};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;
var run = function(id) {
    // eslint-disable-next-line no-prototype-builtins -- safe
    if (queue.hasOwnProperty(id)) {
        var fn = queue[id];
        delete queue[id];
        fn();
    }
};
var runner = function(id) {
    return function() {
        run(id);
    };
};
var listener = function(event) {
    run(event.data);
};
var post = function(id) {
    // old engines have not location.origin
    global.postMessage(id + '', location.protocol + '//' + location.host);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!set || !clear) {
    set = function setImmediate(fn) {
        var args = [];
        var i = 1;
        while(arguments.length > i)args.push(arguments[i++]);
        queue[++counter] = function() {
            // eslint-disable-next-line no-new-func -- spec requirement
            (typeof fn == 'function' ? fn : Function(fn)).apply(undefined, args);
        };
        defer(counter);
        return counter;
    };
    clear = function clearImmediate(id) {
        delete queue[id];
    };
    // Node.js 0.8-
    if (IS_NODE) defer = function(id) {
        process.nextTick(runner(id));
    };
    else if (Dispatch && Dispatch.now) defer = function(id) {
        Dispatch.now(runner(id));
    };
    else if (MessageChannel1 && !IS_IOS) {
        channel = new MessageChannel1();
        port = channel.port2;
        channel.port1.onmessage = listener;
        defer = bind(port.postMessage, port, 1);
    // Browsers with postMessage, skip WebWorkers
    // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
    } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts && location && location.protocol !== 'file:' && !fails(post)) {
        defer = post;
        global.addEventListener('message', listener, false);
    // IE8-
    } else if (ONREADYSTATECHANGE in createElement('script')) defer = function(id) {
        html.appendChild(createElement('script'))[ONREADYSTATECHANGE] = function() {
            html.removeChild(this);
            run(id);
        };
    };
    else defer = function(id) {
        setTimeout(runner(id), 0);
    };
}
module.exports = {
    set: set,
    clear: clear
};

},{"../internals/global":"4E9rT","../internals/fails":"5dsdP","../internals/function-bind-context":"526sd","../internals/html":"5K6pp","../internals/document-create-element":"7rAVR","../internals/engine-is-ios":"55i5W","../internals/engine-is-node":"7jmSb"}],"55i5W":[function(require,module,exports) {
var userAgent = require('../internals/engine-user-agent');
module.exports = /(?:iphone|ipod|ipad).*applewebkit/i.test(userAgent);

},{"../internals/engine-user-agent":"69cCi"}],"6lvt7":[function(require,module,exports) {
var global = require('../internals/global');
var getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;
var macrotask = require('../internals/task').set;
var IS_IOS = require('../internals/engine-is-ios');
var IS_WEBOS_WEBKIT = require('../internals/engine-is-webos-webkit');
var IS_NODE = require('../internals/engine-is-node');
var MutationObserver1 = global.MutationObserver || global.WebKitMutationObserver;
var document = global.document;
var process = global.process;
var Promise1 = global.Promise;
// Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`
var queueMicrotaskDescriptor = getOwnPropertyDescriptor(global, 'queueMicrotask');
var queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;
var flush, head, last, notify, toggle, node, promise, then;
// modern engines have queueMicrotask method
if (!queueMicrotask) {
    flush = function() {
        var parent, fn;
        if (IS_NODE && (parent = process.domain)) parent.exit();
        while(head){
            fn = head.fn;
            head = head.next;
            try {
                fn();
            } catch (error) {
                if (head) notify();
                else last = undefined;
                throw error;
            }
        }
        last = undefined;
        if (parent) parent.enter();
    };
    // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339
    // also except WebOS Webkit https://github.com/zloirock/core-js/issues/898
    if (!IS_IOS && !IS_NODE && !IS_WEBOS_WEBKIT && MutationObserver1 && document) {
        toggle = true;
        node = document.createTextNode('');
        new MutationObserver1(flush).observe(node, {
            characterData: true
        });
        notify = function() {
            node.data = toggle = !toggle;
        };
    // environments with maybe non-completely correct, but existent Promise
    } else if (Promise1 && Promise1.resolve) {
        // Promise.resolve without an argument throws an error in LG WebOS 2
        promise = Promise1.resolve(undefined);
        // workaround of WebKit ~ iOS Safari 10.1 bug
        promise.constructor = Promise1;
        then = promise.then;
        notify = function() {
            then.call(promise, flush);
        };
    // Node.js without promises
    } else if (IS_NODE) notify = function() {
        process.nextTick(flush);
    };
    else notify = function() {
        // strange IE + webpack dev server bug - use .call(global)
        macrotask.call(global, flush);
    };
}
module.exports = queueMicrotask || function(fn) {
    var task = {
        fn: fn,
        next: undefined
    };
    if (last) last.next = task;
    if (!head) {
        head = task;
        notify();
    }
    last = task;
};

},{"../internals/global":"4E9rT","../internals/object-get-own-property-descriptor":"60pmx","../internals/task":"4jQeX","../internals/engine-is-ios":"55i5W","../internals/engine-is-webos-webkit":"3A3aN","../internals/engine-is-node":"7jmSb"}],"3A3aN":[function(require,module,exports) {
var userAgent = require('../internals/engine-user-agent');
module.exports = /web0s(?!.*chrome)/i.test(userAgent);

},{"../internals/engine-user-agent":"69cCi"}],"4VUGq":[function(require,module,exports) {
var anObject = require('../internals/an-object');
var isObject = require('../internals/is-object');
var newPromiseCapability = require('../internals/new-promise-capability');
module.exports = function(C, x) {
    anObject(C);
    if (isObject(x) && x.constructor === C) return x;
    var promiseCapability = newPromiseCapability.f(C);
    var resolve = promiseCapability.resolve;
    resolve(x);
    return promiseCapability.promise;
};

},{"../internals/an-object":"6as2W","../internals/is-object":"5j9oO","../internals/new-promise-capability":"lCwUn"}],"lCwUn":[function(require,module,exports) {
'use strict';
var aFunction = require('../internals/a-function');
var PromiseCapability = function(C) {
    var resolve, reject;
    this.promise = new C(function($$resolve, $$reject) {
        if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
        resolve = $$resolve;
        reject = $$reject;
    });
    this.resolve = aFunction(resolve);
    this.reject = aFunction(reject);
};
// `NewPromiseCapability` abstract operation
// https://tc39.es/ecma262/#sec-newpromisecapability
module.exports.f = function(C) {
    return new PromiseCapability(C);
};

},{"../internals/a-function":"14VVf"}],"52sAd":[function(require,module,exports) {
var global = require('../internals/global');
module.exports = function(a, b) {
    var console = global.console;
    if (console && console.error) arguments.length === 1 ? console.error(a) : console.error(a, b);
};

},{"../internals/global":"4E9rT"}],"5DdAW":[function(require,module,exports) {
module.exports = function(exec) {
    try {
        return {
            error: false,
            value: exec()
        };
    } catch (error) {
        return {
            error: true,
            value: error
        };
    }
};

},{}],"1SvTl":[function(require,module,exports) {
module.exports = typeof window == 'object';

},{}],"gdSgn":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var aFunction = require('../internals/a-function');
var newPromiseCapabilityModule = require('../internals/new-promise-capability');
var perform = require('../internals/perform');
var iterate = require('../internals/iterate');
// `Promise.allSettled` method
// https://tc39.es/ecma262/#sec-promise.allsettled
$({
    target: 'Promise',
    stat: true
}, {
    allSettled: function allSettled(iterable) {
        var C = this;
        var capability = newPromiseCapabilityModule.f(C);
        var resolve = capability.resolve;
        var reject = capability.reject;
        var result = perform(function() {
            var promiseResolve = aFunction(C.resolve);
            var values = [];
            var counter = 0;
            var remaining = 1;
            iterate(iterable, function(promise) {
                var index = counter++;
                var alreadyCalled = false;
                values.push(undefined);
                remaining++;
                promiseResolve.call(C, promise).then(function(value) {
                    if (alreadyCalled) return;
                    alreadyCalled = true;
                    values[index] = {
                        status: 'fulfilled',
                        value: value
                    };
                    (--remaining) || resolve(values);
                }, function(error) {
                    if (alreadyCalled) return;
                    alreadyCalled = true;
                    values[index] = {
                        status: 'rejected',
                        reason: error
                    };
                    (--remaining) || resolve(values);
                });
            });
            (--remaining) || resolve(values);
        });
        if (result.error) reject(result.value);
        return capability.promise;
    }
});

},{"../internals/export":"2y5a0","../internals/a-function":"14VVf","../internals/new-promise-capability":"lCwUn","../internals/perform":"5DdAW","../internals/iterate":"44GYt"}],"jaPw2":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var aFunction = require('../internals/a-function');
var getBuiltIn = require('../internals/get-built-in');
var newPromiseCapabilityModule = require('../internals/new-promise-capability');
var perform = require('../internals/perform');
var iterate = require('../internals/iterate');
var PROMISE_ANY_ERROR = 'No one promise resolved';
// `Promise.any` method
// https://tc39.es/ecma262/#sec-promise.any
$({
    target: 'Promise',
    stat: true
}, {
    any: function any(iterable) {
        var C = this;
        var capability = newPromiseCapabilityModule.f(C);
        var resolve = capability.resolve;
        var reject = capability.reject;
        var result = perform(function() {
            var promiseResolve = aFunction(C.resolve);
            var errors = [];
            var counter = 0;
            var remaining = 1;
            var alreadyResolved = false;
            iterate(iterable, function(promise) {
                var index = counter++;
                var alreadyRejected = false;
                errors.push(undefined);
                remaining++;
                promiseResolve.call(C, promise).then(function(value) {
                    if (alreadyRejected || alreadyResolved) return;
                    alreadyResolved = true;
                    resolve(value);
                }, function(error) {
                    if (alreadyRejected || alreadyResolved) return;
                    alreadyRejected = true;
                    errors[index] = error;
                    (--remaining) || reject(new (getBuiltIn('AggregateError'))(errors, PROMISE_ANY_ERROR));
                });
            });
            (--remaining) || reject(new (getBuiltIn('AggregateError'))(errors, PROMISE_ANY_ERROR));
        });
        if (result.error) reject(result.value);
        return capability.promise;
    }
});

},{"../internals/export":"2y5a0","../internals/a-function":"14VVf","../internals/get-built-in":"7zwJE","../internals/new-promise-capability":"lCwUn","../internals/perform":"5DdAW","../internals/iterate":"44GYt"}],"3lrNK":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var IS_PURE = require('../internals/is-pure');
var NativePromise = require('../internals/native-promise-constructor');
var fails = require('../internals/fails');
var getBuiltIn = require('../internals/get-built-in');
var speciesConstructor = require('../internals/species-constructor');
var promiseResolve = require('../internals/promise-resolve');
var redefine = require('../internals/redefine');
// Safari bug https://bugs.webkit.org/show_bug.cgi?id=200829
var NON_GENERIC = !!NativePromise && fails(function() {
    NativePromise.prototype['finally'].call({
        then: function() {
        }
    }, function() {
    });
});
// `Promise.prototype.finally` method
// https://tc39.es/ecma262/#sec-promise.prototype.finally
$({
    target: 'Promise',
    proto: true,
    real: true,
    forced: NON_GENERIC
}, {
    'finally': function(onFinally) {
        var C = speciesConstructor(this, getBuiltIn('Promise'));
        var isFunction = typeof onFinally == 'function';
        return this.then(isFunction ? function(x) {
            return promiseResolve(C, onFinally()).then(function() {
                return x;
            });
        } : onFinally, isFunction ? function(e) {
            return promiseResolve(C, onFinally()).then(function() {
                throw e;
            });
        } : onFinally);
    }
});
// makes sure that native promise-based APIs `Promise#finally` properly works with patched `Promise#then`
if (!IS_PURE && typeof NativePromise == 'function') {
    var method = getBuiltIn('Promise').prototype['finally'];
    if (NativePromise.prototype['finally'] !== method) redefine(NativePromise.prototype, 'finally', method, {
        unsafe: true
    });
}

},{"../internals/export":"2y5a0","../internals/is-pure":"7KzvF","../internals/native-promise-constructor":"6ZMOr","../internals/fails":"5dsdP","../internals/get-built-in":"7zwJE","../internals/species-constructor":"8dIcf","../internals/promise-resolve":"4VUGq","../internals/redefine":"1SlpM"}],"7ysYq":[function(require,module,exports) {
var $ = require('../internals/export');
var getBuiltIn = require('../internals/get-built-in');
var aFunction = require('../internals/a-function');
var anObject = require('../internals/an-object');
var fails = require('../internals/fails');
var nativeApply = getBuiltIn('Reflect', 'apply');
var functionApply = Function.apply;
// MS Edge argumentsList argument is optional
var OPTIONAL_ARGUMENTS_LIST = !fails(function() {
    nativeApply(function() {
    });
});
// `Reflect.apply` method
// https://tc39.es/ecma262/#sec-reflect.apply
$({
    target: 'Reflect',
    stat: true,
    forced: OPTIONAL_ARGUMENTS_LIST
}, {
    apply: function apply(target, thisArgument, argumentsList) {
        aFunction(target);
        anObject(argumentsList);
        return nativeApply ? nativeApply(target, thisArgument, argumentsList) : functionApply.call(target, thisArgument, argumentsList);
    }
});

},{"../internals/export":"2y5a0","../internals/get-built-in":"7zwJE","../internals/a-function":"14VVf","../internals/an-object":"6as2W","../internals/fails":"5dsdP"}],"3bNO2":[function(require,module,exports) {
var $ = require('../internals/export');
var getBuiltIn = require('../internals/get-built-in');
var aFunction = require('../internals/a-function');
var anObject = require('../internals/an-object');
var isObject = require('../internals/is-object');
var create = require('../internals/object-create');
var bind = require('../internals/function-bind');
var fails = require('../internals/fails');
var nativeConstruct = getBuiltIn('Reflect', 'construct');
// `Reflect.construct` method
// https://tc39.es/ecma262/#sec-reflect.construct
// MS Edge supports only 2 arguments and argumentsList argument is optional
// FF Nightly sets third argument as `new.target`, but does not create `this` from it
var NEW_TARGET_BUG = fails(function() {
    function F() {
    }
    return !(nativeConstruct(function() {
    }, [], F) instanceof F);
});
var ARGS_BUG = !fails(function() {
    nativeConstruct(function() {
    });
});
var FORCED = NEW_TARGET_BUG || ARGS_BUG;
$({
    target: 'Reflect',
    stat: true,
    forced: FORCED,
    sham: FORCED
}, {
    construct: function construct(Target, args/* , newTarget */ ) {
        aFunction(Target);
        anObject(args);
        var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
        if (ARGS_BUG && !NEW_TARGET_BUG) return nativeConstruct(Target, args, newTarget);
        if (Target == newTarget) {
            // w/o altered newTarget, optimization for 0-4 arguments
            switch(args.length){
                case 0:
                    return new Target();
                case 1:
                    return new Target(args[0]);
                case 2:
                    return new Target(args[0], args[1]);
                case 3:
                    return new Target(args[0], args[1], args[2]);
                case 4:
                    return new Target(args[0], args[1], args[2], args[3]);
            }
            // w/o altered newTarget, lot of arguments case
            var $args = [
                null
            ];
            $args.push.apply($args, args);
            return new (bind.apply(Target, $args))();
        }
        // with altered newTarget, not support built-in constructors
        var proto = newTarget.prototype;
        var instance = create(isObject(proto) ? proto : Object.prototype);
        var result = Function.apply.call(Target, instance, args);
        return isObject(result) ? result : instance;
    }
});

},{"../internals/export":"2y5a0","../internals/get-built-in":"7zwJE","../internals/a-function":"14VVf","../internals/an-object":"6as2W","../internals/is-object":"5j9oO","../internals/object-create":"2DlVm","../internals/function-bind":"6GXaq","../internals/fails":"5dsdP"}],"1IfhI":[function(require,module,exports) {
var $ = require('../internals/export');
var DESCRIPTORS = require('../internals/descriptors');
var anObject = require('../internals/an-object');
var toPrimitive = require('../internals/to-primitive');
var definePropertyModule = require('../internals/object-define-property');
var fails = require('../internals/fails');
// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
var ERROR_INSTEAD_OF_FALSE = fails(function() {
    // eslint-disable-next-line es/no-reflect -- required for testing
    Reflect.defineProperty(definePropertyModule.f({
    }, 1, {
        value: 1
    }), 1, {
        value: 2
    });
});
// `Reflect.defineProperty` method
// https://tc39.es/ecma262/#sec-reflect.defineproperty
$({
    target: 'Reflect',
    stat: true,
    forced: ERROR_INSTEAD_OF_FALSE,
    sham: !DESCRIPTORS
}, {
    defineProperty: function defineProperty(target, propertyKey, attributes) {
        anObject(target);
        var key = toPrimitive(propertyKey, true);
        anObject(attributes);
        try {
            definePropertyModule.f(target, key, attributes);
            return true;
        } catch (error) {
            return false;
        }
    }
});

},{"../internals/export":"2y5a0","../internals/descriptors":"AOzbW","../internals/an-object":"6as2W","../internals/to-primitive":"oTUf2","../internals/object-define-property":"1pkua","../internals/fails":"5dsdP"}],"3NHKK":[function(require,module,exports) {
var $ = require('../internals/export');
var anObject = require('../internals/an-object');
var getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;
// `Reflect.deleteProperty` method
// https://tc39.es/ecma262/#sec-reflect.deleteproperty
$({
    target: 'Reflect',
    stat: true
}, {
    deleteProperty: function deleteProperty(target, propertyKey) {
        var descriptor = getOwnPropertyDescriptor(anObject(target), propertyKey);
        return descriptor && !descriptor.configurable ? false : delete target[propertyKey];
    }
});

},{"../internals/export":"2y5a0","../internals/an-object":"6as2W","../internals/object-get-own-property-descriptor":"60pmx"}],"1V4nQ":[function(require,module,exports) {
var $ = require('../internals/export');
var isObject = require('../internals/is-object');
var anObject = require('../internals/an-object');
var has = require('../internals/has');
var getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');
var getPrototypeOf = require('../internals/object-get-prototype-of');
// `Reflect.get` method
// https://tc39.es/ecma262/#sec-reflect.get
function get(target, propertyKey/* , receiver */ ) {
    var receiver = arguments.length < 3 ? target : arguments[2];
    var descriptor, prototype;
    if (anObject(target) === receiver) return target[propertyKey];
    if (descriptor = getOwnPropertyDescriptorModule.f(target, propertyKey)) return has(descriptor, 'value') ? descriptor.value : descriptor.get === undefined ? undefined : descriptor.get.call(receiver);
    if (isObject(prototype = getPrototypeOf(target))) return get(prototype, propertyKey, receiver);
}
$({
    target: 'Reflect',
    stat: true
}, {
    get: get
});

},{"../internals/export":"2y5a0","../internals/is-object":"5j9oO","../internals/an-object":"6as2W","../internals/has":"1rjL0","../internals/object-get-own-property-descriptor":"60pmx","../internals/object-get-prototype-of":"2iPhc"}],"18tBD":[function(require,module,exports) {
var $ = require('../internals/export');
var DESCRIPTORS = require('../internals/descriptors');
var anObject = require('../internals/an-object');
var getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');
// `Reflect.getOwnPropertyDescriptor` method
// https://tc39.es/ecma262/#sec-reflect.getownpropertydescriptor
$({
    target: 'Reflect',
    stat: true,
    sham: !DESCRIPTORS
}, {
    getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
        return getOwnPropertyDescriptorModule.f(anObject(target), propertyKey);
    }
});

},{"../internals/export":"2y5a0","../internals/descriptors":"AOzbW","../internals/an-object":"6as2W","../internals/object-get-own-property-descriptor":"60pmx"}],"52EYg":[function(require,module,exports) {
var $ = require('../internals/export');
var anObject = require('../internals/an-object');
var objectGetPrototypeOf = require('../internals/object-get-prototype-of');
var CORRECT_PROTOTYPE_GETTER = require('../internals/correct-prototype-getter');
// `Reflect.getPrototypeOf` method
// https://tc39.es/ecma262/#sec-reflect.getprototypeof
$({
    target: 'Reflect',
    stat: true,
    sham: !CORRECT_PROTOTYPE_GETTER
}, {
    getPrototypeOf: function getPrototypeOf(target) {
        return objectGetPrototypeOf(anObject(target));
    }
});

},{"../internals/export":"2y5a0","../internals/an-object":"6as2W","../internals/object-get-prototype-of":"2iPhc","../internals/correct-prototype-getter":"7HY5D"}],"1OzkF":[function(require,module,exports) {
var $ = require('../internals/export');
// `Reflect.has` method
// https://tc39.es/ecma262/#sec-reflect.has
$({
    target: 'Reflect',
    stat: true
}, {
    has: function has(target, propertyKey) {
        return propertyKey in target;
    }
});

},{"../internals/export":"2y5a0"}],"5Y56A":[function(require,module,exports) {
var $ = require('../internals/export');
var anObject = require('../internals/an-object');
// eslint-disable-next-line es/no-object-isextensible -- safe
var objectIsExtensible = Object.isExtensible;
// `Reflect.isExtensible` method
// https://tc39.es/ecma262/#sec-reflect.isextensible
$({
    target: 'Reflect',
    stat: true
}, {
    isExtensible: function isExtensible(target) {
        anObject(target);
        return objectIsExtensible ? objectIsExtensible(target) : true;
    }
});

},{"../internals/export":"2y5a0","../internals/an-object":"6as2W"}],"5ewPQ":[function(require,module,exports) {
var $ = require('../internals/export');
var ownKeys = require('../internals/own-keys');
// `Reflect.ownKeys` method
// https://tc39.es/ecma262/#sec-reflect.ownkeys
$({
    target: 'Reflect',
    stat: true
}, {
    ownKeys: ownKeys
});

},{"../internals/export":"2y5a0","../internals/own-keys":"49Dcz"}],"2OaVM":[function(require,module,exports) {
var $ = require('../internals/export');
var getBuiltIn = require('../internals/get-built-in');
var anObject = require('../internals/an-object');
var FREEZING = require('../internals/freezing');
// `Reflect.preventExtensions` method
// https://tc39.es/ecma262/#sec-reflect.preventextensions
$({
    target: 'Reflect',
    stat: true,
    sham: !FREEZING
}, {
    preventExtensions: function preventExtensions(target) {
        anObject(target);
        try {
            var objectPreventExtensions = getBuiltIn('Object', 'preventExtensions');
            if (objectPreventExtensions) objectPreventExtensions(target);
            return true;
        } catch (error) {
            return false;
        }
    }
});

},{"../internals/export":"2y5a0","../internals/get-built-in":"7zwJE","../internals/an-object":"6as2W","../internals/freezing":"1g6Iy"}],"1SjfK":[function(require,module,exports) {
var $ = require('../internals/export');
var anObject = require('../internals/an-object');
var isObject = require('../internals/is-object');
var has = require('../internals/has');
var fails = require('../internals/fails');
var definePropertyModule = require('../internals/object-define-property');
var getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');
var getPrototypeOf = require('../internals/object-get-prototype-of');
var createPropertyDescriptor = require('../internals/create-property-descriptor');
// `Reflect.set` method
// https://tc39.es/ecma262/#sec-reflect.set
function set(target, propertyKey, V/* , receiver */ ) {
    var receiver = arguments.length < 4 ? target : arguments[3];
    var ownDescriptor = getOwnPropertyDescriptorModule.f(anObject(target), propertyKey);
    var existingDescriptor, prototype;
    if (!ownDescriptor) {
        if (isObject(prototype = getPrototypeOf(target))) return set(prototype, propertyKey, V, receiver);
        ownDescriptor = createPropertyDescriptor(0);
    }
    if (has(ownDescriptor, 'value')) {
        if (ownDescriptor.writable === false || !isObject(receiver)) return false;
        if (existingDescriptor = getOwnPropertyDescriptorModule.f(receiver, propertyKey)) {
            if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;
            existingDescriptor.value = V;
            definePropertyModule.f(receiver, propertyKey, existingDescriptor);
        } else definePropertyModule.f(receiver, propertyKey, createPropertyDescriptor(0, V));
        return true;
    }
    return ownDescriptor.set === undefined ? false : (ownDescriptor.set.call(receiver, V), true);
}
// MS Edge 17-18 Reflect.set allows setting the property to object
// with non-writable property on the prototype
var MS_EDGE_BUG = fails(function() {
    var Constructor = function() {
    };
    var object = definePropertyModule.f(new Constructor(), 'a', {
        configurable: true
    });
    // eslint-disable-next-line es/no-reflect -- required for testing
    return Reflect.set(Constructor.prototype, 'a', 1, object) !== false;
});
$({
    target: 'Reflect',
    stat: true,
    forced: MS_EDGE_BUG
}, {
    set: set
});

},{"../internals/export":"2y5a0","../internals/an-object":"6as2W","../internals/is-object":"5j9oO","../internals/has":"1rjL0","../internals/fails":"5dsdP","../internals/object-define-property":"1pkua","../internals/object-get-own-property-descriptor":"60pmx","../internals/object-get-prototype-of":"2iPhc","../internals/create-property-descriptor":"14mKL"}],"3n3VA":[function(require,module,exports) {
var $ = require('../internals/export');
var anObject = require('../internals/an-object');
var aPossiblePrototype = require('../internals/a-possible-prototype');
var objectSetPrototypeOf = require('../internals/object-set-prototype-of');
// `Reflect.setPrototypeOf` method
// https://tc39.es/ecma262/#sec-reflect.setprototypeof
if (objectSetPrototypeOf) $({
    target: 'Reflect',
    stat: true
}, {
    setPrototypeOf: function setPrototypeOf(target, proto) {
        anObject(target);
        aPossiblePrototype(proto);
        try {
            objectSetPrototypeOf(target, proto);
            return true;
        } catch (error) {
            return false;
        }
    }
});

},{"../internals/export":"2y5a0","../internals/an-object":"6as2W","../internals/a-possible-prototype":"6v0Ll","../internals/object-set-prototype-of":"5NYHm"}],"7hUvf":[function(require,module,exports) {
var $ = require('../internals/export');
var global = require('../internals/global');
var setToStringTag = require('../internals/set-to-string-tag');
$({
    global: true
}, {
    Reflect: {
    }
});
// Reflect[@@toStringTag] property
// https://tc39.es/ecma262/#sec-reflect-@@tostringtag
setToStringTag(global.Reflect, 'Reflect', true);

},{"../internals/export":"2y5a0","../internals/global":"4E9rT","../internals/set-to-string-tag":"73zwY"}],"4VaPP":[function(require,module,exports) {
var DESCRIPTORS = require('../internals/descriptors');
var global = require('../internals/global');
var isForced = require('../internals/is-forced');
var inheritIfRequired = require('../internals/inherit-if-required');
var defineProperty = require('../internals/object-define-property').f;
var getOwnPropertyNames = require('../internals/object-get-own-property-names').f;
var isRegExp = require('../internals/is-regexp');
var getFlags = require('../internals/regexp-flags');
var stickyHelpers = require('../internals/regexp-sticky-helpers');
var redefine = require('../internals/redefine');
var fails = require('../internals/fails');
var enforceInternalState = require('../internals/internal-state').enforce;
var setSpecies = require('../internals/set-species');
var wellKnownSymbol = require('../internals/well-known-symbol');
var MATCH = wellKnownSymbol('match');
var NativeRegExp = global.RegExp;
var RegExpPrototype = NativeRegExp.prototype;
var re1 = /a/g;
var re2 = /a/g;
// "new" should create a new object, old webkit bug
var CORRECT_NEW = new NativeRegExp(re1) !== re1;
var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y;
var FORCED = DESCRIPTORS && isForced('RegExp', !CORRECT_NEW || UNSUPPORTED_Y || fails(function() {
    re2[MATCH] = false;
    // RegExp constructor can alter flags and IsRegExp works correct with @@match
    return NativeRegExp(re1) != re1 || NativeRegExp(re2) == re2 || NativeRegExp(re1, 'i') != '/a/i';
}));
// `RegExp` constructor
// https://tc39.es/ecma262/#sec-regexp-constructor
if (FORCED) {
    var RegExpWrapper = function RegExp1(pattern, flags) {
        var thisIsRegExp = this instanceof RegExpWrapper;
        var patternIsRegExp = isRegExp(pattern);
        var flagsAreUndefined = flags === undefined;
        var sticky;
        if (!thisIsRegExp && patternIsRegExp && pattern.constructor === RegExpWrapper && flagsAreUndefined) return pattern;
        if (CORRECT_NEW) {
            if (patternIsRegExp && !flagsAreUndefined) pattern = pattern.source;
        } else if (pattern instanceof RegExpWrapper) {
            if (flagsAreUndefined) flags = getFlags.call(pattern);
            pattern = pattern.source;
        }
        if (UNSUPPORTED_Y) {
            sticky = !!flags && flags.indexOf('y') > -1;
            if (sticky) flags = flags.replace(/y/g, '');
        }
        var result = inheritIfRequired(CORRECT_NEW ? new NativeRegExp(pattern, flags) : NativeRegExp(pattern, flags), thisIsRegExp ? this : RegExpPrototype, RegExpWrapper);
        if (UNSUPPORTED_Y && sticky) {
            var state = enforceInternalState(result);
            state.sticky = true;
        }
        return result;
    };
    var proxy = function(key) {
        key in RegExpWrapper || defineProperty(RegExpWrapper, key, {
            configurable: true,
            get: function() {
                return NativeRegExp[key];
            },
            set: function(it) {
                NativeRegExp[key] = it;
            }
        });
    };
    var keys = getOwnPropertyNames(NativeRegExp);
    var index = 0;
    while(keys.length > index)proxy(keys[index++]);
    RegExpPrototype.constructor = RegExpWrapper;
    RegExpWrapper.prototype = RegExpPrototype;
    redefine(global, 'RegExp', RegExpWrapper);
}
// https://tc39.es/ecma262/#sec-get-regexp-@@species
setSpecies('RegExp');

},{"../internals/descriptors":"AOzbW","../internals/global":"4E9rT","../internals/is-forced":"EXRg1","../internals/inherit-if-required":"7m35x","../internals/object-define-property":"1pkua","../internals/object-get-own-property-names":"38Utf","../internals/is-regexp":"2nVJd","../internals/regexp-flags":"5BAvH","../internals/regexp-sticky-helpers":"76utt","../internals/redefine":"1SlpM","../internals/fails":"5dsdP","../internals/internal-state":"32AmZ","../internals/set-species":"6gzmW","../internals/well-known-symbol":"23Lpi"}],"2nVJd":[function(require,module,exports) {
var isObject = require('../internals/is-object');
var classof = require('../internals/classof-raw');
var wellKnownSymbol = require('../internals/well-known-symbol');
var MATCH = wellKnownSymbol('match');
// `IsRegExp` abstract operation
// https://tc39.es/ecma262/#sec-isregexp
module.exports = function(it) {
    var isRegExp;
    return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classof(it) == 'RegExp');
};

},{"../internals/is-object":"5j9oO","../internals/classof-raw":"2KP6c","../internals/well-known-symbol":"23Lpi"}],"5BAvH":[function(require,module,exports) {
'use strict';
var anObject = require('../internals/an-object');
// `RegExp.prototype.flags` getter implementation
// https://tc39.es/ecma262/#sec-get-regexp.prototype.flags
module.exports = function() {
    var that = anObject(this);
    var result = '';
    if (that.global) result += 'g';
    if (that.ignoreCase) result += 'i';
    if (that.multiline) result += 'm';
    if (that.dotAll) result += 's';
    if (that.unicode) result += 'u';
    if (that.sticky) result += 'y';
    return result;
};

},{"../internals/an-object":"6as2W"}],"76utt":[function(require,module,exports) {
'use strict';
var fails = require('./fails');
// babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError,
// so we use an intermediate function.
function RE(s, f) {
    return RegExp(s, f);
}
exports.UNSUPPORTED_Y = fails(function() {
    // babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError
    var re = RE('a', 'y');
    re.lastIndex = 2;
    return re.exec('abcd') != null;
});
exports.BROKEN_CARET = fails(function() {
    // https://bugzilla.mozilla.org/show_bug.cgi?id=773687
    var re = RE('^r', 'gy');
    re.lastIndex = 2;
    return re.exec('str') != null;
});

},{"./fails":"5dsdP"}],"2uKSw":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var exec = require('../internals/regexp-exec');
// `RegExp.prototype.exec` method
// https://tc39.es/ecma262/#sec-regexp.prototype.exec
$({
    target: 'RegExp',
    proto: true,
    forced: /./.exec !== exec
}, {
    exec: exec
});

},{"../internals/export":"2y5a0","../internals/regexp-exec":"6siMl"}],"6siMl":[function(require,module,exports) {
'use strict';
/* eslint-disable regexp/no-assertion-capturing-group, regexp/no-empty-group, regexp/no-lazy-ends -- testing */ /* eslint-disable regexp/no-useless-quantifier -- testing */ var regexpFlags = require('./regexp-flags');
var stickyHelpers = require('./regexp-sticky-helpers');
var shared = require('./shared');
var nativeExec = RegExp.prototype.exec;
var nativeReplace = shared('native-string-replace', String.prototype.replace);
var patchedExec = nativeExec;
var UPDATES_LAST_INDEX_WRONG = function() {
    var re1 = /a/;
    var re2 = /b*/g;
    nativeExec.call(re1, 'a');
    nativeExec.call(re2, 'a');
    return re1.lastIndex !== 0 || re2.lastIndex !== 0;
}();
var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y || stickyHelpers.BROKEN_CARET;
// nonparticipating capturing group, copied from es5-shim's String#split patch.
var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;
var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y;
if (PATCH) patchedExec = function exec(str) {
    var re = this;
    var lastIndex, reCopy, match, i;
    var sticky = UNSUPPORTED_Y && re.sticky;
    var flags = regexpFlags.call(re);
    var source = re.source;
    var charsAdded = 0;
    var strCopy = str;
    if (sticky) {
        flags = flags.replace('y', '');
        if (flags.indexOf('g') === -1) flags += 'g';
        strCopy = String(str).slice(re.lastIndex);
        // Support anchored sticky behavior.
        if (re.lastIndex > 0 && (!re.multiline || re.multiline && str[re.lastIndex - 1] !== '\n')) {
            source = '(?: ' + source + ')';
            strCopy = ' ' + strCopy;
            charsAdded++;
        }
        // ^(? + rx + ) is needed, in combination with some str slicing, to
        // simulate the 'y' flag.
        reCopy = new RegExp('^(?:' + source + ')', flags);
    }
    if (NPCG_INCLUDED) reCopy = new RegExp('^' + source + '$(?!\\s)', flags);
    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;
    match = nativeExec.call(sticky ? reCopy : re, strCopy);
    if (sticky) {
        if (match) {
            match.input = match.input.slice(charsAdded);
            match[0] = match[0].slice(charsAdded);
            match.index = re.lastIndex;
            re.lastIndex += match[0].length;
        } else re.lastIndex = 0;
    } else if (UPDATES_LAST_INDEX_WRONG && match) re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
    if (NPCG_INCLUDED && match && match.length > 1) // Fix browsers whose `exec` methods don't consistently return `undefined`
    // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
    nativeReplace.call(match[0], reCopy, function() {
        for(i = 1; i < arguments.length - 2; i++)if (arguments[i] === undefined) match[i] = undefined;
    });
    return match;
};
module.exports = patchedExec;

},{"./regexp-flags":"5BAvH","./regexp-sticky-helpers":"76utt","./shared":"4CGOh"}],"7s61Z":[function(require,module,exports) {
var DESCRIPTORS = require('../internals/descriptors');
var objectDefinePropertyModule = require('../internals/object-define-property');
var regExpFlags = require('../internals/regexp-flags');
var UNSUPPORTED_Y = require('../internals/regexp-sticky-helpers').UNSUPPORTED_Y;
// `RegExp.prototype.flags` getter
// https://tc39.es/ecma262/#sec-get-regexp.prototype.flags
// eslint-disable-next-line es/no-regexp-prototype-flags -- required for testing
if (DESCRIPTORS && (/./g.flags != 'g' || UNSUPPORTED_Y)) objectDefinePropertyModule.f(RegExp.prototype, 'flags', {
    configurable: true,
    get: regExpFlags
});

},{"../internals/descriptors":"AOzbW","../internals/object-define-property":"1pkua","../internals/regexp-flags":"5BAvH","../internals/regexp-sticky-helpers":"76utt"}],"1lCgY":[function(require,module,exports) {
var DESCRIPTORS = require('../internals/descriptors');
var UNSUPPORTED_Y = require('../internals/regexp-sticky-helpers').UNSUPPORTED_Y;
var defineProperty = require('../internals/object-define-property').f;
var getInternalState = require('../internals/internal-state').get;
var RegExpPrototype = RegExp.prototype;
// `RegExp.prototype.sticky` getter
// https://tc39.es/ecma262/#sec-get-regexp.prototype.sticky
if (DESCRIPTORS && UNSUPPORTED_Y) defineProperty(RegExp.prototype, 'sticky', {
    configurable: true,
    get: function() {
        if (this === RegExpPrototype) return undefined;
        // We can't use InternalStateModule.getterFor because
        // we don't add metadata for regexps created by a literal.
        if (this instanceof RegExp) return !!getInternalState(this).sticky;
        throw TypeError('Incompatible receiver, RegExp required');
    }
});

},{"../internals/descriptors":"AOzbW","../internals/regexp-sticky-helpers":"76utt","../internals/object-define-property":"1pkua","../internals/internal-state":"32AmZ"}],"LICFT":[function(require,module,exports) {
'use strict';
// TODO: Remove from `core-js@4` since it's moved to entry points
require('../modules/es.regexp.exec');
var $ = require('../internals/export');
var isObject = require('../internals/is-object');
var DELEGATES_TO_EXEC = function() {
    var execCalled = false;
    var re = /[ac]/;
    re.exec = function() {
        execCalled = true;
        return /./.exec.apply(this, arguments);
    };
    return re.test('abc') === true && execCalled;
}();
var nativeTest = /./.test;
// `RegExp.prototype.test` method
// https://tc39.es/ecma262/#sec-regexp.prototype.test
$({
    target: 'RegExp',
    proto: true,
    forced: !DELEGATES_TO_EXEC
}, {
    test: function(str) {
        if (typeof this.exec !== 'function') return nativeTest.call(this, str);
        var result = this.exec(str);
        if (result !== null && !isObject(result)) throw new Error('RegExp exec method returned something other than an Object or null');
        return !!result;
    }
});

},{"../modules/es.regexp.exec":"2uKSw","../internals/export":"2y5a0","../internals/is-object":"5j9oO"}],"4baFV":[function(require,module,exports) {
'use strict';
var redefine = require('../internals/redefine');
var anObject = require('../internals/an-object');
var fails = require('../internals/fails');
var flags = require('../internals/regexp-flags');
var TO_STRING = 'toString';
var RegExpPrototype = RegExp.prototype;
var nativeToString = RegExpPrototype[TO_STRING];
var NOT_GENERIC = fails(function() {
    return nativeToString.call({
        source: 'a',
        flags: 'b'
    }) != '/a/b';
});
// FF44- RegExp#toString has a wrong name
var INCORRECT_NAME = nativeToString.name != TO_STRING;
// `RegExp.prototype.toString` method
// https://tc39.es/ecma262/#sec-regexp.prototype.tostring
if (NOT_GENERIC || INCORRECT_NAME) redefine(RegExp.prototype, TO_STRING, function toString() {
    var R = anObject(this);
    var p = String(R.source);
    var rf = R.flags;
    var f = String(rf === undefined && R instanceof RegExp && !('flags' in RegExpPrototype) ? flags.call(R) : rf);
    return '/' + p + '/' + f;
}, {
    unsafe: true
});

},{"../internals/redefine":"1SlpM","../internals/an-object":"6as2W","../internals/fails":"5dsdP","../internals/regexp-flags":"5BAvH"}],"7hqwG":[function(require,module,exports) {
'use strict';
var collection = require('../internals/collection');
var collectionStrong = require('../internals/collection-strong');
// `Set` constructor
// https://tc39.es/ecma262/#sec-set-objects
module.exports = collection('Set', function(init) {
    return function Set1() {
        return init(this, arguments.length ? arguments[0] : undefined);
    };
}, collectionStrong);

},{"../internals/collection":"1bXcJ","../internals/collection-strong":"x6dC6"}],"2dy1y":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var codeAt = require('../internals/string-multibyte').codeAt;
// `String.prototype.codePointAt` method
// https://tc39.es/ecma262/#sec-string.prototype.codepointat
$({
    target: 'String',
    proto: true
}, {
    codePointAt: function codePointAt(pos) {
        return codeAt(this, pos);
    }
});

},{"../internals/export":"2y5a0","../internals/string-multibyte":"7dgpm"}],"7dgpm":[function(require,module,exports) {
var toInteger = require('../internals/to-integer');
var requireObjectCoercible = require('../internals/require-object-coercible');
// `String.prototype.{ codePointAt, at }` methods implementation
var createMethod = function(CONVERT_TO_STRING) {
    return function($this, pos) {
        var S = String(requireObjectCoercible($this));
        var position = toInteger(pos);
        var size = S.length;
        var first, second;
        if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
        first = S.charCodeAt(position);
        return first < 55296 || first > 56319 || position + 1 === size || (second = S.charCodeAt(position + 1)) < 56320 || second > 57343 ? CONVERT_TO_STRING ? S.charAt(position) : first : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 55296 << 10) + (second - 56320) + 65536;
    };
};
module.exports = {
    // `String.prototype.codePointAt` method
    // https://tc39.es/ecma262/#sec-string.prototype.codepointat
    codeAt: createMethod(false),
    // `String.prototype.at` method
    // https://github.com/mathiasbynens/String.prototype.at
    charAt: createMethod(true)
};

},{"../internals/to-integer":"6y5fX","../internals/require-object-coercible":"7J9xg"}],"2TBhV":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;
var toLength = require('../internals/to-length');
var notARegExp = require('../internals/not-a-regexp');
var requireObjectCoercible = require('../internals/require-object-coercible');
var correctIsRegExpLogic = require('../internals/correct-is-regexp-logic');
var IS_PURE = require('../internals/is-pure');
// eslint-disable-next-line es/no-string-prototype-endswith -- safe
var $endsWith = ''.endsWith;
var min = Math.min;
var CORRECT_IS_REGEXP_LOGIC = correctIsRegExpLogic('endsWith');
// https://github.com/zloirock/core-js/pull/702
var MDN_POLYFILL_BUG = !IS_PURE && !CORRECT_IS_REGEXP_LOGIC && !!function() {
    var descriptor = getOwnPropertyDescriptor(String.prototype, 'endsWith');
    return descriptor && !descriptor.writable;
}();
// `String.prototype.endsWith` method
// https://tc39.es/ecma262/#sec-string.prototype.endswith
$({
    target: 'String',
    proto: true,
    forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC
}, {
    endsWith: function endsWith(searchString/* , endPosition = @length */ ) {
        var that = String(requireObjectCoercible(this));
        notARegExp(searchString);
        var endPosition = arguments.length > 1 ? arguments[1] : undefined;
        var len = toLength(that.length);
        var end = endPosition === undefined ? len : min(toLength(endPosition), len);
        var search = String(searchString);
        return $endsWith ? $endsWith.call(that, search, end) : that.slice(end - search.length, end) === search;
    }
});

},{"../internals/export":"2y5a0","../internals/object-get-own-property-descriptor":"60pmx","../internals/to-length":"7tq8w","../internals/not-a-regexp":"3oYNf","../internals/require-object-coercible":"7J9xg","../internals/correct-is-regexp-logic":"3NXfe","../internals/is-pure":"7KzvF"}],"3oYNf":[function(require,module,exports) {
var isRegExp = require('../internals/is-regexp');
module.exports = function(it) {
    if (isRegExp(it)) throw TypeError("The method doesn't accept regular expressions");
    return it;
};

},{"../internals/is-regexp":"2nVJd"}],"3NXfe":[function(require,module,exports) {
var wellKnownSymbol = require('../internals/well-known-symbol');
var MATCH = wellKnownSymbol('match');
module.exports = function(METHOD_NAME) {
    var regexp = /./;
    try {
        '/./'[METHOD_NAME](regexp);
    } catch (error1) {
        try {
            regexp[MATCH] = false;
            return '/./'[METHOD_NAME](regexp);
        } catch (error2) {
        }
    }
    return false;
};

},{"../internals/well-known-symbol":"23Lpi"}],"5xq7e":[function(require,module,exports) {
var $ = require('../internals/export');
var toAbsoluteIndex = require('../internals/to-absolute-index');
var fromCharCode = String.fromCharCode;
// eslint-disable-next-line es/no-string-fromcodepoint -- required for testing
var $fromCodePoint = String.fromCodePoint;
// length should be 1, old FF problem
var INCORRECT_LENGTH = !!$fromCodePoint && $fromCodePoint.length != 1;
// `String.fromCodePoint` method
// https://tc39.es/ecma262/#sec-string.fromcodepoint
$({
    target: 'String',
    stat: true,
    forced: INCORRECT_LENGTH
}, {
    // eslint-disable-next-line no-unused-vars -- required for `.length`
    fromCodePoint: function fromCodePoint(x) {
        var elements = [];
        var length = arguments.length;
        var i = 0;
        var code;
        while(length > i){
            code = +arguments[i++];
            if (toAbsoluteIndex(code, 1114111) !== code) throw RangeError(code + ' is not a valid code point');
            elements.push(code < 65536 ? fromCharCode(code) : fromCharCode(((code -= 65536) >> 10) + 55296, code % 1024 + 56320));
        }
        return elements.join('');
    }
});

},{"../internals/export":"2y5a0","../internals/to-absolute-index":"5D7Fy"}],"7GNu3":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var notARegExp = require('../internals/not-a-regexp');
var requireObjectCoercible = require('../internals/require-object-coercible');
var correctIsRegExpLogic = require('../internals/correct-is-regexp-logic');
// `String.prototype.includes` method
// https://tc39.es/ecma262/#sec-string.prototype.includes
$({
    target: 'String',
    proto: true,
    forced: !correctIsRegExpLogic('includes')
}, {
    includes: function includes(searchString/* , position = 0 */ ) {
        return !!~String(requireObjectCoercible(this)).indexOf(notARegExp(searchString), arguments.length > 1 ? arguments[1] : undefined);
    }
});

},{"../internals/export":"2y5a0","../internals/not-a-regexp":"3oYNf","../internals/require-object-coercible":"7J9xg","../internals/correct-is-regexp-logic":"3NXfe"}],"5caim":[function(require,module,exports) {
'use strict';
var charAt = require('../internals/string-multibyte').charAt;
var InternalStateModule = require('../internals/internal-state');
var defineIterator = require('../internals/define-iterator');
var STRING_ITERATOR = 'String Iterator';
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);
// `String.prototype[@@iterator]` method
// https://tc39.es/ecma262/#sec-string.prototype-@@iterator
defineIterator(String, 'String', function(iterated) {
    setInternalState(this, {
        type: STRING_ITERATOR,
        string: String(iterated),
        index: 0
    });
// `%StringIteratorPrototype%.next` method
// https://tc39.es/ecma262/#sec-%stringiteratorprototype%.next
}, function next() {
    var state = getInternalState(this);
    var string = state.string;
    var index = state.index;
    var point;
    if (index >= string.length) return {
        value: undefined,
        done: true
    };
    point = charAt(string, index);
    state.index += point.length;
    return {
        value: point,
        done: false
    };
});

},{"../internals/string-multibyte":"7dgpm","../internals/internal-state":"32AmZ","../internals/define-iterator":"6HqjR"}],"4EJ81":[function(require,module,exports) {
'use strict';
var fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');
var anObject = require('../internals/an-object');
var toLength = require('../internals/to-length');
var requireObjectCoercible = require('../internals/require-object-coercible');
var advanceStringIndex = require('../internals/advance-string-index');
var regExpExec = require('../internals/regexp-exec-abstract');
// @@match logic
fixRegExpWellKnownSymbolLogic('match', 1, function(MATCH, nativeMatch, maybeCallNative) {
    return [
        // `String.prototype.match` method
        // https://tc39.es/ecma262/#sec-string.prototype.match
        function match(regexp) {
            var O = requireObjectCoercible(this);
            var matcher = regexp == undefined ? undefined : regexp[MATCH];
            return matcher !== undefined ? matcher.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
        },
        // `RegExp.prototype[@@match]` method
        // https://tc39.es/ecma262/#sec-regexp.prototype-@@match
        function(regexp) {
            var res = maybeCallNative(nativeMatch, regexp, this);
            if (res.done) return res.value;
            var rx = anObject(regexp);
            var S = String(this);
            if (!rx.global) return regExpExec(rx, S);
            var fullUnicode = rx.unicode;
            rx.lastIndex = 0;
            var A = [];
            var n = 0;
            var result;
            while((result = regExpExec(rx, S)) !== null){
                var matchStr = String(result[0]);
                A[n] = matchStr;
                if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
                n++;
            }
            return n === 0 ? null : A;
        }
    ];
});

},{"../internals/fix-regexp-well-known-symbol-logic":"5ONK3","../internals/an-object":"6as2W","../internals/to-length":"7tq8w","../internals/require-object-coercible":"7J9xg","../internals/advance-string-index":"4v3in","../internals/regexp-exec-abstract":"2wOwy"}],"5ONK3":[function(require,module,exports) {
'use strict';
// TODO: Remove from `core-js@4` since it's moved to entry points
require('../modules/es.regexp.exec');
var redefine = require('../internals/redefine');
var regexpExec = require('../internals/regexp-exec');
var fails = require('../internals/fails');
var wellKnownSymbol = require('../internals/well-known-symbol');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var SPECIES = wellKnownSymbol('species');
var RegExpPrototype = RegExp.prototype;
var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function() {
    // #replace needs built-in support for named groups.
    // #match works fine because it just return the exec results, even if it has
    // a "grops" property.
    var re = /./;
    re.exec = function() {
        var result = [];
        result.groups = {
            a: '7'
        };
        return result;
    };
    return ''.replace(re, '$<a>') !== '7';
});
// IE <= 11 replaces $0 with the whole match, as if it was $&
// https://stackoverflow.com/questions/6024666/getting-ie-to-replace-a-regex-with-the-literal-string-0
var REPLACE_KEEPS_$0 = function() {
    // eslint-disable-next-line regexp/prefer-escape-replacement-dollar-char -- required for testing
    return 'a'.replace(/./, '$0') === '$0';
}();
var REPLACE = wellKnownSymbol('replace');
// Safari <= 13.0.3(?) substitutes nth capture where n>m with an empty string
var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = function() {
    if (/./[REPLACE]) return /./[REPLACE]('a', '$0') === '';
    return false;
}();
// Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
// Weex JS has frozen built-in prototypes, so use try / catch wrapper
var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function() {
    // eslint-disable-next-line regexp/no-empty-group -- required for testing
    var re = /(?:)/;
    var originalExec = re.exec;
    re.exec = function() {
        return originalExec.apply(this, arguments);
    };
    var result = 'ab'.split(re);
    return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';
});
module.exports = function(KEY, length, exec, sham) {
    var SYMBOL = wellKnownSymbol(KEY);
    var DELEGATES_TO_SYMBOL = !fails(function() {
        // String methods call symbol-named RegEp methods
        var O = {
        };
        O[SYMBOL] = function() {
            return 7;
        };
        return ''[KEY](O) != 7;
    });
    var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function() {
        // Symbol-named RegExp methods call .exec
        var execCalled = false;
        var re = /a/;
        if (KEY === 'split') {
            // We can't use real regex here since it causes deoptimization
            // and serious performance degradation in V8
            // https://github.com/zloirock/core-js/issues/306
            re = {
            };
            // RegExp[@@split] doesn't call the regex's exec method, but first creates
            // a new one. We need to return the patched regex when creating the new one.
            re.constructor = {
            };
            re.constructor[SPECIES] = function() {
                return re;
            };
            re.flags = '';
            re[SYMBOL] = /./[SYMBOL];
        }
        re.exec = function() {
            execCalled = true;
            return null;
        };
        re[SYMBOL]('');
        return !execCalled;
    });
    if (!DELEGATES_TO_SYMBOL || !DELEGATES_TO_EXEC || KEY === 'replace' && !(REPLACE_SUPPORTS_NAMED_GROUPS && REPLACE_KEEPS_$0 && !REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE) || KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC) {
        var nativeRegExpMethod = /./[SYMBOL];
        var methods = exec(SYMBOL, ''[KEY], function(nativeMethod, regexp, str, arg2, forceStringMethod) {
            var $exec = regexp.exec;
            if ($exec === regexpExec || $exec === RegExpPrototype.exec) {
                if (DELEGATES_TO_SYMBOL && !forceStringMethod) // The native String method already delegates to @@method (this
                // polyfilled function), leasing to infinite recursion.
                // We avoid it by directly calling the native @@method method.
                return {
                    done: true,
                    value: nativeRegExpMethod.call(regexp, str, arg2)
                };
                return {
                    done: true,
                    value: nativeMethod.call(str, regexp, arg2)
                };
            }
            return {
                done: false
            };
        }, {
            REPLACE_KEEPS_$0: REPLACE_KEEPS_$0,
            REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE: REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE
        });
        var stringMethod = methods[0];
        var regexMethod = methods[1];
        redefine(String.prototype, KEY, stringMethod);
        redefine(RegExpPrototype, SYMBOL, length == 2 ? function(string, arg) {
            return regexMethod.call(string, this, arg);
        } : function(string) {
            return regexMethod.call(string, this);
        });
    }
    if (sham) createNonEnumerableProperty(RegExpPrototype[SYMBOL], 'sham', true);
};

},{"../modules/es.regexp.exec":"2uKSw","../internals/redefine":"1SlpM","../internals/regexp-exec":"6siMl","../internals/fails":"5dsdP","../internals/well-known-symbol":"23Lpi","../internals/create-non-enumerable-property":"7tRkq"}],"4v3in":[function(require,module,exports) {
'use strict';
var charAt = require('../internals/string-multibyte').charAt;
// `AdvanceStringIndex` abstract operation
// https://tc39.es/ecma262/#sec-advancestringindex
module.exports = function(S, index, unicode) {
    return index + (unicode ? charAt(S, index).length : 1);
};

},{"../internals/string-multibyte":"7dgpm"}],"2wOwy":[function(require,module,exports) {
var classof = require('./classof-raw');
var regexpExec = require('./regexp-exec');
// `RegExpExec` abstract operation
// https://tc39.es/ecma262/#sec-regexpexec
module.exports = function(R, S) {
    var exec = R.exec;
    if (typeof exec === 'function') {
        var result = exec.call(R, S);
        if (typeof result !== 'object') throw TypeError('RegExp exec method returned something other than an Object or null');
        return result;
    }
    if (classof(R) !== 'RegExp') throw TypeError('RegExp#exec called on incompatible receiver');
    return regexpExec.call(R, S);
};

},{"./classof-raw":"2KP6c","./regexp-exec":"6siMl"}],"4fBTH":[function(require,module,exports) {
'use strict';
/* eslint-disable es/no-string-prototype-matchall -- safe */ var $ = require('../internals/export');
var createIteratorConstructor = require('../internals/create-iterator-constructor');
var requireObjectCoercible = require('../internals/require-object-coercible');
var toLength = require('../internals/to-length');
var aFunction = require('../internals/a-function');
var anObject = require('../internals/an-object');
var classof = require('../internals/classof-raw');
var isRegExp = require('../internals/is-regexp');
var getRegExpFlags = require('../internals/regexp-flags');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var fails = require('../internals/fails');
var wellKnownSymbol = require('../internals/well-known-symbol');
var speciesConstructor = require('../internals/species-constructor');
var advanceStringIndex = require('../internals/advance-string-index');
var InternalStateModule = require('../internals/internal-state');
var IS_PURE = require('../internals/is-pure');
var MATCH_ALL = wellKnownSymbol('matchAll');
var REGEXP_STRING = 'RegExp String';
var REGEXP_STRING_ITERATOR = REGEXP_STRING + ' Iterator';
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(REGEXP_STRING_ITERATOR);
var RegExpPrototype = RegExp.prototype;
var regExpBuiltinExec = RegExpPrototype.exec;
var nativeMatchAll = ''.matchAll;
var WORKS_WITH_NON_GLOBAL_REGEX = !!nativeMatchAll && !fails(function() {
    'a'.matchAll(/./);
});
var regExpExec = function(R, S) {
    var exec = R.exec;
    var result;
    if (typeof exec == 'function') {
        result = exec.call(R, S);
        if (typeof result != 'object') throw TypeError('Incorrect exec result');
        return result;
    }
    return regExpBuiltinExec.call(R, S);
};
// eslint-disable-next-line max-len -- ignore
var $RegExpStringIterator = createIteratorConstructor(function RegExpStringIterator(regexp, string, global, fullUnicode) {
    setInternalState(this, {
        type: REGEXP_STRING_ITERATOR,
        regexp: regexp,
        string: string,
        global: global,
        unicode: fullUnicode,
        done: false
    });
}, REGEXP_STRING, function next() {
    var state = getInternalState(this);
    if (state.done) return {
        value: undefined,
        done: true
    };
    var R = state.regexp;
    var S = state.string;
    var match = regExpExec(R, S);
    if (match === null) return {
        value: undefined,
        done: state.done = true
    };
    if (state.global) {
        if (String(match[0]) == '') R.lastIndex = advanceStringIndex(S, toLength(R.lastIndex), state.unicode);
        return {
            value: match,
            done: false
        };
    }
    state.done = true;
    return {
        value: match,
        done: false
    };
});
var $matchAll = function(string) {
    var R = anObject(this);
    var S = String(string);
    var C, flagsValue, flags, matcher, global, fullUnicode;
    C = speciesConstructor(R, RegExp);
    flagsValue = R.flags;
    if (flagsValue === undefined && R instanceof RegExp && !('flags' in RegExpPrototype)) flagsValue = getRegExpFlags.call(R);
    flags = flagsValue === undefined ? '' : String(flagsValue);
    matcher = new C(C === RegExp ? R.source : R, flags);
    global = !!~flags.indexOf('g');
    fullUnicode = !!~flags.indexOf('u');
    matcher.lastIndex = toLength(R.lastIndex);
    return new $RegExpStringIterator(matcher, S, global, fullUnicode);
};
// `String.prototype.matchAll` method
// https://tc39.es/ecma262/#sec-string.prototype.matchall
$({
    target: 'String',
    proto: true,
    forced: WORKS_WITH_NON_GLOBAL_REGEX
}, {
    matchAll: function matchAll(regexp) {
        var O = requireObjectCoercible(this);
        var flags, S, matcher, rx;
        if (regexp != null) {
            if (isRegExp(regexp)) {
                flags = String(requireObjectCoercible('flags' in RegExpPrototype ? regexp.flags : getRegExpFlags.call(regexp)));
                if (!~flags.indexOf('g')) throw TypeError('`.matchAll` does not allow non-global regexes');
            }
            if (WORKS_WITH_NON_GLOBAL_REGEX) return nativeMatchAll.apply(O, arguments);
            matcher = regexp[MATCH_ALL];
            if (matcher === undefined && IS_PURE && classof(regexp) == 'RegExp') matcher = $matchAll;
            if (matcher != null) return aFunction(matcher).call(regexp, O);
        } else if (WORKS_WITH_NON_GLOBAL_REGEX) return nativeMatchAll.apply(O, arguments);
        S = String(O);
        rx = new RegExp(regexp, 'g');
        return IS_PURE ? $matchAll.call(rx, S) : rx[MATCH_ALL](S);
    }
});
IS_PURE || MATCH_ALL in RegExpPrototype || createNonEnumerableProperty(RegExpPrototype, MATCH_ALL, $matchAll);

},{"../internals/export":"2y5a0","../internals/create-iterator-constructor":"785Ty","../internals/require-object-coercible":"7J9xg","../internals/to-length":"7tq8w","../internals/a-function":"14VVf","../internals/an-object":"6as2W","../internals/classof-raw":"2KP6c","../internals/is-regexp":"2nVJd","../internals/regexp-flags":"5BAvH","../internals/create-non-enumerable-property":"7tRkq","../internals/fails":"5dsdP","../internals/well-known-symbol":"23Lpi","../internals/species-constructor":"8dIcf","../internals/advance-string-index":"4v3in","../internals/internal-state":"32AmZ","../internals/is-pure":"7KzvF"}],"40Qwk":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var $padEnd = require('../internals/string-pad').end;
var WEBKIT_BUG = require('../internals/string-pad-webkit-bug');
// `String.prototype.padEnd` method
// https://tc39.es/ecma262/#sec-string.prototype.padend
$({
    target: 'String',
    proto: true,
    forced: WEBKIT_BUG
}, {
    padEnd: function padEnd(maxLength/* , fillString = ' ' */ ) {
        return $padEnd(this, maxLength, arguments.length > 1 ? arguments[1] : undefined);
    }
});

},{"../internals/export":"2y5a0","../internals/string-pad":"1BOD0","../internals/string-pad-webkit-bug":"3E7LN"}],"3E7LN":[function(require,module,exports) {
// https://github.com/zloirock/core-js/issues/280
var userAgent = require('../internals/engine-user-agent');
// eslint-disable-next-line unicorn/no-unsafe-regex -- safe
module.exports = /Version\/10(?:\.\d+){1,2}(?: [\w./]+)?(?: Mobile\/\w+)? Safari\//.test(userAgent);

},{"../internals/engine-user-agent":"69cCi"}],"1FuAj":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var $padStart = require('../internals/string-pad').start;
var WEBKIT_BUG = require('../internals/string-pad-webkit-bug');
// `String.prototype.padStart` method
// https://tc39.es/ecma262/#sec-string.prototype.padstart
$({
    target: 'String',
    proto: true,
    forced: WEBKIT_BUG
}, {
    padStart: function padStart(maxLength/* , fillString = ' ' */ ) {
        return $padStart(this, maxLength, arguments.length > 1 ? arguments[1] : undefined);
    }
});

},{"../internals/export":"2y5a0","../internals/string-pad":"1BOD0","../internals/string-pad-webkit-bug":"3E7LN"}],"6tMon":[function(require,module,exports) {
var $ = require('../internals/export');
var toIndexedObject = require('../internals/to-indexed-object');
var toLength = require('../internals/to-length');
// `String.raw` method
// https://tc39.es/ecma262/#sec-string.raw
$({
    target: 'String',
    stat: true
}, {
    raw: function raw(template) {
        var rawTemplate = toIndexedObject(template.raw);
        var literalSegments = toLength(rawTemplate.length);
        var argumentsLength = arguments.length;
        var elements = [];
        var i = 0;
        while(literalSegments > i){
            elements.push(String(rawTemplate[i++]));
            if (i < argumentsLength) elements.push(String(arguments[i]));
        }
        return elements.join('');
    }
});

},{"../internals/export":"2y5a0","../internals/to-indexed-object":"DEeSJ","../internals/to-length":"7tq8w"}],"7fnIO":[function(require,module,exports) {
var $ = require('../internals/export');
var repeat = require('../internals/string-repeat');
// `String.prototype.repeat` method
// https://tc39.es/ecma262/#sec-string.prototype.repeat
$({
    target: 'String',
    proto: true
}, {
    repeat: repeat
});

},{"../internals/export":"2y5a0","../internals/string-repeat":"3xljJ"}],"6ioBM":[function(require,module,exports) {
'use strict';
var fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');
var anObject = require('../internals/an-object');
var toLength = require('../internals/to-length');
var toInteger = require('../internals/to-integer');
var requireObjectCoercible = require('../internals/require-object-coercible');
var advanceStringIndex = require('../internals/advance-string-index');
var getSubstitution = require('../internals/get-substitution');
var regExpExec = require('../internals/regexp-exec-abstract');
var max = Math.max;
var min = Math.min;
var maybeToString = function(it) {
    return it === undefined ? it : String(it);
};
// @@replace logic
fixRegExpWellKnownSymbolLogic('replace', 2, function(REPLACE, nativeReplace, maybeCallNative, reason) {
    var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = reason.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE;
    var REPLACE_KEEPS_$0 = reason.REPLACE_KEEPS_$0;
    var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE ? '$' : '$0';
    return [
        // `String.prototype.replace` method
        // https://tc39.es/ecma262/#sec-string.prototype.replace
        function replace(searchValue, replaceValue) {
            var O = requireObjectCoercible(this);
            var replacer = searchValue == undefined ? undefined : searchValue[REPLACE];
            return replacer !== undefined ? replacer.call(searchValue, O, replaceValue) : nativeReplace.call(String(O), searchValue, replaceValue);
        },
        // `RegExp.prototype[@@replace]` method
        // https://tc39.es/ecma262/#sec-regexp.prototype-@@replace
        function(regexp, replaceValue) {
            if (!REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE && REPLACE_KEEPS_$0 || typeof replaceValue === 'string' && replaceValue.indexOf(UNSAFE_SUBSTITUTE) === -1) {
                var res = maybeCallNative(nativeReplace, regexp, this, replaceValue);
                if (res.done) return res.value;
            }
            var rx = anObject(regexp);
            var S = String(this);
            var functionalReplace = typeof replaceValue === 'function';
            if (!functionalReplace) replaceValue = String(replaceValue);
            var global = rx.global;
            if (global) {
                var fullUnicode = rx.unicode;
                rx.lastIndex = 0;
            }
            var results = [];
            while(true){
                var result = regExpExec(rx, S);
                if (result === null) break;
                results.push(result);
                if (!global) break;
                var matchStr = String(result[0]);
                if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
            }
            var accumulatedResult = '';
            var nextSourcePosition = 0;
            for(var i = 0; i < results.length; i++){
                result = results[i];
                var matched = String(result[0]);
                var position = max(min(toInteger(result.index), S.length), 0);
                var captures = [];
                // NOTE: This is equivalent to
                //   captures = result.slice(1).map(maybeToString)
                // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
                // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
                // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
                for(var j = 1; j < result.length; j++)captures.push(maybeToString(result[j]));
                var namedCaptures = result.groups;
                if (functionalReplace) {
                    var replacerArgs = [
                        matched
                    ].concat(captures, position, S);
                    if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
                    var replacement = String(replaceValue.apply(undefined, replacerArgs));
                } else replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
                if (position >= nextSourcePosition) {
                    accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
                    nextSourcePosition = position + matched.length;
                }
            }
            return accumulatedResult + S.slice(nextSourcePosition);
        }
    ];
});

},{"../internals/fix-regexp-well-known-symbol-logic":"5ONK3","../internals/an-object":"6as2W","../internals/to-length":"7tq8w","../internals/to-integer":"6y5fX","../internals/require-object-coercible":"7J9xg","../internals/advance-string-index":"4v3in","../internals/get-substitution":"6ighr","../internals/regexp-exec-abstract":"2wOwy"}],"6ighr":[function(require,module,exports) {
var toObject = require('../internals/to-object');
var floor = Math.floor;
var replace = ''.replace;
var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d{1,2}|<[^>]*>)/g;
var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d{1,2})/g;
// `GetSubstitution` abstract operation
// https://tc39.es/ecma262/#sec-getsubstitution
module.exports = function(matched, str, position, captures, namedCaptures, replacement) {
    var tailPos = position + matched.length;
    var m = captures.length;
    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
    if (namedCaptures !== undefined) {
        namedCaptures = toObject(namedCaptures);
        symbols = SUBSTITUTION_SYMBOLS;
    }
    return replace.call(replacement, symbols, function(match, ch) {
        var capture;
        switch(ch.charAt(0)){
            case '$':
                return '$';
            case '&':
                return matched;
            case '`':
                return str.slice(0, position);
            case "'":
                return str.slice(tailPos);
            case '<':
                capture = namedCaptures[ch.slice(1, -1)];
                break;
            default:
                var n = +ch;
                if (n === 0) return match;
                if (n > m) {
                    var f = floor(n / 10);
                    if (f === 0) return match;
                    if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
                    return match;
                }
                capture = captures[n - 1];
        }
        return capture === undefined ? '' : capture;
    });
};

},{"../internals/to-object":"1Jr8n"}],"5YpCi":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var requireObjectCoercible = require('../internals/require-object-coercible');
var isRegExp = require('../internals/is-regexp');
var getRegExpFlags = require('../internals/regexp-flags');
var getSubstitution = require('../internals/get-substitution');
var wellKnownSymbol = require('../internals/well-known-symbol');
var IS_PURE = require('../internals/is-pure');
var REPLACE = wellKnownSymbol('replace');
var RegExpPrototype = RegExp.prototype;
var max = Math.max;
var stringIndexOf = function(string, searchValue, fromIndex) {
    if (fromIndex > string.length) return -1;
    if (searchValue === '') return fromIndex;
    return string.indexOf(searchValue, fromIndex);
};
// `String.prototype.replaceAll` method
// https://tc39.es/ecma262/#sec-string.prototype.replaceall
$({
    target: 'String',
    proto: true
}, {
    replaceAll: function replaceAll(searchValue, replaceValue) {
        var O = requireObjectCoercible(this);
        var IS_REG_EXP, flags, replacer, string, searchString, functionalReplace, searchLength, advanceBy, replacement;
        var position = 0;
        var endOfLastMatch = 0;
        var result = '';
        if (searchValue != null) {
            IS_REG_EXP = isRegExp(searchValue);
            if (IS_REG_EXP) {
                flags = String(requireObjectCoercible('flags' in RegExpPrototype ? searchValue.flags : getRegExpFlags.call(searchValue)));
                if (!~flags.indexOf('g')) throw TypeError('`.replaceAll` does not allow non-global regexes');
            }
            replacer = searchValue[REPLACE];
            if (replacer !== undefined) return replacer.call(searchValue, O, replaceValue);
            else if (IS_PURE && IS_REG_EXP) return String(O).replace(searchValue, replaceValue);
        }
        string = String(O);
        searchString = String(searchValue);
        functionalReplace = typeof replaceValue === 'function';
        if (!functionalReplace) replaceValue = String(replaceValue);
        searchLength = searchString.length;
        advanceBy = max(1, searchLength);
        position = stringIndexOf(string, searchString, 0);
        while(position !== -1){
            if (functionalReplace) replacement = String(replaceValue(searchString, position, string));
            else replacement = getSubstitution(searchString, string, position, [], undefined, replaceValue);
            result += string.slice(endOfLastMatch, position) + replacement;
            endOfLastMatch = position + searchLength;
            position = stringIndexOf(string, searchString, position + advanceBy);
        }
        if (endOfLastMatch < string.length) result += string.slice(endOfLastMatch);
        return result;
    }
});

},{"../internals/export":"2y5a0","../internals/require-object-coercible":"7J9xg","../internals/is-regexp":"2nVJd","../internals/regexp-flags":"5BAvH","../internals/get-substitution":"6ighr","../internals/well-known-symbol":"23Lpi","../internals/is-pure":"7KzvF"}],"4NC3A":[function(require,module,exports) {
'use strict';
var fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');
var anObject = require('../internals/an-object');
var requireObjectCoercible = require('../internals/require-object-coercible');
var sameValue = require('../internals/same-value');
var regExpExec = require('../internals/regexp-exec-abstract');
// @@search logic
fixRegExpWellKnownSymbolLogic('search', 1, function(SEARCH, nativeSearch, maybeCallNative) {
    return [
        // `String.prototype.search` method
        // https://tc39.es/ecma262/#sec-string.prototype.search
        function search(regexp) {
            var O = requireObjectCoercible(this);
            var searcher = regexp == undefined ? undefined : regexp[SEARCH];
            return searcher !== undefined ? searcher.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
        },
        // `RegExp.prototype[@@search]` method
        // https://tc39.es/ecma262/#sec-regexp.prototype-@@search
        function(regexp) {
            var res = maybeCallNative(nativeSearch, regexp, this);
            if (res.done) return res.value;
            var rx = anObject(regexp);
            var S = String(this);
            var previousLastIndex = rx.lastIndex;
            if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;
            var result = regExpExec(rx, S);
            if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;
            return result === null ? -1 : result.index;
        }
    ];
});

},{"../internals/fix-regexp-well-known-symbol-logic":"5ONK3","../internals/an-object":"6as2W","../internals/require-object-coercible":"7J9xg","../internals/same-value":"7Gzb5","../internals/regexp-exec-abstract":"2wOwy"}],"1xjWY":[function(require,module,exports) {
'use strict';
var fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');
var isRegExp = require('../internals/is-regexp');
var anObject = require('../internals/an-object');
var requireObjectCoercible = require('../internals/require-object-coercible');
var speciesConstructor = require('../internals/species-constructor');
var advanceStringIndex = require('../internals/advance-string-index');
var toLength = require('../internals/to-length');
var callRegExpExec = require('../internals/regexp-exec-abstract');
var regexpExec = require('../internals/regexp-exec');
var stickyHelpers = require('../internals/regexp-sticky-helpers');
var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y;
var arrayPush = [].push;
var min = Math.min;
var MAX_UINT32 = 4294967295;
// @@split logic
fixRegExpWellKnownSymbolLogic('split', 2, function(SPLIT, nativeSplit, maybeCallNative) {
    var internalSplit;
    if ('abbc'.split(/(b)*/)[1] == 'c' || // eslint-disable-next-line regexp/no-empty-group -- required for testing
    'test'.split(/(?:)/, -1).length != 4 || 'ab'.split(/(?:ab)*/).length != 2 || '.'.split(/(.?)(.?)/).length != 4 || // eslint-disable-next-line regexp/no-assertion-capturing-group, regexp/no-empty-group -- required for testing
    '.'.split(/()()/).length > 1 || ''.split(/.?/).length) // based on es5-shim implementation, need to rework it
    internalSplit = function(separator, limit) {
        var string = String(requireObjectCoercible(this));
        var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
        if (lim === 0) return [];
        if (separator === undefined) return [
            string
        ];
        // If `separator` is not a regex, use native split
        if (!isRegExp(separator)) return nativeSplit.call(string, separator, lim);
        var output = [];
        var flags = (separator.ignoreCase ? 'i' : '') + (separator.multiline ? 'm' : '') + (separator.unicode ? 'u' : '') + (separator.sticky ? 'y' : '');
        var lastLastIndex = 0;
        // Make `global` and avoid `lastIndex` issues by working with a copy
        var separatorCopy = new RegExp(separator.source, flags + 'g');
        var match, lastIndex, lastLength;
        while(match = regexpExec.call(separatorCopy, string)){
            lastIndex = separatorCopy.lastIndex;
            if (lastIndex > lastLastIndex) {
                output.push(string.slice(lastLastIndex, match.index));
                if (match.length > 1 && match.index < string.length) arrayPush.apply(output, match.slice(1));
                lastLength = match[0].length;
                lastLastIndex = lastIndex;
                if (output.length >= lim) break;
            }
            if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop
        }
        if (lastLastIndex === string.length) {
            if (lastLength || !separatorCopy.test('')) output.push('');
        } else output.push(string.slice(lastLastIndex));
        return output.length > lim ? output.slice(0, lim) : output;
    };
    else if ('0'.split(undefined, 0).length) internalSplit = function(separator, limit) {
        return separator === undefined && limit === 0 ? [] : nativeSplit.call(this, separator, limit);
    };
    else internalSplit = nativeSplit;
    return [
        // `String.prototype.split` method
        // https://tc39.es/ecma262/#sec-string.prototype.split
        function split(separator, limit) {
            var O = requireObjectCoercible(this);
            var splitter = separator == undefined ? undefined : separator[SPLIT];
            return splitter !== undefined ? splitter.call(separator, O, limit) : internalSplit.call(String(O), separator, limit);
        },
        // `RegExp.prototype[@@split]` method
        // https://tc39.es/ecma262/#sec-regexp.prototype-@@split
        //
        // NOTE: This cannot be properly polyfilled in engines that don't support
        // the 'y' flag.
        function(regexp, limit) {
            var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== nativeSplit);
            if (res.done) return res.value;
            var rx = anObject(regexp);
            var S = String(this);
            var C = speciesConstructor(rx, RegExp);
            var unicodeMatching = rx.unicode;
            var flags = (rx.ignoreCase ? 'i' : '') + (rx.multiline ? 'm' : '') + (rx.unicode ? 'u' : '') + (UNSUPPORTED_Y ? 'g' : 'y');
            // ^(? + rx + ) is needed, in combination with some S slicing, to
            // simulate the 'y' flag.
            var splitter = new C(UNSUPPORTED_Y ? '^(?:' + rx.source + ')' : rx, flags);
            var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
            if (lim === 0) return [];
            if (S.length === 0) return callRegExpExec(splitter, S) === null ? [
                S
            ] : [];
            var p = 0;
            var q = 0;
            var A = [];
            while(q < S.length){
                splitter.lastIndex = UNSUPPORTED_Y ? 0 : q;
                var z = callRegExpExec(splitter, UNSUPPORTED_Y ? S.slice(q) : S);
                var e;
                if (z === null || (e = min(toLength(splitter.lastIndex + (UNSUPPORTED_Y ? q : 0)), S.length)) === p) q = advanceStringIndex(S, q, unicodeMatching);
                else {
                    A.push(S.slice(p, q));
                    if (A.length === lim) return A;
                    for(var i = 1; i <= z.length - 1; i++){
                        A.push(z[i]);
                        if (A.length === lim) return A;
                    }
                    q = p = e;
                }
            }
            A.push(S.slice(p));
            return A;
        }
    ];
}, UNSUPPORTED_Y);

},{"../internals/fix-regexp-well-known-symbol-logic":"5ONK3","../internals/is-regexp":"2nVJd","../internals/an-object":"6as2W","../internals/require-object-coercible":"7J9xg","../internals/species-constructor":"8dIcf","../internals/advance-string-index":"4v3in","../internals/to-length":"7tq8w","../internals/regexp-exec-abstract":"2wOwy","../internals/regexp-exec":"6siMl","../internals/regexp-sticky-helpers":"76utt"}],"2fUJr":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;
var toLength = require('../internals/to-length');
var notARegExp = require('../internals/not-a-regexp');
var requireObjectCoercible = require('../internals/require-object-coercible');
var correctIsRegExpLogic = require('../internals/correct-is-regexp-logic');
var IS_PURE = require('../internals/is-pure');
// eslint-disable-next-line es/no-string-prototype-startswith -- safe
var $startsWith = ''.startsWith;
var min = Math.min;
var CORRECT_IS_REGEXP_LOGIC = correctIsRegExpLogic('startsWith');
// https://github.com/zloirock/core-js/pull/702
var MDN_POLYFILL_BUG = !IS_PURE && !CORRECT_IS_REGEXP_LOGIC && !!function() {
    var descriptor = getOwnPropertyDescriptor(String.prototype, 'startsWith');
    return descriptor && !descriptor.writable;
}();
// `String.prototype.startsWith` method
// https://tc39.es/ecma262/#sec-string.prototype.startswith
$({
    target: 'String',
    proto: true,
    forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC
}, {
    startsWith: function startsWith(searchString/* , position = 0 */ ) {
        var that = String(requireObjectCoercible(this));
        notARegExp(searchString);
        var index = toLength(min(arguments.length > 1 ? arguments[1] : undefined, that.length));
        var search = String(searchString);
        return $startsWith ? $startsWith.call(that, search, index) : that.slice(index, index + search.length) === search;
    }
});

},{"../internals/export":"2y5a0","../internals/object-get-own-property-descriptor":"60pmx","../internals/to-length":"7tq8w","../internals/not-a-regexp":"3oYNf","../internals/require-object-coercible":"7J9xg","../internals/correct-is-regexp-logic":"3NXfe","../internals/is-pure":"7KzvF"}],"3eh3p":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var $trim = require('../internals/string-trim').trim;
var forcedStringTrimMethod = require('../internals/string-trim-forced');
// `String.prototype.trim` method
// https://tc39.es/ecma262/#sec-string.prototype.trim
$({
    target: 'String',
    proto: true,
    forced: forcedStringTrimMethod('trim')
}, {
    trim: function trim() {
        return $trim(this);
    }
});

},{"../internals/export":"2y5a0","../internals/string-trim":"5KG8d","../internals/string-trim-forced":"43ZXA"}],"43ZXA":[function(require,module,exports) {
var fails = require('../internals/fails');
var whitespaces = require('../internals/whitespaces');
var non = '\u200B\u0085\u180E';
// check that a method works with the correct list
// of whitespaces and has a correct name
module.exports = function(METHOD_NAME) {
    return fails(function() {
        return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() != non || whitespaces[METHOD_NAME].name !== METHOD_NAME;
    });
};

},{"../internals/fails":"5dsdP","../internals/whitespaces":"2PFEO"}],"1T8Rk":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var $trimEnd = require('../internals/string-trim').end;
var forcedStringTrimMethod = require('../internals/string-trim-forced');
var FORCED = forcedStringTrimMethod('trimEnd');
var trimEnd = FORCED ? function trimEnd1() {
    return $trimEnd(this);
// eslint-disable-next-line es/no-string-prototype-trimstart-trimend -- safe
} : ''.trimEnd;
// `String.prototype.{ trimEnd, trimRight }` methods
// https://tc39.es/ecma262/#sec-string.prototype.trimend
// https://tc39.es/ecma262/#String.prototype.trimright
$({
    target: 'String',
    proto: true,
    forced: FORCED
}, {
    trimEnd: trimEnd,
    trimRight: trimEnd
});

},{"../internals/export":"2y5a0","../internals/string-trim":"5KG8d","../internals/string-trim-forced":"43ZXA"}],"2E6ML":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var $trimStart = require('../internals/string-trim').start;
var forcedStringTrimMethod = require('../internals/string-trim-forced');
var FORCED = forcedStringTrimMethod('trimStart');
var trimStart = FORCED ? function trimStart1() {
    return $trimStart(this);
// eslint-disable-next-line es/no-string-prototype-trimstart-trimend -- safe
} : ''.trimStart;
// `String.prototype.{ trimStart, trimLeft }` methods
// https://tc39.es/ecma262/#sec-string.prototype.trimstart
// https://tc39.es/ecma262/#String.prototype.trimleft
$({
    target: 'String',
    proto: true,
    forced: FORCED
}, {
    trimStart: trimStart,
    trimLeft: trimStart
});

},{"../internals/export":"2y5a0","../internals/string-trim":"5KG8d","../internals/string-trim-forced":"43ZXA"}],"5XwTb":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var createHTML = require('../internals/create-html');
var forcedStringHTMLMethod = require('../internals/string-html-forced');
// `String.prototype.anchor` method
// https://tc39.es/ecma262/#sec-string.prototype.anchor
$({
    target: 'String',
    proto: true,
    forced: forcedStringHTMLMethod('anchor')
}, {
    anchor: function anchor(name) {
        return createHTML(this, 'a', 'name', name);
    }
});

},{"../internals/export":"2y5a0","../internals/create-html":"3Rt3j","../internals/string-html-forced":"6xCPv"}],"3Rt3j":[function(require,module,exports) {
var requireObjectCoercible = require('../internals/require-object-coercible');
var quot = /"/g;
// `CreateHTML` abstract operation
// https://tc39.es/ecma262/#sec-createhtml
module.exports = function(string, tag, attribute, value) {
    var S = String(requireObjectCoercible(string));
    var p1 = '<' + tag;
    if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
    return p1 + '>' + S + '</' + tag + '>';
};

},{"../internals/require-object-coercible":"7J9xg"}],"6xCPv":[function(require,module,exports) {
var fails = require('../internals/fails');
// check the existence of a method, lowercase
// of a tag and escaping quotes in arguments
module.exports = function(METHOD_NAME) {
    return fails(function() {
        var test = ''[METHOD_NAME]('"');
        return test !== test.toLowerCase() || test.split('"').length > 3;
    });
};

},{"../internals/fails":"5dsdP"}],"4jXx8":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var createHTML = require('../internals/create-html');
var forcedStringHTMLMethod = require('../internals/string-html-forced');
// `String.prototype.big` method
// https://tc39.es/ecma262/#sec-string.prototype.big
$({
    target: 'String',
    proto: true,
    forced: forcedStringHTMLMethod('big')
}, {
    big: function big() {
        return createHTML(this, 'big', '', '');
    }
});

},{"../internals/export":"2y5a0","../internals/create-html":"3Rt3j","../internals/string-html-forced":"6xCPv"}],"1jKzO":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var createHTML = require('../internals/create-html');
var forcedStringHTMLMethod = require('../internals/string-html-forced');
// `String.prototype.blink` method
// https://tc39.es/ecma262/#sec-string.prototype.blink
$({
    target: 'String',
    proto: true,
    forced: forcedStringHTMLMethod('blink')
}, {
    blink: function blink() {
        return createHTML(this, 'blink', '', '');
    }
});

},{"../internals/export":"2y5a0","../internals/create-html":"3Rt3j","../internals/string-html-forced":"6xCPv"}],"47JLI":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var createHTML = require('../internals/create-html');
var forcedStringHTMLMethod = require('../internals/string-html-forced');
// `String.prototype.bold` method
// https://tc39.es/ecma262/#sec-string.prototype.bold
$({
    target: 'String',
    proto: true,
    forced: forcedStringHTMLMethod('bold')
}, {
    bold: function bold() {
        return createHTML(this, 'b', '', '');
    }
});

},{"../internals/export":"2y5a0","../internals/create-html":"3Rt3j","../internals/string-html-forced":"6xCPv"}],"7Mtwm":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var createHTML = require('../internals/create-html');
var forcedStringHTMLMethod = require('../internals/string-html-forced');
// `String.prototype.fixed` method
// https://tc39.es/ecma262/#sec-string.prototype.fixed
$({
    target: 'String',
    proto: true,
    forced: forcedStringHTMLMethod('fixed')
}, {
    fixed: function fixed() {
        return createHTML(this, 'tt', '', '');
    }
});

},{"../internals/export":"2y5a0","../internals/create-html":"3Rt3j","../internals/string-html-forced":"6xCPv"}],"71brs":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var createHTML = require('../internals/create-html');
var forcedStringHTMLMethod = require('../internals/string-html-forced');
// `String.prototype.fontcolor` method
// https://tc39.es/ecma262/#sec-string.prototype.fontcolor
$({
    target: 'String',
    proto: true,
    forced: forcedStringHTMLMethod('fontcolor')
}, {
    fontcolor: function fontcolor(color) {
        return createHTML(this, 'font', 'color', color);
    }
});

},{"../internals/export":"2y5a0","../internals/create-html":"3Rt3j","../internals/string-html-forced":"6xCPv"}],"59kP6":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var createHTML = require('../internals/create-html');
var forcedStringHTMLMethod = require('../internals/string-html-forced');
// `String.prototype.fontsize` method
// https://tc39.es/ecma262/#sec-string.prototype.fontsize
$({
    target: 'String',
    proto: true,
    forced: forcedStringHTMLMethod('fontsize')
}, {
    fontsize: function fontsize(size) {
        return createHTML(this, 'font', 'size', size);
    }
});

},{"../internals/export":"2y5a0","../internals/create-html":"3Rt3j","../internals/string-html-forced":"6xCPv"}],"4ft5G":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var createHTML = require('../internals/create-html');
var forcedStringHTMLMethod = require('../internals/string-html-forced');
// `String.prototype.italics` method
// https://tc39.es/ecma262/#sec-string.prototype.italics
$({
    target: 'String',
    proto: true,
    forced: forcedStringHTMLMethod('italics')
}, {
    italics: function italics() {
        return createHTML(this, 'i', '', '');
    }
});

},{"../internals/export":"2y5a0","../internals/create-html":"3Rt3j","../internals/string-html-forced":"6xCPv"}],"5uokb":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var createHTML = require('../internals/create-html');
var forcedStringHTMLMethod = require('../internals/string-html-forced');
// `String.prototype.link` method
// https://tc39.es/ecma262/#sec-string.prototype.link
$({
    target: 'String',
    proto: true,
    forced: forcedStringHTMLMethod('link')
}, {
    link: function link(url) {
        return createHTML(this, 'a', 'href', url);
    }
});

},{"../internals/export":"2y5a0","../internals/create-html":"3Rt3j","../internals/string-html-forced":"6xCPv"}],"1Cin2":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var createHTML = require('../internals/create-html');
var forcedStringHTMLMethod = require('../internals/string-html-forced');
// `String.prototype.small` method
// https://tc39.es/ecma262/#sec-string.prototype.small
$({
    target: 'String',
    proto: true,
    forced: forcedStringHTMLMethod('small')
}, {
    small: function small() {
        return createHTML(this, 'small', '', '');
    }
});

},{"../internals/export":"2y5a0","../internals/create-html":"3Rt3j","../internals/string-html-forced":"6xCPv"}],"623Lp":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var createHTML = require('../internals/create-html');
var forcedStringHTMLMethod = require('../internals/string-html-forced');
// `String.prototype.strike` method
// https://tc39.es/ecma262/#sec-string.prototype.strike
$({
    target: 'String',
    proto: true,
    forced: forcedStringHTMLMethod('strike')
}, {
    strike: function strike() {
        return createHTML(this, 'strike', '', '');
    }
});

},{"../internals/export":"2y5a0","../internals/create-html":"3Rt3j","../internals/string-html-forced":"6xCPv"}],"14yK1":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var createHTML = require('../internals/create-html');
var forcedStringHTMLMethod = require('../internals/string-html-forced');
// `String.prototype.sub` method
// https://tc39.es/ecma262/#sec-string.prototype.sub
$({
    target: 'String',
    proto: true,
    forced: forcedStringHTMLMethod('sub')
}, {
    sub: function sub() {
        return createHTML(this, 'sub', '', '');
    }
});

},{"../internals/export":"2y5a0","../internals/create-html":"3Rt3j","../internals/string-html-forced":"6xCPv"}],"6LkGs":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var createHTML = require('../internals/create-html');
var forcedStringHTMLMethod = require('../internals/string-html-forced');
// `String.prototype.sup` method
// https://tc39.es/ecma262/#sec-string.prototype.sup
$({
    target: 'String',
    proto: true,
    forced: forcedStringHTMLMethod('sup')
}, {
    sup: function sup() {
        return createHTML(this, 'sup', '', '');
    }
});

},{"../internals/export":"2y5a0","../internals/create-html":"3Rt3j","../internals/string-html-forced":"6xCPv"}],"1oZz8":[function(require,module,exports) {
var createTypedArrayConstructor = require('../internals/typed-array-constructor');
// `Float32Array` constructor
// https://tc39.es/ecma262/#sec-typedarray-objects
createTypedArrayConstructor('Float32', function(init) {
    return function Float32Array1(data, byteOffset, length) {
        return init(this, data, byteOffset, length);
    };
});

},{"../internals/typed-array-constructor":"6UtMu"}],"6UtMu":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var global = require('../internals/global');
var DESCRIPTORS = require('../internals/descriptors');
var TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = require('../internals/typed-array-constructors-require-wrappers');
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var ArrayBufferModule = require('../internals/array-buffer');
var anInstance = require('../internals/an-instance');
var createPropertyDescriptor = require('../internals/create-property-descriptor');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var toLength = require('../internals/to-length');
var toIndex = require('../internals/to-index');
var toOffset = require('../internals/to-offset');
var toPrimitive = require('../internals/to-primitive');
var has = require('../internals/has');
var classof = require('../internals/classof');
var isObject = require('../internals/is-object');
var create = require('../internals/object-create');
var setPrototypeOf = require('../internals/object-set-prototype-of');
var getOwnPropertyNames = require('../internals/object-get-own-property-names').f;
var typedArrayFrom = require('../internals/typed-array-from');
var forEach = require('../internals/array-iteration').forEach;
var setSpecies = require('../internals/set-species');
var definePropertyModule = require('../internals/object-define-property');
var getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');
var InternalStateModule = require('../internals/internal-state');
var inheritIfRequired = require('../internals/inherit-if-required');
var getInternalState = InternalStateModule.get;
var setInternalState = InternalStateModule.set;
var nativeDefineProperty = definePropertyModule.f;
var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
var round = Math.round;
var RangeError1 = global.RangeError;
var ArrayBuffer1 = ArrayBufferModule.ArrayBuffer;
var DataView1 = ArrayBufferModule.DataView;
var NATIVE_ARRAY_BUFFER_VIEWS = ArrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;
var TYPED_ARRAY_TAG = ArrayBufferViewCore.TYPED_ARRAY_TAG;
var TypedArray = ArrayBufferViewCore.TypedArray;
var TypedArrayPrototype = ArrayBufferViewCore.TypedArrayPrototype;
var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
var isTypedArray = ArrayBufferViewCore.isTypedArray;
var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
var WRONG_LENGTH = 'Wrong length';
var fromList = function(C, list) {
    var index = 0;
    var length = list.length;
    var result = new (aTypedArrayConstructor(C))(length);
    while(length > index)result[index] = list[index++];
    return result;
};
var addGetter = function(it, key) {
    nativeDefineProperty(it, key, {
        get: function() {
            return getInternalState(this)[key];
        }
    });
};
var isArrayBuffer = function(it) {
    var klass;
    return it instanceof ArrayBuffer1 || (klass = classof(it)) == 'ArrayBuffer' || klass == 'SharedArrayBuffer';
};
var isTypedArrayIndex = function(target, key) {
    return isTypedArray(target) && typeof key != 'symbol' && key in target && String(+key) == String(key);
};
var wrappedGetOwnPropertyDescriptor = function getOwnPropertyDescriptor(target, key) {
    return isTypedArrayIndex(target, key = toPrimitive(key, true)) ? createPropertyDescriptor(2, target[key]) : nativeGetOwnPropertyDescriptor(target, key);
};
var wrappedDefineProperty = function defineProperty(target, key, descriptor) {
    if (isTypedArrayIndex(target, key = toPrimitive(key, true)) && isObject(descriptor) && has(descriptor, 'value') && !has(descriptor, 'get') && !has(descriptor, 'set') && !descriptor.configurable && (!has(descriptor, 'writable') || descriptor.writable) && (!has(descriptor, 'enumerable') || descriptor.enumerable)) {
        target[key] = descriptor.value;
        return target;
    }
    return nativeDefineProperty(target, key, descriptor);
};
if (DESCRIPTORS) {
    if (!NATIVE_ARRAY_BUFFER_VIEWS) {
        getOwnPropertyDescriptorModule.f = wrappedGetOwnPropertyDescriptor;
        definePropertyModule.f = wrappedDefineProperty;
        addGetter(TypedArrayPrototype, 'buffer');
        addGetter(TypedArrayPrototype, 'byteOffset');
        addGetter(TypedArrayPrototype, 'byteLength');
        addGetter(TypedArrayPrototype, 'length');
    }
    $({
        target: 'Object',
        stat: true,
        forced: !NATIVE_ARRAY_BUFFER_VIEWS
    }, {
        getOwnPropertyDescriptor: wrappedGetOwnPropertyDescriptor,
        defineProperty: wrappedDefineProperty
    });
    module.exports = function(TYPE, wrapper, CLAMPED) {
        var BYTES = TYPE.match(/\d+$/)[0] / 8;
        var CONSTRUCTOR_NAME = TYPE + (CLAMPED ? 'Clamped' : '') + 'Array';
        var GETTER = 'get' + TYPE;
        var SETTER = 'set' + TYPE;
        var NativeTypedArrayConstructor = global[CONSTRUCTOR_NAME];
        var TypedArrayConstructor = NativeTypedArrayConstructor;
        var TypedArrayConstructorPrototype = TypedArrayConstructor && TypedArrayConstructor.prototype;
        var exported = {
        };
        var getter = function(that, index) {
            var data = getInternalState(that);
            return data.view[GETTER](index * BYTES + data.byteOffset, true);
        };
        var setter = function(that, index, value) {
            var data = getInternalState(that);
            if (CLAMPED) value = (value = round(value)) < 0 ? 0 : value > 255 ? 255 : value & 255;
            data.view[SETTER](index * BYTES + data.byteOffset, value, true);
        };
        var addElement = function(that, index) {
            nativeDefineProperty(that, index, {
                get: function() {
                    return getter(this, index);
                },
                set: function(value) {
                    return setter(this, index, value);
                },
                enumerable: true
            });
        };
        if (!NATIVE_ARRAY_BUFFER_VIEWS) {
            TypedArrayConstructor = wrapper(function(that, data, offset, $length) {
                anInstance(that, TypedArrayConstructor, CONSTRUCTOR_NAME);
                var index = 0;
                var byteOffset = 0;
                var buffer, byteLength, length;
                if (!isObject(data)) {
                    length = toIndex(data);
                    byteLength = length * BYTES;
                    buffer = new ArrayBuffer1(byteLength);
                } else if (isArrayBuffer(data)) {
                    buffer = data;
                    byteOffset = toOffset(offset, BYTES);
                    var $len = data.byteLength;
                    if ($length === undefined) {
                        if ($len % BYTES) throw RangeError1(WRONG_LENGTH);
                        byteLength = $len - byteOffset;
                        if (byteLength < 0) throw RangeError1(WRONG_LENGTH);
                    } else {
                        byteLength = toLength($length) * BYTES;
                        if (byteLength + byteOffset > $len) throw RangeError1(WRONG_LENGTH);
                    }
                    length = byteLength / BYTES;
                } else if (isTypedArray(data)) return fromList(TypedArrayConstructor, data);
                else return typedArrayFrom.call(TypedArrayConstructor, data);
                setInternalState(that, {
                    buffer: buffer,
                    byteOffset: byteOffset,
                    byteLength: byteLength,
                    length: length,
                    view: new DataView1(buffer)
                });
                while(index < length)addElement(that, index++);
            });
            if (setPrototypeOf) setPrototypeOf(TypedArrayConstructor, TypedArray);
            TypedArrayConstructorPrototype = TypedArrayConstructor.prototype = create(TypedArrayPrototype);
        } else if (TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS) {
            TypedArrayConstructor = wrapper(function(dummy, data, typedArrayOffset, $length) {
                anInstance(dummy, TypedArrayConstructor, CONSTRUCTOR_NAME);
                return inheritIfRequired(function() {
                    if (!isObject(data)) return new NativeTypedArrayConstructor(toIndex(data));
                    if (isArrayBuffer(data)) return $length !== undefined ? new NativeTypedArrayConstructor(data, toOffset(typedArrayOffset, BYTES), $length) : typedArrayOffset !== undefined ? new NativeTypedArrayConstructor(data, toOffset(typedArrayOffset, BYTES)) : new NativeTypedArrayConstructor(data);
                    if (isTypedArray(data)) return fromList(TypedArrayConstructor, data);
                    return typedArrayFrom.call(TypedArrayConstructor, data);
                }(), dummy, TypedArrayConstructor);
            });
            if (setPrototypeOf) setPrototypeOf(TypedArrayConstructor, TypedArray);
            forEach(getOwnPropertyNames(NativeTypedArrayConstructor), function(key) {
                if (!(key in TypedArrayConstructor)) createNonEnumerableProperty(TypedArrayConstructor, key, NativeTypedArrayConstructor[key]);
            });
            TypedArrayConstructor.prototype = TypedArrayConstructorPrototype;
        }
        if (TypedArrayConstructorPrototype.constructor !== TypedArrayConstructor) createNonEnumerableProperty(TypedArrayConstructorPrototype, 'constructor', TypedArrayConstructor);
        if (TYPED_ARRAY_TAG) createNonEnumerableProperty(TypedArrayConstructorPrototype, TYPED_ARRAY_TAG, CONSTRUCTOR_NAME);
        exported[CONSTRUCTOR_NAME] = TypedArrayConstructor;
        $({
            global: true,
            forced: TypedArrayConstructor != NativeTypedArrayConstructor,
            sham: !NATIVE_ARRAY_BUFFER_VIEWS
        }, exported);
        if (!(BYTES_PER_ELEMENT in TypedArrayConstructor)) createNonEnumerableProperty(TypedArrayConstructor, BYTES_PER_ELEMENT, BYTES);
        if (!(BYTES_PER_ELEMENT in TypedArrayConstructorPrototype)) createNonEnumerableProperty(TypedArrayConstructorPrototype, BYTES_PER_ELEMENT, BYTES);
        setSpecies(CONSTRUCTOR_NAME);
    };
} else module.exports = function() {
};

},{"../internals/export":"2y5a0","../internals/global":"4E9rT","../internals/descriptors":"AOzbW","../internals/typed-array-constructors-require-wrappers":"2m2xi","../internals/array-buffer-view-core":"3iftb","../internals/array-buffer":"7BExG","../internals/an-instance":"1BUHG","../internals/create-property-descriptor":"14mKL","../internals/create-non-enumerable-property":"7tRkq","../internals/to-length":"7tq8w","../internals/to-index":"231Fv","../internals/to-offset":"2VEH0","../internals/to-primitive":"oTUf2","../internals/has":"1rjL0","../internals/classof":"5lDE7","../internals/is-object":"5j9oO","../internals/object-create":"2DlVm","../internals/object-set-prototype-of":"5NYHm","../internals/object-get-own-property-names":"38Utf","../internals/typed-array-from":"78NTq","../internals/array-iteration":"2s7u3","../internals/set-species":"6gzmW","../internals/object-define-property":"1pkua","../internals/object-get-own-property-descriptor":"60pmx","../internals/internal-state":"32AmZ","../internals/inherit-if-required":"7m35x"}],"2m2xi":[function(require,module,exports) {
/* eslint-disable no-new -- required for testing */ var global = require('../internals/global');
var fails = require('../internals/fails');
var checkCorrectnessOfIteration = require('../internals/check-correctness-of-iteration');
var NATIVE_ARRAY_BUFFER_VIEWS = require('../internals/array-buffer-view-core').NATIVE_ARRAY_BUFFER_VIEWS;
var ArrayBuffer1 = global.ArrayBuffer;
var Int8Array1 = global.Int8Array;
module.exports = !NATIVE_ARRAY_BUFFER_VIEWS || !fails(function() {
    Int8Array1(1);
}) || !fails(function() {
    new Int8Array1(-1);
}) || !checkCorrectnessOfIteration(function(iterable) {
    new Int8Array1();
    new Int8Array1(null);
    new Int8Array1(1.5);
    new Int8Array1(iterable);
}, true) || fails(function() {
    // Safari (11+) bug - a reason why even Safari 13 should load a typed array polyfill
    return new Int8Array1(new ArrayBuffer1(2), 1, undefined).length !== 1;
});

},{"../internals/global":"4E9rT","../internals/fails":"5dsdP","../internals/check-correctness-of-iteration":"6HHGz","../internals/array-buffer-view-core":"3iftb"}],"2VEH0":[function(require,module,exports) {
var toPositiveInteger = require('../internals/to-positive-integer');
module.exports = function(it, BYTES) {
    var offset = toPositiveInteger(it);
    if (offset % BYTES) throw RangeError('Wrong offset');
    return offset;
};

},{"../internals/to-positive-integer":"2bUaZ"}],"2bUaZ":[function(require,module,exports) {
var toInteger = require('../internals/to-integer');
module.exports = function(it) {
    var result = toInteger(it);
    if (result < 0) throw RangeError("The argument can't be less than 0");
    return result;
};

},{"../internals/to-integer":"6y5fX"}],"78NTq":[function(require,module,exports) {
var toObject = require('../internals/to-object');
var toLength = require('../internals/to-length');
var getIteratorMethod = require('../internals/get-iterator-method');
var isArrayIteratorMethod = require('../internals/is-array-iterator-method');
var bind = require('../internals/function-bind-context');
var aTypedArrayConstructor = require('../internals/array-buffer-view-core').aTypedArrayConstructor;
module.exports = function from(source/* , mapfn, thisArg */ ) {
    var O = toObject(source);
    var argumentsLength = arguments.length;
    var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var iteratorMethod = getIteratorMethod(O);
    var i, length, result, step, iterator, next;
    if (iteratorMethod != undefined && !isArrayIteratorMethod(iteratorMethod)) {
        iterator = iteratorMethod.call(O);
        next = iterator.next;
        O = [];
        while(!(step = next.call(iterator)).done)O.push(step.value);
    }
    if (mapping && argumentsLength > 2) mapfn = bind(mapfn, arguments[2], 2);
    length = toLength(O.length);
    result = new (aTypedArrayConstructor(this))(length);
    for(i = 0; length > i; i++)result[i] = mapping ? mapfn(O[i], i) : O[i];
    return result;
};

},{"../internals/to-object":"1Jr8n","../internals/to-length":"7tq8w","../internals/get-iterator-method":"6J57B","../internals/is-array-iterator-method":"4C9JM","../internals/function-bind-context":"526sd","../internals/array-buffer-view-core":"3iftb"}],"6yL55":[function(require,module,exports) {
var createTypedArrayConstructor = require('../internals/typed-array-constructor');
// `Float64Array` constructor
// https://tc39.es/ecma262/#sec-typedarray-objects
createTypedArrayConstructor('Float64', function(init) {
    return function Float64Array1(data, byteOffset, length) {
        return init(this, data, byteOffset, length);
    };
});

},{"../internals/typed-array-constructor":"6UtMu"}],"16xEh":[function(require,module,exports) {
var createTypedArrayConstructor = require('../internals/typed-array-constructor');
// `Int8Array` constructor
// https://tc39.es/ecma262/#sec-typedarray-objects
createTypedArrayConstructor('Int8', function(init) {
    return function Int8Array1(data, byteOffset, length) {
        return init(this, data, byteOffset, length);
    };
});

},{"../internals/typed-array-constructor":"6UtMu"}],"1lEVY":[function(require,module,exports) {
var createTypedArrayConstructor = require('../internals/typed-array-constructor');
// `Int16Array` constructor
// https://tc39.es/ecma262/#sec-typedarray-objects
createTypedArrayConstructor('Int16', function(init) {
    return function Int16Array1(data, byteOffset, length) {
        return init(this, data, byteOffset, length);
    };
});

},{"../internals/typed-array-constructor":"6UtMu"}],"5f8QB":[function(require,module,exports) {
var createTypedArrayConstructor = require('../internals/typed-array-constructor');
// `Int32Array` constructor
// https://tc39.es/ecma262/#sec-typedarray-objects
createTypedArrayConstructor('Int32', function(init) {
    return function Int32Array1(data, byteOffset, length) {
        return init(this, data, byteOffset, length);
    };
});

},{"../internals/typed-array-constructor":"6UtMu"}],"4jttK":[function(require,module,exports) {
var createTypedArrayConstructor = require('../internals/typed-array-constructor');
// `Uint8Array` constructor
// https://tc39.es/ecma262/#sec-typedarray-objects
createTypedArrayConstructor('Uint8', function(init) {
    return function Uint8Array1(data, byteOffset, length) {
        return init(this, data, byteOffset, length);
    };
});

},{"../internals/typed-array-constructor":"6UtMu"}],"2VVQM":[function(require,module,exports) {
var createTypedArrayConstructor = require('../internals/typed-array-constructor');
// `Uint8ClampedArray` constructor
// https://tc39.es/ecma262/#sec-typedarray-objects
createTypedArrayConstructor('Uint8', function(init) {
    return function Uint8ClampedArray1(data, byteOffset, length) {
        return init(this, data, byteOffset, length);
    };
}, true);

},{"../internals/typed-array-constructor":"6UtMu"}],"4xfMB":[function(require,module,exports) {
var createTypedArrayConstructor = require('../internals/typed-array-constructor');
// `Uint16Array` constructor
// https://tc39.es/ecma262/#sec-typedarray-objects
createTypedArrayConstructor('Uint16', function(init) {
    return function Uint16Array1(data, byteOffset, length) {
        return init(this, data, byteOffset, length);
    };
});

},{"../internals/typed-array-constructor":"6UtMu"}],"4Buss":[function(require,module,exports) {
var createTypedArrayConstructor = require('../internals/typed-array-constructor');
// `Uint32Array` constructor
// https://tc39.es/ecma262/#sec-typedarray-objects
createTypedArrayConstructor('Uint32', function(init) {
    return function Uint32Array1(data, byteOffset, length) {
        return init(this, data, byteOffset, length);
    };
});

},{"../internals/typed-array-constructor":"6UtMu"}],"14MaR":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $copyWithin = require('../internals/array-copy-within');
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
// `%TypedArray%.prototype.copyWithin` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.copywithin
exportTypedArrayMethod('copyWithin', function copyWithin(target, start/* , end */ ) {
    return $copyWithin.call(aTypedArray(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
});

},{"../internals/array-buffer-view-core":"3iftb","../internals/array-copy-within":"65u6Y"}],"307Nr":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $every = require('../internals/array-iteration').every;
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
// `%TypedArray%.prototype.every` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.every
exportTypedArrayMethod('every', function every(callbackfn/* , thisArg */ ) {
    return $every(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
});

},{"../internals/array-buffer-view-core":"3iftb","../internals/array-iteration":"2s7u3"}],"4qIpl":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $fill = require('../internals/array-fill');
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
// `%TypedArray%.prototype.fill` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.fill
// eslint-disable-next-line no-unused-vars -- required for `.length`
exportTypedArrayMethod('fill', function fill(value/* , start, end */ ) {
    return $fill.apply(aTypedArray(this), arguments);
});

},{"../internals/array-buffer-view-core":"3iftb","../internals/array-fill":"5jPQe"}],"78GSm":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $filter = require('../internals/array-iteration').filter;
var fromSpeciesAndList = require('../internals/typed-array-from-species-and-list');
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
// `%TypedArray%.prototype.filter` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.filter
exportTypedArrayMethod('filter', function filter(callbackfn/* , thisArg */ ) {
    var list = $filter(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    return fromSpeciesAndList(this, list);
});

},{"../internals/array-buffer-view-core":"3iftb","../internals/array-iteration":"2s7u3","../internals/typed-array-from-species-and-list":"6mEYo"}],"6mEYo":[function(require,module,exports) {
var aTypedArrayConstructor = require('../internals/array-buffer-view-core').aTypedArrayConstructor;
var speciesConstructor = require('../internals/species-constructor');
module.exports = function(instance, list) {
    var C = speciesConstructor(instance, instance.constructor);
    var index = 0;
    var length = list.length;
    var result = new (aTypedArrayConstructor(C))(length);
    while(length > index)result[index] = list[index++];
    return result;
};

},{"../internals/array-buffer-view-core":"3iftb","../internals/species-constructor":"8dIcf"}],"3L4Oz":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $find = require('../internals/array-iteration').find;
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
// `%TypedArray%.prototype.find` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.find
exportTypedArrayMethod('find', function find(predicate/* , thisArg */ ) {
    return $find(aTypedArray(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
});

},{"../internals/array-buffer-view-core":"3iftb","../internals/array-iteration":"2s7u3"}],"3j72Y":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $findIndex = require('../internals/array-iteration').findIndex;
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
// `%TypedArray%.prototype.findIndex` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.findindex
exportTypedArrayMethod('findIndex', function findIndex(predicate/* , thisArg */ ) {
    return $findIndex(aTypedArray(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
});

},{"../internals/array-buffer-view-core":"3iftb","../internals/array-iteration":"2s7u3"}],"47EwE":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $forEach = require('../internals/array-iteration').forEach;
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
// `%TypedArray%.prototype.forEach` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.foreach
exportTypedArrayMethod('forEach', function forEach(callbackfn/* , thisArg */ ) {
    $forEach(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
});

},{"../internals/array-buffer-view-core":"3iftb","../internals/array-iteration":"2s7u3"}],"3cI5d":[function(require,module,exports) {
'use strict';
var TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = require('../internals/typed-array-constructors-require-wrappers');
var exportTypedArrayStaticMethod = require('../internals/array-buffer-view-core').exportTypedArrayStaticMethod;
var typedArrayFrom = require('../internals/typed-array-from');
// `%TypedArray%.from` method
// https://tc39.es/ecma262/#sec-%typedarray%.from
exportTypedArrayStaticMethod('from', typedArrayFrom, TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS);

},{"../internals/typed-array-constructors-require-wrappers":"2m2xi","../internals/array-buffer-view-core":"3iftb","../internals/typed-array-from":"78NTq"}],"5Gxe4":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $includes = require('../internals/array-includes').includes;
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
// `%TypedArray%.prototype.includes` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.includes
exportTypedArrayMethod('includes', function includes(searchElement/* , fromIndex */ ) {
    return $includes(aTypedArray(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
});

},{"../internals/array-buffer-view-core":"3iftb","../internals/array-includes":"1GY9g"}],"7qKMA":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $indexOf = require('../internals/array-includes').indexOf;
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
// `%TypedArray%.prototype.indexOf` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.indexof
exportTypedArrayMethod('indexOf', function indexOf(searchElement/* , fromIndex */ ) {
    return $indexOf(aTypedArray(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
});

},{"../internals/array-buffer-view-core":"3iftb","../internals/array-includes":"1GY9g"}],"2L9Vh":[function(require,module,exports) {
'use strict';
var global = require('../internals/global');
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var ArrayIterators = require('../modules/es.array.iterator');
var wellKnownSymbol = require('../internals/well-known-symbol');
var ITERATOR = wellKnownSymbol('iterator');
var Uint8Array1 = global.Uint8Array;
var arrayValues = ArrayIterators.values;
var arrayKeys = ArrayIterators.keys;
var arrayEntries = ArrayIterators.entries;
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
var nativeTypedArrayIterator = Uint8Array1 && Uint8Array1.prototype[ITERATOR];
var CORRECT_ITER_NAME = !!nativeTypedArrayIterator && (nativeTypedArrayIterator.name == 'values' || nativeTypedArrayIterator.name == undefined);
var typedArrayValues = function values() {
    return arrayValues.call(aTypedArray(this));
};
// `%TypedArray%.prototype.entries` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.entries
exportTypedArrayMethod('entries', function entries() {
    return arrayEntries.call(aTypedArray(this));
});
// `%TypedArray%.prototype.keys` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.keys
exportTypedArrayMethod('keys', function keys() {
    return arrayKeys.call(aTypedArray(this));
});
// `%TypedArray%.prototype.values` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.values
exportTypedArrayMethod('values', typedArrayValues, !CORRECT_ITER_NAME);
// `%TypedArray%.prototype[@@iterator]` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype-@@iterator
exportTypedArrayMethod(ITERATOR, typedArrayValues, !CORRECT_ITER_NAME);

},{"../internals/global":"4E9rT","../internals/array-buffer-view-core":"3iftb","../modules/es.array.iterator":"4FVKU","../internals/well-known-symbol":"23Lpi"}],"3whWP":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
var $join = [].join;
// `%TypedArray%.prototype.join` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.join
// eslint-disable-next-line no-unused-vars -- required for `.length`
exportTypedArrayMethod('join', function join(separator) {
    return $join.apply(aTypedArray(this), arguments);
});

},{"../internals/array-buffer-view-core":"3iftb"}],"GChDV":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $lastIndexOf = require('../internals/array-last-index-of');
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
// `%TypedArray%.prototype.lastIndexOf` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.lastindexof
// eslint-disable-next-line no-unused-vars -- required for `.length`
exportTypedArrayMethod('lastIndexOf', function lastIndexOf(searchElement/* , fromIndex */ ) {
    return $lastIndexOf.apply(aTypedArray(this), arguments);
});

},{"../internals/array-buffer-view-core":"3iftb","../internals/array-last-index-of":"caP8O"}],"ecU8C":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $map = require('../internals/array-iteration').map;
var speciesConstructor = require('../internals/species-constructor');
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
// `%TypedArray%.prototype.map` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.map
exportTypedArrayMethod('map', function map(mapfn/* , thisArg */ ) {
    return $map(aTypedArray(this), mapfn, arguments.length > 1 ? arguments[1] : undefined, function(O, length) {
        return new (aTypedArrayConstructor(speciesConstructor(O, O.constructor)))(length);
    });
});

},{"../internals/array-buffer-view-core":"3iftb","../internals/array-iteration":"2s7u3","../internals/species-constructor":"8dIcf"}],"FJEpE":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = require('../internals/typed-array-constructors-require-wrappers');
var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
var exportTypedArrayStaticMethod = ArrayBufferViewCore.exportTypedArrayStaticMethod;
// `%TypedArray%.of` method
// https://tc39.es/ecma262/#sec-%typedarray%.of
exportTypedArrayStaticMethod('of', function of() {
    var index = 0;
    var length = arguments.length;
    var result = new (aTypedArrayConstructor(this))(length);
    while(length > index)result[index] = arguments[index++];
    return result;
}, TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS);

},{"../internals/array-buffer-view-core":"3iftb","../internals/typed-array-constructors-require-wrappers":"2m2xi"}],"3wCad":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $reduce = require('../internals/array-reduce').left;
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
// `%TypedArray%.prototype.reduce` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.reduce
exportTypedArrayMethod('reduce', function reduce(callbackfn/* , initialValue */ ) {
    return $reduce(aTypedArray(this), callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
});

},{"../internals/array-buffer-view-core":"3iftb","../internals/array-reduce":"62Gn1"}],"2KMPJ":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $reduceRight = require('../internals/array-reduce').right;
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
// `%TypedArray%.prototype.reduceRicht` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.reduceright
exportTypedArrayMethod('reduceRight', function reduceRight(callbackfn/* , initialValue */ ) {
    return $reduceRight(aTypedArray(this), callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
});

},{"../internals/array-buffer-view-core":"3iftb","../internals/array-reduce":"62Gn1"}],"65sXn":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
var floor = Math.floor;
// `%TypedArray%.prototype.reverse` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.reverse
exportTypedArrayMethod('reverse', function reverse() {
    var that = this;
    var length = aTypedArray(that).length;
    var middle = floor(length / 2);
    var index = 0;
    var value;
    while(index < middle){
        value = that[index];
        that[index++] = that[--length];
        that[length] = value;
    }
    return that;
});

},{"../internals/array-buffer-view-core":"3iftb"}],"6nk7q":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var toLength = require('../internals/to-length');
var toOffset = require('../internals/to-offset');
var toObject = require('../internals/to-object');
var fails = require('../internals/fails');
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
var FORCED = fails(function() {
    // eslint-disable-next-line es/no-typed-arrays -- required for testing
    new Int8Array(1).set({
    });
});
// `%TypedArray%.prototype.set` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.set
exportTypedArrayMethod('set', function set(arrayLike/* , offset */ ) {
    aTypedArray(this);
    var offset = toOffset(arguments.length > 1 ? arguments[1] : undefined, 1);
    var length = this.length;
    var src = toObject(arrayLike);
    var len = toLength(src.length);
    var index = 0;
    if (len + offset > length) throw RangeError('Wrong length');
    while(index < len)this[offset + index] = src[index++];
}, FORCED);

},{"../internals/array-buffer-view-core":"3iftb","../internals/to-length":"7tq8w","../internals/to-offset":"2VEH0","../internals/to-object":"1Jr8n","../internals/fails":"5dsdP"}],"1Eeka":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var speciesConstructor = require('../internals/species-constructor');
var fails = require('../internals/fails');
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
var $slice = [].slice;
var FORCED = fails(function() {
    // eslint-disable-next-line es/no-typed-arrays -- required for testing
    new Int8Array(1).slice();
});
// `%TypedArray%.prototype.slice` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.slice
exportTypedArrayMethod('slice', function slice(start, end) {
    var list = $slice.call(aTypedArray(this), start, end);
    var C = speciesConstructor(this, this.constructor);
    var index = 0;
    var length = list.length;
    var result = new (aTypedArrayConstructor(C))(length);
    while(length > index)result[index] = list[index++];
    return result;
}, FORCED);

},{"../internals/array-buffer-view-core":"3iftb","../internals/species-constructor":"8dIcf","../internals/fails":"5dsdP"}],"1vf1j":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $some = require('../internals/array-iteration').some;
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
// `%TypedArray%.prototype.some` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.some
exportTypedArrayMethod('some', function some(callbackfn/* , thisArg */ ) {
    return $some(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
});

},{"../internals/array-buffer-view-core":"3iftb","../internals/array-iteration":"2s7u3"}],"2OaLc":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var global = require('../internals/global');
var fails = require('../internals/fails');
var aFunction = require('../internals/a-function');
var toLength = require('../internals/to-length');
var internalSort = require('../internals/array-sort');
var FF = require('../internals/engine-ff-version');
var IE_OR_EDGE = require('../internals/engine-is-ie-or-edge');
var V8 = require('../internals/engine-v8-version');
var WEBKIT = require('../internals/engine-webkit-version');
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
var Uint16Array1 = global.Uint16Array;
var nativeSort = Uint16Array1 && Uint16Array1.prototype.sort;
// WebKit
var ACCEPT_INCORRECT_ARGUMENTS = !!nativeSort && !fails(function() {
    var array = new Uint16Array1(2);
    array.sort(null);
    array.sort({
    });
});
var STABLE_SORT = !!nativeSort && !fails(function() {
    // feature detection can be too slow, so check engines versions
    if (V8) return V8 < 74;
    if (FF) return FF < 67;
    if (IE_OR_EDGE) return true;
    if (WEBKIT) return WEBKIT < 602;
    var array = new Uint16Array1(516);
    var expected = Array(516);
    var index, mod;
    for(index = 0; index < 516; index++){
        mod = index % 4;
        array[index] = 515 - index;
        expected[index] = index - 2 * mod + 3;
    }
    array.sort(function(a, b) {
        return (a / 4 | 0) - (b / 4 | 0);
    });
    for(index = 0; index < 516; index++){
        if (array[index] !== expected[index]) return true;
    }
});
var getSortCompare = function(comparefn) {
    return function(x, y) {
        if (comparefn !== undefined) return +comparefn(x, y) || 0;
        // eslint-disable-next-line no-self-compare -- NaN check
        if (y !== y) return -1;
        // eslint-disable-next-line no-self-compare -- NaN check
        if (x !== x) return 1;
        if (x === 0 && y === 0) return 1 / x > 0 && 1 / y < 0 ? 1 : -1;
        return x > y;
    };
};
// `%TypedArray%.prototype.sort` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.sort
exportTypedArrayMethod('sort', function sort(comparefn) {
    var array = this;
    if (comparefn !== undefined) aFunction(comparefn);
    if (STABLE_SORT) return nativeSort.call(array, comparefn);
    aTypedArray(array);
    var arrayLength = toLength(array.length);
    var items = Array(arrayLength);
    var index;
    for(index = 0; index < arrayLength; index++)items[index] = array[index];
    items = internalSort(array, getSortCompare(comparefn));
    for(index = 0; index < arrayLength; index++)array[index] = items[index];
    return array;
}, !STABLE_SORT || ACCEPT_INCORRECT_ARGUMENTS);

},{"../internals/array-buffer-view-core":"3iftb","../internals/global":"4E9rT","../internals/fails":"5dsdP","../internals/a-function":"14VVf","../internals/to-length":"7tq8w","../internals/array-sort":"TnQNx","../internals/engine-ff-version":"6fFwb","../internals/engine-is-ie-or-edge":"311b7","../internals/engine-v8-version":"6jjMH","../internals/engine-webkit-version":"V1uB2"}],"2mcxu":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var toLength = require('../internals/to-length');
var toAbsoluteIndex = require('../internals/to-absolute-index');
var speciesConstructor = require('../internals/species-constructor');
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
// `%TypedArray%.prototype.subarray` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.subarray
exportTypedArrayMethod('subarray', function subarray(begin, end) {
    var O = aTypedArray(this);
    var length = O.length;
    var beginIndex = toAbsoluteIndex(begin, length);
    return new (speciesConstructor(O, O.constructor))(O.buffer, O.byteOffset + beginIndex * O.BYTES_PER_ELEMENT, toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - beginIndex));
});

},{"../internals/array-buffer-view-core":"3iftb","../internals/to-length":"7tq8w","../internals/to-absolute-index":"5D7Fy","../internals/species-constructor":"8dIcf"}],"2Tt8P":[function(require,module,exports) {
'use strict';
var global = require('../internals/global');
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var fails = require('../internals/fails');
var Int8Array1 = global.Int8Array;
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
var $toLocaleString = [].toLocaleString;
var $slice = [].slice;
// iOS Safari 6.x fails here
var TO_LOCALE_STRING_BUG = !!Int8Array1 && fails(function() {
    $toLocaleString.call(new Int8Array1(1));
});
var FORCED = fails(function() {
    return [
        1,
        2
    ].toLocaleString() != new Int8Array1([
        1,
        2
    ]).toLocaleString();
}) || !fails(function() {
    Int8Array1.prototype.toLocaleString.call([
        1,
        2
    ]);
});
// `%TypedArray%.prototype.toLocaleString` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.tolocalestring
exportTypedArrayMethod('toLocaleString', function toLocaleString() {
    return $toLocaleString.apply(TO_LOCALE_STRING_BUG ? $slice.call(aTypedArray(this)) : aTypedArray(this), arguments);
}, FORCED);

},{"../internals/global":"4E9rT","../internals/array-buffer-view-core":"3iftb","../internals/fails":"5dsdP"}],"7Jg9d":[function(require,module,exports) {
'use strict';
var exportTypedArrayMethod = require('../internals/array-buffer-view-core').exportTypedArrayMethod;
var fails = require('../internals/fails');
var global = require('../internals/global');
var Uint8Array1 = global.Uint8Array;
var Uint8ArrayPrototype = Uint8Array1 && Uint8Array1.prototype || {
};
var arrayToString = [].toString;
var arrayJoin = [].join;
if (fails(function() {
    arrayToString.call({
    });
})) arrayToString = function toString() {
    return arrayJoin.call(this);
};
var IS_NOT_ARRAY_METHOD = Uint8ArrayPrototype.toString != arrayToString;
// `%TypedArray%.prototype.toString` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.tostring
exportTypedArrayMethod('toString', arrayToString, IS_NOT_ARRAY_METHOD);

},{"../internals/array-buffer-view-core":"3iftb","../internals/fails":"5dsdP","../internals/global":"4E9rT"}],"4glK9":[function(require,module,exports) {
'use strict';
var global = require('../internals/global');
var redefineAll = require('../internals/redefine-all');
var InternalMetadataModule = require('../internals/internal-metadata');
var collection = require('../internals/collection');
var collectionWeak = require('../internals/collection-weak');
var isObject = require('../internals/is-object');
var enforceIternalState = require('../internals/internal-state').enforce;
var NATIVE_WEAK_MAP = require('../internals/native-weak-map');
var IS_IE11 = !global.ActiveXObject && 'ActiveXObject' in global;
// eslint-disable-next-line es/no-object-isextensible -- safe
var isExtensible = Object.isExtensible;
var InternalWeakMap;
var wrapper = function(init) {
    return function WeakMap1() {
        return init(this, arguments.length ? arguments[0] : undefined);
    };
};
// `WeakMap` constructor
// https://tc39.es/ecma262/#sec-weakmap-constructor
var $WeakMap = module.exports = collection('WeakMap', wrapper, collectionWeak);
// IE11 WeakMap frozen keys fix
// We can't use feature detection because it crash some old IE builds
// https://github.com/zloirock/core-js/issues/485
if (NATIVE_WEAK_MAP && IS_IE11) {
    InternalWeakMap = collectionWeak.getConstructor(wrapper, 'WeakMap', true);
    InternalMetadataModule.REQUIRED = true;
    var WeakMapPrototype = $WeakMap.prototype;
    var nativeDelete = WeakMapPrototype['delete'];
    var nativeHas = WeakMapPrototype.has;
    var nativeGet = WeakMapPrototype.get;
    var nativeSet = WeakMapPrototype.set;
    redefineAll(WeakMapPrototype, {
        'delete': function(key) {
            if (isObject(key) && !isExtensible(key)) {
                var state = enforceIternalState(this);
                if (!state.frozen) state.frozen = new InternalWeakMap();
                return nativeDelete.call(this, key) || state.frozen['delete'](key);
            }
            return nativeDelete.call(this, key);
        },
        has: function has(key) {
            if (isObject(key) && !isExtensible(key)) {
                var state = enforceIternalState(this);
                if (!state.frozen) state.frozen = new InternalWeakMap();
                return nativeHas.call(this, key) || state.frozen.has(key);
            }
            return nativeHas.call(this, key);
        },
        get: function get(key) {
            if (isObject(key) && !isExtensible(key)) {
                var state = enforceIternalState(this);
                if (!state.frozen) state.frozen = new InternalWeakMap();
                return nativeHas.call(this, key) ? nativeGet.call(this, key) : state.frozen.get(key);
            }
            return nativeGet.call(this, key);
        },
        set: function set(key, value) {
            if (isObject(key) && !isExtensible(key)) {
                var state = enforceIternalState(this);
                if (!state.frozen) state.frozen = new InternalWeakMap();
                nativeHas.call(this, key) ? nativeSet.call(this, key, value) : state.frozen.set(key, value);
            } else nativeSet.call(this, key, value);
            return this;
        }
    });
}

},{"../internals/global":"4E9rT","../internals/redefine-all":"2ZFGX","../internals/internal-metadata":"6eai4","../internals/collection":"1bXcJ","../internals/collection-weak":"5B5Nv","../internals/is-object":"5j9oO","../internals/internal-state":"32AmZ","../internals/native-weak-map":"5YFcN"}],"5B5Nv":[function(require,module,exports) {
'use strict';
var redefineAll = require('../internals/redefine-all');
var getWeakData = require('../internals/internal-metadata').getWeakData;
var anObject = require('../internals/an-object');
var isObject = require('../internals/is-object');
var anInstance = require('../internals/an-instance');
var iterate = require('../internals/iterate');
var ArrayIterationModule = require('../internals/array-iteration');
var $has = require('../internals/has');
var InternalStateModule = require('../internals/internal-state');
var setInternalState = InternalStateModule.set;
var internalStateGetterFor = InternalStateModule.getterFor;
var find = ArrayIterationModule.find;
var findIndex = ArrayIterationModule.findIndex;
var id = 0;
// fallback for uncaught frozen keys
var uncaughtFrozenStore = function(store) {
    return store.frozen || (store.frozen = new UncaughtFrozenStore());
};
var UncaughtFrozenStore = function() {
    this.entries = [];
};
var findUncaughtFrozen = function(store, key) {
    return find(store.entries, function(it) {
        return it[0] === key;
    });
};
UncaughtFrozenStore.prototype = {
    get: function(key) {
        var entry = findUncaughtFrozen(this, key);
        if (entry) return entry[1];
    },
    has: function(key) {
        return !!findUncaughtFrozen(this, key);
    },
    set: function(key, value) {
        var entry = findUncaughtFrozen(this, key);
        if (entry) entry[1] = value;
        else this.entries.push([
            key,
            value
        ]);
    },
    'delete': function(key) {
        var index = findIndex(this.entries, function(it) {
            return it[0] === key;
        });
        if (~index) this.entries.splice(index, 1);
        return !!~index;
    }
};
module.exports = {
    getConstructor: function(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
        var C = wrapper(function(that, iterable) {
            anInstance(that, C, CONSTRUCTOR_NAME);
            setInternalState(that, {
                type: CONSTRUCTOR_NAME,
                id: id++,
                frozen: undefined
            });
            if (iterable != undefined) iterate(iterable, that[ADDER], {
                that: that,
                AS_ENTRIES: IS_MAP
            });
        });
        var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);
        var define = function(that, key, value) {
            var state = getInternalState(that);
            var data = getWeakData(anObject(key), true);
            if (data === true) uncaughtFrozenStore(state).set(key, value);
            else data[state.id] = value;
            return that;
        };
        redefineAll(C.prototype, {
            // `{ WeakMap, WeakSet }.prototype.delete(key)` methods
            // https://tc39.es/ecma262/#sec-weakmap.prototype.delete
            // https://tc39.es/ecma262/#sec-weakset.prototype.delete
            'delete': function(key) {
                var state = getInternalState(this);
                if (!isObject(key)) return false;
                var data = getWeakData(key);
                if (data === true) return uncaughtFrozenStore(state)['delete'](key);
                return data && $has(data, state.id) && delete data[state.id];
            },
            // `{ WeakMap, WeakSet }.prototype.has(key)` methods
            // https://tc39.es/ecma262/#sec-weakmap.prototype.has
            // https://tc39.es/ecma262/#sec-weakset.prototype.has
            has: function has(key) {
                var state = getInternalState(this);
                if (!isObject(key)) return false;
                var data = getWeakData(key);
                if (data === true) return uncaughtFrozenStore(state).has(key);
                return data && $has(data, state.id);
            }
        });
        redefineAll(C.prototype, IS_MAP ? {
            // `WeakMap.prototype.get(key)` method
            // https://tc39.es/ecma262/#sec-weakmap.prototype.get
            get: function get(key) {
                var state = getInternalState(this);
                if (isObject(key)) {
                    var data = getWeakData(key);
                    if (data === true) return uncaughtFrozenStore(state).get(key);
                    return data ? data[state.id] : undefined;
                }
            },
            // `WeakMap.prototype.set(key, value)` method
            // https://tc39.es/ecma262/#sec-weakmap.prototype.set
            set: function set(key, value) {
                return define(this, key, value);
            }
        } : {
            // `WeakSet.prototype.add(value)` method
            // https://tc39.es/ecma262/#sec-weakset.prototype.add
            add: function add(value) {
                return define(this, value, true);
            }
        });
        return C;
    }
};

},{"../internals/redefine-all":"2ZFGX","../internals/internal-metadata":"6eai4","../internals/an-object":"6as2W","../internals/is-object":"5j9oO","../internals/an-instance":"1BUHG","../internals/iterate":"44GYt","../internals/array-iteration":"2s7u3","../internals/has":"1rjL0","../internals/internal-state":"32AmZ"}],"6tyIB":[function(require,module,exports) {
'use strict';
var collection = require('../internals/collection');
var collectionWeak = require('../internals/collection-weak');
// `WeakSet` constructor
// https://tc39.es/ecma262/#sec-weakset-constructor
collection('WeakSet', function(init) {
    return function WeakSet1() {
        return init(this, arguments.length ? arguments[0] : undefined);
    };
}, collectionWeak);

},{"../internals/collection":"1bXcJ","../internals/collection-weak":"5B5Nv"}],"7njVQ":[function(require,module,exports) {
var global = require('../internals/global');
var DOMIterables = require('../internals/dom-iterables');
var forEach = require('../internals/array-for-each');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
for(var COLLECTION_NAME in DOMIterables){
    var Collection = global[COLLECTION_NAME];
    var CollectionPrototype = Collection && Collection.prototype;
    // some Chrome versions have non-configurable methods on DOMTokenList
    if (CollectionPrototype && CollectionPrototype.forEach !== forEach) try {
        createNonEnumerableProperty(CollectionPrototype, 'forEach', forEach);
    } catch (error) {
        CollectionPrototype.forEach = forEach;
    }
}

},{"../internals/global":"4E9rT","../internals/dom-iterables":"4Y3oj","../internals/array-for-each":"6p461","../internals/create-non-enumerable-property":"7tRkq"}],"4Y3oj":[function(require,module,exports) {
// iterable DOM collections
// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
module.exports = {
    CSSRuleList: 0,
    CSSStyleDeclaration: 0,
    CSSValueList: 0,
    ClientRectList: 0,
    DOMRectList: 0,
    DOMStringList: 0,
    DOMTokenList: 1,
    DataTransferItemList: 0,
    FileList: 0,
    HTMLAllCollection: 0,
    HTMLCollection: 0,
    HTMLFormElement: 0,
    HTMLSelectElement: 0,
    MediaList: 0,
    MimeTypeArray: 0,
    NamedNodeMap: 0,
    NodeList: 1,
    PaintRequestList: 0,
    Plugin: 0,
    PluginArray: 0,
    SVGLengthList: 0,
    SVGNumberList: 0,
    SVGPathSegList: 0,
    SVGPointList: 0,
    SVGStringList: 0,
    SVGTransformList: 0,
    SourceBufferList: 0,
    StyleSheetList: 0,
    TextTrackCueList: 0,
    TextTrackList: 0,
    TouchList: 0
};

},{}],"5jqEY":[function(require,module,exports) {
var global = require('../internals/global');
var DOMIterables = require('../internals/dom-iterables');
var ArrayIteratorMethods = require('../modules/es.array.iterator');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var wellKnownSymbol = require('../internals/well-known-symbol');
var ITERATOR = wellKnownSymbol('iterator');
var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var ArrayValues = ArrayIteratorMethods.values;
for(var COLLECTION_NAME in DOMIterables){
    var Collection = global[COLLECTION_NAME];
    var CollectionPrototype = Collection && Collection.prototype;
    if (CollectionPrototype) {
        // some Chrome versions have non-configurable methods on DOMTokenList
        if (CollectionPrototype[ITERATOR] !== ArrayValues) try {
            createNonEnumerableProperty(CollectionPrototype, ITERATOR, ArrayValues);
        } catch (error) {
            CollectionPrototype[ITERATOR] = ArrayValues;
        }
        if (!CollectionPrototype[TO_STRING_TAG]) createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);
        if (DOMIterables[COLLECTION_NAME]) for(var METHOD_NAME in ArrayIteratorMethods){
            // some Chrome versions have non-configurable methods on DOMTokenList
            if (CollectionPrototype[METHOD_NAME] !== ArrayIteratorMethods[METHOD_NAME]) try {
                createNonEnumerableProperty(CollectionPrototype, METHOD_NAME, ArrayIteratorMethods[METHOD_NAME]);
            } catch (error) {
                CollectionPrototype[METHOD_NAME] = ArrayIteratorMethods[METHOD_NAME];
            }
        }
    }
}

},{"../internals/global":"4E9rT","../internals/dom-iterables":"4Y3oj","../modules/es.array.iterator":"4FVKU","../internals/create-non-enumerable-property":"7tRkq","../internals/well-known-symbol":"23Lpi"}],"5HqAE":[function(require,module,exports) {
var $ = require('../internals/export');
var global = require('../internals/global');
var task = require('../internals/task');
var FORCED = !global.setImmediate || !global.clearImmediate;
// http://w3c.github.io/setImmediate/
$({
    global: true,
    bind: true,
    enumerable: true,
    forced: FORCED
}, {
    // `setImmediate` method
    // http://w3c.github.io/setImmediate/#si-setImmediate
    setImmediate: task.set,
    // `clearImmediate` method
    // http://w3c.github.io/setImmediate/#si-clearImmediate
    clearImmediate: task.clear
});

},{"../internals/export":"2y5a0","../internals/global":"4E9rT","../internals/task":"4jQeX"}],"uG3o5":[function(require,module,exports) {
var $ = require('../internals/export');
var global = require('../internals/global');
var microtask = require('../internals/microtask');
var IS_NODE = require('../internals/engine-is-node');
var process = global.process;
// `queueMicrotask` method
// https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-queuemicrotask
$({
    global: true,
    enumerable: true,
    noTargetGet: true
}, {
    queueMicrotask: function queueMicrotask(fn) {
        var domain = IS_NODE && process.domain;
        microtask(domain ? domain.bind(fn) : fn);
    }
});

},{"../internals/export":"2y5a0","../internals/global":"4E9rT","../internals/microtask":"6lvt7","../internals/engine-is-node":"7jmSb"}],"Gayae":[function(require,module,exports) {
var $ = require('../internals/export');
var global = require('../internals/global');
var userAgent = require('../internals/engine-user-agent');
var slice = [].slice;
var MSIE = /MSIE .\./.test(userAgent); // <- dirty ie9- check
var wrap = function(scheduler) {
    return function(handler, timeout/* , ...arguments */ ) {
        var boundArgs = arguments.length > 2;
        var args = boundArgs ? slice.call(arguments, 2) : undefined;
        return scheduler(boundArgs ? function() {
            // eslint-disable-next-line no-new-func -- spec requirement
            (typeof handler == 'function' ? handler : Function(handler)).apply(this, args);
        } : handler, timeout);
    };
};
// ie9- setTimeout & setInterval additional parameters fix
// https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#timers
$({
    global: true,
    bind: true,
    forced: MSIE
}, {
    // `setTimeout` method
    // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout
    setTimeout: wrap(global.setTimeout),
    // `setInterval` method
    // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-setinterval
    setInterval: wrap(global.setInterval)
});

},{"../internals/export":"2y5a0","../internals/global":"4E9rT","../internals/engine-user-agent":"69cCi"}],"5Jt1f":[function(require,module,exports) {
'use strict';
// TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`
require('../modules/es.string.iterator');
var $ = require('../internals/export');
var DESCRIPTORS = require('../internals/descriptors');
var USE_NATIVE_URL = require('../internals/native-url');
var global = require('../internals/global');
var defineProperties = require('../internals/object-define-properties');
var redefine = require('../internals/redefine');
var anInstance = require('../internals/an-instance');
var has = require('../internals/has');
var assign = require('../internals/object-assign');
var arrayFrom = require('../internals/array-from');
var codeAt = require('../internals/string-multibyte').codeAt;
var toASCII = require('../internals/string-punycode-to-ascii');
var setToStringTag = require('../internals/set-to-string-tag');
var URLSearchParamsModule = require('../modules/web.url-search-params');
var InternalStateModule = require('../internals/internal-state');
var NativeURL = global.URL;
var URLSearchParams1 = URLSearchParamsModule.URLSearchParams;
var getInternalSearchParamsState = URLSearchParamsModule.getState;
var setInternalState = InternalStateModule.set;
var getInternalURLState = InternalStateModule.getterFor('URL');
var floor = Math.floor;
var pow = Math.pow;
var INVALID_AUTHORITY = 'Invalid authority';
var INVALID_SCHEME = 'Invalid scheme';
var INVALID_HOST = 'Invalid host';
var INVALID_PORT = 'Invalid port';
var ALPHA = /[A-Za-z]/;
// eslint-disable-next-line regexp/no-obscure-range -- safe
var ALPHANUMERIC = /[\d+-.A-Za-z]/;
var DIGIT = /\d/;
var HEX_START = /^(0x|0X)/;
var OCT = /^[0-7]+$/;
var DEC = /^\d+$/;
var HEX = /^[\dA-Fa-f]+$/;
/* eslint-disable no-control-regex -- safe */ var FORBIDDEN_HOST_CODE_POINT = /[\0\t\n\r #%/:?@[\\]]/;
var FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT = /[\0\t\n\r #/:?@[\\]]/;
var LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE = /^[\u0000-\u001F ]+|[\u0000-\u001F ]+$/g;
var TAB_AND_NEW_LINE = /[\t\n\r]/g;
/* eslint-enable no-control-regex -- safe */ var EOF;
var parseHost = function(url, input) {
    var result, codePoints, index;
    if (input.charAt(0) == '[') {
        if (input.charAt(input.length - 1) != ']') return INVALID_HOST;
        result = parseIPv6(input.slice(1, -1));
        if (!result) return INVALID_HOST;
        url.host = result;
    // opaque host
    } else if (!isSpecial(url)) {
        if (FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT.test(input)) return INVALID_HOST;
        result = '';
        codePoints = arrayFrom(input);
        for(index = 0; index < codePoints.length; index++)result += percentEncode(codePoints[index], C0ControlPercentEncodeSet);
        url.host = result;
    } else {
        input = toASCII(input);
        if (FORBIDDEN_HOST_CODE_POINT.test(input)) return INVALID_HOST;
        result = parseIPv4(input);
        if (result === null) return INVALID_HOST;
        url.host = result;
    }
};
var parseIPv4 = function(input) {
    var parts = input.split('.');
    var partsLength, numbers, index, part, radix, number, ipv4;
    if (parts.length && parts[parts.length - 1] == '') parts.pop();
    partsLength = parts.length;
    if (partsLength > 4) return input;
    numbers = [];
    for(index = 0; index < partsLength; index++){
        part = parts[index];
        if (part == '') return input;
        radix = 10;
        if (part.length > 1 && part.charAt(0) == '0') {
            radix = HEX_START.test(part) ? 16 : 8;
            part = part.slice(radix == 8 ? 1 : 2);
        }
        if (part === '') number = 0;
        else {
            if (!(radix == 10 ? DEC : radix == 8 ? OCT : HEX).test(part)) return input;
            number = parseInt(part, radix);
        }
        numbers.push(number);
    }
    for(index = 0; index < partsLength; index++){
        number = numbers[index];
        if (index == partsLength - 1) {
            if (number >= pow(256, 5 - partsLength)) return null;
        } else if (number > 255) return null;
    }
    ipv4 = numbers.pop();
    for(index = 0; index < numbers.length; index++)ipv4 += numbers[index] * pow(256, 3 - index);
    return ipv4;
};
// eslint-disable-next-line max-statements -- TODO
var parseIPv6 = function(input) {
    var address = [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
    ];
    var pieceIndex = 0;
    var compress = null;
    var pointer = 0;
    var value, length, numbersSeen, ipv4Piece, number, swaps, swap;
    var char = function() {
        return input.charAt(pointer);
    };
    if (char() == ':') {
        if (input.charAt(1) != ':') return;
        pointer += 2;
        pieceIndex++;
        compress = pieceIndex;
    }
    while(char()){
        if (pieceIndex == 8) return;
        if (char() == ':') {
            if (compress !== null) return;
            pointer++;
            pieceIndex++;
            compress = pieceIndex;
            continue;
        }
        value = length = 0;
        while(length < 4 && HEX.test(char())){
            value = value * 16 + parseInt(char(), 16);
            pointer++;
            length++;
        }
        if (char() == '.') {
            if (length == 0) return;
            pointer -= length;
            if (pieceIndex > 6) return;
            numbersSeen = 0;
            while(char()){
                ipv4Piece = null;
                if (numbersSeen > 0) {
                    if (char() == '.' && numbersSeen < 4) pointer++;
                    else return;
                }
                if (!DIGIT.test(char())) return;
                while(DIGIT.test(char())){
                    number = parseInt(char(), 10);
                    if (ipv4Piece === null) ipv4Piece = number;
                    else if (ipv4Piece == 0) return;
                    else ipv4Piece = ipv4Piece * 10 + number;
                    if (ipv4Piece > 255) return;
                    pointer++;
                }
                address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;
                numbersSeen++;
                if (numbersSeen == 2 || numbersSeen == 4) pieceIndex++;
            }
            if (numbersSeen != 4) return;
            break;
        } else if (char() == ':') {
            pointer++;
            if (!char()) return;
        } else if (char()) return;
        address[pieceIndex++] = value;
    }
    if (compress !== null) {
        swaps = pieceIndex - compress;
        pieceIndex = 7;
        while(pieceIndex != 0 && swaps > 0){
            swap = address[pieceIndex];
            address[pieceIndex--] = address[compress + swaps - 1];
            address[compress + --swaps] = swap;
        }
    } else if (pieceIndex != 8) return;
    return address;
};
var findLongestZeroSequence = function(ipv6) {
    var maxIndex = null;
    var maxLength = 1;
    var currStart = null;
    var currLength = 0;
    var index = 0;
    for(; index < 8; index++)if (ipv6[index] !== 0) {
        if (currLength > maxLength) {
            maxIndex = currStart;
            maxLength = currLength;
        }
        currStart = null;
        currLength = 0;
    } else {
        if (currStart === null) currStart = index;
        ++currLength;
    }
    if (currLength > maxLength) {
        maxIndex = currStart;
        maxLength = currLength;
    }
    return maxIndex;
};
var serializeHost = function(host) {
    var result, index, compress, ignore0;
    // ipv4
    if (typeof host == 'number') {
        result = [];
        for(index = 0; index < 4; index++){
            result.unshift(host % 256);
            host = floor(host / 256);
        }
        return result.join('.');
    // ipv6
    } else if (typeof host == 'object') {
        result = '';
        compress = findLongestZeroSequence(host);
        for(index = 0; index < 8; index++){
            if (ignore0 && host[index] === 0) continue;
            if (ignore0) ignore0 = false;
            if (compress === index) {
                result += index ? ':' : '::';
                ignore0 = true;
            } else {
                result += host[index].toString(16);
                if (index < 7) result += ':';
            }
        }
        return '[' + result + ']';
    }
    return host;
};
var C0ControlPercentEncodeSet = {
};
var fragmentPercentEncodeSet = assign({
}, C0ControlPercentEncodeSet, {
    ' ': 1,
    '"': 1,
    '<': 1,
    '>': 1,
    '`': 1
});
var pathPercentEncodeSet = assign({
}, fragmentPercentEncodeSet, {
    '#': 1,
    '?': 1,
    '{': 1,
    '}': 1
});
var userinfoPercentEncodeSet = assign({
}, pathPercentEncodeSet, {
    '/': 1,
    ':': 1,
    ';': 1,
    '=': 1,
    '@': 1,
    '[': 1,
    '\\': 1,
    ']': 1,
    '^': 1,
    '|': 1
});
var percentEncode = function(char, set) {
    var code = codeAt(char, 0);
    return code > 32 && code < 127 && !has(set, char) ? char : encodeURIComponent(char);
};
var specialSchemes = {
    ftp: 21,
    file: null,
    http: 80,
    https: 443,
    ws: 80,
    wss: 443
};
var isSpecial = function(url) {
    return has(specialSchemes, url.scheme);
};
var includesCredentials = function(url) {
    return url.username != '' || url.password != '';
};
var cannotHaveUsernamePasswordPort = function(url) {
    return !url.host || url.cannotBeABaseURL || url.scheme == 'file';
};
var isWindowsDriveLetter = function(string, normalized) {
    var second;
    return string.length == 2 && ALPHA.test(string.charAt(0)) && ((second = string.charAt(1)) == ':' || !normalized && second == '|');
};
var startsWithWindowsDriveLetter = function(string) {
    var third;
    return string.length > 1 && isWindowsDriveLetter(string.slice(0, 2)) && (string.length == 2 || (third = string.charAt(2)) === '/' || third === '\\' || third === '?' || third === '#');
};
var shortenURLsPath = function(url) {
    var path = url.path;
    var pathSize = path.length;
    if (pathSize && (url.scheme != 'file' || pathSize != 1 || !isWindowsDriveLetter(path[0], true))) path.pop();
};
var isSingleDot = function(segment) {
    return segment === '.' || segment.toLowerCase() === '%2e';
};
var isDoubleDot = function(segment) {
    segment = segment.toLowerCase();
    return segment === '..' || segment === '%2e.' || segment === '.%2e' || segment === '%2e%2e';
};
// States:
var SCHEME_START = {
};
var SCHEME = {
};
var NO_SCHEME = {
};
var SPECIAL_RELATIVE_OR_AUTHORITY = {
};
var PATH_OR_AUTHORITY = {
};
var RELATIVE = {
};
var RELATIVE_SLASH = {
};
var SPECIAL_AUTHORITY_SLASHES = {
};
var SPECIAL_AUTHORITY_IGNORE_SLASHES = {
};
var AUTHORITY = {
};
var HOST = {
};
var HOSTNAME = {
};
var PORT = {
};
var FILE = {
};
var FILE_SLASH = {
};
var FILE_HOST = {
};
var PATH_START = {
};
var PATH = {
};
var CANNOT_BE_A_BASE_URL_PATH = {
};
var QUERY = {
};
var FRAGMENT = {
};
// eslint-disable-next-line max-statements -- TODO
var parseURL = function(url, input, stateOverride, base) {
    var state = stateOverride || SCHEME_START;
    var pointer = 0;
    var buffer = '';
    var seenAt = false;
    var seenBracket = false;
    var seenPasswordToken = false;
    var codePoints, char, bufferCodePoints, failure;
    if (!stateOverride) {
        url.scheme = '';
        url.username = '';
        url.password = '';
        url.host = null;
        url.port = null;
        url.path = [];
        url.query = null;
        url.fragment = null;
        url.cannotBeABaseURL = false;
        input = input.replace(LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE, '');
    }
    input = input.replace(TAB_AND_NEW_LINE, '');
    codePoints = arrayFrom(input);
    while(pointer <= codePoints.length){
        char = codePoints[pointer];
        switch(state){
            case SCHEME_START:
                if (char && ALPHA.test(char)) {
                    buffer += char.toLowerCase();
                    state = SCHEME;
                } else if (!stateOverride) {
                    state = NO_SCHEME;
                    continue;
                } else return INVALID_SCHEME;
                break;
            case SCHEME:
                if (char && (ALPHANUMERIC.test(char) || char == '+' || char == '-' || char == '.')) buffer += char.toLowerCase();
                else if (char == ':') {
                    if (stateOverride && (isSpecial(url) != has(specialSchemes, buffer) || buffer == 'file' && (includesCredentials(url) || url.port !== null) || url.scheme == 'file' && !url.host)) return;
                    url.scheme = buffer;
                    if (stateOverride) {
                        if (isSpecial(url) && specialSchemes[url.scheme] == url.port) url.port = null;
                        return;
                    }
                    buffer = '';
                    if (url.scheme == 'file') state = FILE;
                    else if (isSpecial(url) && base && base.scheme == url.scheme) state = SPECIAL_RELATIVE_OR_AUTHORITY;
                    else if (isSpecial(url)) state = SPECIAL_AUTHORITY_SLASHES;
                    else if (codePoints[pointer + 1] == '/') {
                        state = PATH_OR_AUTHORITY;
                        pointer++;
                    } else {
                        url.cannotBeABaseURL = true;
                        url.path.push('');
                        state = CANNOT_BE_A_BASE_URL_PATH;
                    }
                } else if (!stateOverride) {
                    buffer = '';
                    state = NO_SCHEME;
                    pointer = 0;
                    continue;
                } else return INVALID_SCHEME;
                break;
            case NO_SCHEME:
                if (!base || base.cannotBeABaseURL && char != '#') return INVALID_SCHEME;
                if (base.cannotBeABaseURL && char == '#') {
                    url.scheme = base.scheme;
                    url.path = base.path.slice();
                    url.query = base.query;
                    url.fragment = '';
                    url.cannotBeABaseURL = true;
                    state = FRAGMENT;
                    break;
                }
                state = base.scheme == 'file' ? FILE : RELATIVE;
                continue;
            case SPECIAL_RELATIVE_OR_AUTHORITY:
                if (char == '/' && codePoints[pointer + 1] == '/') {
                    state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
                    pointer++;
                } else {
                    state = RELATIVE;
                    continue;
                }
                break;
            case PATH_OR_AUTHORITY:
                if (char == '/') {
                    state = AUTHORITY;
                    break;
                } else {
                    state = PATH;
                    continue;
                }
            case RELATIVE:
                url.scheme = base.scheme;
                if (char == EOF) {
                    url.username = base.username;
                    url.password = base.password;
                    url.host = base.host;
                    url.port = base.port;
                    url.path = base.path.slice();
                    url.query = base.query;
                } else if (char == '/' || char == '\\' && isSpecial(url)) state = RELATIVE_SLASH;
                else if (char == '?') {
                    url.username = base.username;
                    url.password = base.password;
                    url.host = base.host;
                    url.port = base.port;
                    url.path = base.path.slice();
                    url.query = '';
                    state = QUERY;
                } else if (char == '#') {
                    url.username = base.username;
                    url.password = base.password;
                    url.host = base.host;
                    url.port = base.port;
                    url.path = base.path.slice();
                    url.query = base.query;
                    url.fragment = '';
                    state = FRAGMENT;
                } else {
                    url.username = base.username;
                    url.password = base.password;
                    url.host = base.host;
                    url.port = base.port;
                    url.path = base.path.slice();
                    url.path.pop();
                    state = PATH;
                    continue;
                }
                break;
            case RELATIVE_SLASH:
                if (isSpecial(url) && (char == '/' || char == '\\')) state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
                else if (char == '/') state = AUTHORITY;
                else {
                    url.username = base.username;
                    url.password = base.password;
                    url.host = base.host;
                    url.port = base.port;
                    state = PATH;
                    continue;
                }
                break;
            case SPECIAL_AUTHORITY_SLASHES:
                state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
                if (char != '/' || buffer.charAt(pointer + 1) != '/') continue;
                pointer++;
                break;
            case SPECIAL_AUTHORITY_IGNORE_SLASHES:
                if (char != '/' && char != '\\') {
                    state = AUTHORITY;
                    continue;
                }
                break;
            case AUTHORITY:
                if (char == '@') {
                    if (seenAt) buffer = '%40' + buffer;
                    seenAt = true;
                    bufferCodePoints = arrayFrom(buffer);
                    for(var i = 0; i < bufferCodePoints.length; i++){
                        var codePoint = bufferCodePoints[i];
                        if (codePoint == ':' && !seenPasswordToken) {
                            seenPasswordToken = true;
                            continue;
                        }
                        var encodedCodePoints = percentEncode(codePoint, userinfoPercentEncodeSet);
                        if (seenPasswordToken) url.password += encodedCodePoints;
                        else url.username += encodedCodePoints;
                    }
                    buffer = '';
                } else if (char == EOF || char == '/' || char == '?' || char == '#' || char == '\\' && isSpecial(url)) {
                    if (seenAt && buffer == '') return INVALID_AUTHORITY;
                    pointer -= arrayFrom(buffer).length + 1;
                    buffer = '';
                    state = HOST;
                } else buffer += char;
                break;
            case HOST:
            case HOSTNAME:
                if (stateOverride && url.scheme == 'file') {
                    state = FILE_HOST;
                    continue;
                } else if (char == ':' && !seenBracket) {
                    if (buffer == '') return INVALID_HOST;
                    failure = parseHost(url, buffer);
                    if (failure) return failure;
                    buffer = '';
                    state = PORT;
                    if (stateOverride == HOSTNAME) return;
                } else if (char == EOF || char == '/' || char == '?' || char == '#' || char == '\\' && isSpecial(url)) {
                    if (isSpecial(url) && buffer == '') return INVALID_HOST;
                    if (stateOverride && buffer == '' && (includesCredentials(url) || url.port !== null)) return;
                    failure = parseHost(url, buffer);
                    if (failure) return failure;
                    buffer = '';
                    state = PATH_START;
                    if (stateOverride) return;
                    continue;
                } else {
                    if (char == '[') seenBracket = true;
                    else if (char == ']') seenBracket = false;
                    buffer += char;
                }
                break;
            case PORT:
                if (DIGIT.test(char)) buffer += char;
                else if (char == EOF || char == '/' || char == '?' || char == '#' || char == '\\' && isSpecial(url) || stateOverride) {
                    if (buffer != '') {
                        var port = parseInt(buffer, 10);
                        if (port > 65535) return INVALID_PORT;
                        url.port = isSpecial(url) && port === specialSchemes[url.scheme] ? null : port;
                        buffer = '';
                    }
                    if (stateOverride) return;
                    state = PATH_START;
                    continue;
                } else return INVALID_PORT;
                break;
            case FILE:
                url.scheme = 'file';
                if (char == '/' || char == '\\') state = FILE_SLASH;
                else if (base && base.scheme == 'file') {
                    if (char == EOF) {
                        url.host = base.host;
                        url.path = base.path.slice();
                        url.query = base.query;
                    } else if (char == '?') {
                        url.host = base.host;
                        url.path = base.path.slice();
                        url.query = '';
                        state = QUERY;
                    } else if (char == '#') {
                        url.host = base.host;
                        url.path = base.path.slice();
                        url.query = base.query;
                        url.fragment = '';
                        state = FRAGMENT;
                    } else {
                        if (!startsWithWindowsDriveLetter(codePoints.slice(pointer).join(''))) {
                            url.host = base.host;
                            url.path = base.path.slice();
                            shortenURLsPath(url);
                        }
                        state = PATH;
                        continue;
                    }
                } else {
                    state = PATH;
                    continue;
                }
                break;
            case FILE_SLASH:
                if (char == '/' || char == '\\') {
                    state = FILE_HOST;
                    break;
                }
                if (base && base.scheme == 'file' && !startsWithWindowsDriveLetter(codePoints.slice(pointer).join(''))) {
                    if (isWindowsDriveLetter(base.path[0], true)) url.path.push(base.path[0]);
                    else url.host = base.host;
                }
                state = PATH;
                continue;
            case FILE_HOST:
                if (char == EOF || char == '/' || char == '\\' || char == '?' || char == '#') {
                    if (!stateOverride && isWindowsDriveLetter(buffer)) state = PATH;
                    else if (buffer == '') {
                        url.host = '';
                        if (stateOverride) return;
                        state = PATH_START;
                    } else {
                        failure = parseHost(url, buffer);
                        if (failure) return failure;
                        if (url.host == 'localhost') url.host = '';
                        if (stateOverride) return;
                        buffer = '';
                        state = PATH_START;
                    }
                    continue;
                } else buffer += char;
                break;
            case PATH_START:
                if (isSpecial(url)) {
                    state = PATH;
                    if (char != '/' && char != '\\') continue;
                } else if (!stateOverride && char == '?') {
                    url.query = '';
                    state = QUERY;
                } else if (!stateOverride && char == '#') {
                    url.fragment = '';
                    state = FRAGMENT;
                } else if (char != EOF) {
                    state = PATH;
                    if (char != '/') continue;
                }
                break;
            case PATH:
                if (char == EOF || char == '/' || char == '\\' && isSpecial(url) || !stateOverride && (char == '?' || char == '#')) {
                    if (isDoubleDot(buffer)) {
                        shortenURLsPath(url);
                        if (char != '/' && !(char == '\\' && isSpecial(url))) url.path.push('');
                    } else if (isSingleDot(buffer)) {
                        if (char != '/' && !(char == '\\' && isSpecial(url))) url.path.push('');
                    } else {
                        if (url.scheme == 'file' && !url.path.length && isWindowsDriveLetter(buffer)) {
                            if (url.host) url.host = '';
                            buffer = buffer.charAt(0) + ':'; // normalize windows drive letter
                        }
                        url.path.push(buffer);
                    }
                    buffer = '';
                    if (url.scheme == 'file' && (char == EOF || char == '?' || char == '#')) while(url.path.length > 1 && url.path[0] === '')url.path.shift();
                    if (char == '?') {
                        url.query = '';
                        state = QUERY;
                    } else if (char == '#') {
                        url.fragment = '';
                        state = FRAGMENT;
                    }
                } else buffer += percentEncode(char, pathPercentEncodeSet);
                break;
            case CANNOT_BE_A_BASE_URL_PATH:
                if (char == '?') {
                    url.query = '';
                    state = QUERY;
                } else if (char == '#') {
                    url.fragment = '';
                    state = FRAGMENT;
                } else if (char != EOF) url.path[0] += percentEncode(char, C0ControlPercentEncodeSet);
                break;
            case QUERY:
                if (!stateOverride && char == '#') {
                    url.fragment = '';
                    state = FRAGMENT;
                } else if (char != EOF) {
                    if (char == "'" && isSpecial(url)) url.query += '%27';
                    else if (char == '#') url.query += '%23';
                    else url.query += percentEncode(char, C0ControlPercentEncodeSet);
                }
                break;
            case FRAGMENT:
                if (char != EOF) url.fragment += percentEncode(char, fragmentPercentEncodeSet);
                break;
        }
        pointer++;
    }
};
// `URL` constructor
// https://url.spec.whatwg.org/#url-class
var URLConstructor = function URL1(url/* , base */ ) {
    var that = anInstance(this, URLConstructor, 'URL');
    var base = arguments.length > 1 ? arguments[1] : undefined;
    var urlString = String(url);
    var state = setInternalState(that, {
        type: 'URL'
    });
    var baseState, failure;
    if (base !== undefined) {
        if (base instanceof URLConstructor) baseState = getInternalURLState(base);
        else {
            failure = parseURL(baseState = {
            }, String(base));
            if (failure) throw TypeError(failure);
        }
    }
    failure = parseURL(state, urlString, null, baseState);
    if (failure) throw TypeError(failure);
    var searchParams = state.searchParams = new URLSearchParams1();
    var searchParamsState = getInternalSearchParamsState(searchParams);
    searchParamsState.updateSearchParams(state.query);
    searchParamsState.updateURL = function() {
        state.query = String(searchParams) || null;
    };
    if (!DESCRIPTORS) {
        that.href = serializeURL.call(that);
        that.origin = getOrigin.call(that);
        that.protocol = getProtocol.call(that);
        that.username = getUsername.call(that);
        that.password = getPassword.call(that);
        that.host = getHost.call(that);
        that.hostname = getHostname.call(that);
        that.port = getPort.call(that);
        that.pathname = getPathname.call(that);
        that.search = getSearch.call(that);
        that.searchParams = getSearchParams.call(that);
        that.hash = getHash.call(that);
    }
};
var URLPrototype = URLConstructor.prototype;
var serializeURL = function() {
    var url = getInternalURLState(this);
    var scheme = url.scheme;
    var username = url.username;
    var password = url.password;
    var host = url.host;
    var port = url.port;
    var path = url.path;
    var query = url.query;
    var fragment = url.fragment;
    var output = scheme + ':';
    if (host !== null) {
        output += '//';
        if (includesCredentials(url)) output += username + (password ? ':' + password : '') + '@';
        output += serializeHost(host);
        if (port !== null) output += ':' + port;
    } else if (scheme == 'file') output += '//';
    output += url.cannotBeABaseURL ? path[0] : path.length ? '/' + path.join('/') : '';
    if (query !== null) output += '?' + query;
    if (fragment !== null) output += '#' + fragment;
    return output;
};
var getOrigin = function() {
    var url = getInternalURLState(this);
    var scheme = url.scheme;
    var port = url.port;
    if (scheme == 'blob') try {
        return new URLConstructor(scheme.path[0]).origin;
    } catch (error) {
        return 'null';
    }
    if (scheme == 'file' || !isSpecial(url)) return 'null';
    return scheme + '://' + serializeHost(url.host) + (port !== null ? ':' + port : '');
};
var getProtocol = function() {
    return getInternalURLState(this).scheme + ':';
};
var getUsername = function() {
    return getInternalURLState(this).username;
};
var getPassword = function() {
    return getInternalURLState(this).password;
};
var getHost = function() {
    var url = getInternalURLState(this);
    var host = url.host;
    var port = url.port;
    return host === null ? '' : port === null ? serializeHost(host) : serializeHost(host) + ':' + port;
};
var getHostname = function() {
    var host = getInternalURLState(this).host;
    return host === null ? '' : serializeHost(host);
};
var getPort = function() {
    var port = getInternalURLState(this).port;
    return port === null ? '' : String(port);
};
var getPathname = function() {
    var url = getInternalURLState(this);
    var path = url.path;
    return url.cannotBeABaseURL ? path[0] : path.length ? '/' + path.join('/') : '';
};
var getSearch = function() {
    var query = getInternalURLState(this).query;
    return query ? '?' + query : '';
};
var getSearchParams = function() {
    return getInternalURLState(this).searchParams;
};
var getHash = function() {
    var fragment = getInternalURLState(this).fragment;
    return fragment ? '#' + fragment : '';
};
var accessorDescriptor = function(getter, setter) {
    return {
        get: getter,
        set: setter,
        configurable: true,
        enumerable: true
    };
};
if (DESCRIPTORS) defineProperties(URLPrototype, {
    // `URL.prototype.href` accessors pair
    // https://url.spec.whatwg.org/#dom-url-href
    href: accessorDescriptor(serializeURL, function(href) {
        var url = getInternalURLState(this);
        var urlString = String(href);
        var failure = parseURL(url, urlString);
        if (failure) throw TypeError(failure);
        getInternalSearchParamsState(url.searchParams).updateSearchParams(url.query);
    }),
    // `URL.prototype.origin` getter
    // https://url.spec.whatwg.org/#dom-url-origin
    origin: accessorDescriptor(getOrigin),
    // `URL.prototype.protocol` accessors pair
    // https://url.spec.whatwg.org/#dom-url-protocol
    protocol: accessorDescriptor(getProtocol, function(protocol) {
        var url = getInternalURLState(this);
        parseURL(url, String(protocol) + ':', SCHEME_START);
    }),
    // `URL.prototype.username` accessors pair
    // https://url.spec.whatwg.org/#dom-url-username
    username: accessorDescriptor(getUsername, function(username) {
        var url = getInternalURLState(this);
        var codePoints = arrayFrom(String(username));
        if (cannotHaveUsernamePasswordPort(url)) return;
        url.username = '';
        for(var i = 0; i < codePoints.length; i++)url.username += percentEncode(codePoints[i], userinfoPercentEncodeSet);
    }),
    // `URL.prototype.password` accessors pair
    // https://url.spec.whatwg.org/#dom-url-password
    password: accessorDescriptor(getPassword, function(password) {
        var url = getInternalURLState(this);
        var codePoints = arrayFrom(String(password));
        if (cannotHaveUsernamePasswordPort(url)) return;
        url.password = '';
        for(var i = 0; i < codePoints.length; i++)url.password += percentEncode(codePoints[i], userinfoPercentEncodeSet);
    }),
    // `URL.prototype.host` accessors pair
    // https://url.spec.whatwg.org/#dom-url-host
    host: accessorDescriptor(getHost, function(host) {
        var url = getInternalURLState(this);
        if (url.cannotBeABaseURL) return;
        parseURL(url, String(host), HOST);
    }),
    // `URL.prototype.hostname` accessors pair
    // https://url.spec.whatwg.org/#dom-url-hostname
    hostname: accessorDescriptor(getHostname, function(hostname) {
        var url = getInternalURLState(this);
        if (url.cannotBeABaseURL) return;
        parseURL(url, String(hostname), HOSTNAME);
    }),
    // `URL.prototype.port` accessors pair
    // https://url.spec.whatwg.org/#dom-url-port
    port: accessorDescriptor(getPort, function(port) {
        var url = getInternalURLState(this);
        if (cannotHaveUsernamePasswordPort(url)) return;
        port = String(port);
        if (port == '') url.port = null;
        else parseURL(url, port, PORT);
    }),
    // `URL.prototype.pathname` accessors pair
    // https://url.spec.whatwg.org/#dom-url-pathname
    pathname: accessorDescriptor(getPathname, function(pathname) {
        var url = getInternalURLState(this);
        if (url.cannotBeABaseURL) return;
        url.path = [];
        parseURL(url, pathname + '', PATH_START);
    }),
    // `URL.prototype.search` accessors pair
    // https://url.spec.whatwg.org/#dom-url-search
    search: accessorDescriptor(getSearch, function(search) {
        var url = getInternalURLState(this);
        search = String(search);
        if (search == '') url.query = null;
        else {
            if ('?' == search.charAt(0)) search = search.slice(1);
            url.query = '';
            parseURL(url, search, QUERY);
        }
        getInternalSearchParamsState(url.searchParams).updateSearchParams(url.query);
    }),
    // `URL.prototype.searchParams` getter
    // https://url.spec.whatwg.org/#dom-url-searchparams
    searchParams: accessorDescriptor(getSearchParams),
    // `URL.prototype.hash` accessors pair
    // https://url.spec.whatwg.org/#dom-url-hash
    hash: accessorDescriptor(getHash, function(hash) {
        var url = getInternalURLState(this);
        hash = String(hash);
        if (hash == '') {
            url.fragment = null;
            return;
        }
        if ('#' == hash.charAt(0)) hash = hash.slice(1);
        url.fragment = '';
        parseURL(url, hash, FRAGMENT);
    })
});
// `URL.prototype.toJSON` method
// https://url.spec.whatwg.org/#dom-url-tojson
redefine(URLPrototype, 'toJSON', function toJSON() {
    return serializeURL.call(this);
}, {
    enumerable: true
});
// `URL.prototype.toString` method
// https://url.spec.whatwg.org/#URL-stringification-behavior
redefine(URLPrototype, 'toString', function toString() {
    return serializeURL.call(this);
}, {
    enumerable: true
});
if (NativeURL) {
    var nativeCreateObjectURL = NativeURL.createObjectURL;
    var nativeRevokeObjectURL = NativeURL.revokeObjectURL;
    // `URL.createObjectURL` method
    // https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL
    // eslint-disable-next-line no-unused-vars -- required for `.length`
    if (nativeCreateObjectURL) redefine(URLConstructor, 'createObjectURL', function createObjectURL(blob) {
        return nativeCreateObjectURL.apply(NativeURL, arguments);
    });
    // `URL.revokeObjectURL` method
    // https://developer.mozilla.org/en-US/docs/Web/API/URL/revokeObjectURL
    // eslint-disable-next-line no-unused-vars -- required for `.length`
    if (nativeRevokeObjectURL) redefine(URLConstructor, 'revokeObjectURL', function revokeObjectURL(url) {
        return nativeRevokeObjectURL.apply(NativeURL, arguments);
    });
}
setToStringTag(URLConstructor, 'URL');
$({
    global: true,
    forced: !USE_NATIVE_URL,
    sham: !DESCRIPTORS
}, {
    URL: URLConstructor
});

},{"../modules/es.string.iterator":"5caim","../internals/export":"2y5a0","../internals/descriptors":"AOzbW","../internals/native-url":"6PErr","../internals/global":"4E9rT","../internals/object-define-properties":"4RDOq","../internals/redefine":"1SlpM","../internals/an-instance":"1BUHG","../internals/has":"1rjL0","../internals/object-assign":"53jj6","../internals/array-from":"1B4D0","../internals/string-multibyte":"7dgpm","../internals/string-punycode-to-ascii":"5FIe6","../internals/set-to-string-tag":"73zwY","../modules/web.url-search-params":"1mYEa","../internals/internal-state":"32AmZ"}],"6PErr":[function(require,module,exports) {
var fails = require('../internals/fails');
var wellKnownSymbol = require('../internals/well-known-symbol');
var IS_PURE = require('../internals/is-pure');
var ITERATOR = wellKnownSymbol('iterator');
module.exports = !fails(function() {
    var url = new URL('b?a=1&b=2&c=3', 'http://a');
    var searchParams = url.searchParams;
    var result = '';
    url.pathname = 'c%20d';
    searchParams.forEach(function(value, key) {
        searchParams['delete']('b');
        result += key + value;
    });
    return IS_PURE && !url.toJSON || !searchParams.sort || url.href !== 'http://a/c%20d?a=1&c=3' || searchParams.get('c') !== '3' || String(new URLSearchParams('?a=1')) !== 'a=1' || !searchParams[ITERATOR] || new URL('https://a@b').username !== 'a' || new URLSearchParams(new URLSearchParams('a=b')).get('a') !== 'b' || new URL('http://тест').host !== 'xn--e1aybc' || new URL('http://a#б').hash !== '#%D0%B1' || result !== 'a1c3' || new URL('http://x', undefined).host !== 'x';
});

},{"../internals/fails":"5dsdP","../internals/well-known-symbol":"23Lpi","../internals/is-pure":"7KzvF"}],"5FIe6":[function(require,module,exports) {
'use strict';
// based on https://github.com/bestiejs/punycode.js/blob/master/punycode.js
var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1
var base = 36;
var tMin = 1;
var tMax = 26;
var skew = 38;
var damp = 700;
var initialBias = 72;
var initialN = 128; // 0x80
var delimiter = '-'; // '\x2D'
var regexNonASCII = /[^\0-\u007E]/; // non-ASCII chars
var regexSeparators = /[.\u3002\uFF0E\uFF61]/g; // RFC 3490 separators
var OVERFLOW_ERROR = 'Overflow: input needs wider integers to process';
var baseMinusTMin = base - tMin;
var floor = Math.floor;
var stringFromCharCode = String.fromCharCode;
/**
 * Creates an array containing the numeric code points of each Unicode
 * character in the string. While JavaScript uses UCS-2 internally,
 * this function will convert a pair of surrogate halves (each of which
 * UCS-2 exposes as separate characters) into a single code point,
 * matching UTF-16.
 */ var ucs2decode = function(string) {
    var output = [];
    var counter = 0;
    var length = string.length;
    while(counter < length){
        var value = string.charCodeAt(counter++);
        if (value >= 55296 && value <= 56319 && counter < length) {
            // It's a high surrogate, and there is a next character.
            var extra = string.charCodeAt(counter++);
            if ((extra & 64512) == 56320) output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
            else {
                // It's an unmatched surrogate; only append this code unit, in case the
                // next code unit is the high surrogate of a surrogate pair.
                output.push(value);
                counter--;
            }
        } else output.push(value);
    }
    return output;
};
/**
 * Converts a digit/integer into a basic code point.
 */ var digitToBasic = function(digit) {
    //  0..25 map to ASCII a..z or A..Z
    // 26..35 map to ASCII 0..9
    return digit + 22 + 75 * (digit < 26);
};
/**
 * Bias adaptation function as per section 3.4 of RFC 3492.
 * https://tools.ietf.org/html/rfc3492#section-3.4
 */ var adapt = function(delta, numPoints, firstTime) {
    var k = 0;
    delta = firstTime ? floor(delta / damp) : delta >> 1;
    delta += floor(delta / numPoints);
    for(; delta > baseMinusTMin * tMax >> 1; k += base)delta = floor(delta / baseMinusTMin);
    return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
};
/**
 * Converts a string of Unicode symbols (e.g. a domain name label) to a
 * Punycode string of ASCII-only symbols.
 */ // eslint-disable-next-line max-statements -- TODO
var encode = function(input) {
    var output = [];
    // Convert the input in UCS-2 to an array of Unicode code points.
    input = ucs2decode(input);
    // Cache the length.
    var inputLength = input.length;
    // Initialize the state.
    var n = initialN;
    var delta = 0;
    var bias = initialBias;
    var i, currentValue;
    // Handle the basic code points.
    for(i = 0; i < input.length; i++){
        currentValue = input[i];
        if (currentValue < 128) output.push(stringFromCharCode(currentValue));
    }
    var basicLength = output.length; // number of basic code points.
    var handledCPCount = basicLength; // number of code points that have been handled;
    // Finish the basic string with a delimiter unless it's empty.
    if (basicLength) output.push(delimiter);
    // Main encoding loop:
    while(handledCPCount < inputLength){
        // All non-basic code points < n have been handled already. Find the next larger one:
        var m = maxInt;
        for(i = 0; i < input.length; i++){
            currentValue = input[i];
            if (currentValue >= n && currentValue < m) m = currentValue;
        }
        // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>, but guard against overflow.
        var handledCPCountPlusOne = handledCPCount + 1;
        if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) throw RangeError(OVERFLOW_ERROR);
        delta += (m - n) * handledCPCountPlusOne;
        n = m;
        for(i = 0; i < input.length; i++){
            currentValue = input[i];
            if (currentValue < n && (++delta) > maxInt) throw RangeError(OVERFLOW_ERROR);
            if (currentValue == n) {
                // Represent delta as a generalized variable-length integer.
                var q = delta;
                for(var k = base;; k += base){
                    var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                    if (q < t) break;
                    var qMinusT = q - t;
                    var baseMinusT = base - t;
                    output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT)));
                    q = floor(qMinusT / baseMinusT);
                }
                output.push(stringFromCharCode(digitToBasic(q)));
                bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                delta = 0;
                ++handledCPCount;
            }
        }
        ++delta;
        ++n;
    }
    return output.join('');
};
module.exports = function(input) {
    var encoded = [];
    var labels = input.toLowerCase().replace(regexSeparators, '\u002E').split('.');
    var i, label;
    for(i = 0; i < labels.length; i++){
        label = labels[i];
        encoded.push(regexNonASCII.test(label) ? 'xn--' + encode(label) : label);
    }
    return encoded.join('.');
};

},{}],"1mYEa":[function(require,module,exports) {
'use strict';
// TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`
require('../modules/es.array.iterator');
var $ = require('../internals/export');
var getBuiltIn = require('../internals/get-built-in');
var USE_NATIVE_URL = require('../internals/native-url');
var redefine = require('../internals/redefine');
var redefineAll = require('../internals/redefine-all');
var setToStringTag = require('../internals/set-to-string-tag');
var createIteratorConstructor = require('../internals/create-iterator-constructor');
var InternalStateModule = require('../internals/internal-state');
var anInstance = require('../internals/an-instance');
var hasOwn = require('../internals/has');
var bind = require('../internals/function-bind-context');
var classof = require('../internals/classof');
var anObject = require('../internals/an-object');
var isObject = require('../internals/is-object');
var create = require('../internals/object-create');
var createPropertyDescriptor = require('../internals/create-property-descriptor');
var getIterator = require('../internals/get-iterator');
var getIteratorMethod = require('../internals/get-iterator-method');
var wellKnownSymbol = require('../internals/well-known-symbol');
var $fetch = getBuiltIn('fetch');
var Headers1 = getBuiltIn('Headers');
var ITERATOR = wellKnownSymbol('iterator');
var URL_SEARCH_PARAMS = 'URLSearchParams';
var URL_SEARCH_PARAMS_ITERATOR = URL_SEARCH_PARAMS + 'Iterator';
var setInternalState = InternalStateModule.set;
var getInternalParamsState = InternalStateModule.getterFor(URL_SEARCH_PARAMS);
var getInternalIteratorState = InternalStateModule.getterFor(URL_SEARCH_PARAMS_ITERATOR);
var plus = /\+/g;
var sequences = Array(4);
var percentSequence = function(bytes) {
    return sequences[bytes - 1] || (sequences[bytes - 1] = RegExp('((?:%[\\da-f]{2}){' + bytes + '})', 'gi'));
};
var percentDecode = function(sequence) {
    try {
        return decodeURIComponent(sequence);
    } catch (error) {
        return sequence;
    }
};
var deserialize = function(it) {
    var result = it.replace(plus, ' ');
    var bytes = 4;
    try {
        return decodeURIComponent(result);
    } catch (error) {
        while(bytes)result = result.replace(percentSequence(bytes--), percentDecode);
        return result;
    }
};
var find = /[!'()~]|%20/g;
var replace = {
    '!': '%21',
    "'": '%27',
    '(': '%28',
    ')': '%29',
    '~': '%7E',
    '%20': '+'
};
var replacer = function(match) {
    return replace[match];
};
var serialize = function(it) {
    return encodeURIComponent(it).replace(find, replacer);
};
var parseSearchParams = function(result, query) {
    if (query) {
        var attributes = query.split('&');
        var index = 0;
        var attribute, entry;
        while(index < attributes.length){
            attribute = attributes[index++];
            if (attribute.length) {
                entry = attribute.split('=');
                result.push({
                    key: deserialize(entry.shift()),
                    value: deserialize(entry.join('='))
                });
            }
        }
    }
};
var updateSearchParams = function(query) {
    this.entries.length = 0;
    parseSearchParams(this.entries, query);
};
var validateArgumentsLength = function(passed, required) {
    if (passed < required) throw TypeError('Not enough arguments');
};
var URLSearchParamsIterator = createIteratorConstructor(function Iterator(params, kind) {
    setInternalState(this, {
        type: URL_SEARCH_PARAMS_ITERATOR,
        iterator: getIterator(getInternalParamsState(params).entries),
        kind: kind
    });
}, 'Iterator', function next() {
    var state = getInternalIteratorState(this);
    var kind = state.kind;
    var step = state.iterator.next();
    var entry = step.value;
    if (!step.done) step.value = kind === 'keys' ? entry.key : kind === 'values' ? entry.value : [
        entry.key,
        entry.value
    ];
    return step;
});
// `URLSearchParams` constructor
// https://url.spec.whatwg.org/#interface-urlsearchparams
var URLSearchParamsConstructor = function URLSearchParams1() {
    anInstance(this, URLSearchParamsConstructor, URL_SEARCH_PARAMS);
    var init = arguments.length > 0 ? arguments[0] : undefined;
    var that = this;
    var entries = [];
    var iteratorMethod, iterator, next1, step, entryIterator, entryNext, first, second, key;
    setInternalState(that, {
        type: URL_SEARCH_PARAMS,
        entries: entries,
        updateURL: function() {
        },
        updateSearchParams: updateSearchParams
    });
    if (init !== undefined) {
        if (isObject(init)) {
            iteratorMethod = getIteratorMethod(init);
            if (typeof iteratorMethod === 'function') {
                iterator = iteratorMethod.call(init);
                next1 = iterator.next;
                while(!(step = next1.call(iterator)).done){
                    entryIterator = getIterator(anObject(step.value));
                    entryNext = entryIterator.next;
                    if ((first = entryNext.call(entryIterator)).done || (second = entryNext.call(entryIterator)).done || !entryNext.call(entryIterator).done) throw TypeError('Expected sequence with length 2');
                    entries.push({
                        key: first.value + '',
                        value: second.value + ''
                    });
                }
            } else for(key in init)if (hasOwn(init, key)) entries.push({
                key: key,
                value: init[key] + ''
            });
        } else parseSearchParams(entries, typeof init === 'string' ? init.charAt(0) === '?' ? init.slice(1) : init : init + '');
    }
};
var URLSearchParamsPrototype = URLSearchParamsConstructor.prototype;
redefineAll(URLSearchParamsPrototype, {
    // `URLSearchParams.prototype.append` method
    // https://url.spec.whatwg.org/#dom-urlsearchparams-append
    append: function append(name, value) {
        validateArgumentsLength(arguments.length, 2);
        var state = getInternalParamsState(this);
        state.entries.push({
            key: name + '',
            value: value + ''
        });
        state.updateURL();
    },
    // `URLSearchParams.prototype.delete` method
    // https://url.spec.whatwg.org/#dom-urlsearchparams-delete
    'delete': function(name) {
        validateArgumentsLength(arguments.length, 1);
        var state = getInternalParamsState(this);
        var entries = state.entries;
        var key = name + '';
        var index = 0;
        while(index < entries.length)if (entries[index].key === key) entries.splice(index, 1);
        else index++;
        state.updateURL();
    },
    // `URLSearchParams.prototype.get` method
    // https://url.spec.whatwg.org/#dom-urlsearchparams-get
    get: function get(name) {
        validateArgumentsLength(arguments.length, 1);
        var entries = getInternalParamsState(this).entries;
        var key = name + '';
        var index = 0;
        for(; index < entries.length; index++){
            if (entries[index].key === key) return entries[index].value;
        }
        return null;
    },
    // `URLSearchParams.prototype.getAll` method
    // https://url.spec.whatwg.org/#dom-urlsearchparams-getall
    getAll: function getAll(name) {
        validateArgumentsLength(arguments.length, 1);
        var entries = getInternalParamsState(this).entries;
        var key = name + '';
        var result = [];
        var index = 0;
        for(; index < entries.length; index++)if (entries[index].key === key) result.push(entries[index].value);
        return result;
    },
    // `URLSearchParams.prototype.has` method
    // https://url.spec.whatwg.org/#dom-urlsearchparams-has
    has: function has(name) {
        validateArgumentsLength(arguments.length, 1);
        var entries = getInternalParamsState(this).entries;
        var key = name + '';
        var index = 0;
        while(index < entries.length){
            if (entries[index++].key === key) return true;
        }
        return false;
    },
    // `URLSearchParams.prototype.set` method
    // https://url.spec.whatwg.org/#dom-urlsearchparams-set
    set: function set(name, value) {
        validateArgumentsLength(arguments.length, 1);
        var state = getInternalParamsState(this);
        var entries = state.entries;
        var found = false;
        var key = name + '';
        var val = value + '';
        var index = 0;
        var entry;
        for(; index < entries.length; index++){
            entry = entries[index];
            if (entry.key === key) {
                if (found) entries.splice(index--, 1);
                else {
                    found = true;
                    entry.value = val;
                }
            }
        }
        if (!found) entries.push({
            key: key,
            value: val
        });
        state.updateURL();
    },
    // `URLSearchParams.prototype.sort` method
    // https://url.spec.whatwg.org/#dom-urlsearchparams-sort
    sort: function sort() {
        var state = getInternalParamsState(this);
        var entries = state.entries;
        // Array#sort is not stable in some engines
        var slice = entries.slice();
        var entry, entriesIndex, sliceIndex;
        entries.length = 0;
        for(sliceIndex = 0; sliceIndex < slice.length; sliceIndex++){
            entry = slice[sliceIndex];
            for(entriesIndex = 0; entriesIndex < sliceIndex; entriesIndex++)if (entries[entriesIndex].key > entry.key) {
                entries.splice(entriesIndex, 0, entry);
                break;
            }
            if (entriesIndex === sliceIndex) entries.push(entry);
        }
        state.updateURL();
    },
    // `URLSearchParams.prototype.forEach` method
    forEach: function forEach(callback/* , thisArg */ ) {
        var entries = getInternalParamsState(this).entries;
        var boundFunction = bind(callback, arguments.length > 1 ? arguments[1] : undefined, 3);
        var index = 0;
        var entry;
        while(index < entries.length){
            entry = entries[index++];
            boundFunction(entry.value, entry.key, this);
        }
    },
    // `URLSearchParams.prototype.keys` method
    keys: function keys() {
        return new URLSearchParamsIterator(this, 'keys');
    },
    // `URLSearchParams.prototype.values` method
    values: function values() {
        return new URLSearchParamsIterator(this, 'values');
    },
    // `URLSearchParams.prototype.entries` method
    entries: function entries() {
        return new URLSearchParamsIterator(this, 'entries');
    }
}, {
    enumerable: true
});
// `URLSearchParams.prototype[@@iterator]` method
redefine(URLSearchParamsPrototype, ITERATOR, URLSearchParamsPrototype.entries);
// `URLSearchParams.prototype.toString` method
// https://url.spec.whatwg.org/#urlsearchparams-stringification-behavior
redefine(URLSearchParamsPrototype, 'toString', function toString() {
    var entries = getInternalParamsState(this).entries;
    var result = [];
    var index = 0;
    var entry;
    while(index < entries.length){
        entry = entries[index++];
        result.push(serialize(entry.key) + '=' + serialize(entry.value));
    }
    return result.join('&');
}, {
    enumerable: true
});
setToStringTag(URLSearchParamsConstructor, URL_SEARCH_PARAMS);
$({
    global: true,
    forced: !USE_NATIVE_URL
}, {
    URLSearchParams: URLSearchParamsConstructor
});
// Wrap `fetch` for correct work with polyfilled `URLSearchParams`
// https://github.com/zloirock/core-js/issues/674
if (!USE_NATIVE_URL && typeof $fetch == 'function' && typeof Headers1 == 'function') $({
    global: true,
    enumerable: true,
    forced: true
}, {
    fetch: function fetch(input/* , init */ ) {
        var args = [
            input
        ];
        var init, body, headers;
        if (arguments.length > 1) {
            init = arguments[1];
            if (isObject(init)) {
                body = init.body;
                if (classof(body) === URL_SEARCH_PARAMS) {
                    headers = init.headers ? new Headers1(init.headers) : new Headers1();
                    if (!headers.has('content-type')) headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
                    init = create(init, {
                        body: createPropertyDescriptor(0, String(body)),
                        headers: createPropertyDescriptor(0, headers)
                    });
                }
            }
            args.push(init);
        }
        return $fetch.apply(this, args);
    }
});
module.exports = {
    URLSearchParams: URLSearchParamsConstructor,
    getState: getInternalParamsState
};

},{"../modules/es.array.iterator":"4FVKU","../internals/export":"2y5a0","../internals/get-built-in":"7zwJE","../internals/native-url":"6PErr","../internals/redefine":"1SlpM","../internals/redefine-all":"2ZFGX","../internals/set-to-string-tag":"73zwY","../internals/create-iterator-constructor":"785Ty","../internals/internal-state":"32AmZ","../internals/an-instance":"1BUHG","../internals/has":"1rjL0","../internals/function-bind-context":"526sd","../internals/classof":"5lDE7","../internals/an-object":"6as2W","../internals/is-object":"5j9oO","../internals/object-create":"2DlVm","../internals/create-property-descriptor":"14mKL","../internals/get-iterator":"7w8ge","../internals/get-iterator-method":"6J57B","../internals/well-known-symbol":"23Lpi"}],"7w8ge":[function(require,module,exports) {
var anObject = require('../internals/an-object');
var getIteratorMethod = require('../internals/get-iterator-method');
module.exports = function(it) {
    var iteratorMethod = getIteratorMethod(it);
    if (typeof iteratorMethod != 'function') throw TypeError(String(it) + ' is not iterable');
    return anObject(iteratorMethod.call(it));
};

},{"../internals/an-object":"6as2W","../internals/get-iterator-method":"6J57B"}],"5ogTs":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
// `URL.prototype.toJSON` method
// https://url.spec.whatwg.org/#dom-url-tojson
$({
    target: 'URL',
    proto: true,
    enumerable: true
}, {
    toJSON: function toJSON() {
        return URL.prototype.toString.call(this);
    }
});

},{"../internals/export":"2y5a0"}],"16JVu":[function(require,module,exports) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ var runtime = function(exports) {
    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var undefined; // More compressible than void 0.
    var $Symbol = typeof Symbol === "function" ? Symbol : {
    };
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
    function define(obj, key, value) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
        return obj[key];
    }
    try {
        // IE 8 has a broken Object.defineProperty that only works on DOM objects.
        define({
        }, "");
    } catch (err) {
        define = function(obj, key, value) {
            return obj[key] = value;
        };
    }
    function wrap(innerFn, outerFn, self, tryLocsList) {
        // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
        var generator = Object.create(protoGenerator.prototype);
        var context = new Context(tryLocsList || []);
        // The ._invoke method unifies the implementations of the .next,
        // .throw, and .return methods.
        generator._invoke = makeInvokeMethod(innerFn, self, context);
        return generator;
    }
    exports.wrap = wrap;
    // Try/catch helper to minimize deoptimizations. Returns a completion
    // record like context.tryEntries[i].completion. This interface could
    // have been (and was previously) designed to take a closure to be
    // invoked without arguments, but in all the cases we care about we
    // already have an existing method we want to call, so there's no need
    // to create a new function object. We can even get away with assuming
    // the method takes exactly one argument, since that happens to be true
    // in every case, so we don't have to touch the arguments object. The
    // only additional allocation required is the completion record, which
    // has a stable shape and so hopefully should be cheap to allocate.
    function tryCatch(fn, obj, arg) {
        try {
            return {
                type: "normal",
                arg: fn.call(obj, arg)
            };
        } catch (err) {
            return {
                type: "throw",
                arg: err
            };
        }
    }
    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";
    // Returning this object from the innerFn has the same effect as
    // breaking out of the dispatch switch statement.
    var ContinueSentinel = {
    };
    // Dummy constructor functions that we use as the .constructor and
    // .constructor.prototype properties for functions that return Generator
    // objects. For full spec compliance, you may wish to configure your
    // minifier not to mangle the names of these two functions.
    function Generator() {
    }
    function GeneratorFunction() {
    }
    function GeneratorFunctionPrototype() {
    }
    // This is a polyfill for %IteratorPrototype% for environments that
    // don't natively support it.
    var IteratorPrototype = {
    };
    IteratorPrototype[iteratorSymbol] = function() {
        return this;
    };
    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
    GeneratorFunctionPrototype.constructor = GeneratorFunction;
    GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction");
    // Helper for defining the .next, .throw, and .return methods of the
    // Iterator interface in terms of a single ._invoke method.
    function defineIteratorMethods(prototype) {
        [
            "next",
            "throw",
            "return"
        ].forEach(function(method) {
            define(prototype, method, function(arg) {
                return this._invoke(method, arg);
            });
        });
    }
    exports.isGeneratorFunction = function(genFun) {
        var ctor = typeof genFun === "function" && genFun.constructor;
        return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
    };
    exports.mark = function(genFun) {
        if (Object.setPrototypeOf) Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
        else {
            genFun.__proto__ = GeneratorFunctionPrototype;
            define(genFun, toStringTagSymbol, "GeneratorFunction");
        }
        genFun.prototype = Object.create(Gp);
        return genFun;
    };
    // Within the body of any async function, `await x` is transformed to
    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
    // `hasOwn.call(value, "__await")` to determine if the yielded value is
    // meant to be awaited.
    exports.awrap = function(arg) {
        return {
            __await: arg
        };
    };
    function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
            var record = tryCatch(generator[method], generator, arg);
            if (record.type === "throw") reject(record.arg);
            else {
                var result = record.arg;
                var value = result.value;
                if (value && typeof value === "object" && hasOwn.call(value, "__await")) return PromiseImpl.resolve(value.__await).then(function(value1) {
                    invoke("next", value1, resolve, reject);
                }, function(err) {
                    invoke("throw", err, resolve, reject);
                });
                return PromiseImpl.resolve(value).then(function(unwrapped) {
                    // When a yielded Promise is resolved, its final value becomes
                    // the .value of the Promise<{value,done}> result for the
                    // current iteration.
                    result.value = unwrapped;
                    resolve(result);
                }, function(error) {
                    // If a rejected Promise was yielded, throw the rejection back
                    // into the async generator function so it can be handled there.
                    return invoke("throw", error, resolve, reject);
                });
            }
        }
        var previousPromise;
        function enqueue(method, arg) {
            function callInvokeWithMethodAndArg() {
                return new PromiseImpl(function(resolve, reject) {
                    invoke(method, arg, resolve, reject);
                });
            }
            return previousPromise = // If enqueue has been called before, then we want to wait until
            // all previous Promises have been resolved before calling invoke,
            // so that results are always delivered in the correct order. If
            // enqueue has not been called before, then it is important to
            // call invoke immediately, without waiting on a callback to fire,
            // so that the async generator function has the opportunity to do
            // any necessary setup in a predictable way. This predictability
            // is why the Promise constructor synchronously invokes its
            // executor callback, and why async functions synchronously
            // execute code before the first await. Since we implement simple
            // async functions in terms of async generators, it is especially
            // important to get this right, even though it requires care.
            previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
            // invocations of the iterator.
            callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        }
        // Define the unified helper method that is used to implement .next,
        // .throw, and .return (see defineIteratorMethods).
        this._invoke = enqueue;
    }
    defineIteratorMethods(AsyncIterator.prototype);
    AsyncIterator.prototype[asyncIteratorSymbol] = function() {
        return this;
    };
    exports.AsyncIterator = AsyncIterator;
    // Note that simple async functions are implemented on top of
    // AsyncIterator objects; they just return a Promise for the value of
    // the final result produced by the iterator.
    exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        if (PromiseImpl === void 0) PromiseImpl = Promise;
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function(result) {
            return result.done ? result.value : iter.next();
        });
    };
    function makeInvokeMethod(innerFn, self, context) {
        var state = GenStateSuspendedStart;
        return function invoke(method, arg) {
            if (state === GenStateExecuting) throw new Error("Generator is already running");
            if (state === GenStateCompleted) {
                if (method === "throw") throw arg;
                // Be forgiving, per 25.3.3.3.3 of the spec:
                // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
                return doneResult();
            }
            context.method = method;
            context.arg = arg;
            while(true){
                var delegate = context.delegate;
                if (delegate) {
                    var delegateResult = maybeInvokeDelegate(delegate, context);
                    if (delegateResult) {
                        if (delegateResult === ContinueSentinel) continue;
                        return delegateResult;
                    }
                }
                if (context.method === "next") // Setting context._sent for legacy support of Babel's
                // function.sent implementation.
                context.sent = context._sent = context.arg;
                else if (context.method === "throw") {
                    if (state === GenStateSuspendedStart) {
                        state = GenStateCompleted;
                        throw context.arg;
                    }
                    context.dispatchException(context.arg);
                } else if (context.method === "return") context.abrupt("return", context.arg);
                state = GenStateExecuting;
                var record = tryCatch(innerFn, self, context);
                if (record.type === "normal") {
                    // If an exception is thrown from innerFn, we leave state ===
                    // GenStateExecuting and loop back for another invocation.
                    state = context.done ? GenStateCompleted : GenStateSuspendedYield;
                    if (record.arg === ContinueSentinel) continue;
                    return {
                        value: record.arg,
                        done: context.done
                    };
                } else if (record.type === "throw") {
                    state = GenStateCompleted;
                    // Dispatch the exception by looping back around to the
                    // context.dispatchException(context.arg) call above.
                    context.method = "throw";
                    context.arg = record.arg;
                }
            }
        };
    }
    // Call delegate.iterator[context.method](context.arg) and handle the
    // result, either by returning a { value, done } result from the
    // delegate iterator, or by modifying context.method and context.arg,
    // setting context.delegate to null, and returning the ContinueSentinel.
    function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];
        if (method === undefined) {
            // A .throw or .return when the delegate iterator has no .throw
            // method always terminates the yield* loop.
            context.delegate = null;
            if (context.method === "throw") {
                // Note: ["return"] must be used for ES3 parsing compatibility.
                if (delegate.iterator["return"]) {
                    // If the delegate iterator has a return method, give it a
                    // chance to clean up.
                    context.method = "return";
                    context.arg = undefined;
                    maybeInvokeDelegate(delegate, context);
                    if (context.method === "throw") // If maybeInvokeDelegate(context) changed context.method from
                    // "return" to "throw", let that override the TypeError below.
                    return ContinueSentinel;
                }
                context.method = "throw";
                context.arg = new TypeError("The iterator does not provide a 'throw' method");
            }
            return ContinueSentinel;
        }
        var record = tryCatch(method, delegate.iterator, context.arg);
        if (record.type === "throw") {
            context.method = "throw";
            context.arg = record.arg;
            context.delegate = null;
            return ContinueSentinel;
        }
        var info = record.arg;
        if (!info) {
            context.method = "throw";
            context.arg = new TypeError("iterator result is not an object");
            context.delegate = null;
            return ContinueSentinel;
        }
        if (info.done) {
            // Assign the result of the finished delegate to the temporary
            // variable specified by delegate.resultName (see delegateYield).
            context[delegate.resultName] = info.value;
            // Resume execution at the desired location (see delegateYield).
            context.next = delegate.nextLoc;
            // If context.method was "throw" but the delegate handled the
            // exception, let the outer generator proceed normally. If
            // context.method was "next", forget context.arg since it has been
            // "consumed" by the delegate iterator. If context.method was
            // "return", allow the original .return call to continue in the
            // outer generator.
            if (context.method !== "return") {
                context.method = "next";
                context.arg = undefined;
            }
        } else // Re-yield the result returned by the delegate method.
        return info;
        // The delegate iterator is finished, so forget it and continue with
        // the outer generator.
        context.delegate = null;
        return ContinueSentinel;
    }
    // Define Generator.prototype.{next,throw,return} in terms of the
    // unified ._invoke helper method.
    defineIteratorMethods(Gp);
    define(Gp, toStringTagSymbol, "Generator");
    // A Generator should always return itself as the iterator object when the
    // @@iterator function is called on it. Some browsers' implementations of the
    // iterator prototype chain incorrectly implement this, causing the Generator
    // object to not be returned from this call. This ensures that doesn't happen.
    // See https://github.com/facebook/regenerator/issues/274 for more details.
    Gp[iteratorSymbol] = function() {
        return this;
    };
    Gp.toString = function() {
        return "[object Generator]";
    };
    function pushTryEntry(locs) {
        var entry = {
            tryLoc: locs[0]
        };
        if (1 in locs) entry.catchLoc = locs[1];
        if (2 in locs) {
            entry.finallyLoc = locs[2];
            entry.afterLoc = locs[3];
        }
        this.tryEntries.push(entry);
    }
    function resetTryEntry(entry) {
        var record = entry.completion || {
        };
        record.type = "normal";
        delete record.arg;
        entry.completion = record;
    }
    function Context(tryLocsList) {
        // The root entry object (effectively a try statement without a catch
        // or a finally block) gives us a place to store values thrown from
        // locations where there is no enclosing try statement.
        this.tryEntries = [
            {
                tryLoc: "root"
            }
        ];
        tryLocsList.forEach(pushTryEntry, this);
        this.reset(true);
    }
    exports.keys = function(object) {
        var keys = [];
        for(var key in object)keys.push(key);
        keys.reverse();
        // Rather than returning an object with a next method, we keep
        // things simple and return the next function itself.
        return function next() {
            while(keys.length){
                var key1 = keys.pop();
                if (key1 in object) {
                    next.value = key1;
                    next.done = false;
                    return next;
                }
            }
            // To avoid creating an additional object, we just hang the .value
            // and .done properties off the next function object itself. This
            // also ensures that the minifier will not anonymize the function.
            next.done = true;
            return next;
        };
    };
    function values(iterable) {
        if (iterable) {
            var iteratorMethod = iterable[iteratorSymbol];
            if (iteratorMethod) return iteratorMethod.call(iterable);
            if (typeof iterable.next === "function") return iterable;
            if (!isNaN(iterable.length)) {
                var i = -1, next = function next1() {
                    while((++i) < iterable.length)if (hasOwn.call(iterable, i)) {
                        next1.value = iterable[i];
                        next1.done = false;
                        return next1;
                    }
                    next1.value = undefined;
                    next1.done = true;
                    return next1;
                };
                return next.next = next;
            }
        }
        // Return an iterator with no values.
        return {
            next: doneResult
        };
    }
    exports.values = values;
    function doneResult() {
        return {
            value: undefined,
            done: true
        };
    }
    Context.prototype = {
        constructor: Context,
        reset: function(skipTempReset) {
            this.prev = 0;
            this.next = 0;
            // Resetting context._sent for legacy support of Babel's
            // function.sent implementation.
            this.sent = this._sent = undefined;
            this.done = false;
            this.delegate = null;
            this.method = "next";
            this.arg = undefined;
            this.tryEntries.forEach(resetTryEntry);
            if (!skipTempReset) {
                for(var name in this)// Not sure about the optimal order of these conditions:
                if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) this[name] = undefined;
            }
        },
        stop: function() {
            this.done = true;
            var rootEntry = this.tryEntries[0];
            var rootRecord = rootEntry.completion;
            if (rootRecord.type === "throw") throw rootRecord.arg;
            return this.rval;
        },
        dispatchException: function(exception) {
            if (this.done) throw exception;
            var context = this;
            function handle(loc, caught) {
                record.type = "throw";
                record.arg = exception;
                context.next = loc;
                if (caught) {
                    // If the dispatched exception was caught by a catch block,
                    // then let that catch block handle the exception normally.
                    context.method = "next";
                    context.arg = undefined;
                }
                return !!caught;
            }
            for(var i = this.tryEntries.length - 1; i >= 0; --i){
                var entry = this.tryEntries[i];
                var record = entry.completion;
                if (entry.tryLoc === "root") // Exception thrown outside of any try block that could handle
                // it, so set the completion value of the entire function to
                // throw the exception.
                return handle("end");
                if (entry.tryLoc <= this.prev) {
                    var hasCatch = hasOwn.call(entry, "catchLoc");
                    var hasFinally = hasOwn.call(entry, "finallyLoc");
                    if (hasCatch && hasFinally) {
                        if (this.prev < entry.catchLoc) return handle(entry.catchLoc, true);
                        else if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
                    } else if (hasCatch) {
                        if (this.prev < entry.catchLoc) return handle(entry.catchLoc, true);
                    } else if (hasFinally) {
                        if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
                    } else throw new Error("try statement without catch or finally");
                }
            }
        },
        abrupt: function(type, arg) {
            for(var i = this.tryEntries.length - 1; i >= 0; --i){
                var entry = this.tryEntries[i];
                if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
                    var finallyEntry = entry;
                    break;
                }
            }
            if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) // Ignore the finally entry if control is not jumping to a
            // location outside the try/catch block.
            finallyEntry = null;
            var record = finallyEntry ? finallyEntry.completion : {
            };
            record.type = type;
            record.arg = arg;
            if (finallyEntry) {
                this.method = "next";
                this.next = finallyEntry.finallyLoc;
                return ContinueSentinel;
            }
            return this.complete(record);
        },
        complete: function(record, afterLoc) {
            if (record.type === "throw") throw record.arg;
            if (record.type === "break" || record.type === "continue") this.next = record.arg;
            else if (record.type === "return") {
                this.rval = this.arg = record.arg;
                this.method = "return";
                this.next = "end";
            } else if (record.type === "normal" && afterLoc) this.next = afterLoc;
            return ContinueSentinel;
        },
        finish: function(finallyLoc) {
            for(var i = this.tryEntries.length - 1; i >= 0; --i){
                var entry = this.tryEntries[i];
                if (entry.finallyLoc === finallyLoc) {
                    this.complete(entry.completion, entry.afterLoc);
                    resetTryEntry(entry);
                    return ContinueSentinel;
                }
            }
        },
        "catch": function(tryLoc) {
            for(var i = this.tryEntries.length - 1; i >= 0; --i){
                var entry = this.tryEntries[i];
                if (entry.tryLoc === tryLoc) {
                    var record = entry.completion;
                    if (record.type === "throw") {
                        var thrown = record.arg;
                        resetTryEntry(entry);
                    }
                    return thrown;
                }
            }
            // The context.catch method must only be called with a location
            // argument that corresponds to a known catch block.
            throw new Error("illegal catch attempt");
        },
        delegateYield: function(iterable, resultName, nextLoc) {
            this.delegate = {
                iterator: values(iterable),
                resultName: resultName,
                nextLoc: nextLoc
            };
            if (this.method === "next") // Deliberately forget the last sent value so that we don't
            // accidentally pass it on to the delegate.
            this.arg = undefined;
            return ContinueSentinel;
        }
    };
    // Regardless of whether this script is executing as a CommonJS module
    // or not, return the runtime object so that we can declare the variable
    // regeneratorRuntime in the outer scope, which allows this module to be
    // injected easily by `bin/regenerator --include-runtime script.js`.
    return exports;
}(// If this script is executing as a CommonJS module, use module.exports
// as the regeneratorRuntime namespace. Otherwise create a new empty
// object. Either way, the resulting object will be used to initialize
// the regeneratorRuntime variable at the top of this file.
typeof module === "object" ? module.exports : {
});
try {
    regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
    // This module should not be running in strict mode, so the above
    // assignment should always work unless something is misconfigured. Just
    // in case runtime.js accidentally runs in strict mode, we can escape
    // strict mode using a global Function call. This could conceivably fail
    // if a Content Security Policy forbids using Function, but in that case
    // the proper solution is to fix the accidental strict mode problem. If
    // you've misconfigured your bundler to force strict mode and applied a
    // CSP to forbid Function, and you're not willing to fix either of those
    // problems, please detail your unique predicament in a GitHub issue.
    Function("r", "regeneratorRuntime = r")(runtime);
}

},{}],"a6qBW":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/react.development.js');

},{"./cjs/react.development.js":"ZrwVF"}],"ZrwVF":[function(require,module,exports) {
/** @license React v17.0.2
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    var _assign = require('object-assign');
    // TODO: this is special because it gets imported during build.
    var ReactVersion = '17.0.2';
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE = 60103;
    var REACT_PORTAL_TYPE = 60106;
    exports.Fragment = 60107;
    exports.StrictMode = 60108;
    exports.Profiler = 60114;
    var REACT_PROVIDER_TYPE = 60109;
    var REACT_CONTEXT_TYPE = 60110;
    var REACT_FORWARD_REF_TYPE = 60112;
    exports.Suspense = 60113;
    var REACT_SUSPENSE_LIST_TYPE = 60120;
    var REACT_MEMO_TYPE = 60115;
    var REACT_LAZY_TYPE = 60116;
    var REACT_BLOCK_TYPE = 60121;
    var REACT_SERVER_BLOCK_TYPE = 60122;
    var REACT_FUNDAMENTAL_TYPE = 60117;
    var REACT_SCOPE_TYPE = 60119;
    var REACT_OPAQUE_ID_TYPE = 60128;
    var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
    var REACT_OFFSCREEN_TYPE = 60130;
    var REACT_LEGACY_HIDDEN_TYPE = 60131;
    if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor = Symbol.for;
        REACT_ELEMENT_TYPE = symbolFor('react.element');
        REACT_PORTAL_TYPE = symbolFor('react.portal');
        exports.Fragment = symbolFor('react.fragment');
        exports.StrictMode = symbolFor('react.strict_mode');
        exports.Profiler = symbolFor('react.profiler');
        REACT_PROVIDER_TYPE = symbolFor('react.provider');
        REACT_CONTEXT_TYPE = symbolFor('react.context');
        REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
        exports.Suspense = symbolFor('react.suspense');
        REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
        REACT_MEMO_TYPE = symbolFor('react.memo');
        REACT_LAZY_TYPE = symbolFor('react.lazy');
        REACT_BLOCK_TYPE = symbolFor('react.block');
        REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
        REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
        REACT_SCOPE_TYPE = symbolFor('react.scope');
        REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
        REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
        REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
    }
    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';
    function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== 'object') return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === 'function') return maybeIterator;
        return null;
    }
    /**
 * Keeps track of the current dispatcher.
 */ var ReactCurrentDispatcher = {
        /**
   * @internal
   * @type {ReactComponent}
   */ current: null
    };
    /**
 * Keeps track of the current batch's configuration such as how long an update
 * should suspend for if it needs to.
 */ var ReactCurrentBatchConfig = {
        transition: 0
    };
    /**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */ var ReactCurrentOwner = {
        /**
   * @internal
   * @type {ReactComponent}
   */ current: null
    };
    var ReactDebugCurrentFrame = {
    };
    var currentExtraStackFrame = null;
    function setExtraStackFrame(stack) {
        currentExtraStackFrame = stack;
    }
    ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
        currentExtraStackFrame = stack;
    }; // Stack implementation injected by the current renderer.
    ReactDebugCurrentFrame.getCurrentStack = null;
    ReactDebugCurrentFrame.getStackAddendum = function() {
        var stack = ''; // Add an extra top frame while an element is being validated
        if (currentExtraStackFrame) stack += currentExtraStackFrame;
         // Delegate to the injected renderer-specific implementation
        var impl = ReactDebugCurrentFrame.getCurrentStack;
        if (impl) stack += impl() || '';
        return stack;
    };
    /**
 * Used by act() to track whether you're inside an act() scope.
 */ var IsSomeRendererActing = {
        current: false
    };
    var ReactSharedInternals = {
        ReactCurrentDispatcher: ReactCurrentDispatcher,
        ReactCurrentBatchConfig: ReactCurrentBatchConfig,
        ReactCurrentOwner: ReactCurrentOwner,
        IsSomeRendererActing: IsSomeRendererActing,
        // Used by renderers to avoid bundling object-assign twice in UMD bundles:
        assign: _assign
    };
    ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
    // by calls to these methods by a Babel plugin.
    //
    // In PROD (or in packages without access to React internals),
    // they are left as they are instead.
    function warn(format) {
        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
        printWarning('warn', format, args);
    }
    function error(format) {
        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
        printWarning('error', format, args);
    }
    function printWarning(level, format, args) {
        var ReactDebugCurrentFrame1 = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame1.getStackAddendum();
        if (stack !== '') {
            format += '%s';
            args = args.concat([
                stack
            ]);
        }
        var argsWithFormat = args.map(function(item) {
            return '' + item;
        }); // Careful: RN currently depends on this prefix
        argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging
        Function.prototype.apply.call(console[level], console, argsWithFormat);
    }
    var didWarnStateUpdateForUnmountedComponent = {
    };
    function warnNoop(publicInstance, callerName) {
        var _constructor = publicInstance.constructor;
        var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
        var warningKey = componentName + "." + callerName;
        if (didWarnStateUpdateForUnmountedComponent[warningKey]) return;
        error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
        didWarnStateUpdateForUnmountedComponent[warningKey] = true;
    }
    /**
 * This is the abstract API for an update queue.
 */ var ReactNoopUpdateQueue = {
        /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */ isMounted: function(publicInstance) {
            return false;
        },
        /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */ enqueueForceUpdate: function(publicInstance, callback, callerName) {
            warnNoop(publicInstance, 'forceUpdate');
        },
        /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */ enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
            warnNoop(publicInstance, 'replaceState');
        },
        /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} Name of the calling function in the public API.
   * @internal
   */ enqueueSetState: function(publicInstance, partialState, callback, callerName) {
            warnNoop(publicInstance, 'setState');
        }
    };
    var emptyObject = {
    };
    Object.freeze(emptyObject);
    /**
 * Base class helpers for the updating state of a component.
 */ function Component(props, context, updater) {
        this.props = props;
        this.context = context; // If a component has string refs, we will assign a different object later.
        this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
        // renderer.
        this.updater = updater || ReactNoopUpdateQueue;
    }
    Component.prototype.isReactComponent = {
    };
    /**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */ Component.prototype.setState = function(partialState, callback) {
        if (!(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null)) throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
        this.updater.enqueueSetState(this, partialState, callback, 'setState');
    };
    /**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */ Component.prototype.forceUpdate = function(callback) {
        this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
    };
    var deprecatedAPIs = {
        isMounted: [
            'isMounted',
            "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."
        ],
        replaceState: [
            'replaceState',
            "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."
        ]
    };
    var defineDeprecationWarning = function(methodName, info) {
        Object.defineProperty(Component.prototype, methodName, {
            get: function() {
                warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
                return undefined;
            }
        });
    };
    for(var fnName in deprecatedAPIs)if (deprecatedAPIs.hasOwnProperty(fnName)) defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    function ComponentDummy() {
    }
    ComponentDummy.prototype = Component.prototype;
    /**
 * Convenience component with default shallow equality check for sCU.
 */ function PureComponent(props, context, updater) {
        this.props = props;
        this.context = context; // If a component has string refs, we will assign a different object later.
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
    }
    var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
    pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.
    _assign(pureComponentPrototype, Component.prototype);
    pureComponentPrototype.isPureReactComponent = true;
    // an immutable object with a single mutable value
    function createRef() {
        var refObject = {
            current: null
        };
        Object.seal(refObject);
        return refObject;
    }
    function getWrappedName(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || '';
        return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
    }
    function getContextName(type) {
        return type.displayName || 'Context';
    }
    function getComponentName(type) {
        if (type == null) // Host root, text node or just invalid type.
        return null;
        if (typeof type.tag === 'number') error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
        if (typeof type === 'function') return type.displayName || type.name || null;
        if (typeof type === 'string') return type;
        switch(type){
            case exports.Fragment:
                return 'Fragment';
            case REACT_PORTAL_TYPE:
                return 'Portal';
            case exports.Profiler:
                return 'Profiler';
            case exports.StrictMode:
                return 'StrictMode';
            case exports.Suspense:
                return 'Suspense';
            case REACT_SUSPENSE_LIST_TYPE:
                return 'SuspenseList';
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + '.Consumer';
            case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + '.Provider';
            case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, 'ForwardRef');
            case REACT_MEMO_TYPE:
                return getComponentName(type.type);
            case REACT_BLOCK_TYPE:
                return getComponentName(type._render);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    return getComponentName(init(payload));
                } catch (x) {
                    return null;
                }
        }
        return null;
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
    };
    var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
    didWarnAboutStringRefs = {
    };
    function hasValidRef(config) {
        if (hasOwnProperty.call(config, 'ref')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.ref !== undefined;
    }
    function hasValidKey(config) {
        if (hasOwnProperty.call(config, 'key')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.key !== undefined;
    }
    function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function() {
            if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, 'key', {
            get: warnAboutAccessingKey,
            configurable: true
        });
    }
    function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function() {
            if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, 'ref', {
            get: warnAboutAccessingRef,
            configurable: true
        });
    }
    function warnIfStringRefCannotBeAutoConverted(config) {
        if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
            var componentName = getComponentName(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
                error("Component \"%s\" contains the string ref \"%s\". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref", componentName, config.ref);
                didWarnAboutStringRefs[componentName] = true;
            }
        }
    }
    /**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, instanceof check
 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} props
 * @param {*} key
 * @param {string|object} ref
 * @param {*} owner
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @internal
 */ var ReactElement = function(type, key, ref, self, source, owner, props) {
        var element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type: type,
            key: key,
            ref: ref,
            props: props,
            // Record the component responsible for creating this element.
            _owner: owner
        };
        // The validation flag is currently mutative. We put it on
        // an external backing store so that we can freeze the whole object.
        // This can be replaced with a WeakMap once they are implemented in
        // commonly used development environments.
        element._store = {
        }; // To make comparing ReactElements easier for testing purposes, we make
        // the validation flag non-enumerable (where possible, which should
        // include every environment we run tests in), so the test framework
        // ignores it.
        Object.defineProperty(element._store, 'validated', {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
        }); // self and source are DEV only properties.
        Object.defineProperty(element, '_self', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self
        }); // Two elements created in two different places should be considered
        // equal for testing purposes and therefore we hide it from enumeration.
        Object.defineProperty(element, '_source', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
        });
        if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
        }
        return element;
    };
    /**
 * Create and return a new ReactElement of the given type.
 * See https://reactjs.org/docs/react-api.html#createelement
 */ function createElement(type, config, children) {
        var propName; // Reserved names are extracted
        var props = {
        };
        var key = null;
        var ref = null;
        var self = null;
        var source = null;
        if (config != null) {
            if (hasValidRef(config)) {
                ref = config.ref;
                warnIfStringRefCannotBeAutoConverted(config);
            }
            if (hasValidKey(config)) key = '' + config.key;
            self = config.__self === undefined ? null : config.__self;
            source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object
            for(propName in config)if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) props[propName] = config[propName];
        } // Children can be more than one argument, and those are transferred onto
        // the newly allocated props object.
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) props.children = children;
        else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for(var i = 0; i < childrenLength; i++)childArray[i] = arguments[i + 2];
            if (Object.freeze) Object.freeze(childArray);
            props.children = childArray;
        } // Resolve default props
        if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for(propName in defaultProps)if (props[propName] === undefined) props[propName] = defaultProps[propName];
        }
        if (key || ref) {
            var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
            if (key) defineKeyPropWarningGetter(props, displayName);
            if (ref) defineRefPropWarningGetter(props, displayName);
        }
        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
    }
    function cloneAndReplaceKey(oldElement, newKey) {
        var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
        return newElement;
    }
    /**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://reactjs.org/docs/react-api.html#cloneelement
 */ function cloneElement(element, config, children) {
        if (!!(element === null || element === undefined)) throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
        var propName; // Original props are copied
        var props = _assign({
        }, element.props); // Reserved names are extracted
        var key = element.key;
        var ref = element.ref; // Self is preserved since the owner is preserved.
        var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
        // transpiler, and the original source is probably a better indicator of the
        // true owner.
        var source = element._source; // Owner will be preserved, unless ref is overridden
        var owner = element._owner;
        if (config != null) {
            if (hasValidRef(config)) {
                // Silently steal the ref from the parent.
                ref = config.ref;
                owner = ReactCurrentOwner.current;
            }
            if (hasValidKey(config)) key = '' + config.key;
             // Remaining properties override existing props
            var defaultProps;
            if (element.type && element.type.defaultProps) defaultProps = element.type.defaultProps;
            for(propName in config)if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                if (config[propName] === undefined && defaultProps !== undefined) // Resolve default props
                props[propName] = defaultProps[propName];
                else props[propName] = config[propName];
            }
        } // Children can be more than one argument, and those are transferred onto
        // the newly allocated props object.
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) props.children = children;
        else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for(var i = 0; i < childrenLength; i++)childArray[i] = arguments[i + 2];
            props.children = childArray;
        }
        return ReactElement(element.type, key, ref, self, source, owner, props);
    }
    /**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */ function isValidElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    var SEPARATOR = '.';
    var SUBSEPARATOR = ':';
    /**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */ function escape(key) {
        var escapeRegex = /[=:]/g;
        var escaperLookup = {
            '=': '=0',
            ':': '=2'
        };
        var escapedString = key.replace(escapeRegex, function(match) {
            return escaperLookup[match];
        });
        return '$' + escapedString;
    }
    /**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */ var didWarnAboutMaps = false;
    var userProvidedKeyEscapeRegex = /\/+/g;
    function escapeUserProvidedKey(text) {
        return text.replace(userProvidedKeyEscapeRegex, '$&/');
    }
    /**
 * Generate a key string that identifies a element within a set.
 *
 * @param {*} element A element that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */ function getElementKey(element, index) {
        // Do some typechecking here since we call this blindly. We want to ensure
        // that we don't block potential future ES APIs.
        if (typeof element === 'object' && element !== null && element.key != null) // Explicit key
        return escape('' + element.key);
         // Implicit key determined by the index in the set
        return index.toString(36);
    }
    function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
        var type = typeof children;
        if (type === 'undefined' || type === 'boolean') // All of the above are perceived as null.
        children = null;
        var invokeCallback = false;
        if (children === null) invokeCallback = true;
        else switch(type){
            case 'string':
            case 'number':
                invokeCallback = true;
                break;
            case 'object':
                switch(children.$$typeof){
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                        invokeCallback = true;
                }
        }
        if (invokeCallback) {
            var _child = children;
            var mappedChild = callback(_child); // If it's the only child, treat the name as if it was wrapped in an array
            // so that it's consistent if the number of children grows:
            var childKey = nameSoFar === '' ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
            if (Array.isArray(mappedChild)) {
                var escapedChildKey = '';
                if (childKey != null) escapedChildKey = escapeUserProvidedKey(childKey) + '/';
                mapIntoArray(mappedChild, array, escapedChildKey, '', function(c) {
                    return c;
                });
            } else if (mappedChild != null) {
                if (isValidElement(mappedChild)) mappedChild = cloneAndReplaceKey(mappedChild, // traverseAllChildren used to do for objects as children
                escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey('' + mappedChild.key) + '/' : '') + childKey);
                array.push(mappedChild);
            }
            return 1;
        }
        var child;
        var nextName;
        var subtreeCount = 0; // Count of children found in the current subtree.
        var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
        if (Array.isArray(children)) for(var i = 0; i < children.length; i++){
            child = children[i];
            nextName = nextNamePrefix + getElementKey(child, i);
            subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
        }
        else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === 'function') {
                var iterableChildren = children;
                // Warn about using Maps as children
                if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    didWarnAboutMaps = true;
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while(!(step = iterator.next()).done){
                    child = step.value;
                    nextName = nextNamePrefix + getElementKey(child, ii++);
                    subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
            } else if (type === 'object') {
                var childrenString = '' + children;
                throw Error("Objects are not valid as a React child (found: " + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + "). If you meant to render a collection of children, use an array instead.");
            }
        }
        return subtreeCount;
    }
    /**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenmap
 *
 * The provided mapFunction(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */ function mapChildren(children, func, context) {
        if (children == null) return children;
        var result = [];
        var count = 0;
        mapIntoArray(children, result, '', '', function(child) {
            return func.call(context, child, count++);
        });
        return result;
    }
    /**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrencount
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */ function countChildren(children) {
        var n = 0;
        mapChildren(children, function() {
            n++; // Don't return anything
        });
        return n;
    }
    /**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */ function forEachChildren(children, forEachFunc, forEachContext) {
        mapChildren(children, function() {
            forEachFunc.apply(this, arguments); // Don't return anything.
        }, forEachContext);
    }
    /**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
 */ function toArray(children) {
        return mapChildren(children, function(child) {
            return child;
        }) || [];
    }
    /**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenonly
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */ function onlyChild(children) {
        if (!isValidElement(children)) throw Error("React.Children.only expected to receive a single React element child.");
        return children;
    }
    function createContext(defaultValue, calculateChangedBits) {
        if (calculateChangedBits === undefined) calculateChangedBits = null;
        else if (calculateChangedBits !== null && typeof calculateChangedBits !== 'function') error("createContext: Expected the optional second argument to be a function. Instead received: %s", calculateChangedBits);
        var context = {
            $$typeof: REACT_CONTEXT_TYPE,
            _calculateChangedBits: calculateChangedBits,
            // As a workaround to support multiple concurrent renderers, we categorize
            // some renderers as primary and others as secondary. We only expect
            // there to be two concurrent renderers at most: React Native (primary) and
            // Fabric (secondary); React DOM (primary) and React ART (secondary).
            // Secondary renderers store their context values on separate fields.
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            // Used to track how many concurrent renderers this context currently
            // supports within in a single renderer. Such as parallel server rendering.
            _threadCount: 0,
            // These are circular
            Provider: null,
            Consumer: null
        };
        context.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context
        };
        var hasWarnedAboutUsingNestedContextConsumers = false;
        var hasWarnedAboutUsingConsumerProvider = false;
        var hasWarnedAboutDisplayNameOnConsumer = false;
        // A separate object, but proxies back to the original context object for
        // backwards compatibility. It has a different $$typeof, so we can properly
        // warn for the incorrect usage of Context as a Consumer.
        var Consumer = {
            $$typeof: REACT_CONTEXT_TYPE,
            _context: context,
            _calculateChangedBits: context._calculateChangedBits
        }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here
        Object.defineProperties(Consumer, {
            Provider: {
                get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                        hasWarnedAboutUsingConsumerProvider = true;
                        error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                },
                set: function(_Provider) {
                    context.Provider = _Provider;
                }
            },
            _currentValue: {
                get: function() {
                    return context._currentValue;
                },
                set: function(_currentValue) {
                    context._currentValue = _currentValue;
                }
            },
            _currentValue2: {
                get: function() {
                    return context._currentValue2;
                },
                set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                }
            },
            _threadCount: {
                get: function() {
                    return context._threadCount;
                },
                set: function(_threadCount) {
                    context._threadCount = _threadCount;
                }
            },
            Consumer: {
                get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                        hasWarnedAboutUsingNestedContextConsumers = true;
                        error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                }
            },
            displayName: {
                get: function() {
                    return context.displayName;
                },
                set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                        warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                        hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                }
            }
        }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty
        context.Consumer = Consumer;
        context._currentRenderer = null;
        context._currentRenderer2 = null;
        return context;
    }
    var Uninitialized = -1;
    var Pending = 0;
    var Resolved = 1;
    var Rejected = 2;
    function lazyInitializer(payload) {
        if (payload._status === Uninitialized) {
            var ctor = payload._result;
            var thenable = ctor(); // Transition to the next state.
            var pending = payload;
            pending._status = Pending;
            pending._result = thenable;
            thenable.then(function(moduleObject) {
                if (payload._status === Pending) {
                    var defaultExport = moduleObject.default;
                    if (defaultExport === undefined) error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                    var resolved = payload;
                    resolved._status = Resolved;
                    resolved._result = defaultExport;
                }
            }, function(error1) {
                if (payload._status === Pending) {
                    // Transition to the next state.
                    var rejected = payload;
                    rejected._status = Rejected;
                    rejected._result = error1;
                }
            });
        }
        if (payload._status === Resolved) return payload._result;
        else throw payload._result;
    }
    function lazy(ctor) {
        var payload = {
            // We use these fields to store the result.
            _status: -1,
            _result: ctor
        };
        var lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _payload: payload,
            _init: lazyInitializer
        };
        // In production, this would just set it on the object.
        var defaultProps;
        var propTypes; // $FlowFixMe
        Object.defineProperties(lazyType, {
            defaultProps: {
                configurable: true,
                get: function() {
                    return defaultProps;
                },
                set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps; // Match production behavior more closely:
                    // $FlowFixMe
                    Object.defineProperty(lazyType, 'defaultProps', {
                        enumerable: true
                    });
                }
            },
            propTypes: {
                configurable: true,
                get: function() {
                    return propTypes;
                },
                set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes; // Match production behavior more closely:
                    // $FlowFixMe
                    Object.defineProperty(lazyType, 'propTypes', {
                        enumerable: true
                    });
                }
            }
        });
        return lazyType;
    }
    function forwardRef(render) {
        if (render != null && render.$$typeof === REACT_MEMO_TYPE) error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
        else if (typeof render !== 'function') error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
        else if (render.length !== 0 && render.length !== 2) error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');
        if (render != null) {
            if (render.defaultProps != null || render.propTypes != null) error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
        }
        var elementType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render: render
        };
        var ownName;
        Object.defineProperty(elementType, 'displayName', {
            enumerable: false,
            configurable: true,
            get: function() {
                return ownName;
            },
            set: function(name) {
                ownName = name;
                if (render.displayName == null) render.displayName = name;
            }
        });
        return elementType;
    }
    // Filter certain DOM attributes (e.g. src, href) if their values are empty strings.
    var enableScopeAPI = false; // Experimental Create Event Handle API.
    function isValidElementType(type) {
        if (typeof type === 'string' || typeof type === 'function') return true;
         // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).
        if (type === exports.Fragment || type === exports.Profiler || type === REACT_DEBUG_TRACING_MODE_TYPE || type === exports.StrictMode || type === exports.Suspense || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) return true;
        if (typeof type === 'object' && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) return true;
        }
        return false;
    }
    function memo(type, compare) {
        if (!isValidElementType(type)) error("memo: The first argument must be a component. Instead received: %s", type === null ? 'null' : typeof type);
        var elementType = {
            $$typeof: REACT_MEMO_TYPE,
            type: type,
            compare: compare === undefined ? null : compare
        };
        var ownName;
        Object.defineProperty(elementType, 'displayName', {
            enumerable: false,
            configurable: true,
            get: function() {
                return ownName;
            },
            set: function(name) {
                ownName = name;
                if (type.displayName == null) type.displayName = name;
            }
        });
        return elementType;
    }
    function resolveDispatcher() {
        var dispatcher = ReactCurrentDispatcher.current;
        if (!(dispatcher !== null)) throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
        return dispatcher;
    }
    function useContext(Context, unstable_observedBits) {
        var dispatcher = resolveDispatcher();
        if (unstable_observedBits !== undefined) error("useContext() second argument is reserved for future use in React. Passing it is not supported. You passed: %s.%s", unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? "\n\nDid you call array.map(useContext)? Calling Hooks inside a loop is not supported. Learn more at https://reactjs.org/link/rules-of-hooks" : '');
         // TODO: add a more generic warning for invalid values.
        if (Context._context !== undefined) {
            var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
            // and nobody should be using this in existing code.
            if (realContext.Consumer === Context) error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
            else if (realContext.Provider === Context) error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
        }
        return dispatcher.useContext(Context, unstable_observedBits);
    }
    function useState(initialState) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useState(initialState);
    }
    function useReducer(reducer, initialArg, init) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useReducer(reducer, initialArg, init);
    }
    function useRef(initialValue) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useRef(initialValue);
    }
    function useEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useEffect(create, deps);
    }
    function useLayoutEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useLayoutEffect(create, deps);
    }
    function useCallback(callback, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useCallback(callback, deps);
    }
    function useMemo(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useMemo(create, deps);
    }
    function useImperativeHandle(ref, create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useImperativeHandle(ref, create, deps);
    }
    function useDebugValue(value, formatterFn) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useDebugValue(value, formatterFn);
    }
    // Helpers to patch console.logs to avoid logging during side-effect free
    // replaying on render function. This currently only patches the object
    // lazily which won't cover if the log function was extracted eagerly.
    // We could also eagerly patch the method.
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {
    }
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099
            var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
            });
        /* eslint-enable react-internal/no-production-logging */ }
        disabledDepth++;
    }
    function reenableLogs() {
        disabledDepth--;
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ var props = {
                configurable: true,
                enumerable: true,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                log: _assign({
                }, props, {
                    value: prevLog
                }),
                info: _assign({
                }, props, {
                    value: prevInfo
                }),
                warn: _assign({
                }, props, {
                    value: prevWarn
                }),
                error: _assign({
                }, props, {
                    value: prevError
                }),
                group: _assign({
                }, props, {
                    value: prevGroup
                }),
                groupCollapsed: _assign({
                }, props, {
                    value: prevGroupCollapsed
                }),
                groupEnd: _assign({
                }, props, {
                    value: prevGroupEnd
                })
            });
        /* eslint-enable react-internal/no-production-logging */ }
        if (disabledDepth < 0) error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
        if (prefix === undefined) // Extract the VM specific prefix used by each line.
        try {
            throw Error();
        } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || '';
        }
         // We use the prefix to ensure our stacks line up with native stack frames.
        return '\n' + prefix + name;
    }
    var reentry = false;
    var componentFrameCache;
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
    componentFrameCache = new PossiblyWeakMap();
    function describeNativeComponentFrame(fn, construct) {
        // If something asked for a stack inside a fake render, it should get ignored.
        if (!fn || reentry) return '';
        var frame = componentFrameCache.get(fn);
        if (frame !== undefined) return frame;
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher$1.current; // Set the dispatcher in DEV because this might be call in the render function
        // for warnings.
        ReactCurrentDispatcher$1.current = null;
        disableLogs();
        try {
            // This should throw.
            if (construct) {
                // Something should be setting the props in the constructor.
                var Fake = function() {
                    throw Error();
                }; // $FlowFixMe
                Object.defineProperty(Fake.prototype, 'props', {
                    set: function() {
                        // We use a throwing setter instead of frozen or non-writable props
                        // because that won't throw in a non-strict mode function.
                        throw Error();
                    }
                });
                if (typeof Reflect === 'object' && Reflect.construct) {
                    // We construct a different control for this case to include any extra
                    // frames added by the construct call.
                    try {
                        Reflect.construct(Fake, []);
                    } catch (x) {
                        control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                } else {
                    try {
                        Fake.call();
                    } catch (x) {
                        control = x;
                    }
                    fn.call(Fake.prototype);
                }
            } else {
                try {
                    throw Error();
                } catch (x) {
                    control = x;
                }
                fn();
            }
        } catch (sample) {
            // This is inlined manually because closure doesn't do it for us.
            if (sample && control && typeof sample.stack === 'string') {
                // This extracts the first frame from the sample that isn't also in the control.
                // Skipping one frame that we assume is the frame that calls the two.
                var sampleLines = sample.stack.split('\n');
                var controlLines = control.stack.split('\n');
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c])// We expect at least one stack frame to be shared.
                // Typically this will be the root most one. However, stack frames may be
                // cut off due to maximum stack limits. In this case, one maybe cut off
                // earlier than the other. We assume that the sample is longer or the same
                // and there for cut off earlier. So we should find the root most frame in
                // the sample somewhere in the control.
                c--;
                for(; s >= 1 && c >= 0; s--, c--)// Next we find the first one that isn't the same which should be the
                // frame that called our sample function and the control.
                if (sampleLines[s] !== controlLines[c]) {
                    // In V8, the first line is describing the message but other VMs don't.
                    // If we're about to return the first line, and the control is also on the same
                    // line, that's a pretty good indicator that our sample threw at same line as
                    // the control. I.e. before we entered the sample frame. So we ignore this result.
                    // This can happen if you passed a class to function component, or non-function.
                    if (s !== 1 || c !== 1) do {
                        s--;
                        c--; // We may still have similar intermediate frames from the construct call.
                        // The next one that isn't the same should be our match though.
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                            // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                            var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');
                            if (typeof fn === 'function') componentFrameCache.set(fn, _frame);
                            return _frame;
                        }
                    }while (s >= 1 && c >= 0)
                    break;
                }
            }
        } finally{
            reentry = false;
            ReactCurrentDispatcher$1.current = previousDispatcher;
            reenableLogs();
            Error.prepareStackTrace = previousPrepareStackTrace;
        } // Fallback to just using the name if we couldn't make it throw.
        var name = fn ? fn.displayName || fn.name : '';
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
        if (typeof fn === 'function') componentFrameCache.set(fn, syntheticFrame);
        return syntheticFrame;
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, false);
    }
    function shouldConstruct(Component1) {
        var prototype = Component1.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) return '';
        if (typeof type === 'function') return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type === 'string') return describeBuiltInComponentFrame(type);
        switch(type){
            case exports.Suspense:
                return describeBuiltInComponentFrame('Suspense');
            case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame('SuspenseList');
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
                // Memo may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_BLOCK_TYPE:
                return describeFunctionComponentFrame(type._render);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    // Lazy may contain any component type so we recursively resolve it.
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
        }
        return '';
    }
    var loggedTypeFailures = {
    };
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
        // $FlowFixMe This is okay but Flow doesn't know it.
        var has = Function.call.bind(Object.prototype.hasOwnProperty);
        for(var typeSpecName in typeSpecs)if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
                // This is intentionally an invariant that gets caught. It's the same
                // behavior as without this statement except with a better message.
                if (typeof typeSpecs[typeSpecName] !== 'function') {
                    var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                    err.name = 'Invariant Violation';
                    throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
            } catch (ex) {
                error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || 'React class', location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                // Only monitor this failure once because there tends to be a lot of the
                // same error.
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error('Failed %s type: %s', location, error$1.message);
                setCurrentlyValidatingElement(null);
            }
        }
    }
    function setCurrentlyValidatingElement$1(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            setExtraStackFrame(stack);
        } else setExtraStackFrame(null);
    }
    var propTypesMisspellWarningShown;
    propTypesMisspellWarningShown = false;
    function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner.current) {
            var name = getComponentName(ReactCurrentOwner.current.type);
            if (name) return '\n\nCheck the render method of `' + name + '`.';
        }
        return '';
    }
    function getSourceInfoErrorAddendum(source) {
        if (source !== undefined) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, '');
            var lineNumber = source.lineNumber;
            return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
        }
        return '';
    }
    function getSourceInfoErrorAddendumForProps(elementProps) {
        if (elementProps !== null && elementProps !== undefined) return getSourceInfoErrorAddendum(elementProps.__source);
        return '';
    }
    /**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */ var ownerHasKeyUseWarning = {
    };
    function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();
        if (!info) {
            var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
            if (parentName) info = "\n\nCheck the top-level render call using <" + parentName + ">.";
        }
        return info;
    }
    /**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */ function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) return;
        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) return;
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
        // property, it may be the creator of the child that's responsible for
        // assigning it a key.
        var childOwner = '';
        if (element && element._owner && element._owner !== ReactCurrentOwner.current) // Give the component that originally created this child.
        childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
        setCurrentlyValidatingElement$1(element);
        error("Each child in a list should have a unique \"key\" prop.%s%s See https://reactjs.org/link/warning-keys for more information.", currentComponentErrorInfo, childOwner);
        setCurrentlyValidatingElement$1(null);
    }
    /**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */ function validateChildKeys(node, parentType) {
        if (typeof node !== 'object') return;
        if (Array.isArray(node)) for(var i = 0; i < node.length; i++){
            var child = node[i];
            if (isValidElement(child)) validateExplicitKey(child, parentType);
        }
        else if (isValidElement(node)) // This element was passed in a valid location.
        {
            if (node._store) node._store.validated = true;
        } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === 'function') // Entry iterators used to provide implicit keys,
            // but now we print a separate warning for them later.
            {
                if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step;
                    while(!(step = iterator.next()).done)if (isValidElement(step.value)) validateExplicitKey(step.value, parentType);
                }
            }
        }
    }
    /**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */ function validatePropTypes(element) {
        var type = element.type;
        if (type === null || type === undefined || typeof type === 'string') return;
        var propTypes;
        if (typeof type === 'function') propTypes = type.propTypes;
        else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Inner props are checked in the reconciler.
        type.$$typeof === REACT_MEMO_TYPE)) propTypes = type.propTypes;
        else return;
        if (propTypes) {
            // Intentionally inside to avoid triggering lazy initializers:
            var name = getComponentName(type);
            checkPropTypes(propTypes, element.props, 'prop', name, element);
        } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:
            var _name = getComponentName(type);
            error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
        }
        if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
    }
    /**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */ function validateFragmentProps(fragment) {
        var keys = Object.keys(fragment.props);
        for(var i = 0; i < keys.length; i++){
            var key = keys[i];
            if (key !== 'children' && key !== 'key') {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
            }
        }
        if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error('Invalid attribute `ref` supplied to `React.Fragment`.');
            setCurrentlyValidatingElement$1(null);
        }
    }
    function createElementWithValidation(type, props, children) {
        var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
        // succeed and there will likely be errors in render.
        if (!validType) {
            var info = '';
            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            var sourceInfo = getSourceInfoErrorAddendumForProps(props);
            if (sourceInfo) info += sourceInfo;
            else info += getDeclarationErrorAddendum();
            var typeString;
            if (type === null) typeString = 'null';
            else if (Array.isArray(type)) typeString = 'array';
            else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentName(type.type) || 'Unknown') + " />";
                info = ' Did you accidentally export a JSX literal instead of a component?';
            } else typeString = typeof type;
            error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
        }
        var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
        // TODO: Drop this when these are no longer allowed as the type argument.
        if (element == null) return element;
         // Skip key warning if the type isn't valid since our key validation logic
        // doesn't expect a non-string/function type and can throw confusing errors.
        // We don't want exception behavior to differ between dev and prod.
        // (Rendering will throw with a helpful message and as soon as the type is
        // fixed, the key warnings will appear.)
        if (validType) for(var i = 2; i < arguments.length; i++)validateChildKeys(arguments[i], type);
        if (type === exports.Fragment) validateFragmentProps(element);
        else validatePropTypes(element);
        return element;
    }
    var didWarnAboutDeprecatedCreateFactory = false;
    function createFactoryWithValidation(type) {
        var validatedFactory = createElementWithValidation.bind(null, type);
        validatedFactory.type = type;
        if (!didWarnAboutDeprecatedCreateFactory) {
            didWarnAboutDeprecatedCreateFactory = true;
            warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
        } // Legacy hook: remove it
        Object.defineProperty(validatedFactory, 'type', {
            enumerable: false,
            get: function() {
                warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                Object.defineProperty(this, 'type', {
                    value: type
                });
                return type;
            }
        });
        return validatedFactory;
    }
    function cloneElementWithValidation(element, props, children) {
        var newElement = cloneElement.apply(this, arguments);
        for(var i = 2; i < arguments.length; i++)validateChildKeys(arguments[i], newElement.type);
        validatePropTypes(newElement);
        return newElement;
    }
    try {
        var frozenObject = Object.freeze({
        });
        /* eslint-disable no-new */ new Map([
            [
                frozenObject,
                null
            ]
        ]);
        new Set([
            frozenObject
        ]);
    /* eslint-enable no-new */ } catch (e) {
    }
    var createElement$1 = createElementWithValidation;
    var cloneElement$1 = cloneElementWithValidation;
    var createFactory = createFactoryWithValidation;
    var Children = {
        map: mapChildren,
        forEach: forEachChildren,
        count: countChildren,
        toArray: toArray,
        only: onlyChild
    };
    exports.Children = Children;
    exports.Component = Component;
    exports.PureComponent = PureComponent;
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
    exports.cloneElement = cloneElement$1;
    exports.createContext = createContext;
    exports.createElement = createElement$1;
    exports.createFactory = createFactory;
    exports.createRef = createRef;
    exports.forwardRef = forwardRef;
    exports.isValidElement = isValidElement;
    exports.lazy = lazy;
    exports.memo = memo;
    exports.useCallback = useCallback;
    exports.useContext = useContext;
    exports.useDebugValue = useDebugValue;
    exports.useEffect = useEffect;
    exports.useImperativeHandle = useImperativeHandle;
    exports.useLayoutEffect = useLayoutEffect;
    exports.useMemo = useMemo;
    exports.useReducer = useReducer;
    exports.useRef = useRef;
    exports.useState = useState;
    exports.version = ReactVersion;
})();

},{"object-assign":"5kNPX"}],"5kNPX":[function(require,module,exports) {
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/ 'use strict';
/* eslint-disable no-unused-vars */ var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;
function toObject(val) {
    if (val === null || val === undefined) throw new TypeError('Object.assign cannot be called with null or undefined');
    return Object(val);
}
function shouldUseNative() {
    try {
        if (!Object.assign) return false;
        // Detect buggy property enumeration order in older V8 versions.
        // https://bugs.chromium.org/p/v8/issues/detail?id=4118
        var test1 = "abc"; // eslint-disable-line no-new-wrappers
        test1[5] = 'de';
        if (Object.getOwnPropertyNames(test1)[0] === '5') return false;
        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
        var test2 = {
        };
        for(var i = 0; i < 10; i++)test2['_' + String.fromCharCode(i)] = i;
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
            return test2[n];
        });
        if (order2.join('') !== '0123456789') return false;
        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
        var test3 = {
        };
        'abcdefghijklmnopqrst'.split('').forEach(function(letter) {
            test3[letter] = letter;
        });
        if (Object.keys(Object.assign({
        }, test3)).join('') !== 'abcdefghijklmnopqrst') return false;
        return true;
    } catch (err) {
        // We don't expect any of the above to throw, but better to be safe.
        return false;
    }
}
module.exports = shouldUseNative() ? Object.assign : function(target, source) {
    var from;
    var to = toObject(target);
    var symbols;
    for(var s = 1; s < arguments.length; s++){
        from = Object(arguments[s]);
        for(var key in from)if (hasOwnProperty.call(from, key)) to[key] = from[key];
        if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from);
            for(var i = 0; i < symbols.length; i++)if (propIsEnumerable.call(from, symbols[i])) to[symbols[i]] = from[symbols[i]];
        }
    }
    return to;
};

},{}],"6V7Bv":[function(require,module,exports) {
'use strict';
function checkDCE() {
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function') return;
    var err;
    // This branch is unreachable because this function is only called
    // in production, but the condition is true only in development.
    // Therefore if the branch is still here, dead code elimination wasn't
    // properly applied.
    // Don't change the message. React DevTools relies on it. Also make sure
    // this message doesn't occur elsewhere in this function, or it will cause
    // a false positive.
    throw new Error('^_^');
}
module.exports = require('./cjs/react-dom.development.js');

},{"./cjs/react-dom.development.js":"2zbv2"}],"2zbv2":[function(require,module,exports) {
/** @license React v16.14.0
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    var React = require('react');
    var _assign = require('object-assign');
    var Scheduler = require('scheduler');
    var checkPropTypes = require('prop-types/checkPropTypes');
    var tracing = require('scheduler/tracing');
    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED; // Prevent newer renderers from RTE when used with older react package versions.
    // Current owner and dispatcher used to share the same ref,
    // but PR #14548 split them out to better support the react-debug-tools package.
    if (!ReactSharedInternals.hasOwnProperty('ReactCurrentDispatcher')) ReactSharedInternals.ReactCurrentDispatcher = {
        current: null
    };
    if (!ReactSharedInternals.hasOwnProperty('ReactCurrentBatchConfig')) ReactSharedInternals.ReactCurrentBatchConfig = {
        suspense: null
    };
    // by calls to these methods by a Babel plugin.
    //
    // In PROD (or in packages without access to React internals),
    // they are left as they are instead.
    function warn1(format) {
        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
        printWarning('warn', format, args);
    }
    function error(format) {
        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
        printWarning('error', format, args);
    }
    function printWarning(level, format, args) {
        var hasExistingStack = args.length > 0 && typeof args[args.length - 1] === 'string' && args[args.length - 1].indexOf('\n    in') === 0;
        if (!hasExistingStack) {
            var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame.getStackAddendum();
            if (stack !== '') {
                format += '%s';
                args = args.concat([
                    stack
                ]);
            }
        }
        var argsWithFormat = args.map(function(item) {
            return '' + item;
        }); // Careful: RN currently depends on this prefix
        argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging
        Function.prototype.apply.call(console[level], console, argsWithFormat);
        try {
            // --- Welcome to debugging React ---
            // This error was thrown as a convenience so that you can use this stack
            // to find the callsite that caused this warning to fire.
            var argIndex = 0;
            var message = 'Warning: ' + format.replace(/%s/g, function() {
                return args[argIndex++];
            });
            throw new Error(message);
        } catch (x) {
        }
    }
    if (!React) throw Error("ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.");
    var invokeGuardedCallbackImpl = function(name, func, context, a, b, c, d, e, f) {
        var funcArgs = Array.prototype.slice.call(arguments, 3);
        try {
            func.apply(context, funcArgs);
        } catch (error1) {
            this.onError(error1);
        }
    };
    // In DEV mode, we swap out invokeGuardedCallback for a special version
    // that plays more nicely with the browser's DevTools. The idea is to preserve
    // "Pause on exceptions" behavior. Because React wraps all user-provided
    // functions in invokeGuardedCallback, and the production version of
    // invokeGuardedCallback uses a try-catch, all user exceptions are treated
    // like caught exceptions, and the DevTools won't pause unless the developer
    // takes the extra step of enabling pause on caught exceptions. This is
    // unintuitive, though, because even though React has caught the error, from
    // the developer's perspective, the error is uncaught.
    //
    // To preserve the expected "Pause on exceptions" behavior, we don't use a
    // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
    // DOM node, and call the user-provided callback from inside an event handler
    // for that fake event. If the callback throws, the error is "captured" using
    // a global event handler. But because the error happens in a different
    // event loop context, it does not interrupt the normal program flow.
    // Effectively, this gives us try-catch behavior without actually using
    // try-catch. Neat!
    // Check that the browser supports the APIs we need to implement our special
    // DEV version of invokeGuardedCallback
    if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
        var fakeNode = document.createElement('react');
        var invokeGuardedCallbackDev = function(name, func, context, a, b, c, d, e, f) {
            // If document doesn't exist we know for sure we will crash in this method
            // when we call document.createEvent(). However this can cause confusing
            // errors: https://github.com/facebookincubator/create-react-app/issues/3482
            // So we preemptively throw with a better message instead.
            if (!(typeof document !== 'undefined')) throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
            var evt = document.createEvent('Event'); // Keeps track of whether the user-provided callback threw an error. We
            // set this to true at the beginning, then set it to false right after
            // calling the function. If the function errors, `didError` will never be
            // set to false. This strategy works even if the browser is flaky and
            // fails to call our global error handler, because it doesn't rely on
            // the error event at all.
            var didError = true; // Keeps track of the value of window.event so that we can reset it
            // during the callback to let user code access window.event in the
            // browsers that support it.
            var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event
            // dispatching: https://github.com/facebook/react/issues/13688
            var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event'); // Create an event handler for our fake event. We will synchronously
            // dispatch our fake event using `dispatchEvent`. Inside the handler, we
            // call the user-provided callback.
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            function callCallback() {
                // We immediately remove the callback from event listeners so that
                // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
                // nested call would trigger the fake event handlers of any call higher
                // in the stack.
                fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the
                // window.event assignment in both IE <= 10 as they throw an error
                // "Member not found" in strict mode, and in Firefox which does not
                // support window.event.
                if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) window.event = windowEvent;
                func.apply(context, funcArgs);
                didError = false;
            } // Create a global error event handler. We use this to capture the value
            // that was thrown. It's possible that this error handler will fire more
            // than once; for example, if non-React code also calls `dispatchEvent`
            // and a handler for that event throws. We should be resilient to most of
            // those cases. Even if our error event handler fires more than once, the
            // last error event is always used. If the callback actually does error,
            // we know that the last error event is the correct one, because it's not
            // possible for anything else to have happened in between our callback
            // erroring and the code that follows the `dispatchEvent` call below. If
            // the callback doesn't error, but the error event was fired, we know to
            // ignore it because `didError` will be false, as described above.
            var error1; // Use this to track whether the error event is ever called.
            var didSetError = false;
            var isCrossOriginError = false;
            function handleWindowError(event) {
                error1 = event.error;
                didSetError = true;
                if (error1 === null && event.colno === 0 && event.lineno === 0) isCrossOriginError = true;
                if (event.defaultPrevented) {
                    // Some other error handler has prevented default.
                    // Browsers silence the error report if this happens.
                    // We'll remember this to later decide whether to log it or not.
                    if (error1 != null && typeof error1 === 'object') try {
                        error1._suppressLogging = true;
                    } catch (inner) {
                    }
                }
            } // Create a fake event type.
            var evtType = "react-" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers
            window.addEventListener('error', handleWindowError);
            fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function
            // errors, it will trigger our global error handler.
            evt.initEvent(evtType, false, false);
            fakeNode.dispatchEvent(evt);
            if (windowEventDescriptor) Object.defineProperty(window, 'event', windowEventDescriptor);
            if (didError) {
                if (!didSetError) // The callback errored, but the error event never fired.
                error1 = new Error("An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the \"Pause on exceptions\" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.");
                else if (isCrossOriginError) error1 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://fb.me/react-crossorigin-error for more information.");
                this.onError(error1);
            } // Remove our event listeners
            window.removeEventListener('error', handleWindowError);
        };
        invokeGuardedCallbackImpl = invokeGuardedCallbackDev;
    }
    var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
    var hasError = false;
    var caughtError = null; // Used by event system to capture/rethrow the first error.
    var hasRethrowError = false;
    var rethrowError = null;
    var reporter = {
        onError: function(error1) {
            hasError = true;
            caughtError = error1;
        }
    };
    /**
 * Call a function while guarding against errors that happens within it.
 * Returns an error if it throws, otherwise null.
 *
 * In production, this is implemented using a try-catch. The reason we don't
 * use a try-catch directly is so that we can swap out a different
 * implementation in DEV mode.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */ function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
        hasError = false;
        caughtError = null;
        invokeGuardedCallbackImpl$1.apply(reporter, arguments);
    }
    /**
 * Same as invokeGuardedCallback, but instead of returning an error, it stores
 * it in a global so it can be rethrown by `rethrowCaughtError` later.
 * TODO: See if caughtError and rethrowError can be unified.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */ function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
        invokeGuardedCallback.apply(this, arguments);
        if (hasError) {
            var error1 = clearCaughtError();
            if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error1;
            }
        }
    }
    /**
 * During execution of guarded functions we will capture the first error which
 * we will rethrow to be handled by the top level error handler.
 */ function rethrowCaughtError() {
        if (hasRethrowError) {
            var error2 = rethrowError;
            hasRethrowError = false;
            rethrowError = null;
            throw error2;
        }
    }
    function hasCaughtError() {
        return hasError;
    }
    function clearCaughtError() {
        if (hasError) {
            var error3 = caughtError;
            hasError = false;
            caughtError = null;
            return error3;
        } else throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
    }
    var getFiberCurrentPropsFromNode = null;
    var getInstanceFromNode = null;
    var getNodeFromInstance = null;
    function setComponentTree(getFiberCurrentPropsFromNodeImpl, getInstanceFromNodeImpl, getNodeFromInstanceImpl) {
        getFiberCurrentPropsFromNode = getFiberCurrentPropsFromNodeImpl;
        getInstanceFromNode = getInstanceFromNodeImpl;
        getNodeFromInstance = getNodeFromInstanceImpl;
        if (!getNodeFromInstance || !getInstanceFromNode) error("EventPluginUtils.setComponentTree(...): Injected module is missing getNodeFromInstance or getInstanceFromNode.");
    }
    var validateEventDispatches;
    validateEventDispatches = function(event) {
        var dispatchListeners = event._dispatchListeners;
        var dispatchInstances = event._dispatchInstances;
        var listenersIsArr = Array.isArray(dispatchListeners);
        var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
        var instancesIsArr = Array.isArray(dispatchInstances);
        var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;
        if (instancesIsArr !== listenersIsArr || instancesLen !== listenersLen) error('EventPluginUtils: Invalid `event`.');
    };
    /**
 * Dispatch the event to the listener.
 * @param {SyntheticEvent} event SyntheticEvent to handle
 * @param {function} listener Application-level callback
 * @param {*} inst Internal component instance
 */ function executeDispatch(event, listener, inst) {
        var type = event.type || 'unknown-event';
        event.currentTarget = getNodeFromInstance(inst);
        invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
        event.currentTarget = null;
    }
    /**
 * Standard/simple iteration through an event's collected dispatches.
 */ function executeDispatchesInOrder(event) {
        var dispatchListeners = event._dispatchListeners;
        var dispatchInstances = event._dispatchInstances;
        validateEventDispatches(event);
        if (Array.isArray(dispatchListeners)) for(var i = 0; i < dispatchListeners.length; i++){
            if (event.isPropagationStopped()) break;
             // Listeners and Instances are two parallel arrays that are always in sync.
            executeDispatch(event, dispatchListeners[i], dispatchInstances[i]);
        }
        else if (dispatchListeners) executeDispatch(event, dispatchListeners, dispatchInstances);
        event._dispatchListeners = null;
        event._dispatchInstances = null;
    }
    var FunctionComponent = 0;
    var ClassComponent = 1;
    var IndeterminateComponent = 2; // Before we know whether it is function or class
    var HostRoot = 3; // Root of a host tree. Could be nested inside another node.
    var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.
    var HostComponent = 5;
    var HostText = 6;
    var Fragment = 7;
    var Mode = 8;
    var ContextConsumer = 9;
    var ContextProvider = 10;
    var ForwardRef = 11;
    var Profiler = 12;
    var SuspenseComponent = 13;
    var MemoComponent = 14;
    var SimpleMemoComponent = 15;
    var LazyComponent = 16;
    var IncompleteClassComponent = 17;
    var DehydratedFragment = 18;
    var SuspenseListComponent = 19;
    var FundamentalComponent = 20;
    var ScopeComponent = 21;
    var Block = 22;
    /**
 * Injectable ordering of event plugins.
 */ var eventPluginOrder = null;
    /**
 * Injectable mapping from names to event plugin modules.
 */ var namesToPlugins = {
    };
    /**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */ function recomputePluginOrdering() {
        if (!eventPluginOrder) // Wait until an `eventPluginOrder` is injected.
        return;
        for(var pluginName in namesToPlugins){
            var pluginModule = namesToPlugins[pluginName];
            var pluginIndex = eventPluginOrder.indexOf(pluginName);
            if (!(pluginIndex > -1)) throw Error("EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `" + pluginName + "`.");
            if (plugins[pluginIndex]) continue;
            if (!pluginModule.extractEvents) throw Error("EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `" + pluginName + "` does not.");
            plugins[pluginIndex] = pluginModule;
            var publishedEvents = pluginModule.eventTypes;
            for(var eventName in publishedEvents){
                if (!publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName)) throw Error("EventPluginRegistry: Failed to publish event `" + eventName + "` for plugin `" + pluginName + "`.");
            }
        }
    }
    /**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */ function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
        if (!!eventNameDispatchConfigs.hasOwnProperty(eventName)) throw Error("EventPluginRegistry: More than one plugin attempted to publish the same event name, `" + eventName + "`.");
        eventNameDispatchConfigs[eventName] = dispatchConfig;
        var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
        if (phasedRegistrationNames) {
            for(var phaseName in phasedRegistrationNames)if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
                var phasedRegistrationName = phasedRegistrationNames[phaseName];
                publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
            }
            return true;
        } else if (dispatchConfig.registrationName) {
            publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
            return true;
        }
        return false;
    }
    /**
 * Publishes a registration name that is used to identify dispatched events.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */ function publishRegistrationName(registrationName, pluginModule, eventName) {
        if (!!registrationNameModules[registrationName]) throw Error("EventPluginRegistry: More than one plugin attempted to publish the same registration name, `" + registrationName + "`.");
        registrationNameModules[registrationName] = pluginModule;
        registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;
        var lowerCasedName = registrationName.toLowerCase();
        possibleRegistrationNames[lowerCasedName] = registrationName;
        if (registrationName === 'onDoubleClick') possibleRegistrationNames.ondblclick = registrationName;
    }
    /**
 * Registers plugins so that they can extract and dispatch events.
 */ /**
 * Ordered list of injected plugins.
 */ var plugins = [];
    /**
 * Mapping from event name to dispatch config
 */ var eventNameDispatchConfigs = {
    };
    /**
 * Mapping from registration name to plugin module
 */ var registrationNameModules = {
    };
    /**
 * Mapping from registration name to event name
 */ var registrationNameDependencies = {
    };
    /**
 * Mapping from lowercase registration names to the properly cased version,
 * used to warn in the case of missing event handlers. Available
 * only in true.
 * @type {Object}
 */ var possibleRegistrationNames = {
    }; // Trust the developer to only use possibleRegistrationNames in true
    /**
 * Injects an ordering of plugins (by plugin name). This allows the ordering
 * to be decoupled from injection of the actual plugins so that ordering is
 * always deterministic regardless of packaging, on-the-fly injection, etc.
 *
 * @param {array} InjectedEventPluginOrder
 * @internal
 */ function injectEventPluginOrder(injectedEventPluginOrder) {
        if (!!eventPluginOrder) throw Error("EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.");
         // Clone the ordering so it cannot be dynamically mutated.
        eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
        recomputePluginOrdering();
    }
    /**
 * Injects plugins to be used by plugin event system. The plugin names must be
 * in the ordering injected by `injectEventPluginOrder`.
 *
 * Plugins can be injected as part of page initialization or on-the-fly.
 *
 * @param {object} injectedNamesToPlugins Map from names to plugin modules.
 * @internal
 */ function injectEventPluginsByName(injectedNamesToPlugins) {
        var isOrderingDirty = false;
        for(var pluginName in injectedNamesToPlugins){
            if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) continue;
            var pluginModule = injectedNamesToPlugins[pluginName];
            if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
                if (!!namesToPlugins[pluginName]) throw Error("EventPluginRegistry: Cannot inject two different event plugins using the same name, `" + pluginName + "`.");
                namesToPlugins[pluginName] = pluginModule;
                isOrderingDirty = true;
            }
        }
        if (isOrderingDirty) recomputePluginOrdering();
    }
    var canUseDOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined');
    var PLUGIN_EVENT_SYSTEM = 1;
    var IS_REPLAYED = 32;
    var IS_FIRST_ANCESTOR = 64;
    var restoreImpl = null;
    var restoreTarget = null;
    var restoreQueue = null;
    function restoreStateOfTarget(target) {
        // We perform this translation at the end of the event loop so that we
        // always receive the correct fiber here
        var internalInstance = getInstanceFromNode(target);
        if (!internalInstance) // Unmounted
        return;
        if (!(typeof restoreImpl === 'function')) throw Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
        var stateNode = internalInstance.stateNode; // Guard against Fiber being unmounted.
        if (stateNode) {
            var _props = getFiberCurrentPropsFromNode(stateNode);
            restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
        }
    }
    function setRestoreImplementation(impl) {
        restoreImpl = impl;
    }
    function enqueueStateRestore(target) {
        if (restoreTarget) {
            if (restoreQueue) restoreQueue.push(target);
            else restoreQueue = [
                target
            ];
        } else restoreTarget = target;
    }
    function needsStateRestore() {
        return restoreTarget !== null || restoreQueue !== null;
    }
    function restoreStateIfNeeded() {
        if (!restoreTarget) return;
        var target = restoreTarget;
        var queuedTargets = restoreQueue;
        restoreTarget = null;
        restoreQueue = null;
        restoreStateOfTarget(target);
        if (queuedTargets) for(var i = 0; i < queuedTargets.length; i++)restoreStateOfTarget(queuedTargets[i]);
    }
    var enableProfilerTimer = true; // Trace which interactions trigger each commit.
    var enableDeprecatedFlareAPI = false; // Experimental Host Component support.
    var enableFundamentalAPI = false; // Experimental Scope support.
    var warnAboutStringRefs = false;
    // the renderer. Such as when we're dispatching events or if third party
    // libraries need to call batchedUpdates. Eventually, this API will go away when
    // everything is batched by default. We'll then have a similar API to opt-out of
    // scheduled work and instead do synchronous work.
    // Defaults
    var batchedUpdatesImpl = function(fn, bookkeeping) {
        return fn(bookkeeping);
    };
    var discreteUpdatesImpl = function(fn, a, b, c, d) {
        return fn(a, b, c, d);
    };
    var flushDiscreteUpdatesImpl = function() {
    };
    var batchedEventUpdatesImpl = batchedUpdatesImpl;
    var isInsideEventHandler = false;
    var isBatchingEventUpdates = false;
    function finishEventHandler() {
        // Here we wait until all updates have propagated, which is important
        // when using controlled components within layers:
        // https://github.com/facebook/react/issues/1698
        // Then we restore state of any controlled component.
        var controlledComponentsHavePendingUpdates = needsStateRestore();
        if (controlledComponentsHavePendingUpdates) {
            // If a controlled event was fired, we may need to restore the state of
            // the DOM node back to the controlled value. This is necessary when React
            // bails out of the update without touching the DOM.
            flushDiscreteUpdatesImpl();
            restoreStateIfNeeded();
        }
    }
    function batchedUpdates(fn, bookkeeping) {
        if (isInsideEventHandler) // If we are currently inside another batch, we need to wait until it
        // fully completes before restoring state.
        return fn(bookkeeping);
        isInsideEventHandler = true;
        try {
            return batchedUpdatesImpl(fn, bookkeeping);
        } finally{
            isInsideEventHandler = false;
            finishEventHandler();
        }
    }
    function batchedEventUpdates(fn, a, b) {
        if (isBatchingEventUpdates) // If we are currently inside another batch, we need to wait until it
        // fully completes before restoring state.
        return fn(a, b);
        isBatchingEventUpdates = true;
        try {
            return batchedEventUpdatesImpl(fn, a, b);
        } finally{
            isBatchingEventUpdates = false;
            finishEventHandler();
        }
    } // This is for the React Flare event system
    function discreteUpdates(fn, a, b, c, d) {
        var prevIsInsideEventHandler = isInsideEventHandler;
        isInsideEventHandler = true;
        try {
            return discreteUpdatesImpl(fn, a, b, c, d);
        } finally{
            isInsideEventHandler = prevIsInsideEventHandler;
            if (!isInsideEventHandler) finishEventHandler();
        }
    }
    function flushDiscreteUpdatesIfNeeded(timeStamp) {
        // event.timeStamp isn't overly reliable due to inconsistencies in
        // how different browsers have historically provided the time stamp.
        // Some browsers provide high-resolution time stamps for all events,
        // some provide low-resolution time stamps for all events. FF < 52
        // even mixes both time stamps together. Some browsers even report
        // negative time stamps or time stamps that are 0 (iOS9) in some cases.
        // Given we are only comparing two time stamps with equality (!==),
        // we are safe from the resolution differences. If the time stamp is 0
        // we bail-out of preventing the flush, which can affect semantics,
        // such as if an earlier flush removes or adds event listeners that
        // are fired in the subsequent flush. However, this is the same
        // behaviour as we had before this change, so the risks are low.
        if (!isInsideEventHandler && !enableDeprecatedFlareAPI) flushDiscreteUpdatesImpl();
    }
    function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
        batchedUpdatesImpl = _batchedUpdatesImpl;
        discreteUpdatesImpl = _discreteUpdatesImpl;
        flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
        batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
    }
    var DiscreteEvent = 0;
    var UserBlockingEvent = 1;
    var ContinuousEvent = 2;
    // A reserved attribute.
    // It is handled by React separately and shouldn't be written to the DOM.
    var RESERVED = 0; // A simple string attribute.
    // Attributes that aren't in the whitelist are presumed to have this type.
    var STRING = 1; // A string attribute that accepts booleans in React. In HTML, these are called
    // "enumerated" attributes with "true" and "false" as possible values.
    // When true, it should be set to a "true" string.
    // When false, it should be set to a "false" string.
    var BOOLEANISH_STRING = 2; // A real boolean attribute.
    // When true, it should be present (set either to an empty string or its name).
    // When false, it should be omitted.
    var BOOLEAN = 3; // An attribute that can be used as a flag as well as with a value.
    // When true, it should be present (set either to an empty string or its name).
    // When false, it should be omitted.
    // For any other value, should be present with that value.
    var OVERLOADED_BOOLEAN = 4; // An attribute that must be numeric or parse as a numeric.
    // When falsy, it should be removed.
    var NUMERIC = 5; // An attribute that must be positive numeric or parse as a positive numeric.
    // When falsy, it should be removed.
    var POSITIVE_NUMERIC = 6;
    /* eslint-disable max-len */ var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
    /* eslint-enable max-len */ var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
    var ROOT_ATTRIBUTE_NAME = 'data-reactroot';
    var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var illegalAttributeNameCache = {
    };
    var validatedAttributeNameCache = {
    };
    function isAttributeNameSafe(attributeName) {
        if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) return true;
        if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) return false;
        if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
        }
        illegalAttributeNameCache[attributeName] = true;
        error('Invalid attribute name: `%s`', attributeName);
        return false;
    }
    function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null) return propertyInfo.type === RESERVED;
        if (isCustomComponentTag) return false;
        if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) return true;
        return false;
    }
    function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null && propertyInfo.type === RESERVED) return false;
        switch(typeof value){
            case 'function':
            case 'symbol':
                // eslint-disable-line
                return true;
            case 'boolean':
                if (isCustomComponentTag) return false;
                if (propertyInfo !== null) return !propertyInfo.acceptsBooleans;
                else {
                    var prefix = name.toLowerCase().slice(0, 5);
                    return prefix !== 'data-' && prefix !== 'aria-';
                }
            default:
                return false;
        }
    }
    function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
        if (value === null || typeof value === 'undefined') return true;
        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) return true;
        if (isCustomComponentTag) return false;
        if (propertyInfo !== null) switch(propertyInfo.type){
            case BOOLEAN:
                return !value;
            case OVERLOADED_BOOLEAN:
                return value === false;
            case NUMERIC:
                return isNaN(value);
            case POSITIVE_NUMERIC:
                return isNaN(value) || value < 1;
        }
        return false;
    }
    function getPropertyInfo(name) {
        return properties.hasOwnProperty(name) ? properties[name] : null;
    }
    function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL) {
        this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
        this.attributeName = attributeName;
        this.attributeNamespace = attributeNamespace;
        this.mustUseProperty = mustUseProperty;
        this.propertyName = name;
        this.type = type;
        this.sanitizeURL = sanitizeURL;
    } // When adding attributes to this list, be sure to also add them to
    // the `possibleStandardNames` module to ensure casing and incorrect
    // name warnings.
    var properties = {
    }; // These props are reserved by React. They shouldn't be written to the DOM.
    var reservedProps = [
        'children',
        'dangerouslySetInnerHTML',
        // elements (not just inputs). Now that ReactDOMInput assigns to the
        // defaultValue property -- do we need this?
        'defaultValue',
        'defaultChecked',
        'innerHTML',
        'suppressContentEditableWarning',
        'suppressHydrationWarning',
        'style'
    ];
    reservedProps.forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false);
    }); // A few React string attributes have a different name.
    // This is a mapping from React prop names to the attribute names.
    [
        [
            'acceptCharset',
            'accept-charset'
        ],
        [
            'className',
            'class'
        ],
        [
            'htmlFor',
            'for'
        ],
        [
            'httpEquiv',
            'http-equiv'
        ]
    ].forEach(function(_ref) {
        var name = _ref[0], attributeName = _ref[1];
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false);
    }); // These are "enumerated" HTML attributes that accept "true" and "false".
    // In React, we let users pass `true` and `false` even though technically
    // these aren't boolean attributes (they are coerced to strings).
    [
        'contentEditable',
        'draggable',
        'spellCheck',
        'value'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false);
    }); // These are "enumerated" SVG attributes that accept "true" and "false".
    // In React, we let users pass `true` and `false` even though technically
    // these aren't boolean attributes (they are coerced to strings).
    // Since these are SVG attributes, their attribute names are case-sensitive.
    [
        'autoReverse',
        'externalResourcesRequired',
        'focusable',
        'preserveAlpha'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false);
    }); // These are HTML boolean attributes.
    [
        'allowFullScreen',
        'async',
        // on the client side because the browsers are inconsistent. Instead we call focus().
        'autoFocus',
        'autoPlay',
        'controls',
        'default',
        'defer',
        'disabled',
        'disablePictureInPicture',
        'formNoValidate',
        'hidden',
        'loop',
        'noModule',
        'noValidate',
        'open',
        'playsInline',
        'readOnly',
        'required',
        'reversed',
        'scoped',
        'seamless',
        'itemScope'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false);
    }); // These are the few React props that we set as DOM properties
    // rather than attributes. These are all booleans.
    [
        'checked',
        // disabled with `removeAttribute`. We have special logic for handling this.
        'multiple',
        'muted',
        'selected'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false);
    }); // These are HTML attributes that are "overloaded booleans": they behave like
    // booleans, but can also accept a string value.
    [
        'capture',
        'download'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false);
    }); // These are HTML attributes that must be positive numbers.
    [
        'cols',
        'rows',
        'size',
        'span'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false);
    }); // These are HTML attributes that must be numbers.
    [
        'rowSpan',
        'start'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false);
    });
    var CAMELIZE = /[\-\:]([a-z])/g;
    var capitalize = function(token) {
        return token[1].toUpperCase();
    }; // This is a list of all SVG attributes that need special casing, namespacing,
    // or boolean value assignment. Regular attributes that just accept strings
    // and have the same names are omitted, just like in the HTML whitelist.
    // Some of these attributes can be hard to find. This list was created by
    // scraping the MDN documentation.
    [
        'accent-height',
        'alignment-baseline',
        'arabic-form',
        'baseline-shift',
        'cap-height',
        'clip-path',
        'clip-rule',
        'color-interpolation',
        'color-interpolation-filters',
        'color-profile',
        'color-rendering',
        'dominant-baseline',
        'enable-background',
        'fill-opacity',
        'fill-rule',
        'flood-color',
        'flood-opacity',
        'font-family',
        'font-size',
        'font-size-adjust',
        'font-stretch',
        'font-style',
        'font-variant',
        'font-weight',
        'glyph-name',
        'glyph-orientation-horizontal',
        'glyph-orientation-vertical',
        'horiz-adv-x',
        'horiz-origin-x',
        'image-rendering',
        'letter-spacing',
        'lighting-color',
        'marker-end',
        'marker-mid',
        'marker-start',
        'overline-position',
        'overline-thickness',
        'paint-order',
        'panose-1',
        'pointer-events',
        'rendering-intent',
        'shape-rendering',
        'stop-color',
        'stop-opacity',
        'strikethrough-position',
        'strikethrough-thickness',
        'stroke-dasharray',
        'stroke-dashoffset',
        'stroke-linecap',
        'stroke-linejoin',
        'stroke-miterlimit',
        'stroke-opacity',
        'stroke-width',
        'text-anchor',
        'text-decoration',
        'text-rendering',
        'underline-position',
        'underline-thickness',
        'unicode-bidi',
        'unicode-range',
        'units-per-em',
        'v-alphabetic',
        'v-hanging',
        'v-ideographic',
        'v-mathematical',
        'vector-effect',
        'vert-adv-y',
        'vert-origin-x',
        'vert-origin-y',
        'word-spacing',
        'writing-mode',
        'xmlns:xlink',
        'x-height'
    ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false);
    }); // String SVG attributes with the xlink namespace.
    [
        'xlink:actuate',
        'xlink:arcrole',
        'xlink:role',
        'xlink:show',
        'xlink:title',
        'xlink:type'
    ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, 'http://www.w3.org/1999/xlink', false);
    }); // String SVG attributes with the xml namespace.
    [
        'xml:base',
        'xml:lang',
        'xml:space'
    ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, 'http://www.w3.org/XML/1998/namespace', false);
    }); // These attribute exists both in HTML and SVG.
    // The attribute name is case-sensitive in SVG so we can't just use
    // the React name like we do for attributes that exist only in HTML.
    [
        'tabIndex',
        'crossOrigin'
    ].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false);
    }); // These attributes accept URLs. These must not allow javascript: URLS.
    // These will also need to accept Trusted Types object in the future.
    var xlinkHref = 'xlinkHref';
    properties[xlinkHref] = new PropertyInfoRecord('xlinkHref', STRING, false, 'xlink:href', 'http://www.w3.org/1999/xlink', true);
    [
        'src',
        'href',
        'action',
        'formAction'
    ].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true);
    });
    var ReactDebugCurrentFrame = null;
    ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    // and any newline or tab are filtered out as if they're not part of the URL.
    // https://url.spec.whatwg.org/#url-parsing
    // Tab or newline are defined as \r\n\t:
    // https://infra.spec.whatwg.org/#ascii-tab-or-newline
    // A C0 control is a code point in the range \u0000 NULL to \u001F
    // INFORMATION SEPARATOR ONE, inclusive:
    // https://infra.spec.whatwg.org/#c0-control-or-space
    /* eslint-disable max-len */ var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
    var didWarn = false;
    function sanitizeURL(url) {
        if (!didWarn && isJavaScriptProtocol.test(url)) {
            didWarn = true;
            error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
        }
    }
    /**
 * Get the value for a property on a node. Only used in DEV for SSR validation.
 * The "expected" argument is used as a hint of what the expected value is.
 * Some properties have multiple equivalent values.
 */ function getValueForProperty(node, name, expected, propertyInfo) {
        if (propertyInfo.mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            return node[propertyName];
        } else {
            if (propertyInfo.sanitizeURL) // If we haven't fully disabled javascript: URLs, and if
            // the hydration is successful of a javascript: URL, we
            // still want to warn on the client.
            sanitizeURL('' + expected);
            var attributeName = propertyInfo.attributeName;
            var stringValue = null;
            if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName);
                    if (value === '') return true;
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) return value;
                    if (value === '' + expected) return expected;
                    return value;
                }
            } else if (node.hasAttribute(attributeName)) {
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) // We had an attribute but shouldn't have had one, so read it
                // for the error message.
                return node.getAttribute(attributeName);
                if (propertyInfo.type === BOOLEAN) // If this was a boolean, it doesn't matter what the value is
                // the fact that we have it is the same as the expected.
                return expected;
                 // Even if this property uses a namespace we use getAttribute
                // because we assume its namespaced name is the same as our config.
                // To use getAttributeNS we need the local name which we don't have
                // in our config atm.
                stringValue = node.getAttribute(attributeName);
            }
            if (shouldRemoveAttribute(name, expected, propertyInfo, false)) return stringValue === null ? expected : stringValue;
            else if (stringValue === '' + expected) return expected;
            else return stringValue;
        }
    }
    /**
 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
 * The third argument is used as a hint of what the expected value is. Some
 * attributes have multiple equivalent values.
 */ function getValueForAttribute(node, name, expected) {
        if (!isAttributeNameSafe(name)) return;
        if (!node.hasAttribute(name)) return expected === undefined ? undefined : null;
        var value = node.getAttribute(name);
        if (value === '' + expected) return expected;
        return value;
    }
    /**
 * Sets the value for a property on a node.
 *
 * @param {DOMElement} node
 * @param {string} name
 * @param {*} value
 */ function setValueForProperty(node, name, value, isCustomComponentTag) {
        var propertyInfo = getPropertyInfo(name);
        if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) return;
        if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) value = null;
         // If the prop isn't in the special list, treat it as a simple attribute.
        if (isCustomComponentTag || propertyInfo === null) {
            if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) node.removeAttribute(_attributeName);
                else node.setAttribute(_attributeName, '' + value);
            }
            return;
        }
        var mustUseProperty = propertyInfo.mustUseProperty;
        if (mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            if (value === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? false : '';
            } else // Contrary to `setAttribute`, object properties are properly
            // `toString`ed by IE8/9.
            node[propertyName] = value;
            return;
        } // The rest are treated as attributes with special cases.
        var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
        if (value === null) node.removeAttribute(attributeName);
        else {
            var _type = propertyInfo.type;
            var attributeValue;
            if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) // If attribute type is boolean, we know for sure it won't be an execution sink
            // and we won't require Trusted Type here.
            attributeValue = '';
            else {
                attributeValue = '' + value;
                if (propertyInfo.sanitizeURL) sanitizeURL(attributeValue.toString());
            }
            if (attributeNamespace) node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
            else node.setAttribute(attributeName, attributeValue);
        }
    }
    var BEFORE_SLASH_RE = /^(.*)[\\\/]/;
    function describeComponentFrame(name, source, ownerName) {
        var sourceInfo = '';
        if (source) {
            var path = source.fileName;
            var fileName = path.replace(BEFORE_SLASH_RE, '');
            // In DEV, include code for a common special case:
            // prefer "folder/index.js" instead of just "index.js".
            if (/^index\./.test(fileName)) {
                var match = path.match(BEFORE_SLASH_RE);
                if (match) {
                    var pathBeforeSlash = match[1];
                    if (pathBeforeSlash) {
                        var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
                        fileName = folderName + '/' + fileName;
                    }
                }
            }
            sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
        } else if (ownerName) sourceInfo = ' (created by ' + ownerName + ')';
        return '\n    in ' + (name || 'Unknown') + sourceInfo;
    }
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 60103;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 60106;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 60107;
    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 60108;
    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 60114;
    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 60109;
    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 60110; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 60111;
    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 60112;
    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 60113;
    var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 60120;
    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 60115;
    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 60116;
    var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 60121;
    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';
    function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== 'object') return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === 'function') return maybeIterator;
        return null;
    }
    var Uninitialized = -1;
    var Pending = 0;
    var Resolved = 1;
    var Rejected = 2;
    function refineResolvedLazyComponent(lazyComponent) {
        return lazyComponent._status === Resolved ? lazyComponent._result : null;
    }
    function initializeLazyComponentType(lazyComponent) {
        if (lazyComponent._status === Uninitialized) {
            lazyComponent._status = Pending;
            var ctor = lazyComponent._ctor;
            var thenable = ctor();
            lazyComponent._result = thenable;
            thenable.then(function(moduleObject) {
                if (lazyComponent._status === Pending) {
                    var defaultExport = moduleObject.default;
                    if (defaultExport === undefined) error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                    lazyComponent._status = Resolved;
                    lazyComponent._result = defaultExport;
                }
            }, function(error4) {
                if (lazyComponent._status === Pending) {
                    lazyComponent._status = Rejected;
                    lazyComponent._result = error4;
                }
            });
        }
    }
    function getWrappedName(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || '';
        return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
    }
    function getComponentName(type) {
        if (type == null) // Host root, text node or just invalid type.
        return null;
        if (typeof type.tag === 'number') error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
        if (typeof type === 'function') return type.displayName || type.name || null;
        if (typeof type === 'string') return type;
        switch(type){
            case REACT_FRAGMENT_TYPE:
                return 'Fragment';
            case REACT_PORTAL_TYPE:
                return 'Portal';
            case REACT_PROFILER_TYPE:
                return "Profiler";
            case REACT_STRICT_MODE_TYPE:
                return 'StrictMode';
            case REACT_SUSPENSE_TYPE:
                return 'Suspense';
            case REACT_SUSPENSE_LIST_TYPE:
                return 'SuspenseList';
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_CONTEXT_TYPE:
                return 'Context.Consumer';
            case REACT_PROVIDER_TYPE:
                return 'Context.Provider';
            case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, 'ForwardRef');
            case REACT_MEMO_TYPE:
                return getComponentName(type.type);
            case REACT_BLOCK_TYPE:
                return getComponentName(type.render);
            case REACT_LAZY_TYPE:
                var thenable = type;
                var resolvedThenable = refineResolvedLazyComponent(thenable);
                if (resolvedThenable) return getComponentName(resolvedThenable);
                break;
        }
        return null;
    }
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function describeFiber(fiber) {
        switch(fiber.tag){
            case HostRoot:
            case HostPortal:
            case HostText:
            case Fragment:
            case ContextProvider:
            case ContextConsumer:
                return '';
            default:
                var owner = fiber._debugOwner;
                var source = fiber._debugSource;
                var name = getComponentName(fiber.type);
                var ownerName = null;
                if (owner) ownerName = getComponentName(owner.type);
                return describeComponentFrame(name, source, ownerName);
        }
    }
    function getStackByFiberInDevAndProd(workInProgress) {
        var info = '';
        var node = workInProgress;
        do {
            info += describeFiber(node);
            node = node.return;
        }while (node)
        return info;
    }
    var current = null;
    var isRendering = false;
    function getCurrentFiberOwnerNameInDevOrNull() {
        if (current === null) return null;
        var owner = current._debugOwner;
        if (owner !== null && typeof owner !== 'undefined') return getComponentName(owner.type);
        return null;
    }
    function getCurrentFiberStackInDev() {
        if (current === null) return '';
         // Safe because if current fiber exists, we are reconciling,
        // and it is guaranteed to be the work-in-progress version.
        return getStackByFiberInDevAndProd(current);
    }
    function resetCurrentFiber() {
        ReactDebugCurrentFrame$1.getCurrentStack = null;
        current = null;
        isRendering = false;
    }
    function setCurrentFiber(fiber) {
        ReactDebugCurrentFrame$1.getCurrentStack = getCurrentFiberStackInDev;
        current = fiber;
        isRendering = false;
    }
    function setIsRendering(rendering) {
        isRendering = rendering;
    }
    // Flow does not allow string concatenation of most non-string types. To work
    // around this limitation, we use an opaque type that can only be obtained by
    // passing the value through getToStringValue first.
    function toString(value) {
        return '' + value;
    }
    function getToStringValue(value) {
        switch(typeof value){
            case 'boolean':
            case 'number':
            case 'object':
            case 'string':
            case 'undefined':
                return value;
            default:
                // function, symbol are assigned as empty strings
                return '';
        }
    }
    var ReactDebugCurrentFrame$2 = null;
    var ReactControlledValuePropTypes = {
        checkPropTypes: null
    };
    ReactDebugCurrentFrame$2 = ReactSharedInternals.ReactDebugCurrentFrame;
    var hasReadOnlyValue = {
        button: true,
        checkbox: true,
        image: true,
        hidden: true,
        radio: true,
        reset: true,
        submit: true
    };
    var propTypes = {
        value: function(props, propName, componentName) {
            if (hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled || props[propName] == null || enableDeprecatedFlareAPI) return null;
            return new Error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
        },
        checked: function(props, propName, componentName) {
            if (props.onChange || props.readOnly || props.disabled || props[propName] == null || enableDeprecatedFlareAPI) return null;
            return new Error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
        }
    };
    /**
   * Provide a linked `value` attribute for controlled forms. You should not use
   * this outside of the ReactDOM controlled form components.
   */ ReactControlledValuePropTypes.checkPropTypes = function(tagName, props) {
        checkPropTypes(propTypes, props, 'prop', tagName, ReactDebugCurrentFrame$2.getStackAddendum);
    };
    function isCheckable(elem) {
        var type = elem.type;
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
    }
    function getTracker(node) {
        return node._valueTracker;
    }
    function detachTracker(node) {
        node._valueTracker = null;
    }
    function getValueFromNode(node) {
        var value = '';
        if (!node) return value;
        if (isCheckable(node)) value = node.checked ? 'true' : 'false';
        else value = node.value;
        return value;
    }
    function trackValueOnNode(node) {
        var valueField = isCheckable(node) ? 'checked' : 'value';
        var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
        var currentValue = '' + node[valueField]; // if someone has already defined a value or Safari, then bail
        // and don't track value will cause over reporting of changes,
        // but it's better then a hard failure
        // (needed for certain tests that spyOn input values and Safari)
        if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') return;
        var get = descriptor.get, set = descriptor.set;
        Object.defineProperty(node, valueField, {
            configurable: true,
            get: function() {
                return get.call(this);
            },
            set: function(value) {
                currentValue = '' + value;
                set.call(this, value);
            }
        }); // We could've passed this the first time
        // but it triggers a bug in IE11 and Edge 14/15.
        // Calling defineProperty() again should be equivalent.
        // https://github.com/facebook/react/issues/11768
        Object.defineProperty(node, valueField, {
            enumerable: descriptor.enumerable
        });
        var tracker = {
            getValue: function() {
                return currentValue;
            },
            setValue: function(value) {
                currentValue = '' + value;
            },
            stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
            }
        };
        return tracker;
    }
    function track(node) {
        if (getTracker(node)) return;
         // TODO: Once it's just Fiber we can move this to node._wrapperState
        node._valueTracker = trackValueOnNode(node);
    }
    function updateValueIfChanged(node) {
        if (!node) return false;
        var tracker = getTracker(node); // if there is no tracker at this point it's unlikely
        // that trying again will succeed
        if (!tracker) return true;
        var lastValue = tracker.getValue();
        var nextValue = getValueFromNode(node);
        if (nextValue !== lastValue) {
            tracker.setValue(nextValue);
            return true;
        }
        return false;
    }
    var didWarnValueDefaultValue = false;
    var didWarnCheckedDefaultChecked = false;
    var didWarnControlledToUncontrolled = false;
    var didWarnUncontrolledToControlled = false;
    function isControlled(props) {
        var usesChecked = props.type === 'checkbox' || props.type === 'radio';
        return usesChecked ? props.checked != null : props.value != null;
    }
    /**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */ function getHostProps(element, props) {
        var node = element;
        var checked = props.checked;
        var hostProps = _assign({
        }, props, {
            defaultChecked: undefined,
            defaultValue: undefined,
            value: undefined,
            checked: checked != null ? checked : node._wrapperState.initialChecked
        });
        return hostProps;
    }
    function initWrapperState(element, props) {
        ReactControlledValuePropTypes.checkPropTypes('input', props);
        if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
            error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://fb.me/react-controlled-components", getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
            didWarnCheckedDefaultChecked = true;
        }
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
            error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://fb.me/react-controlled-components", getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
            didWarnValueDefaultValue = true;
        }
        var node = element;
        var defaultValue = props.defaultValue == null ? '' : props.defaultValue;
        node._wrapperState = {
            initialChecked: props.checked != null ? props.checked : props.defaultChecked,
            initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
            controlled: isControlled(props)
        };
    }
    function updateChecked(element, props) {
        var node = element;
        var checked = props.checked;
        if (checked != null) setValueForProperty(node, 'checked', checked, false);
    }
    function updateWrapper(element, props) {
        var node = element;
        var controlled = isControlled(props);
        if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
            error("A component is changing an uncontrolled input of type %s to be controlled. Input elements should not switch from uncontrolled to controlled (or vice versa). Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://fb.me/react-controlled-components", props.type);
            didWarnUncontrolledToControlled = true;
        }
        if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
            error("A component is changing a controlled input of type %s to be uncontrolled. Input elements should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://fb.me/react-controlled-components", props.type);
            didWarnControlledToUncontrolled = true;
        }
        updateChecked(element, props);
        var value = getToStringValue(props.value);
        var type = props.type;
        if (value != null) {
            if (type === 'number') {
                if (value === 0 && node.value === '' || // eslint-disable-next-line
                node.value != value) node.value = toString(value);
            } else if (node.value !== toString(value)) node.value = toString(value);
        } else if (type === 'submit' || type === 'reset') {
            // Submit/reset inputs need the attribute removed completely to avoid
            // blank-text buttons.
            node.removeAttribute('value');
            return;
        }
        // When syncing the value attribute, the value comes from a cascade of
        // properties:
        //  1. The value React property
        //  2. The defaultValue React property
        //  3. Otherwise there should be no change
        if (props.hasOwnProperty('value')) setDefaultValue(node, props.type, value);
        else if (props.hasOwnProperty('defaultValue')) setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
        // When syncing the checked attribute, it only changes when it needs
        // to be removed, such as transitioning from a checkbox into a text input
        if (props.checked == null && props.defaultChecked != null) node.defaultChecked = !!props.defaultChecked;
    }
    function postMountWrapper(element, props, isHydrating) {
        var node = element; // Do not assign value if it is already set. This prevents user text input
        // from being lost during SSR hydration.
        if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
            var type = props.type;
            var isButton = type === 'submit' || type === 'reset'; // Avoid setting value attribute on submit/reset inputs as it overrides the
            // default value provided by the browser. See: #12872
            if (isButton && (props.value === undefined || props.value === null)) return;
            var initialValue = toString(node._wrapperState.initialValue); // Do not assign value if it is already set. This prevents user text input
            // from being lost during SSR hydration.
            if (!isHydrating) // When syncing the value attribute, the value property should use
            // the wrapperState._initialValue property. This uses:
            //
            //   1. The value React property when present
            //   2. The defaultValue React property when present
            //   3. An empty string
            {
                if (initialValue !== node.value) node.value = initialValue;
            }
            // Otherwise, the value attribute is synchronized to the property,
            // so we assign defaultValue to the same thing as the value property
            // assignment step above.
            node.defaultValue = initialValue;
        } // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
        // this is needed to work around a chrome bug where setting defaultChecked
        // will sometimes influence the value of checked (even after detachment).
        // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
        // We need to temporarily unset name to avoid disrupting radio button groups.
        var name = node.name;
        if (name !== '') node.name = '';
        // When syncing the checked attribute, both the checked property and
        // attribute are assigned at the same time using defaultChecked. This uses:
        //
        //   1. The checked React property when present
        //   2. The defaultChecked React property when present
        //   3. Otherwise, false
        node.defaultChecked = !node.defaultChecked;
        node.defaultChecked = !!node._wrapperState.initialChecked;
        if (name !== '') node.name = name;
    }
    function restoreControlledState(element, props) {
        var node = element;
        updateWrapper(node, props);
        updateNamedCousins(node, props);
    }
    function updateNamedCousins(rootNode, props) {
        var name = props.name;
        if (props.type === 'radio' && name != null) {
            var queryRoot = rootNode;
            while(queryRoot.parentNode)queryRoot = queryRoot.parentNode;
             // If `rootNode.form` was non-null, then we could try `form.elements`,
            // but that sometimes behaves strangely in IE8. We could also try using
            // `form.getElementsByName`, but that will only return direct children
            // and won't include inputs that use the HTML5 `form=` attribute. Since
            // the input might not even be in a form. It might not even be in the
            // document. Let's just use the local `querySelectorAll` to ensure we don't
            // miss anything.
            var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');
            for(var i = 0; i < group.length; i++){
                var otherNode = group[i];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) continue;
                 // This will throw if radio buttons rendered by different copies of React
                // and the same name are rendered into the same form (same as #1939).
                // That's probably okay; we don't support it just as we don't support
                // mixing React radio buttons with non-React ones.
                var otherProps = getFiberCurrentPropsFromNode$1(otherNode);
                if (!otherProps) throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                 // We need update the tracked value on the named cousin since the value
                // was changed but the input saw no event or value set
                updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that
                // was previously checked to update will cause it to be come re-checked
                // as appropriate.
                updateWrapper(otherNode, otherProps);
            }
        }
    } // In Chrome, assigning defaultValue to certain input types triggers input validation.
    // For number inputs, the display value loses trailing decimal points. For email inputs,
    // Chrome raises "The specified value <x> is not a valid email address".
    //
    // Here we check to see if the defaultValue has actually changed, avoiding these problems
    // when the user is inputting text
    //
    // https://github.com/facebook/react/issues/7253
    function setDefaultValue(node, type, value) {
        if (type !== 'number' || node.ownerDocument.activeElement !== node) {
            if (value == null) node.defaultValue = toString(node._wrapperState.initialValue);
            else if (node.defaultValue !== toString(value)) node.defaultValue = toString(value);
        }
    }
    var didWarnSelectedSetOnOption = false;
    var didWarnInvalidChild = false;
    function flattenChildren(children) {
        var content = ''; // Flatten children. We'll warn if they are invalid
        // during validateProps() which runs for hydration too.
        // Note that this would throw on non-element objects.
        // Elements are stringified (which is normally irrelevant
        // but matters for <fbt>).
        React.Children.forEach(children, function(child) {
            if (child == null) return;
            content += child; // Note: we don't warn about invalid children here.
        // Instead, this is done separately below so that
        // it happens during the hydration codepath too.
        });
        return content;
    }
    /**
 * Implements an <option> host component that warns when `selected` is set.
 */ function validateProps(element, props) {
        // This mirrors the codepath above, but runs for hydration too.
        // Warn about invalid children here so that client and hydration are consistent.
        // TODO: this seems like it could cause a DEV-only throw for hydration
        // if children contains a non-element object. We should try to avoid that.
        if (typeof props.children === 'object' && props.children !== null) React.Children.forEach(props.children, function(child) {
            if (child == null) return;
            if (typeof child === 'string' || typeof child === 'number') return;
            if (typeof child.type !== 'string') return;
            if (!didWarnInvalidChild) {
                didWarnInvalidChild = true;
                error('Only strings and numbers are supported as <option> children.');
            }
        });
         // TODO: Remove support for `selected` in <option>.
        if (props.selected != null && !didWarnSelectedSetOnOption) {
            error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
            didWarnSelectedSetOnOption = true;
        }
    }
    function postMountWrapper$1(element, props) {
        // value="" should make a value attribute (#6219)
        if (props.value != null) element.setAttribute('value', toString(getToStringValue(props.value)));
    }
    function getHostProps$1(element, props) {
        var hostProps = _assign({
            children: undefined
        }, props);
        var content = flattenChildren(props.children);
        if (content) hostProps.children = content;
        return hostProps;
    }
    var didWarnValueDefaultValue$1;
    didWarnValueDefaultValue$1 = false;
    function getDeclarationErrorAddendum() {
        var ownerName = getCurrentFiberOwnerNameInDevOrNull();
        if (ownerName) return '\n\nCheck the render method of `' + ownerName + '`.';
        return '';
    }
    var valuePropNames = [
        'value',
        'defaultValue'
    ];
    /**
 * Validation function for `value` and `defaultValue`.
 */ function checkSelectPropTypes(props) {
        ReactControlledValuePropTypes.checkPropTypes('select', props);
        for(var i = 0; i < valuePropNames.length; i++){
            var propName = valuePropNames[i];
            if (props[propName] == null) continue;
            var isArray = Array.isArray(props[propName]);
            if (props.multiple && !isArray) error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
            else if (!props.multiple && isArray) error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
        }
    }
    function updateOptions(node, multiple, propValue, setDefaultSelected) {
        var options = node.options;
        if (multiple) {
            var selectedValues = propValue;
            var selectedValue = {
            };
            for(var i = 0; i < selectedValues.length; i++)// Prefix to avoid chaos with special keys.
            selectedValue['$' + selectedValues[i]] = true;
            for(var _i = 0; _i < options.length; _i++){
                var selected = selectedValue.hasOwnProperty('$' + options[_i].value);
                if (options[_i].selected !== selected) options[_i].selected = selected;
                if (selected && setDefaultSelected) options[_i].defaultSelected = true;
            }
        } else {
            // Do not set `select.value` as exact behavior isn't consistent across all
            // browsers for all cases.
            var _selectedValue = toString(getToStringValue(propValue));
            var defaultSelected = null;
            for(var _i2 = 0; _i2 < options.length; _i2++){
                if (options[_i2].value === _selectedValue) {
                    options[_i2].selected = true;
                    if (setDefaultSelected) options[_i2].defaultSelected = true;
                    return;
                }
                if (defaultSelected === null && !options[_i2].disabled) defaultSelected = options[_i2];
            }
            if (defaultSelected !== null) defaultSelected.selected = true;
        }
    }
    /**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */ function getHostProps$2(element, props) {
        return _assign({
        }, props, {
            value: undefined
        });
    }
    function initWrapperState$1(element, props) {
        var node = element;
        checkSelectPropTypes(props);
        node._wrapperState = {
            wasMultiple: !!props.multiple
        };
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
            error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://fb.me/react-controlled-components");
            didWarnValueDefaultValue$1 = true;
        }
    }
    function postMountWrapper$2(element, props) {
        var node = element;
        node.multiple = !!props.multiple;
        var value = props.value;
        if (value != null) updateOptions(node, !!props.multiple, value, false);
        else if (props.defaultValue != null) updateOptions(node, !!props.multiple, props.defaultValue, true);
    }
    function postUpdateWrapper(element, props) {
        var node = element;
        var wasMultiple = node._wrapperState.wasMultiple;
        node._wrapperState.wasMultiple = !!props.multiple;
        var value = props.value;
        if (value != null) updateOptions(node, !!props.multiple, value, false);
        else if (wasMultiple !== !!props.multiple) {
            // For simplicity, reapply `defaultValue` if `multiple` is toggled.
            if (props.defaultValue != null) updateOptions(node, !!props.multiple, props.defaultValue, true);
            else // Revert the select back to its default unselected state.
            updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
        }
    }
    function restoreControlledState$1(element, props) {
        var node = element;
        var value = props.value;
        if (value != null) updateOptions(node, !!props.multiple, value, false);
    }
    var didWarnValDefaultVal = false;
    /**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */ function getHostProps$3(element, props) {
        var node = element;
        if (!(props.dangerouslySetInnerHTML == null)) throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
         // Always set children to the same thing. In IE9, the selection range will
        // get reset if `textContent` is mutated.  We could add a check in setTextContent
        // to only set the value if/when the value differs from the node value (which would
        // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
        // solution. The value can be a boolean or object so that's why it's forced
        // to be a string.
        var hostProps = _assign({
        }, props, {
            value: undefined,
            defaultValue: undefined,
            children: toString(node._wrapperState.initialValue)
        });
        return hostProps;
    }
    function initWrapperState$2(element, props) {
        var node = element;
        ReactControlledValuePropTypes.checkPropTypes('textarea', props);
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
            error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://fb.me/react-controlled-components", getCurrentFiberOwnerNameInDevOrNull() || 'A component');
            didWarnValDefaultVal = true;
        }
        var initialValue = props.value; // Only bother fetching default value if we're going to use it
        if (initialValue == null) {
            var children = props.children, defaultValue = props.defaultValue;
            if (children != null) {
                error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                if (!(defaultValue == null)) throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                if (Array.isArray(children)) {
                    if (!(children.length <= 1)) throw Error("<textarea> can only have at most one child.");
                    children = children[0];
                }
                defaultValue = children;
            }
            if (defaultValue == null) defaultValue = '';
            initialValue = defaultValue;
        }
        node._wrapperState = {
            initialValue: getToStringValue(initialValue)
        };
    }
    function updateWrapper$1(element, props) {
        var node = element;
        var value = getToStringValue(props.value);
        var defaultValue = getToStringValue(props.defaultValue);
        if (value != null) {
            // Cast `value` to a string to ensure the value is set correctly. While
            // browsers typically do this as necessary, jsdom doesn't.
            var newValue = toString(value); // To avoid side effects (such as losing text selection), only set value if changed
            if (newValue !== node.value) node.value = newValue;
            if (props.defaultValue == null && node.defaultValue !== newValue) node.defaultValue = newValue;
        }
        if (defaultValue != null) node.defaultValue = toString(defaultValue);
    }
    function postMountWrapper$3(element, props) {
        var node = element; // This is in postMount because we need access to the DOM node, which is not
        // available until after the component has mounted.
        var textContent = node.textContent; // Only set node.value if textContent is equal to the expected
        // initial value. In IE10/IE11 there is a bug where the placeholder attribute
        // will populate textContent as well.
        // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
        if (textContent === node._wrapperState.initialValue) {
            if (textContent !== '' && textContent !== null) node.value = textContent;
        }
    }
    function restoreControlledState$2(element, props) {
        // DOM component is still mounted; update
        updateWrapper$1(element, props);
    }
    var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
    var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
    var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
    var Namespaces = {
        html: HTML_NAMESPACE,
        mathml: MATH_NAMESPACE,
        svg: SVG_NAMESPACE
    }; // Assumes there is no parent namespace.
    function getIntrinsicNamespace(type) {
        switch(type){
            case 'svg':
                return SVG_NAMESPACE;
            case 'math':
                return MATH_NAMESPACE;
            default:
                return HTML_NAMESPACE;
        }
    }
    function getChildNamespace(parentNamespace, type) {
        if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) // No (or default) parent namespace: potential entry point.
        return getIntrinsicNamespace(type);
        if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') // We're leaving SVG.
        return HTML_NAMESPACE;
         // By default, pass namespace below.
        return parentNamespace;
    }
    /* globals MSApp */ /**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */ var createMicrosoftUnsafeLocalFunction = function(func) {
        if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) return function(arg0, arg1, arg2, arg3) {
            MSApp.execUnsafeLocalFunction(function() {
                return func(arg0, arg1, arg2, arg3);
            });
        };
        else return func;
    };
    var reusableSVGContainer;
    /**
 * Set the innerHTML property of a node
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */ var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
        if (node.namespaceURI === Namespaces.svg) {
            if (!('innerHTML' in node)) {
                // IE does not have innerHTML for SVG nodes, so instead we inject the
                // new markup in a temp node and then move the child nodes across into
                // the target node
                reusableSVGContainer = reusableSVGContainer || document.createElement('div');
                reusableSVGContainer.innerHTML = '<svg>' + html.valueOf().toString() + '</svg>';
                var svgNode = reusableSVGContainer.firstChild;
                while(node.firstChild)node.removeChild(node.firstChild);
                while(svgNode.firstChild)node.appendChild(svgNode.firstChild);
                return;
            }
        }
        node.innerHTML = html;
    });
    /**
 * HTML nodeType values that represent the type of the node
 */ var ELEMENT_NODE = 1;
    var TEXT_NODE = 3;
    var COMMENT_NODE = 8;
    var DOCUMENT_NODE = 9;
    var DOCUMENT_FRAGMENT_NODE = 11;
    /**
 * Set the textContent property of a node. For text updates, it's faster
 * to set the `nodeValue` of the Text node directly instead of using
 * `.textContent` which will remove the existing node and create a new one.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */ var setTextContent = function(node, text) {
        if (text) {
            var firstChild = node.firstChild;
            if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
            }
        }
        node.textContent = text;
    };
    // Do not use the below two methods directly!
    // Instead use constants exported from DOMTopLevelEventTypes in ReactDOM.
    // (It is the only module that is allowed to access these methods.)
    function unsafeCastStringToDOMTopLevelType(topLevelType) {
        return topLevelType;
    }
    function unsafeCastDOMTopLevelTypeToString(topLevelType) {
        return topLevelType;
    }
    /**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */ function makePrefixMap(styleProp, eventName) {
        var prefixes = {
        };
        prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
        prefixes['Webkit' + styleProp] = 'webkit' + eventName;
        prefixes['Moz' + styleProp] = 'moz' + eventName;
        return prefixes;
    }
    /**
 * A list of event names to a configurable list of vendor prefixes.
 */ var vendorPrefixes = {
        animationend: makePrefixMap('Animation', 'AnimationEnd'),
        animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
        animationstart: makePrefixMap('Animation', 'AnimationStart'),
        transitionend: makePrefixMap('Transition', 'TransitionEnd')
    };
    /**
 * Event names that have already been detected and prefixed (if applicable).
 */ var prefixedEventNames = {
    };
    /**
 * Element to check for prefixes on.
 */ var style = {
    };
    /**
 * Bootstrap if a DOM exists.
 */ if (canUseDOM) {
        style = document.createElement('div').style; // On some platforms, in particular some releases of Android 4.x,
        // the un-prefixed "animation" and "transition" properties are defined on the
        // style object but the events that fire will still be prefixed, so we need
        // to check if the un-prefixed events are usable, and if not remove them from the map.
        if (!('AnimationEvent' in window)) {
            delete vendorPrefixes.animationend.animation;
            delete vendorPrefixes.animationiteration.animation;
            delete vendorPrefixes.animationstart.animation;
        } // Same as above
        if (!('TransitionEvent' in window)) delete vendorPrefixes.transitionend.transition;
    }
    /**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */ function getVendorPrefixedEventName(eventName) {
        if (prefixedEventNames[eventName]) return prefixedEventNames[eventName];
        else if (!vendorPrefixes[eventName]) return eventName;
        var prefixMap = vendorPrefixes[eventName];
        for(var styleProp in prefixMap){
            if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) return prefixedEventNames[eventName] = prefixMap[styleProp];
        }
        return eventName;
    }
    /**
 * To identify top level events in ReactDOM, we use constants defined by this
 * module. This is the only module that uses the unsafe* methods to express
 * that the constants actually correspond to the browser event names. This lets
 * us save some bundle size by avoiding a top level type -> event name map.
 * The rest of ReactDOM code should import top level types from this file.
 */ var TOP_ABORT = unsafeCastStringToDOMTopLevelType('abort');
    var TOP_ANIMATION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationend'));
    var TOP_ANIMATION_ITERATION = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationiteration'));
    var TOP_ANIMATION_START = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationstart'));
    var TOP_BLUR = unsafeCastStringToDOMTopLevelType('blur');
    var TOP_CAN_PLAY = unsafeCastStringToDOMTopLevelType('canplay');
    var TOP_CAN_PLAY_THROUGH = unsafeCastStringToDOMTopLevelType('canplaythrough');
    var TOP_CANCEL = unsafeCastStringToDOMTopLevelType('cancel');
    var TOP_CHANGE = unsafeCastStringToDOMTopLevelType('change');
    var TOP_CLICK = unsafeCastStringToDOMTopLevelType('click');
    var TOP_CLOSE = unsafeCastStringToDOMTopLevelType('close');
    var TOP_COMPOSITION_END = unsafeCastStringToDOMTopLevelType('compositionend');
    var TOP_COMPOSITION_START = unsafeCastStringToDOMTopLevelType('compositionstart');
    var TOP_COMPOSITION_UPDATE = unsafeCastStringToDOMTopLevelType('compositionupdate');
    var TOP_CONTEXT_MENU = unsafeCastStringToDOMTopLevelType('contextmenu');
    var TOP_COPY = unsafeCastStringToDOMTopLevelType('copy');
    var TOP_CUT = unsafeCastStringToDOMTopLevelType('cut');
    var TOP_DOUBLE_CLICK = unsafeCastStringToDOMTopLevelType('dblclick');
    var TOP_AUX_CLICK = unsafeCastStringToDOMTopLevelType('auxclick');
    var TOP_DRAG = unsafeCastStringToDOMTopLevelType('drag');
    var TOP_DRAG_END = unsafeCastStringToDOMTopLevelType('dragend');
    var TOP_DRAG_ENTER = unsafeCastStringToDOMTopLevelType('dragenter');
    var TOP_DRAG_EXIT = unsafeCastStringToDOMTopLevelType('dragexit');
    var TOP_DRAG_LEAVE = unsafeCastStringToDOMTopLevelType('dragleave');
    var TOP_DRAG_OVER = unsafeCastStringToDOMTopLevelType('dragover');
    var TOP_DRAG_START = unsafeCastStringToDOMTopLevelType('dragstart');
    var TOP_DROP = unsafeCastStringToDOMTopLevelType('drop');
    var TOP_DURATION_CHANGE = unsafeCastStringToDOMTopLevelType('durationchange');
    var TOP_EMPTIED = unsafeCastStringToDOMTopLevelType('emptied');
    var TOP_ENCRYPTED = unsafeCastStringToDOMTopLevelType('encrypted');
    var TOP_ENDED = unsafeCastStringToDOMTopLevelType('ended');
    var TOP_ERROR = unsafeCastStringToDOMTopLevelType('error');
    var TOP_FOCUS = unsafeCastStringToDOMTopLevelType('focus');
    var TOP_GOT_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('gotpointercapture');
    var TOP_INPUT = unsafeCastStringToDOMTopLevelType('input');
    var TOP_INVALID = unsafeCastStringToDOMTopLevelType('invalid');
    var TOP_KEY_DOWN = unsafeCastStringToDOMTopLevelType('keydown');
    var TOP_KEY_PRESS = unsafeCastStringToDOMTopLevelType('keypress');
    var TOP_KEY_UP = unsafeCastStringToDOMTopLevelType('keyup');
    var TOP_LOAD = unsafeCastStringToDOMTopLevelType('load');
    var TOP_LOAD_START = unsafeCastStringToDOMTopLevelType('loadstart');
    var TOP_LOADED_DATA = unsafeCastStringToDOMTopLevelType('loadeddata');
    var TOP_LOADED_METADATA = unsafeCastStringToDOMTopLevelType('loadedmetadata');
    var TOP_LOST_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('lostpointercapture');
    var TOP_MOUSE_DOWN = unsafeCastStringToDOMTopLevelType('mousedown');
    var TOP_MOUSE_MOVE = unsafeCastStringToDOMTopLevelType('mousemove');
    var TOP_MOUSE_OUT = unsafeCastStringToDOMTopLevelType('mouseout');
    var TOP_MOUSE_OVER = unsafeCastStringToDOMTopLevelType('mouseover');
    var TOP_MOUSE_UP = unsafeCastStringToDOMTopLevelType('mouseup');
    var TOP_PASTE = unsafeCastStringToDOMTopLevelType('paste');
    var TOP_PAUSE = unsafeCastStringToDOMTopLevelType('pause');
    var TOP_PLAY = unsafeCastStringToDOMTopLevelType('play');
    var TOP_PLAYING = unsafeCastStringToDOMTopLevelType('playing');
    var TOP_POINTER_CANCEL = unsafeCastStringToDOMTopLevelType('pointercancel');
    var TOP_POINTER_DOWN = unsafeCastStringToDOMTopLevelType('pointerdown');
    var TOP_POINTER_MOVE = unsafeCastStringToDOMTopLevelType('pointermove');
    var TOP_POINTER_OUT = unsafeCastStringToDOMTopLevelType('pointerout');
    var TOP_POINTER_OVER = unsafeCastStringToDOMTopLevelType('pointerover');
    var TOP_POINTER_UP = unsafeCastStringToDOMTopLevelType('pointerup');
    var TOP_PROGRESS = unsafeCastStringToDOMTopLevelType('progress');
    var TOP_RATE_CHANGE = unsafeCastStringToDOMTopLevelType('ratechange');
    var TOP_RESET = unsafeCastStringToDOMTopLevelType('reset');
    var TOP_SCROLL = unsafeCastStringToDOMTopLevelType('scroll');
    var TOP_SEEKED = unsafeCastStringToDOMTopLevelType('seeked');
    var TOP_SEEKING = unsafeCastStringToDOMTopLevelType('seeking');
    var TOP_SELECTION_CHANGE = unsafeCastStringToDOMTopLevelType('selectionchange');
    var TOP_STALLED = unsafeCastStringToDOMTopLevelType('stalled');
    var TOP_SUBMIT = unsafeCastStringToDOMTopLevelType('submit');
    var TOP_SUSPEND = unsafeCastStringToDOMTopLevelType('suspend');
    var TOP_TEXT_INPUT = unsafeCastStringToDOMTopLevelType('textInput');
    var TOP_TIME_UPDATE = unsafeCastStringToDOMTopLevelType('timeupdate');
    var TOP_TOGGLE = unsafeCastStringToDOMTopLevelType('toggle');
    var TOP_TOUCH_CANCEL = unsafeCastStringToDOMTopLevelType('touchcancel');
    var TOP_TOUCH_END = unsafeCastStringToDOMTopLevelType('touchend');
    var TOP_TOUCH_MOVE = unsafeCastStringToDOMTopLevelType('touchmove');
    var TOP_TOUCH_START = unsafeCastStringToDOMTopLevelType('touchstart');
    var TOP_TRANSITION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('transitionend'));
    var TOP_VOLUME_CHANGE = unsafeCastStringToDOMTopLevelType('volumechange');
    var TOP_WAITING = unsafeCastStringToDOMTopLevelType('waiting');
    var TOP_WHEEL = unsafeCastStringToDOMTopLevelType('wheel'); // List of events that need to be individually attached to media elements.
    // Note that events in this list will *not* be listened to at the top level
    // unless they're explicitly whitelisted in `ReactBrowserEventEmitter.listenTo`.
    var mediaEventTypes = [
        TOP_ABORT,
        TOP_CAN_PLAY,
        TOP_CAN_PLAY_THROUGH,
        TOP_DURATION_CHANGE,
        TOP_EMPTIED,
        TOP_ENCRYPTED,
        TOP_ENDED,
        TOP_ERROR,
        TOP_LOADED_DATA,
        TOP_LOADED_METADATA,
        TOP_LOAD_START,
        TOP_PAUSE,
        TOP_PLAY,
        TOP_PLAYING,
        TOP_PROGRESS,
        TOP_RATE_CHANGE,
        TOP_SEEKED,
        TOP_SEEKING,
        TOP_STALLED,
        TOP_SUSPEND,
        TOP_TIME_UPDATE,
        TOP_VOLUME_CHANGE,
        TOP_WAITING
    ];
    function getRawEventName(topLevelType) {
        return unsafeCastDOMTopLevelTypeToString(topLevelType);
    }
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map; // prettier-ignore
    var elementListenerMap = new PossiblyWeakMap();
    function getListenerMapForElement(element) {
        var listenerMap = elementListenerMap.get(element);
        if (listenerMap === undefined) {
            listenerMap = new Map();
            elementListenerMap.set(element, listenerMap);
        }
        return listenerMap;
    }
    /**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 *
 * Note that this module is currently shared and assumed to be stateless.
 * If this becomes an actual Map, that will break.
 */ function get(key) {
        return key._reactInternalFiber;
    }
    function has(key) {
        return key._reactInternalFiber !== undefined;
    }
    function set(key, value) {
        key._reactInternalFiber = value;
    }
    // Don't change these two values. They're used by React Dev Tools.
    var NoEffect = /*              */ 0;
    var PerformedWork = /*         */ 1; // You can change the rest (and add more).
    var Placement = /*             */ 2;
    var Update = /*                */ 4;
    var PlacementAndUpdate = /*    */ 6;
    var Deletion = /*              */ 8;
    var ContentReset = /*          */ 16;
    var Callback = /*              */ 32;
    var DidCapture = /*            */ 64;
    var Ref = /*                   */ 128;
    var Snapshot = /*              */ 256;
    var Passive = /*               */ 512;
    var Hydrating = /*             */ 1024;
    var HydratingAndUpdate = /*    */ 1028; // Passive & Update & Callback & Ref & Snapshot
    var LifecycleEffectMask = /*   */ 932; // Union of all host effects
    var HostEffectMask = /*        */ 2047;
    var Incomplete = /*            */ 2048;
    var ShouldCapture = /*         */ 4096;
    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
    function getNearestMountedFiber(fiber) {
        var node = fiber;
        var nearestMounted = fiber;
        if (!fiber.alternate) {
            // If there is no alternate, this might be a new tree that isn't inserted
            // yet. If it is, then it will have a pending insertion effect on it.
            var nextNode = node;
            do {
                node = nextNode;
                if ((node.effectTag & (Placement | Hydrating)) !== NoEffect) // This is an insertion or in-progress hydration. The nearest possible
                // mounted fiber is the parent but we need to continue to figure out
                // if that one is still mounted.
                nearestMounted = node.return;
                nextNode = node.return;
            }while (nextNode)
        } else while(node.return)node = node.return;
        if (node.tag === HostRoot) // TODO: Check if this was a nested HostRoot when used with
        // renderContainerIntoSubtree.
        return nearestMounted;
         // If we didn't hit the root, that means that we're in an disconnected tree
        // that has been unmounted.
        return null;
    }
    function getSuspenseInstanceFromFiber(fiber) {
        if (fiber.tag === SuspenseComponent) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState === null) {
                var current1 = fiber.alternate;
                if (current1 !== null) suspenseState = current1.memoizedState;
            }
            if (suspenseState !== null) return suspenseState.dehydrated;
        }
        return null;
    }
    function getContainerFromFiber(fiber) {
        return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
    }
    function isFiberMounted(fiber) {
        return getNearestMountedFiber(fiber) === fiber;
    }
    function isMounted(component) {
        var owner = ReactCurrentOwner.current;
        if (owner !== null && owner.tag === ClassComponent) {
            var ownerFiber = owner;
            var instance = ownerFiber.stateNode;
            if (!instance._warnedAboutRefsInRender) error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(ownerFiber.type) || 'A component');
            instance._warnedAboutRefsInRender = true;
        }
        var fiber = get(component);
        if (!fiber) return false;
        return getNearestMountedFiber(fiber) === fiber;
    }
    function assertIsMounted(fiber) {
        if (!(getNearestMountedFiber(fiber) === fiber)) throw Error("Unable to find node on an unmounted component.");
    }
    function findCurrentFiberUsingSlowPath(fiber) {
        var alternate = fiber.alternate;
        if (!alternate) {
            // If there is no alternate, then we only need to check if it is mounted.
            var nearestMounted = getNearestMountedFiber(fiber);
            if (!(nearestMounted !== null)) throw Error("Unable to find node on an unmounted component.");
            if (nearestMounted !== fiber) return null;
            return fiber;
        } // If we have two possible branches, we'll walk backwards up to the root
        // to see what path the root points to. On the way we may hit one of the
        // special cases and we'll deal with them.
        var a = fiber;
        var b = alternate;
        while(true){
            var parentA = a.return;
            if (parentA === null) break;
            var parentB = parentA.alternate;
            if (parentB === null) {
                // There is no alternate. This is an unusual case. Currently, it only
                // happens when a Suspense component is hidden. An extra fragment fiber
                // is inserted in between the Suspense fiber and its children. Skip
                // over this extra fragment fiber and proceed to the next parent.
                var nextParent = parentA.return;
                if (nextParent !== null) {
                    a = b = nextParent;
                    continue;
                } // If there's no parent, we're at the root.
                break;
            } // If both copies of the parent fiber point to the same child, we can
            // assume that the child is current. This happens when we bailout on low
            // priority: the bailed out fiber's child reuses the current child.
            if (parentA.child === parentB.child) {
                var child = parentA.child;
                while(child){
                    if (child === a) {
                        // We've determined that A is the current branch.
                        assertIsMounted(parentA);
                        return fiber;
                    }
                    if (child === b) {
                        // We've determined that B is the current branch.
                        assertIsMounted(parentA);
                        return alternate;
                    }
                    child = child.sibling;
                } // We should never have an alternate for any mounting node. So the only
                throw Error("Unable to find node on an unmounted component.");
            }
            if (a.return !== b.return) {
                // The return pointer of A and the return pointer of B point to different
                // fibers. We assume that return pointers never criss-cross, so A must
                // belong to the child set of A.return, and B must belong to the child
                // set of B.return.
                a = parentA;
                b = parentB;
            } else {
                // The return pointers point to the same fiber. We'll have to use the
                // default, slow path: scan the child sets of each parent alternate to see
                // which child belongs to which set.
                //
                // Search parent A's child set
                var didFindChild = false;
                var _child = parentA.child;
                while(_child){
                    if (_child === a) {
                        didFindChild = true;
                        a = parentA;
                        b = parentB;
                        break;
                    }
                    if (_child === b) {
                        didFindChild = true;
                        b = parentA;
                        a = parentB;
                        break;
                    }
                    _child = _child.sibling;
                }
                if (!didFindChild) {
                    // Search parent B's child set
                    _child = parentB.child;
                    while(_child){
                        if (_child === a) {
                            didFindChild = true;
                            a = parentB;
                            b = parentA;
                            break;
                        }
                        if (_child === b) {
                            didFindChild = true;
                            b = parentB;
                            a = parentA;
                            break;
                        }
                        _child = _child.sibling;
                    }
                    if (!didFindChild) throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                }
            }
            if (!(a.alternate === b)) throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
        } // If the root is not a host container, we're in a disconnected tree. I.e.
        // unmounted.
        if (!(a.tag === HostRoot)) throw Error("Unable to find node on an unmounted component.");
        if (a.stateNode.current === a) // We've determined that A is the current branch.
        return fiber;
         // Otherwise B has to be current branch.
        return alternate;
    }
    function findCurrentHostFiber(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        if (!currentParent) return null;
         // Next we'll drill down this component to find the first HostComponent/Text.
        var node = currentParent;
        while(true){
            if (node.tag === HostComponent || node.tag === HostText) return node;
            else if (node.child) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === currentParent) return null;
            while(!node.sibling){
                if (!node.return || node.return === currentParent) return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        } // Flow needs the return null here, but ESLint complains about it.
        // eslint-disable-next-line no-unreachable
        return null;
    }
    function findCurrentHostFiberWithNoPortals(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        if (!currentParent) return null;
         // Next we'll drill down this component to find the first HostComponent/Text.
        var node = currentParent;
        while(true){
            if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI) return node;
            else if (node.child && node.tag !== HostPortal) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === currentParent) return null;
            while(!node.sibling){
                if (!node.return || node.return === currentParent) return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        } // Flow needs the return null here, but ESLint complains about it.
        // eslint-disable-next-line no-unreachable
        return null;
    }
    /**
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */ function accumulateInto(current2, next) {
        if (!(next != null)) throw Error("accumulateInto(...): Accumulated items must not be null or undefined.");
        if (current2 == null) return next;
         // Both are not empty. Warning: Never call x.concat(y) when you are not
        // certain that x is an Array (x could be a string with concat method).
        if (Array.isArray(current2)) {
            if (Array.isArray(next)) {
                current2.push.apply(current2, next);
                return current2;
            }
            current2.push(next);
            return current2;
        }
        if (Array.isArray(next)) // A bit too dangerous to mutate `next`.
        return [
            current2
        ].concat(next);
        return [
            current2,
            next
        ];
    }
    /**
 * @param {array} arr an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 * @param {function} cb Callback invoked with each element or a collection.
 * @param {?} [scope] Scope used as `this` in a callback.
 */ function forEachAccumulated(arr, cb, scope) {
        if (Array.isArray(arr)) arr.forEach(cb, scope);
        else if (arr) cb.call(scope, arr);
    }
    /**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */ var eventQueue = null;
    /**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @private
 */ var executeDispatchesAndRelease = function(event) {
        if (event) {
            executeDispatchesInOrder(event);
            if (!event.isPersistent()) event.constructor.release(event);
        }
    };
    var executeDispatchesAndReleaseTopLevel = function(e) {
        return executeDispatchesAndRelease(e);
    };
    function runEventsInBatch(events) {
        if (events !== null) eventQueue = accumulateInto(eventQueue, events);
         // Set `eventQueue` to null before processing it so that we can tell if more
        // events get enqueued while processing.
        var processingEventQueue = eventQueue;
        eventQueue = null;
        if (!processingEventQueue) return;
        forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
        if (!!eventQueue) throw Error("processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.");
         // This would be a good time to rethrow if any of the event handlers threw.
        rethrowCaughtError();
    }
    /**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */ function getEventTarget(nativeEvent) {
        // Fallback to nativeEvent.srcElement for IE9
        // https://github.com/facebook/react/issues/12506
        var target = nativeEvent.target || nativeEvent.srcElement || window; // Normalize SVG <use> element events #4963
        if (target.correspondingUseElement) target = target.correspondingUseElement;
         // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
        // @see http://www.quirksmode.org/js/events_properties.html
        return target.nodeType === TEXT_NODE ? target.parentNode : target;
    }
    /**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */ function isEventSupported(eventNameSuffix) {
        if (!canUseDOM) return false;
        var eventName = 'on' + eventNameSuffix;
        var isSupported = eventName in document;
        if (!isSupported) {
            var element = document.createElement('div');
            element.setAttribute(eventName, 'return;');
            isSupported = typeof element[eventName] === 'function';
        }
        return isSupported;
    }
    /**
 * Summary of `DOMEventPluginSystem` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactDOMEventListener, which is injected and can therefore support
 *    pluggable event sources. This is the only work that occurs in the main
 *    thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginRegistry`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginRegistry` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginRegistry` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|PluginRegistry|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */ var CALLBACK_BOOKKEEPING_POOL_SIZE = 10;
    var callbackBookkeepingPool = [];
    function releaseTopLevelCallbackBookKeeping(instance) {
        instance.topLevelType = null;
        instance.nativeEvent = null;
        instance.targetInst = null;
        instance.ancestors.length = 0;
        if (callbackBookkeepingPool.length < CALLBACK_BOOKKEEPING_POOL_SIZE) callbackBookkeepingPool.push(instance);
    } // Used to store ancestor hierarchy in top level callback
    function getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst, eventSystemFlags) {
        if (callbackBookkeepingPool.length) {
            var instance = callbackBookkeepingPool.pop();
            instance.topLevelType = topLevelType;
            instance.eventSystemFlags = eventSystemFlags;
            instance.nativeEvent = nativeEvent;
            instance.targetInst = targetInst;
            return instance;
        }
        return {
            topLevelType: topLevelType,
            eventSystemFlags: eventSystemFlags,
            nativeEvent: nativeEvent,
            targetInst: targetInst,
            ancestors: []
        };
    }
    /**
 * Find the deepest React component completely containing the root of the
 * passed-in instance (for use when entire React trees are nested within each
 * other). If React trees are not nested, returns null.
 */ function findRootContainerNode(inst) {
        if (inst.tag === HostRoot) return inst.stateNode.containerInfo;
         // TODO: It may be a good idea to cache this to prevent unnecessary DOM
        // traversal, but caching is difficult to do correctly without using a
        // mutation observer to listen for all DOM changes.
        while(inst.return)inst = inst.return;
        if (inst.tag !== HostRoot) // This can happen if we're in a detached tree.
        return null;
        return inst.stateNode.containerInfo;
    }
    /**
 * Allows registered plugins an opportunity to extract events from top-level
 * native browser events.
 *
 * @return {*} An accumulation of synthetic events.
 * @internal
 */ function extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
        var events = null;
        for(var i = 0; i < plugins.length; i++){
            // Not every plugin in the ordering may be loaded at runtime.
            var possiblePlugin = plugins[i];
            if (possiblePlugin) {
                var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
                if (extractedEvents) events = accumulateInto(events, extractedEvents);
            }
        }
        return events;
    }
    function runExtractedPluginEventsInBatch(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
        var events = extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        runEventsInBatch(events);
    }
    function handleTopLevel(bookKeeping) {
        var targetInst = bookKeeping.targetInst; // Loop through the hierarchy, in case there's any nested components.
        // It's important that we build the array of ancestors before calling any
        // event handlers, because event handlers can modify the DOM, leading to
        // inconsistencies with ReactMount's node cache. See #1105.
        var ancestor = targetInst;
        do {
            if (!ancestor) {
                var ancestors = bookKeeping.ancestors;
                ancestors.push(ancestor);
                break;
            }
            var root = findRootContainerNode(ancestor);
            if (!root) break;
            var tag = ancestor.tag;
            if (tag === HostComponent || tag === HostText) bookKeeping.ancestors.push(ancestor);
            ancestor = getClosestInstanceFromNode(root);
        }while (ancestor)
        for(var i = 0; i < bookKeeping.ancestors.length; i++){
            targetInst = bookKeeping.ancestors[i];
            var eventTarget = getEventTarget(bookKeeping.nativeEvent);
            var topLevelType = bookKeeping.topLevelType;
            var nativeEvent = bookKeeping.nativeEvent;
            var eventSystemFlags = bookKeeping.eventSystemFlags; // If this is the first ancestor, we mark it on the system flags
            if (i === 0) eventSystemFlags |= IS_FIRST_ANCESTOR;
            runExtractedPluginEventsInBatch(topLevelType, targetInst, nativeEvent, eventTarget, eventSystemFlags);
        }
    }
    function dispatchEventForLegacyPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, targetInst) {
        var bookKeeping = getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst, eventSystemFlags);
        try {
            // Event queue being processed in the same cycle allows
            // `preventDefault`.
            batchedEventUpdates(handleTopLevel, bookKeeping);
        } finally{
            releaseTopLevelCallbackBookKeeping(bookKeeping);
        }
    }
    /**
 * We listen for bubbled touch events on the document object.
 *
 * Firefox v8.01 (and possibly others) exhibited strange behavior when
 * mounting `onmousemove` events at some node that was not the document
 * element. The symptoms were that if your mouse is not moving over something
 * contained within that mount point (for example on the background) the
 * top-level listeners for `onmousemove` won't be called. However, if you
 * register the `mousemove` on the document object, then it will of course
 * catch all `mousemove`s. This along with iOS quirks, justifies restricting
 * top-level listeners to the document object only, at least for these
 * movement types of events and possibly all events.
 *
 * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
 *
 * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
 * they bubble to document.
 *
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @param {object} mountAt Container where to mount the listener
 */ function legacyListenToEvent(registrationName, mountAt) {
        var listenerMap = getListenerMapForElement(mountAt);
        var dependencies = registrationNameDependencies[registrationName];
        for(var i = 0; i < dependencies.length; i++){
            var dependency = dependencies[i];
            legacyListenToTopLevelEvent(dependency, mountAt, listenerMap);
        }
    }
    function legacyListenToTopLevelEvent(topLevelType, mountAt, listenerMap) {
        if (!listenerMap.has(topLevelType)) {
            switch(topLevelType){
                case TOP_SCROLL:
                    trapCapturedEvent(TOP_SCROLL, mountAt);
                    break;
                case TOP_FOCUS:
                case TOP_BLUR:
                    trapCapturedEvent(TOP_FOCUS, mountAt);
                    trapCapturedEvent(TOP_BLUR, mountAt); // We set the flag for a single dependency later in this function,
                    // but this ensures we mark both as attached rather than just one.
                    listenerMap.set(TOP_BLUR, null);
                    listenerMap.set(TOP_FOCUS, null);
                    break;
                case TOP_CANCEL:
                case TOP_CLOSE:
                    if (isEventSupported(getRawEventName(topLevelType))) trapCapturedEvent(topLevelType, mountAt);
                    break;
                case TOP_INVALID:
                case TOP_SUBMIT:
                case TOP_RESET:
                    break;
                default:
                    // By default, listen on the top level to all non-media events.
                    // Media events don't bubble so adding the listener wouldn't do anything.
                    var isMediaEvent = mediaEventTypes.indexOf(topLevelType) !== -1;
                    if (!isMediaEvent) trapBubbledEvent(topLevelType, mountAt);
                    break;
            }
            listenerMap.set(topLevelType, null);
        }
    }
    function isListeningToAllDependencies(registrationName, mountAt) {
        var listenerMap = getListenerMapForElement(mountAt);
        var dependencies = registrationNameDependencies[registrationName];
        for(var i = 0; i < dependencies.length; i++){
            var dependency = dependencies[i];
            if (!listenerMap.has(dependency)) return false;
        }
        return true;
    }
    var attemptUserBlockingHydration;
    function setAttemptUserBlockingHydration(fn) {
        attemptUserBlockingHydration = fn;
    }
    var attemptContinuousHydration;
    function setAttemptContinuousHydration(fn) {
        attemptContinuousHydration = fn;
    }
    var attemptHydrationAtCurrentPriority;
    function setAttemptHydrationAtCurrentPriority(fn) {
        attemptHydrationAtCurrentPriority = fn;
    } // TODO: Upgrade this definition once we're on a newer version of Flow that
    var hasScheduledReplayAttempt = false; // The queue of discrete events to be replayed.
    var queuedDiscreteEvents = []; // Indicates if any continuous event targets are non-null for early bailout.
    // if the last target was dehydrated.
    var queuedFocus = null;
    var queuedDrag = null;
    var queuedMouse = null; // For pointer events there can be one latest event per pointerId.
    var queuedPointers = new Map();
    var queuedPointerCaptures = new Map(); // We could consider replaying selectionchange and touchmoves too.
    var queuedExplicitHydrationTargets = [];
    function hasQueuedDiscreteEvents() {
        return queuedDiscreteEvents.length > 0;
    }
    var discreteReplayableEvents = [
        TOP_MOUSE_DOWN,
        TOP_MOUSE_UP,
        TOP_TOUCH_CANCEL,
        TOP_TOUCH_END,
        TOP_TOUCH_START,
        TOP_AUX_CLICK,
        TOP_DOUBLE_CLICK,
        TOP_POINTER_CANCEL,
        TOP_POINTER_DOWN,
        TOP_POINTER_UP,
        TOP_DRAG_END,
        TOP_DRAG_START,
        TOP_DROP,
        TOP_COMPOSITION_END,
        TOP_COMPOSITION_START,
        TOP_KEY_DOWN,
        TOP_KEY_PRESS,
        TOP_KEY_UP,
        TOP_INPUT,
        TOP_TEXT_INPUT,
        TOP_CLOSE,
        TOP_CANCEL,
        TOP_COPY,
        TOP_CUT,
        TOP_PASTE,
        TOP_CLICK,
        TOP_CHANGE,
        TOP_CONTEXT_MENU,
        TOP_RESET,
        TOP_SUBMIT
    ];
    var continuousReplayableEvents = [
        TOP_FOCUS,
        TOP_BLUR,
        TOP_DRAG_ENTER,
        TOP_DRAG_LEAVE,
        TOP_MOUSE_OVER,
        TOP_MOUSE_OUT,
        TOP_POINTER_OVER,
        TOP_POINTER_OUT,
        TOP_GOT_POINTER_CAPTURE,
        TOP_LOST_POINTER_CAPTURE
    ];
    function isReplayableDiscreteEvent(eventType) {
        return discreteReplayableEvents.indexOf(eventType) > -1;
    }
    function trapReplayableEventForDocument(topLevelType, document, listenerMap) {
        legacyListenToTopLevelEvent(topLevelType, document, listenerMap);
    }
    function eagerlyTrapReplayableEvents(container, document) {
        var listenerMapForDoc = getListenerMapForElement(document); // Discrete
        discreteReplayableEvents.forEach(function(topLevelType) {
            trapReplayableEventForDocument(topLevelType, document, listenerMapForDoc);
        }); // Continuous
        continuousReplayableEvents.forEach(function(topLevelType) {
            trapReplayableEventForDocument(topLevelType, document, listenerMapForDoc);
        });
    }
    function createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
        return {
            blockedOn: blockedOn,
            topLevelType: topLevelType,
            eventSystemFlags: eventSystemFlags | IS_REPLAYED,
            nativeEvent: nativeEvent,
            container: container
        };
    }
    function queueDiscreteEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
        var queuedEvent = createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent);
        queuedDiscreteEvents.push(queuedEvent);
    } // Resets the replaying for this type of continuous event to no event.
    function clearIfContinuousEvent(topLevelType, nativeEvent) {
        switch(topLevelType){
            case TOP_FOCUS:
            case TOP_BLUR:
                queuedFocus = null;
                break;
            case TOP_DRAG_ENTER:
            case TOP_DRAG_LEAVE:
                queuedDrag = null;
                break;
            case TOP_MOUSE_OVER:
            case TOP_MOUSE_OUT:
                queuedMouse = null;
                break;
            case TOP_POINTER_OVER:
            case TOP_POINTER_OUT:
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
            case TOP_GOT_POINTER_CAPTURE:
            case TOP_LOST_POINTER_CAPTURE:
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
        }
    }
    function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
        if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent);
            if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode$1(blockedOn);
                if (_fiber2 !== null) // Attempt to increase the priority of this target.
                attemptContinuousHydration(_fiber2);
            }
            return queuedEvent;
        } // If we have already queued this exact event, then it's because
        // the different event systems have different DOM event listeners.
        // We can accumulate the flags and store a single event to be
        // replayed.
        existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
        return existingQueuedEvent;
    }
    function queueIfContinuousEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
        // These set relatedTarget to null because the replayed event will be treated as if we
        // moved from outside the window (no target) onto the target once it hydrates.
        // Instead of mutating we could clone the event.
        switch(topLevelType){
            case TOP_FOCUS:
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, topLevelType, eventSystemFlags, container, focusEvent);
                return true;
            case TOP_DRAG_ENTER:
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, topLevelType, eventSystemFlags, container, dragEvent);
                return true;
            case TOP_MOUSE_OVER:
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, topLevelType, eventSystemFlags, container, mouseEvent);
                return true;
            case TOP_POINTER_OVER:
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, topLevelType, eventSystemFlags, container, pointerEvent));
                return true;
            case TOP_GOT_POINTER_CAPTURE:
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, topLevelType, eventSystemFlags, container, _pointerEvent));
                return true;
        }
        return false;
    } // Check if this target is unblocked. Returns true if it's unblocked.
    function attemptExplicitHydrationTarget(queuedTarget) {
        // TODO: This function shares a lot of logic with attemptToDispatchEvent.
        // Try to unify them. It's a bit tricky since it would require two return
        // values.
        var targetInst = getClosestInstanceFromNode(queuedTarget.target);
        if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                    var instance = getSuspenseInstanceFromFiber(nearestMounted);
                    if (instance !== null) {
                        // We're blocked on hydrating this boundary.
                        // Increase its priority.
                        queuedTarget.blockedOn = instance;
                        Scheduler.unstable_runWithPriority(queuedTarget.priority, function() {
                            attemptHydrationAtCurrentPriority(nearestMounted);
                        });
                        return;
                    }
                } else if (tag === HostRoot) {
                    var root = nearestMounted.stateNode;
                    if (root.hydrate) {
                        queuedTarget.blockedOn = getContainerFromFiber(nearestMounted); // We don't currently have a way to increase the priority of
                        // a root other than sync.
                        return;
                    }
                }
            }
        }
        queuedTarget.blockedOn = null;
    }
    function attemptReplayContinuousQueuedEvent(queuedEvent) {
        if (queuedEvent.blockedOn !== null) return false;
        var nextBlockedOn = attemptToDispatchEvent(queuedEvent.topLevelType, queuedEvent.eventSystemFlags, queuedEvent.container, queuedEvent.nativeEvent);
        if (nextBlockedOn !== null) {
            // We're still blocked. Try again later.
            var _fiber3 = getInstanceFromNode$1(nextBlockedOn);
            if (_fiber3 !== null) attemptContinuousHydration(_fiber3);
            queuedEvent.blockedOn = nextBlockedOn;
            return false;
        }
        return true;
    }
    function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
        if (attemptReplayContinuousQueuedEvent(queuedEvent)) map.delete(key);
    }
    function replayUnblockedEvents() {
        hasScheduledReplayAttempt = false; // First replay discrete events.
        while(queuedDiscreteEvents.length > 0){
            var nextDiscreteEvent = queuedDiscreteEvents[0];
            if (nextDiscreteEvent.blockedOn !== null) {
                // We're still blocked.
                // Increase the priority of this boundary to unblock
                // the next discrete event.
                var _fiber4 = getInstanceFromNode$1(nextDiscreteEvent.blockedOn);
                if (_fiber4 !== null) attemptUserBlockingHydration(_fiber4);
                break;
            }
            var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.topLevelType, nextDiscreteEvent.eventSystemFlags, nextDiscreteEvent.container, nextDiscreteEvent.nativeEvent);
            if (nextBlockedOn !== null) // We're still blocked. Try again later.
            nextDiscreteEvent.blockedOn = nextBlockedOn;
            else // We've successfully replayed the first event. Let's try the next one.
            queuedDiscreteEvents.shift();
        } // Next replay any continuous events.
        if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) queuedFocus = null;
        if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) queuedDrag = null;
        if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) queuedMouse = null;
        queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
        queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
    }
    function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
        if (queuedEvent.blockedOn === unblocked) {
            queuedEvent.blockedOn = null;
            if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true; // Schedule a callback to attempt replaying as many events as are
                // now unblocked. This first might not actually be unblocked yet.
                // We could check it early to avoid scheduling an unnecessary callback.
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
            }
        }
    }
    function retryIfBlockedOn(unblocked) {
        // Mark anything that was blocked on this as no longer blocked
        // and eligible for a replay.
        if (queuedDiscreteEvents.length > 0) {
            scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked); // This is a exponential search for each boundary that commits. I think it's
            // worth it because we expect very few discrete events to queue up and once
            // we are actually fully unblocked it will be fast to replay them.
            for(var i = 1; i < queuedDiscreteEvents.length; i++){
                var queuedEvent = queuedDiscreteEvents[i];
                if (queuedEvent.blockedOn === unblocked) queuedEvent.blockedOn = null;
            }
        }
        if (queuedFocus !== null) scheduleCallbackIfUnblocked(queuedFocus, unblocked);
        if (queuedDrag !== null) scheduleCallbackIfUnblocked(queuedDrag, unblocked);
        if (queuedMouse !== null) scheduleCallbackIfUnblocked(queuedMouse, unblocked);
        var unblock = function(queuedEvent) {
            return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
        };
        queuedPointers.forEach(unblock);
        queuedPointerCaptures.forEach(unblock);
        for(var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++){
            var queuedTarget = queuedExplicitHydrationTargets[_i];
            if (queuedTarget.blockedOn === unblocked) queuedTarget.blockedOn = null;
        }
        while(queuedExplicitHydrationTargets.length > 0){
            var nextExplicitTarget = queuedExplicitHydrationTargets[0];
            if (nextExplicitTarget.blockedOn !== null) break;
            else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) // We're unblocked.
                queuedExplicitHydrationTargets.shift();
            }
        }
    }
    function addEventBubbleListener(element, eventType, listener) {
        element.addEventListener(eventType, listener, false);
    }
    function addEventCaptureListener(element, eventType, listener) {
        element.addEventListener(eventType, listener, true);
    }
    // do it in two places, which duplicates logic
    // and increases the bundle size, we do it all
    // here once. If we remove or refactor the
    // SimpleEventPlugin, we should also remove or
    // update the below line.
    var simpleEventPluginEventTypes = {
    };
    var topLevelEventsToDispatchConfig = new Map();
    var eventPriorities = new Map(); // We store most of the events in this module in pairs of two strings so we can re-use
    // the code required to apply the same logic for event prioritization and that of the
    // SimpleEventPlugin. This complicates things slightly, but the aim is to reduce code
    // duplication (for which there would be quite a bit). For the events that are not needed
    // for the SimpleEventPlugin (otherDiscreteEvents) we process them separately as an
    // array of top level events.
    // Lastly, we ignore prettier so we can keep the formatting sane.
    // prettier-ignore
    var discreteEventPairsForSimpleEventPlugin = [
        TOP_BLUR,
        'blur',
        TOP_CANCEL,
        'cancel',
        TOP_CLICK,
        'click',
        TOP_CLOSE,
        'close',
        TOP_CONTEXT_MENU,
        'contextMenu',
        TOP_COPY,
        'copy',
        TOP_CUT,
        'cut',
        TOP_AUX_CLICK,
        'auxClick',
        TOP_DOUBLE_CLICK,
        'doubleClick',
        TOP_DRAG_END,
        'dragEnd',
        TOP_DRAG_START,
        'dragStart',
        TOP_DROP,
        'drop',
        TOP_FOCUS,
        'focus',
        TOP_INPUT,
        'input',
        TOP_INVALID,
        'invalid',
        TOP_KEY_DOWN,
        'keyDown',
        TOP_KEY_PRESS,
        'keyPress',
        TOP_KEY_UP,
        'keyUp',
        TOP_MOUSE_DOWN,
        'mouseDown',
        TOP_MOUSE_UP,
        'mouseUp',
        TOP_PASTE,
        'paste',
        TOP_PAUSE,
        'pause',
        TOP_PLAY,
        'play',
        TOP_POINTER_CANCEL,
        'pointerCancel',
        TOP_POINTER_DOWN,
        'pointerDown',
        TOP_POINTER_UP,
        'pointerUp',
        TOP_RATE_CHANGE,
        'rateChange',
        TOP_RESET,
        'reset',
        TOP_SEEKED,
        'seeked',
        TOP_SUBMIT,
        'submit',
        TOP_TOUCH_CANCEL,
        'touchCancel',
        TOP_TOUCH_END,
        'touchEnd',
        TOP_TOUCH_START,
        'touchStart',
        TOP_VOLUME_CHANGE,
        'volumeChange'
    ];
    var otherDiscreteEvents = [
        TOP_CHANGE,
        TOP_SELECTION_CHANGE,
        TOP_TEXT_INPUT,
        TOP_COMPOSITION_START,
        TOP_COMPOSITION_END,
        TOP_COMPOSITION_UPDATE
    ]; // prettier-ignore
    var userBlockingPairsForSimpleEventPlugin = [
        TOP_DRAG,
        'drag',
        TOP_DRAG_ENTER,
        'dragEnter',
        TOP_DRAG_EXIT,
        'dragExit',
        TOP_DRAG_LEAVE,
        'dragLeave',
        TOP_DRAG_OVER,
        'dragOver',
        TOP_MOUSE_MOVE,
        'mouseMove',
        TOP_MOUSE_OUT,
        'mouseOut',
        TOP_MOUSE_OVER,
        'mouseOver',
        TOP_POINTER_MOVE,
        'pointerMove',
        TOP_POINTER_OUT,
        'pointerOut',
        TOP_POINTER_OVER,
        'pointerOver',
        TOP_SCROLL,
        'scroll',
        TOP_TOGGLE,
        'toggle',
        TOP_TOUCH_MOVE,
        'touchMove',
        TOP_WHEEL,
        'wheel'
    ]; // prettier-ignore
    var continuousPairsForSimpleEventPlugin = [
        TOP_ABORT,
        'abort',
        TOP_ANIMATION_END,
        'animationEnd',
        TOP_ANIMATION_ITERATION,
        'animationIteration',
        TOP_ANIMATION_START,
        'animationStart',
        TOP_CAN_PLAY,
        'canPlay',
        TOP_CAN_PLAY_THROUGH,
        'canPlayThrough',
        TOP_DURATION_CHANGE,
        'durationChange',
        TOP_EMPTIED,
        'emptied',
        TOP_ENCRYPTED,
        'encrypted',
        TOP_ENDED,
        'ended',
        TOP_ERROR,
        'error',
        TOP_GOT_POINTER_CAPTURE,
        'gotPointerCapture',
        TOP_LOAD,
        'load',
        TOP_LOADED_DATA,
        'loadedData',
        TOP_LOADED_METADATA,
        'loadedMetadata',
        TOP_LOAD_START,
        'loadStart',
        TOP_LOST_POINTER_CAPTURE,
        'lostPointerCapture',
        TOP_PLAYING,
        'playing',
        TOP_PROGRESS,
        'progress',
        TOP_SEEKING,
        'seeking',
        TOP_STALLED,
        'stalled',
        TOP_SUSPEND,
        'suspend',
        TOP_TIME_UPDATE,
        'timeUpdate',
        TOP_TRANSITION_END,
        'transitionEnd',
        TOP_WAITING,
        'waiting'
    ];
    /**
 * Turns
 * ['abort', ...]
 * into
 * eventTypes = {
 *   'abort': {
 *     phasedRegistrationNames: {
 *       bubbled: 'onAbort',
 *       captured: 'onAbortCapture',
 *     },
 *     dependencies: [TOP_ABORT],
 *   },
 *   ...
 * };
 * topLevelEventsToDispatchConfig = new Map([
 *   [TOP_ABORT, { sameConfig }],
 * ]);
 */ function processSimpleEventPluginPairsByPriority(eventTypes, priority) {
        // As the event types are in pairs of two, we need to iterate
        // through in twos. The events are in pairs of two to save code
        // and improve init perf of processing this array, as it will
        // result in far fewer object allocations and property accesses
        // if we only use three arrays to process all the categories of
        // instead of tuples.
        for(var i = 0; i < eventTypes.length; i += 2){
            var topEvent = eventTypes[i];
            var event = eventTypes[i + 1];
            var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
            var onEvent = 'on' + capitalizedEvent;
            var config = {
                phasedRegistrationNames: {
                    bubbled: onEvent,
                    captured: onEvent + 'Capture'
                },
                dependencies: [
                    topEvent
                ],
                eventPriority: priority
            };
            eventPriorities.set(topEvent, priority);
            topLevelEventsToDispatchConfig.set(topEvent, config);
            simpleEventPluginEventTypes[event] = config;
        }
    }
    function processTopEventPairsByPriority(eventTypes, priority) {
        for(var i = 0; i < eventTypes.length; i++)eventPriorities.set(eventTypes[i], priority);
    } // SimpleEventPlugin
    processSimpleEventPluginPairsByPriority(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
    processSimpleEventPluginPairsByPriority(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
    processSimpleEventPluginPairsByPriority(continuousPairsForSimpleEventPlugin, ContinuousEvent); // Not used by SimpleEventPlugin
    processTopEventPairsByPriority(otherDiscreteEvents, DiscreteEvent);
    function getEventPriorityForPluginSystem(topLevelType) {
        var priority = eventPriorities.get(topLevelType); // Default to a ContinuousEvent. Note: we might
        // want to warn if we can't detect the priority
        // for the event.
        return priority === undefined ? ContinuousEvent : priority;
    }
    // Intentionally not named imports because Rollup would use dynamic dispatch for
    var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, runWithPriority = Scheduler.unstable_runWithPriority; // TODO: can we stop exporting these?
    var _enabled = true;
    function setEnabled(enabled) {
        _enabled = !!enabled;
    }
    function isEnabled() {
        return _enabled;
    }
    function trapBubbledEvent(topLevelType, element) {
        trapEventForPluginEventSystem(element, topLevelType, false);
    }
    function trapCapturedEvent(topLevelType, element) {
        trapEventForPluginEventSystem(element, topLevelType, true);
    }
    function trapEventForPluginEventSystem(container, topLevelType, capture) {
        var listener;
        switch(getEventPriorityForPluginSystem(topLevelType)){
            case DiscreteEvent:
                listener = dispatchDiscreteEvent.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM, container);
                break;
            case UserBlockingEvent:
                listener = dispatchUserBlockingUpdate.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM, container);
                break;
            case ContinuousEvent:
            default:
                listener = dispatchEvent.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM, container);
                break;
        }
        var rawEventName = getRawEventName(topLevelType);
        if (capture) addEventCaptureListener(container, rawEventName, listener);
        else addEventBubbleListener(container, rawEventName, listener);
    }
    function dispatchDiscreteEvent(topLevelType, eventSystemFlags, container, nativeEvent) {
        flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
        discreteUpdates(dispatchEvent, topLevelType, eventSystemFlags, container, nativeEvent);
    }
    function dispatchUserBlockingUpdate(topLevelType, eventSystemFlags, container, nativeEvent) {
        runWithPriority(UserBlockingPriority, dispatchEvent.bind(null, topLevelType, eventSystemFlags, container, nativeEvent));
    }
    function dispatchEvent(topLevelType, eventSystemFlags, container, nativeEvent) {
        if (!_enabled) return;
        if (hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(topLevelType)) {
            // If we already have a queue of discrete events, and this is another discrete
            // event, then we can't dispatch it regardless of its target, since they
            // need to dispatch in order.
            queueDiscreteEvent(null, topLevelType, eventSystemFlags, container, nativeEvent);
            return;
        }
        var blockedOn = attemptToDispatchEvent(topLevelType, eventSystemFlags, container, nativeEvent);
        if (blockedOn === null) {
            // We successfully dispatched this event.
            clearIfContinuousEvent(topLevelType, nativeEvent);
            return;
        }
        if (isReplayableDiscreteEvent(topLevelType)) {
            // This this to be replayed later once the target is available.
            queueDiscreteEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent);
            return;
        }
        if (queueIfContinuousEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent)) return;
         // We need to clear only if we didn't queue because
        // queueing is accummulative.
        clearIfContinuousEvent(topLevelType, nativeEvent); // This is not replayable so we'll invoke it but without a target,
        dispatchEventForLegacyPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, null);
    } // Attempt dispatching an event. Returns a SuspenseInstance or Container if it's blocked.
    function attemptToDispatchEvent(topLevelType, eventSystemFlags, container, nativeEvent) {
        // TODO: Warn if _enabled is false.
        var nativeEventTarget = getEventTarget(nativeEvent);
        var targetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted === null) // This tree has been unmounted already. Dispatch without a target.
            targetInst = null;
            else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                    var instance = getSuspenseInstanceFromFiber(nearestMounted);
                    if (instance !== null) // Queue the event to be replayed later. Abort dispatching since we
                    // don't want this event dispatched twice through the event system.
                    // TODO: If this is the first discrete event in the queue. Schedule an increased
                    // priority for this boundary.
                    return instance;
                     // This shouldn't happen, something went wrong but to avoid blocking
                    // the whole system, dispatch the event without a target.
                    // TODO: Warn.
                    targetInst = null;
                } else if (tag === HostRoot) {
                    var root = nearestMounted.stateNode;
                    if (root.hydrate) // If this happens during a replay something went wrong and it might block
                    // the whole system.
                    return getContainerFromFiber(nearestMounted);
                    targetInst = null;
                } else if (nearestMounted !== targetInst) // If we get an event (ex: img onload) before committing that
                // component's mount, ignore it for now (that is, treat it as if it was an
                // event on a non-React tree). We might also consider queueing events and
                // dispatching them after the mount.
                targetInst = null;
            }
        }
        dispatchEventForLegacyPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, targetInst);
        return null;
    }
    // List derived from Gecko source code:
    // https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js
    var shorthandToLonghand = {
        animation: [
            'animationDelay',
            'animationDirection',
            'animationDuration',
            'animationFillMode',
            'animationIterationCount',
            'animationName',
            'animationPlayState',
            'animationTimingFunction'
        ],
        background: [
            'backgroundAttachment',
            'backgroundClip',
            'backgroundColor',
            'backgroundImage',
            'backgroundOrigin',
            'backgroundPositionX',
            'backgroundPositionY',
            'backgroundRepeat',
            'backgroundSize'
        ],
        backgroundPosition: [
            'backgroundPositionX',
            'backgroundPositionY'
        ],
        border: [
            'borderBottomColor',
            'borderBottomStyle',
            'borderBottomWidth',
            'borderImageOutset',
            'borderImageRepeat',
            'borderImageSlice',
            'borderImageSource',
            'borderImageWidth',
            'borderLeftColor',
            'borderLeftStyle',
            'borderLeftWidth',
            'borderRightColor',
            'borderRightStyle',
            'borderRightWidth',
            'borderTopColor',
            'borderTopStyle',
            'borderTopWidth'
        ],
        borderBlockEnd: [
            'borderBlockEndColor',
            'borderBlockEndStyle',
            'borderBlockEndWidth'
        ],
        borderBlockStart: [
            'borderBlockStartColor',
            'borderBlockStartStyle',
            'borderBlockStartWidth'
        ],
        borderBottom: [
            'borderBottomColor',
            'borderBottomStyle',
            'borderBottomWidth'
        ],
        borderColor: [
            'borderBottomColor',
            'borderLeftColor',
            'borderRightColor',
            'borderTopColor'
        ],
        borderImage: [
            'borderImageOutset',
            'borderImageRepeat',
            'borderImageSlice',
            'borderImageSource',
            'borderImageWidth'
        ],
        borderInlineEnd: [
            'borderInlineEndColor',
            'borderInlineEndStyle',
            'borderInlineEndWidth'
        ],
        borderInlineStart: [
            'borderInlineStartColor',
            'borderInlineStartStyle',
            'borderInlineStartWidth'
        ],
        borderLeft: [
            'borderLeftColor',
            'borderLeftStyle',
            'borderLeftWidth'
        ],
        borderRadius: [
            'borderBottomLeftRadius',
            'borderBottomRightRadius',
            'borderTopLeftRadius',
            'borderTopRightRadius'
        ],
        borderRight: [
            'borderRightColor',
            'borderRightStyle',
            'borderRightWidth'
        ],
        borderStyle: [
            'borderBottomStyle',
            'borderLeftStyle',
            'borderRightStyle',
            'borderTopStyle'
        ],
        borderTop: [
            'borderTopColor',
            'borderTopStyle',
            'borderTopWidth'
        ],
        borderWidth: [
            'borderBottomWidth',
            'borderLeftWidth',
            'borderRightWidth',
            'borderTopWidth'
        ],
        columnRule: [
            'columnRuleColor',
            'columnRuleStyle',
            'columnRuleWidth'
        ],
        columns: [
            'columnCount',
            'columnWidth'
        ],
        flex: [
            'flexBasis',
            'flexGrow',
            'flexShrink'
        ],
        flexFlow: [
            'flexDirection',
            'flexWrap'
        ],
        font: [
            'fontFamily',
            'fontFeatureSettings',
            'fontKerning',
            'fontLanguageOverride',
            'fontSize',
            'fontSizeAdjust',
            'fontStretch',
            'fontStyle',
            'fontVariant',
            'fontVariantAlternates',
            'fontVariantCaps',
            'fontVariantEastAsian',
            'fontVariantLigatures',
            'fontVariantNumeric',
            'fontVariantPosition',
            'fontWeight',
            'lineHeight'
        ],
        fontVariant: [
            'fontVariantAlternates',
            'fontVariantCaps',
            'fontVariantEastAsian',
            'fontVariantLigatures',
            'fontVariantNumeric',
            'fontVariantPosition'
        ],
        gap: [
            'columnGap',
            'rowGap'
        ],
        grid: [
            'gridAutoColumns',
            'gridAutoFlow',
            'gridAutoRows',
            'gridTemplateAreas',
            'gridTemplateColumns',
            'gridTemplateRows'
        ],
        gridArea: [
            'gridColumnEnd',
            'gridColumnStart',
            'gridRowEnd',
            'gridRowStart'
        ],
        gridColumn: [
            'gridColumnEnd',
            'gridColumnStart'
        ],
        gridColumnGap: [
            'columnGap'
        ],
        gridGap: [
            'columnGap',
            'rowGap'
        ],
        gridRow: [
            'gridRowEnd',
            'gridRowStart'
        ],
        gridRowGap: [
            'rowGap'
        ],
        gridTemplate: [
            'gridTemplateAreas',
            'gridTemplateColumns',
            'gridTemplateRows'
        ],
        listStyle: [
            'listStyleImage',
            'listStylePosition',
            'listStyleType'
        ],
        margin: [
            'marginBottom',
            'marginLeft',
            'marginRight',
            'marginTop'
        ],
        marker: [
            'markerEnd',
            'markerMid',
            'markerStart'
        ],
        mask: [
            'maskClip',
            'maskComposite',
            'maskImage',
            'maskMode',
            'maskOrigin',
            'maskPositionX',
            'maskPositionY',
            'maskRepeat',
            'maskSize'
        ],
        maskPosition: [
            'maskPositionX',
            'maskPositionY'
        ],
        outline: [
            'outlineColor',
            'outlineStyle',
            'outlineWidth'
        ],
        overflow: [
            'overflowX',
            'overflowY'
        ],
        padding: [
            'paddingBottom',
            'paddingLeft',
            'paddingRight',
            'paddingTop'
        ],
        placeContent: [
            'alignContent',
            'justifyContent'
        ],
        placeItems: [
            'alignItems',
            'justifyItems'
        ],
        placeSelf: [
            'alignSelf',
            'justifySelf'
        ],
        textDecoration: [
            'textDecorationColor',
            'textDecorationLine',
            'textDecorationStyle'
        ],
        textEmphasis: [
            'textEmphasisColor',
            'textEmphasisStyle'
        ],
        transition: [
            'transitionDelay',
            'transitionDuration',
            'transitionProperty',
            'transitionTimingFunction'
        ],
        wordWrap: [
            'overflowWrap'
        ]
    };
    /**
 * CSS properties which accept numbers but are not in units of "px".
 */ var isUnitlessNumber = {
        animationIterationCount: true,
        borderImageOutset: true,
        borderImageSlice: true,
        borderImageWidth: true,
        boxFlex: true,
        boxFlexGroup: true,
        boxOrdinalGroup: true,
        columnCount: true,
        columns: true,
        flex: true,
        flexGrow: true,
        flexPositive: true,
        flexShrink: true,
        flexNegative: true,
        flexOrder: true,
        gridArea: true,
        gridRow: true,
        gridRowEnd: true,
        gridRowSpan: true,
        gridRowStart: true,
        gridColumn: true,
        gridColumnEnd: true,
        gridColumnSpan: true,
        gridColumnStart: true,
        fontWeight: true,
        lineClamp: true,
        lineHeight: true,
        opacity: true,
        order: true,
        orphans: true,
        tabSize: true,
        widows: true,
        zIndex: true,
        zoom: true,
        // SVG-related properties
        fillOpacity: true,
        floodOpacity: true,
        stopOpacity: true,
        strokeDasharray: true,
        strokeDashoffset: true,
        strokeMiterlimit: true,
        strokeOpacity: true,
        strokeWidth: true
    };
    /**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */ function prefixKey(prefix, key) {
        return prefix + key.charAt(0).toUpperCase() + key.substring(1);
    }
    /**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */ var prefixes = [
        'Webkit',
        'ms',
        'Moz',
        'O'
    ]; // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
    // infinite loop, because it iterates over the newly added props too.
    Object.keys(isUnitlessNumber).forEach(function(prop) {
        prefixes.forEach(function(prefix) {
            isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
        });
    });
    /**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */ function dangerousStyleValue(name, value, isCustomProperty) {
        // Note that we've removed escapeTextForBrowser() calls here since the
        // whole string will be escaped when the attribute is injected into
        // the markup. If you provide unsafe user data here they can inject
        // arbitrary CSS which may be problematic (I couldn't repro this):
        // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
        // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
        // This is not an XSS hole but instead a potential CSS injection issue
        // which has lead to a greater discussion about how we're going to
        // trust URLs moving forward. See #2115901
        var isEmpty = value == null || typeof value === 'boolean' || value === '';
        if (isEmpty) return '';
        if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
        return ('' + value).trim();
    }
    var uppercasePattern = /([A-Z])/g;
    var msPattern = /^ms-/;
    /**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 */ function hyphenateStyleName(name) {
        return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
    }
    var warnValidStyle = function() {
    };
    // 'msTransform' is correct, but the other prefixes should be capitalized
    var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
    var msPattern$1 = /^-ms-/;
    var hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon
    var badStyleValueWithSemicolonPattern = /;\s*$/;
    var warnedStyleNames = {
    };
    var warnedStyleValues = {
    };
    var warnedForNaNValue = false;
    var warnedForInfinityValue = false;
    var camelize = function(string) {
        return string.replace(hyphenPattern, function(_, character) {
            return character.toUpperCase();
        });
    };
    var warnHyphenatedStyleName = function(name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) return;
        warnedStyleNames[name] = true;
        error('Unsupported style property %s. Did you mean %s?', name, // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
        // is converted to lowercase `ms`.
        camelize(name.replace(msPattern$1, 'ms-')));
    };
    var warnBadVendoredStyleName = function(name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) return;
        warnedStyleNames[name] = true;
        error('Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));
    };
    var warnStyleValueWithSemicolon = function(name, value) {
        if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) return;
        warnedStyleValues[value] = true;
        error("Style property values shouldn't contain a semicolon. Try \"%s: %s\" instead.", name, value.replace(badStyleValueWithSemicolonPattern, ''));
    };
    var warnStyleValueIsNaN = function(name, value) {
        if (warnedForNaNValue) return;
        warnedForNaNValue = true;
        error('`NaN` is an invalid value for the `%s` css style property.', name);
    };
    var warnStyleValueIsInfinity = function(name, value) {
        if (warnedForInfinityValue) return;
        warnedForInfinityValue = true;
        error('`Infinity` is an invalid value for the `%s` css style property.', name);
    };
    warnValidStyle = function(name, value) {
        if (name.indexOf('-') > -1) warnHyphenatedStyleName(name);
        else if (badVendoredStyleNamePattern.test(name)) warnBadVendoredStyleName(name);
        else if (badStyleValueWithSemicolonPattern.test(value)) warnStyleValueWithSemicolon(name, value);
        if (typeof value === 'number') {
            if (isNaN(value)) warnStyleValueIsNaN(name, value);
            else if (!isFinite(value)) warnStyleValueIsInfinity(name, value);
        }
    };
    var warnValidStyle$1 = warnValidStyle;
    /**
 * Operations for dealing with CSS properties.
 */ /**
 * This creates a string that is expected to be equivalent to the style
 * attribute generated by server-side rendering. It by-passes warnings and
 * security checks so it's not safe to use this value for anything other than
 * comparison. It is only used in DEV for SSR validation.
 */ function createDangerousStringForStyles(styles) {
        var serialized = '';
        var delimiter = '';
        for(var styleName in styles){
            if (!styles.hasOwnProperty(styleName)) continue;
            var styleValue = styles[styleName];
            if (styleValue != null) {
                var isCustomProperty = styleName.indexOf('--') === 0;
                serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ':';
                serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                delimiter = ';';
            }
        }
        return serialized || null;
    }
    /**
 * Sets the value for multiple styles on a node.  If a value is specified as
 * '' (empty string), the corresponding style property will be unset.
 *
 * @param {DOMElement} node
 * @param {object} styles
 */ function setValueForStyles(node, styles) {
        var style1 = node.style;
        for(var styleName in styles){
            if (!styles.hasOwnProperty(styleName)) continue;
            var isCustomProperty = styleName.indexOf('--') === 0;
            if (!isCustomProperty) warnValidStyle$1(styleName, styles[styleName]);
            var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
            if (styleName === 'float') styleName = 'cssFloat';
            if (isCustomProperty) style1.setProperty(styleName, styleValue);
            else style1[styleName] = styleValue;
        }
    }
    function isValueEmpty(value) {
        return value == null || typeof value === 'boolean' || value === '';
    }
    /**
 * Given {color: 'red', overflow: 'hidden'} returns {
 *   color: 'color',
 *   overflowX: 'overflow',
 *   overflowY: 'overflow',
 * }. This can be read as "the overflowY property was set by the overflow
 * shorthand". That is, the values are the property that each was derived from.
 */ function expandShorthandMap(styles) {
        var expanded = {
        };
        for(var key in styles){
            var longhands = shorthandToLonghand[key] || [
                key
            ];
            for(var i = 0; i < longhands.length; i++)expanded[longhands[i]] = key;
        }
        return expanded;
    }
    /**
 * When mixing shorthand and longhand property names, we warn during updates if
 * we expect an incorrect result to occur. In particular, we warn for:
 *
 * Updating a shorthand property (longhand gets overwritten):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
 *   becomes .style.font = 'baz'
 * Removing a shorthand property (longhand gets lost too):
 *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
 *   becomes .style.font = ''
 * Removing a longhand property (should revert to shorthand; doesn't):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
 *   becomes .style.fontVariant = ''
 */ function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
        if (!nextStyles) return;
        var expandedUpdates = expandShorthandMap(styleUpdates);
        var expandedStyles = expandShorthandMap(nextStyles);
        var warnedAbout = {
        };
        for(var key in expandedUpdates){
            var originalKey = expandedUpdates[key];
            var correctOriginalKey = expandedStyles[key];
            if (correctOriginalKey && originalKey !== correctOriginalKey) {
                var warningKey = originalKey + ',' + correctOriginalKey;
                if (warnedAbout[warningKey]) continue;
                warnedAbout[warningKey] = true;
                error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? 'Removing' : 'Updating', originalKey, correctOriginalKey);
            }
        }
    }
    // For HTML, certain tags should omit their close tag. We keep a whitelist for
    // those special-case tags.
    var omittedCloseTags = {
        area: true,
        base: true,
        br: true,
        col: true,
        embed: true,
        hr: true,
        img: true,
        input: true,
        keygen: true,
        link: true,
        meta: true,
        param: true,
        source: true,
        track: true,
        wbr: true
    };
    // `omittedCloseTags` except that `menuitem` should still have its closing tag.
    var voidElementTags = _assign({
        menuitem: true
    }, omittedCloseTags);
    var HTML = '__html';
    var ReactDebugCurrentFrame$3 = null;
    ReactDebugCurrentFrame$3 = ReactSharedInternals.ReactDebugCurrentFrame;
    function assertValidProps(tag, props) {
        if (!props) return;
         // Note the use of `==` which checks for null or undefined.
        if (voidElementTags[tag]) {
            if (!(props.children == null && props.dangerouslySetInnerHTML == null)) throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`." + ReactDebugCurrentFrame$3.getStackAddendum());
        }
        if (props.dangerouslySetInnerHTML != null) {
            if (!(props.children == null)) throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            if (!(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML)) throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.");
        }
        if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
        if (!(props.style == null || typeof props.style === 'object')) throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX." + ReactDebugCurrentFrame$3.getStackAddendum());
    }
    function isCustomComponent(tagName, props) {
        if (tagName.indexOf('-') === -1) return typeof props.is === 'string';
        switch(tagName){
            // These are reserved SVG and MathML elements.
            // We don't mind this whitelist too much because we expect it to never grow.
            // The alternative is to track the namespace in a few places which is convoluted.
            // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
            case 'annotation-xml':
            case 'color-profile':
            case 'font-face':
            case 'font-face-src':
            case 'font-face-uri':
            case 'font-face-format':
            case 'font-face-name':
            case 'missing-glyph':
                return false;
            default:
                return true;
        }
    }
    // When adding attributes to the HTML or SVG whitelist, be sure to
    // also add them to this module to ensure casing and incorrect name
    // warnings.
    var possibleStandardNames = {
        // HTML
        accept: 'accept',
        acceptcharset: 'acceptCharset',
        'accept-charset': 'acceptCharset',
        accesskey: 'accessKey',
        action: 'action',
        allowfullscreen: 'allowFullScreen',
        alt: 'alt',
        as: 'as',
        async: 'async',
        autocapitalize: 'autoCapitalize',
        autocomplete: 'autoComplete',
        autocorrect: 'autoCorrect',
        autofocus: 'autoFocus',
        autoplay: 'autoPlay',
        autosave: 'autoSave',
        capture: 'capture',
        cellpadding: 'cellPadding',
        cellspacing: 'cellSpacing',
        challenge: 'challenge',
        charset: 'charSet',
        checked: 'checked',
        children: 'children',
        cite: 'cite',
        class: 'className',
        classid: 'classID',
        classname: 'className',
        cols: 'cols',
        colspan: 'colSpan',
        content: 'content',
        contenteditable: 'contentEditable',
        contextmenu: 'contextMenu',
        controls: 'controls',
        controlslist: 'controlsList',
        coords: 'coords',
        crossorigin: 'crossOrigin',
        dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
        data: 'data',
        datetime: 'dateTime',
        default: 'default',
        defaultchecked: 'defaultChecked',
        defaultvalue: 'defaultValue',
        defer: 'defer',
        dir: 'dir',
        disabled: 'disabled',
        disablepictureinpicture: 'disablePictureInPicture',
        download: 'download',
        draggable: 'draggable',
        enctype: 'encType',
        for: 'htmlFor',
        form: 'form',
        formmethod: 'formMethod',
        formaction: 'formAction',
        formenctype: 'formEncType',
        formnovalidate: 'formNoValidate',
        formtarget: 'formTarget',
        frameborder: 'frameBorder',
        headers: 'headers',
        height: 'height',
        hidden: 'hidden',
        high: 'high',
        href: 'href',
        hreflang: 'hrefLang',
        htmlfor: 'htmlFor',
        httpequiv: 'httpEquiv',
        'http-equiv': 'httpEquiv',
        icon: 'icon',
        id: 'id',
        innerhtml: 'innerHTML',
        inputmode: 'inputMode',
        integrity: 'integrity',
        is: 'is',
        itemid: 'itemID',
        itemprop: 'itemProp',
        itemref: 'itemRef',
        itemscope: 'itemScope',
        itemtype: 'itemType',
        keyparams: 'keyParams',
        keytype: 'keyType',
        kind: 'kind',
        label: 'label',
        lang: 'lang',
        list: 'list',
        loop: 'loop',
        low: 'low',
        manifest: 'manifest',
        marginwidth: 'marginWidth',
        marginheight: 'marginHeight',
        max: 'max',
        maxlength: 'maxLength',
        media: 'media',
        mediagroup: 'mediaGroup',
        method: 'method',
        min: 'min',
        minlength: 'minLength',
        multiple: 'multiple',
        muted: 'muted',
        name: 'name',
        nomodule: 'noModule',
        nonce: 'nonce',
        novalidate: 'noValidate',
        open: 'open',
        optimum: 'optimum',
        pattern: 'pattern',
        placeholder: 'placeholder',
        playsinline: 'playsInline',
        poster: 'poster',
        preload: 'preload',
        profile: 'profile',
        radiogroup: 'radioGroup',
        readonly: 'readOnly',
        referrerpolicy: 'referrerPolicy',
        rel: 'rel',
        required: 'required',
        reversed: 'reversed',
        role: 'role',
        rows: 'rows',
        rowspan: 'rowSpan',
        sandbox: 'sandbox',
        scope: 'scope',
        scoped: 'scoped',
        scrolling: 'scrolling',
        seamless: 'seamless',
        selected: 'selected',
        shape: 'shape',
        size: 'size',
        sizes: 'sizes',
        span: 'span',
        spellcheck: 'spellCheck',
        src: 'src',
        srcdoc: 'srcDoc',
        srclang: 'srcLang',
        srcset: 'srcSet',
        start: 'start',
        step: 'step',
        style: 'style',
        summary: 'summary',
        tabindex: 'tabIndex',
        target: 'target',
        title: 'title',
        type: 'type',
        usemap: 'useMap',
        value: 'value',
        width: 'width',
        wmode: 'wmode',
        wrap: 'wrap',
        // SVG
        about: 'about',
        accentheight: 'accentHeight',
        'accent-height': 'accentHeight',
        accumulate: 'accumulate',
        additive: 'additive',
        alignmentbaseline: 'alignmentBaseline',
        'alignment-baseline': 'alignmentBaseline',
        allowreorder: 'allowReorder',
        alphabetic: 'alphabetic',
        amplitude: 'amplitude',
        arabicform: 'arabicForm',
        'arabic-form': 'arabicForm',
        ascent: 'ascent',
        attributename: 'attributeName',
        attributetype: 'attributeType',
        autoreverse: 'autoReverse',
        azimuth: 'azimuth',
        basefrequency: 'baseFrequency',
        baselineshift: 'baselineShift',
        'baseline-shift': 'baselineShift',
        baseprofile: 'baseProfile',
        bbox: 'bbox',
        begin: 'begin',
        bias: 'bias',
        by: 'by',
        calcmode: 'calcMode',
        capheight: 'capHeight',
        'cap-height': 'capHeight',
        clip: 'clip',
        clippath: 'clipPath',
        'clip-path': 'clipPath',
        clippathunits: 'clipPathUnits',
        cliprule: 'clipRule',
        'clip-rule': 'clipRule',
        color: 'color',
        colorinterpolation: 'colorInterpolation',
        'color-interpolation': 'colorInterpolation',
        colorinterpolationfilters: 'colorInterpolationFilters',
        'color-interpolation-filters': 'colorInterpolationFilters',
        colorprofile: 'colorProfile',
        'color-profile': 'colorProfile',
        colorrendering: 'colorRendering',
        'color-rendering': 'colorRendering',
        contentscripttype: 'contentScriptType',
        contentstyletype: 'contentStyleType',
        cursor: 'cursor',
        cx: 'cx',
        cy: 'cy',
        d: 'd',
        datatype: 'datatype',
        decelerate: 'decelerate',
        descent: 'descent',
        diffuseconstant: 'diffuseConstant',
        direction: 'direction',
        display: 'display',
        divisor: 'divisor',
        dominantbaseline: 'dominantBaseline',
        'dominant-baseline': 'dominantBaseline',
        dur: 'dur',
        dx: 'dx',
        dy: 'dy',
        edgemode: 'edgeMode',
        elevation: 'elevation',
        enablebackground: 'enableBackground',
        'enable-background': 'enableBackground',
        end: 'end',
        exponent: 'exponent',
        externalresourcesrequired: 'externalResourcesRequired',
        fill: 'fill',
        fillopacity: 'fillOpacity',
        'fill-opacity': 'fillOpacity',
        fillrule: 'fillRule',
        'fill-rule': 'fillRule',
        filter: 'filter',
        filterres: 'filterRes',
        filterunits: 'filterUnits',
        floodopacity: 'floodOpacity',
        'flood-opacity': 'floodOpacity',
        floodcolor: 'floodColor',
        'flood-color': 'floodColor',
        focusable: 'focusable',
        fontfamily: 'fontFamily',
        'font-family': 'fontFamily',
        fontsize: 'fontSize',
        'font-size': 'fontSize',
        fontsizeadjust: 'fontSizeAdjust',
        'font-size-adjust': 'fontSizeAdjust',
        fontstretch: 'fontStretch',
        'font-stretch': 'fontStretch',
        fontstyle: 'fontStyle',
        'font-style': 'fontStyle',
        fontvariant: 'fontVariant',
        'font-variant': 'fontVariant',
        fontweight: 'fontWeight',
        'font-weight': 'fontWeight',
        format: 'format',
        from: 'from',
        fx: 'fx',
        fy: 'fy',
        g1: 'g1',
        g2: 'g2',
        glyphname: 'glyphName',
        'glyph-name': 'glyphName',
        glyphorientationhorizontal: 'glyphOrientationHorizontal',
        'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
        glyphorientationvertical: 'glyphOrientationVertical',
        'glyph-orientation-vertical': 'glyphOrientationVertical',
        glyphref: 'glyphRef',
        gradienttransform: 'gradientTransform',
        gradientunits: 'gradientUnits',
        hanging: 'hanging',
        horizadvx: 'horizAdvX',
        'horiz-adv-x': 'horizAdvX',
        horizoriginx: 'horizOriginX',
        'horiz-origin-x': 'horizOriginX',
        ideographic: 'ideographic',
        imagerendering: 'imageRendering',
        'image-rendering': 'imageRendering',
        in2: 'in2',
        in: 'in',
        inlist: 'inlist',
        intercept: 'intercept',
        k1: 'k1',
        k2: 'k2',
        k3: 'k3',
        k4: 'k4',
        k: 'k',
        kernelmatrix: 'kernelMatrix',
        kernelunitlength: 'kernelUnitLength',
        kerning: 'kerning',
        keypoints: 'keyPoints',
        keysplines: 'keySplines',
        keytimes: 'keyTimes',
        lengthadjust: 'lengthAdjust',
        letterspacing: 'letterSpacing',
        'letter-spacing': 'letterSpacing',
        lightingcolor: 'lightingColor',
        'lighting-color': 'lightingColor',
        limitingconeangle: 'limitingConeAngle',
        local: 'local',
        markerend: 'markerEnd',
        'marker-end': 'markerEnd',
        markerheight: 'markerHeight',
        markermid: 'markerMid',
        'marker-mid': 'markerMid',
        markerstart: 'markerStart',
        'marker-start': 'markerStart',
        markerunits: 'markerUnits',
        markerwidth: 'markerWidth',
        mask: 'mask',
        maskcontentunits: 'maskContentUnits',
        maskunits: 'maskUnits',
        mathematical: 'mathematical',
        mode: 'mode',
        numoctaves: 'numOctaves',
        offset: 'offset',
        opacity: 'opacity',
        operator: 'operator',
        order: 'order',
        orient: 'orient',
        orientation: 'orientation',
        origin: 'origin',
        overflow: 'overflow',
        overlineposition: 'overlinePosition',
        'overline-position': 'overlinePosition',
        overlinethickness: 'overlineThickness',
        'overline-thickness': 'overlineThickness',
        paintorder: 'paintOrder',
        'paint-order': 'paintOrder',
        panose1: 'panose1',
        'panose-1': 'panose1',
        pathlength: 'pathLength',
        patterncontentunits: 'patternContentUnits',
        patterntransform: 'patternTransform',
        patternunits: 'patternUnits',
        pointerevents: 'pointerEvents',
        'pointer-events': 'pointerEvents',
        points: 'points',
        pointsatx: 'pointsAtX',
        pointsaty: 'pointsAtY',
        pointsatz: 'pointsAtZ',
        prefix: 'prefix',
        preservealpha: 'preserveAlpha',
        preserveaspectratio: 'preserveAspectRatio',
        primitiveunits: 'primitiveUnits',
        property: 'property',
        r: 'r',
        radius: 'radius',
        refx: 'refX',
        refy: 'refY',
        renderingintent: 'renderingIntent',
        'rendering-intent': 'renderingIntent',
        repeatcount: 'repeatCount',
        repeatdur: 'repeatDur',
        requiredextensions: 'requiredExtensions',
        requiredfeatures: 'requiredFeatures',
        resource: 'resource',
        restart: 'restart',
        result: 'result',
        results: 'results',
        rotate: 'rotate',
        rx: 'rx',
        ry: 'ry',
        scale: 'scale',
        security: 'security',
        seed: 'seed',
        shaperendering: 'shapeRendering',
        'shape-rendering': 'shapeRendering',
        slope: 'slope',
        spacing: 'spacing',
        specularconstant: 'specularConstant',
        specularexponent: 'specularExponent',
        speed: 'speed',
        spreadmethod: 'spreadMethod',
        startoffset: 'startOffset',
        stddeviation: 'stdDeviation',
        stemh: 'stemh',
        stemv: 'stemv',
        stitchtiles: 'stitchTiles',
        stopcolor: 'stopColor',
        'stop-color': 'stopColor',
        stopopacity: 'stopOpacity',
        'stop-opacity': 'stopOpacity',
        strikethroughposition: 'strikethroughPosition',
        'strikethrough-position': 'strikethroughPosition',
        strikethroughthickness: 'strikethroughThickness',
        'strikethrough-thickness': 'strikethroughThickness',
        string: 'string',
        stroke: 'stroke',
        strokedasharray: 'strokeDasharray',
        'stroke-dasharray': 'strokeDasharray',
        strokedashoffset: 'strokeDashoffset',
        'stroke-dashoffset': 'strokeDashoffset',
        strokelinecap: 'strokeLinecap',
        'stroke-linecap': 'strokeLinecap',
        strokelinejoin: 'strokeLinejoin',
        'stroke-linejoin': 'strokeLinejoin',
        strokemiterlimit: 'strokeMiterlimit',
        'stroke-miterlimit': 'strokeMiterlimit',
        strokewidth: 'strokeWidth',
        'stroke-width': 'strokeWidth',
        strokeopacity: 'strokeOpacity',
        'stroke-opacity': 'strokeOpacity',
        suppresscontenteditablewarning: 'suppressContentEditableWarning',
        suppresshydrationwarning: 'suppressHydrationWarning',
        surfacescale: 'surfaceScale',
        systemlanguage: 'systemLanguage',
        tablevalues: 'tableValues',
        targetx: 'targetX',
        targety: 'targetY',
        textanchor: 'textAnchor',
        'text-anchor': 'textAnchor',
        textdecoration: 'textDecoration',
        'text-decoration': 'textDecoration',
        textlength: 'textLength',
        textrendering: 'textRendering',
        'text-rendering': 'textRendering',
        to: 'to',
        transform: 'transform',
        typeof: 'typeof',
        u1: 'u1',
        u2: 'u2',
        underlineposition: 'underlinePosition',
        'underline-position': 'underlinePosition',
        underlinethickness: 'underlineThickness',
        'underline-thickness': 'underlineThickness',
        unicode: 'unicode',
        unicodebidi: 'unicodeBidi',
        'unicode-bidi': 'unicodeBidi',
        unicoderange: 'unicodeRange',
        'unicode-range': 'unicodeRange',
        unitsperem: 'unitsPerEm',
        'units-per-em': 'unitsPerEm',
        unselectable: 'unselectable',
        valphabetic: 'vAlphabetic',
        'v-alphabetic': 'vAlphabetic',
        values: 'values',
        vectoreffect: 'vectorEffect',
        'vector-effect': 'vectorEffect',
        version: 'version',
        vertadvy: 'vertAdvY',
        'vert-adv-y': 'vertAdvY',
        vertoriginx: 'vertOriginX',
        'vert-origin-x': 'vertOriginX',
        vertoriginy: 'vertOriginY',
        'vert-origin-y': 'vertOriginY',
        vhanging: 'vHanging',
        'v-hanging': 'vHanging',
        videographic: 'vIdeographic',
        'v-ideographic': 'vIdeographic',
        viewbox: 'viewBox',
        viewtarget: 'viewTarget',
        visibility: 'visibility',
        vmathematical: 'vMathematical',
        'v-mathematical': 'vMathematical',
        vocab: 'vocab',
        widths: 'widths',
        wordspacing: 'wordSpacing',
        'word-spacing': 'wordSpacing',
        writingmode: 'writingMode',
        'writing-mode': 'writingMode',
        x1: 'x1',
        x2: 'x2',
        x: 'x',
        xchannelselector: 'xChannelSelector',
        xheight: 'xHeight',
        'x-height': 'xHeight',
        xlinkactuate: 'xlinkActuate',
        'xlink:actuate': 'xlinkActuate',
        xlinkarcrole: 'xlinkArcrole',
        'xlink:arcrole': 'xlinkArcrole',
        xlinkhref: 'xlinkHref',
        'xlink:href': 'xlinkHref',
        xlinkrole: 'xlinkRole',
        'xlink:role': 'xlinkRole',
        xlinkshow: 'xlinkShow',
        'xlink:show': 'xlinkShow',
        xlinktitle: 'xlinkTitle',
        'xlink:title': 'xlinkTitle',
        xlinktype: 'xlinkType',
        'xlink:type': 'xlinkType',
        xmlbase: 'xmlBase',
        'xml:base': 'xmlBase',
        xmllang: 'xmlLang',
        'xml:lang': 'xmlLang',
        xmlns: 'xmlns',
        'xml:space': 'xmlSpace',
        xmlnsxlink: 'xmlnsXlink',
        'xmlns:xlink': 'xmlnsXlink',
        xmlspace: 'xmlSpace',
        y1: 'y1',
        y2: 'y2',
        y: 'y',
        ychannelselector: 'yChannelSelector',
        z: 'z',
        zoomandpan: 'zoomAndPan'
    };
    var ariaProperties = {
        'aria-current': 0,
        // state
        'aria-details': 0,
        'aria-disabled': 0,
        // state
        'aria-hidden': 0,
        // state
        'aria-invalid': 0,
        // state
        'aria-keyshortcuts': 0,
        'aria-label': 0,
        'aria-roledescription': 0,
        // Widget Attributes
        'aria-autocomplete': 0,
        'aria-checked': 0,
        'aria-expanded': 0,
        'aria-haspopup': 0,
        'aria-level': 0,
        'aria-modal': 0,
        'aria-multiline': 0,
        'aria-multiselectable': 0,
        'aria-orientation': 0,
        'aria-placeholder': 0,
        'aria-pressed': 0,
        'aria-readonly': 0,
        'aria-required': 0,
        'aria-selected': 0,
        'aria-sort': 0,
        'aria-valuemax': 0,
        'aria-valuemin': 0,
        'aria-valuenow': 0,
        'aria-valuetext': 0,
        // Live Region Attributes
        'aria-atomic': 0,
        'aria-busy': 0,
        'aria-live': 0,
        'aria-relevant': 0,
        // Drag-and-Drop Attributes
        'aria-dropeffect': 0,
        'aria-grabbed': 0,
        // Relationship Attributes
        'aria-activedescendant': 0,
        'aria-colcount': 0,
        'aria-colindex': 0,
        'aria-colspan': 0,
        'aria-controls': 0,
        'aria-describedby': 0,
        'aria-errormessage': 0,
        'aria-flowto': 0,
        'aria-labelledby': 0,
        'aria-owns': 0,
        'aria-posinset': 0,
        'aria-rowcount': 0,
        'aria-rowindex': 0,
        'aria-rowspan': 0,
        'aria-setsize': 0
    };
    var warnedProperties = {
    };
    var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
    var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
    var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
    function validateProperty(tagName, name) {
        if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) return true;
        if (rARIACamel.test(name)) {
            var ariaName = 'aria-' + name.slice(4).toLowerCase();
            var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null; // If this is an aria-* attribute, but is not listed in the known DOM
            // DOM properties, then it is an invalid aria-* attribute.
            if (correctName == null) {
                error('Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);
                warnedProperties[name] = true;
                return true;
            } // aria-* attributes should be lowercase; suggest the lowercase version.
            if (name !== correctName) {
                error('Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);
                warnedProperties[name] = true;
                return true;
            }
        }
        if (rARIA.test(name)) {
            var lowerCasedName = name.toLowerCase();
            var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null; // If this is an aria-* attribute, but is not listed in the known DOM
            // DOM properties, then it is an invalid aria-* attribute.
            if (standardName == null) {
                warnedProperties[name] = true;
                return false;
            } // aria-* attributes should be lowercase; suggest the lowercase version.
            if (name !== standardName) {
                error('Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);
                warnedProperties[name] = true;
                return true;
            }
        }
        return true;
    }
    function warnInvalidARIAProps(type, props) {
        var invalidProps = [];
        for(var key in props){
            var isValid = validateProperty(type, key);
            if (!isValid) invalidProps.push(key);
        }
        var unknownPropString = invalidProps.map(function(prop) {
            return '`' + prop + '`';
        }).join(', ');
        if (invalidProps.length === 1) error("Invalid aria prop %s on <%s> tag. For details, see https://fb.me/invalid-aria-prop", unknownPropString, type);
        else if (invalidProps.length > 1) error("Invalid aria props %s on <%s> tag. For details, see https://fb.me/invalid-aria-prop", unknownPropString, type);
    }
    function validateProperties(type, props) {
        if (isCustomComponent(type, props)) return;
        warnInvalidARIAProps(type, props);
    }
    var didWarnValueNull = false;
    function validateProperties$1(type, props) {
        if (type !== 'input' && type !== 'textarea' && type !== 'select') return;
        if (props != null && props.value === null && !didWarnValueNull) {
            didWarnValueNull = true;
            if (type === 'select' && props.multiple) error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
            else error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
        }
    }
    var validateProperty$1 = function() {
    };
    var warnedProperties$1 = {
    };
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    var EVENT_NAME_REGEX = /^on./;
    var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
    var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
    var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
    validateProperty$1 = function(tagName, name, value, canUseEventSystem) {
        if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) return true;
        var lowerCasedName = name.toLowerCase();
        if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
            error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
            warnedProperties$1[name] = true;
            return true;
        } // We can't rely on the event system being injected on the server.
        if (canUseEventSystem) {
            if (registrationNameModules.hasOwnProperty(name)) return true;
            var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
            if (registrationName != null) {
                error('Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);
                warnedProperties$1[name] = true;
                return true;
            }
            if (EVENT_NAME_REGEX.test(name)) {
                error('Unknown event handler property `%s`. It will be ignored.', name);
                warnedProperties$1[name] = true;
                return true;
            }
        } else if (EVENT_NAME_REGEX.test(name)) {
            // If no event plugins have been injected, we are in a server environment.
            // So we can't tell if the event name is correct for sure, but we can filter
            // out known bad ones like `onclick`. We can't suggest a specific replacement though.
            if (INVALID_EVENT_NAME_REGEX.test(name)) error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
            warnedProperties$1[name] = true;
            return true;
        } // Let the ARIA attribute hook validate ARIA attributes
        if (rARIA$1.test(name) || rARIACamel$1.test(name)) return true;
        if (lowerCasedName === 'innerhtml') {
            error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
            warnedProperties$1[name] = true;
            return true;
        }
        if (lowerCasedName === 'aria') {
            error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
            warnedProperties$1[name] = true;
            return true;
        }
        if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
            error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
            warnedProperties$1[name] = true;
            return true;
        }
        if (typeof value === 'number' && isNaN(value)) {
            error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
            warnedProperties$1[name] = true;
            return true;
        }
        var propertyInfo = getPropertyInfo(name);
        var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED; // Known attributes should match the casing specified in the property config.
        if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            var standardName = possibleStandardNames[lowerCasedName];
            if (standardName !== name) {
                error('Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);
                warnedProperties$1[name] = true;
                return true;
            }
        } else if (!isReserved && name !== lowerCasedName) {
            // Unknown attributes should have lowercase casing since that's how they
            // will be cased anyway with server rendering.
            error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
            warnedProperties$1[name] = true;
            return true;
        }
        if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            if (value) error("Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s=\"%s\" or %s={value.toString()}.", value, name, name, value, name);
            else error("Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s=\"%s\" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", value, name, name, value, name, name, name);
            warnedProperties$1[name] = true;
            return true;
        } // Now that we've validated casing, do not validate
        // data types for reserved props
        if (isReserved) return true;
         // Warn when a known attribute is a bad type
        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            warnedProperties$1[name] = true;
            return false;
        } // Warn when passing the strings 'false' or 'true' into a boolean prop
        if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
            error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
            warnedProperties$1[name] = true;
            return true;
        }
        return true;
    };
    var warnUnknownProperties = function(type, props, canUseEventSystem) {
        var unknownProps = [];
        for(var key in props){
            var isValid = validateProperty$1(type, key, props[key], canUseEventSystem);
            if (!isValid) unknownProps.push(key);
        }
        var unknownPropString = unknownProps.map(function(prop) {
            return '`' + prop + '`';
        }).join(', ');
        if (unknownProps.length === 1) error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://fb.me/react-attribute-behavior", unknownPropString, type);
        else if (unknownProps.length > 1) error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://fb.me/react-attribute-behavior", unknownPropString, type);
    };
    function validateProperties$2(type, props, canUseEventSystem) {
        if (isCustomComponent(type, props)) return;
        warnUnknownProperties(type, props, canUseEventSystem);
    }
    var didWarnInvalidHydration = false;
    var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
    var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
    var SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
    var AUTOFOCUS = 'autoFocus';
    var CHILDREN = 'children';
    var STYLE = 'style';
    var HTML$1 = '__html';
    var HTML_NAMESPACE$1 = Namespaces.html;
    var warnedUnknownTags;
    var suppressHydrationWarning;
    var validatePropertiesInDevelopment;
    var warnForTextDifference;
    var warnForPropDifference;
    var warnForExtraAttributes;
    var warnForInvalidEventListener;
    var canDiffStyleForHydrationWarning;
    var normalizeMarkupForTextOrAttribute;
    var normalizeHTML;
    warnedUnknownTags = {
        // Chrome is the only major browser not shipping <time>. But as of July
        // 2017 it intends to ship it due to widespread usage. We intentionally
        // *don't* warn for <time> even if it's unrecognized by Chrome because
        // it soon will be, and many apps have been using it anyway.
        time: true,
        // There are working polyfills for <dialog>. Let people use it.
        dialog: true,
        // Electron ships a custom <webview> tag to display external web content in
        // an isolated frame and process.
        // This tag is not present in non Electron environments such as JSDom which
        // is often used for testing purposes.
        // @see https://electronjs.org/docs/api/webview-tag
        webview: true
    };
    validatePropertiesInDevelopment = function(type, props) {
        validateProperties(type, props);
        validateProperties$1(type, props);
        validateProperties$2(type, props, /* canUseEventSystem */ true);
    }; // IE 11 parses & normalizes the style attribute as opposed to other
    // browsers. It adds spaces and sorts the properties in some
    // non-alphabetical order. Handling that would require sorting CSS
    // properties in the client & server versions or applying
    // `expectedStyle` to a temporary DOM node to read its `style` attribute
    // normalized. Since it only affects IE, we're skipping style warnings
    // in that browser completely in favor of doing all that work.
    // See https://github.com/facebook/react/issues/11807
    canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode; // HTML parsing normalizes CR and CRLF to LF.
    // It also can turn \u0000 into \uFFFD inside attributes.
    // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
    // If we have a mismatch, it might be caused by that.
    // We will still patch up in this case but not fire the warning.
    var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
    var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
    normalizeMarkupForTextOrAttribute = function(markup) {
        var markupString = typeof markup === 'string' ? markup : '' + markup;
        return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
    };
    warnForTextDifference = function(serverText, clientText) {
        if (didWarnInvalidHydration) return;
        var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
        var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
        if (normalizedServerText === normalizedClientText) return;
        didWarnInvalidHydration = true;
        error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
    };
    warnForPropDifference = function(propName, serverValue, clientValue) {
        if (didWarnInvalidHydration) return;
        var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
        var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
        if (normalizedServerValue === normalizedClientValue) return;
        didWarnInvalidHydration = true;
        error('Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
    };
    warnForExtraAttributes = function(attributeNames) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        var names = [];
        attributeNames.forEach(function(name) {
            names.push(name);
        });
        error('Extra attributes from the server: %s', names);
    };
    warnForInvalidEventListener = function(registrationName, listener) {
        if (listener === false) error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
        else error('Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);
    }; // Parse the HTML and read it back to normalize the HTML string so that it
    // can be used for comparison.
    normalizeHTML = function(parent, html) {
        // We could have created a separate document here to avoid
        // re-initializing custom elements if they exist. But this breaks
        // how <noscript> is being handled. So we use the same document.
        // See the discussion in https://github.com/facebook/react/pull/11157.
        var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
        testElement.innerHTML = html;
        return testElement.innerHTML;
    };
    function ensureListeningTo(rootContainerElement, registrationName) {
        var isDocumentOrFragment = rootContainerElement.nodeType === DOCUMENT_NODE || rootContainerElement.nodeType === DOCUMENT_FRAGMENT_NODE;
        var doc = isDocumentOrFragment ? rootContainerElement : rootContainerElement.ownerDocument;
        legacyListenToEvent(registrationName, doc);
    }
    function getOwnerDocumentFromRootContainer(rootContainerElement) {
        return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
    }
    function noop() {
    }
    function trapClickOnNonInteractiveElement(node) {
        // Mobile Safari does not fire properly bubble click events on
        // non-interactive elements, which means delegated click listeners do not
        // fire. The workaround for this bug involves attaching an empty click
        // listener on the target node.
        // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
        // Just set it using the onclick property so that we don't have to manage any
        // bookkeeping for it. Not sure if we need to clear it when the listener is
        // removed.
        // TODO: Only do this for the relevant Safaris maybe?
        node.onclick = noop;
    }
    function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
        for(var propKey in nextProps){
            if (!nextProps.hasOwnProperty(propKey)) continue;
            var nextProp = nextProps[propKey];
            if (propKey === STYLE) {
                if (nextProp) // Freeze the next style object so that we can assume it won't be
                // mutated. We have already warned for this in the past.
                Object.freeze(nextProp);
                setValueForStyles(domElement, nextProp);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                if (nextHtml != null) setInnerHTML(domElement, nextHtml);
            } else if (propKey === CHILDREN) {
                if (typeof nextProp === 'string') {
                    // Avoid setting initial textContent when the text is empty. In IE11 setting
                    // textContent on a <textarea> will cause the placeholder to not
                    // show within the <textarea> until it has been focused and blurred again.
                    // https://github.com/facebook/react/issues/6731#issuecomment-254874553
                    var canSetTextContent = tag !== 'textarea' || nextProp !== '';
                    if (canSetTextContent) setTextContent(domElement, nextProp);
                } else if (typeof nextProp === 'number') setTextContent(domElement, '' + nextProp);
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (propKey === AUTOFOCUS) ;
            else if (registrationNameModules.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    if (typeof nextProp !== 'function') warnForInvalidEventListener(propKey, nextProp);
                    ensureListeningTo(rootContainerElement, propKey);
                }
            } else if (nextProp != null) setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
        }
    }
    function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
        // TODO: Handle wasCustomComponentTag
        for(var i = 0; i < updatePayload.length; i += 2){
            var propKey = updatePayload[i];
            var propValue = updatePayload[i + 1];
            if (propKey === STYLE) setValueForStyles(domElement, propValue);
            else if (propKey === DANGEROUSLY_SET_INNER_HTML) setInnerHTML(domElement, propValue);
            else if (propKey === CHILDREN) setTextContent(domElement, propValue);
            else setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
        }
    }
    function createElement(type, props, rootContainerElement, parentNamespace) {
        var isCustomComponentTag; // We create tags in the namespace of their parent container, except HTML
        // tags get no namespace.
        var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
        var domElement;
        var namespaceURI = parentNamespace;
        if (namespaceURI === HTML_NAMESPACE$1) namespaceURI = getIntrinsicNamespace(type);
        if (namespaceURI === HTML_NAMESPACE$1) {
            isCustomComponentTag = isCustomComponent(type, props); // Should this check be gated by parent namespace? Not sure we want to
            // allow <SVG> or <mATH>.
            if (!isCustomComponentTag && type !== type.toLowerCase()) error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
            if (type === 'script') {
                // Create the script via .innerHTML so its "parser-inserted" flag is
                // set to true and it does not execute
                var div = ownerDocument.createElement('div');
                div.innerHTML = "<script></script>"; // eslint-disable-line
                // This is guaranteed to yield a script element.
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
            } else if (typeof props.is === 'string') // $FlowIssue `createElement` should be updated for Web Components
            domElement = ownerDocument.createElement(type, {
                is: props.is
            });
            else {
                // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
                // See discussion in https://github.com/facebook/react/pull/6896
                // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
                domElement = ownerDocument.createElement(type); // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`
                // attributes on `select`s needs to be added before `option`s are inserted.
                // This prevents:
                // - a bug where the `select` does not scroll to the correct option because singular
                //  `select` elements automatically pick the first item #13222
                // - a bug where the `select` set the first item as selected despite the `size` attribute #14239
                // See https://github.com/facebook/react/issues/13222
                // and https://github.com/facebook/react/issues/14239
                if (type === 'select') {
                    var node = domElement;
                    if (props.multiple) node.multiple = true;
                    else if (props.size) // Setting a size greater than 1 causes a select to behave like `multiple=true`, where
                    // it is possible that no option is selected.
                    //
                    // This is only necessary when a select in "single selection mode".
                    node.size = props.size;
                }
            }
        } else domElement = ownerDocument.createElementNS(namespaceURI, type);
        if (namespaceURI === HTML_NAMESPACE$1) {
            if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
                warnedUnknownTags[type] = true;
                error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
            }
        }
        return domElement;
    }
    function createTextNode(text, rootContainerElement) {
        return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
    }
    function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
        var isCustomComponentTag = isCustomComponent(tag, rawProps);
        validatePropertiesInDevelopment(tag, rawProps);
        var props;
        switch(tag){
            case 'iframe':
            case 'object':
            case 'embed':
                trapBubbledEvent(TOP_LOAD, domElement);
                props = rawProps;
                break;
            case 'video':
            case 'audio':
                // Create listener for each media event
                for(var i = 0; i < mediaEventTypes.length; i++)trapBubbledEvent(mediaEventTypes[i], domElement);
                props = rawProps;
                break;
            case 'source':
                trapBubbledEvent(TOP_ERROR, domElement);
                props = rawProps;
                break;
            case 'img':
            case 'image':
            case 'link':
                trapBubbledEvent(TOP_ERROR, domElement);
                trapBubbledEvent(TOP_LOAD, domElement);
                props = rawProps;
                break;
            case 'form':
                trapBubbledEvent(TOP_RESET, domElement);
                trapBubbledEvent(TOP_SUBMIT, domElement);
                props = rawProps;
                break;
            case 'details':
                trapBubbledEvent(TOP_TOGGLE, domElement);
                props = rawProps;
                break;
            case 'input':
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
                // to onChange. Even if there is no listener.
                ensureListeningTo(rootContainerElement, 'onChange');
                break;
            case 'option':
                validateProps(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                break;
            case 'select':
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
                // to onChange. Even if there is no listener.
                ensureListeningTo(rootContainerElement, 'onChange');
                break;
            case 'textarea':
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$3(domElement, rawProps);
                trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
                // to onChange. Even if there is no listener.
                ensureListeningTo(rootContainerElement, 'onChange');
                break;
            default:
                props = rawProps;
        }
        assertValidProps(tag, props);
        setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
        switch(tag){
            case 'input':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
            case 'textarea':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper$3(domElement);
                break;
            case 'option':
                postMountWrapper$1(domElement, rawProps);
                break;
            case 'select':
                postMountWrapper$2(domElement, rawProps);
                break;
            default:
                if (typeof props.onClick === 'function') // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
                break;
        }
    } // Calculate the diff between the two objects.
    function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
        validatePropertiesInDevelopment(tag, nextRawProps);
        var updatePayload = null;
        var lastProps;
        var nextProps;
        switch(tag){
            case 'input':
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
            case 'option':
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
            case 'select':
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
            case 'textarea':
                lastProps = getHostProps$3(domElement, lastRawProps);
                nextProps = getHostProps$3(domElement, nextRawProps);
                updatePayload = [];
                break;
            default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
                break;
        }
        assertValidProps(tag, nextProps);
        var propKey;
        var styleName;
        var styleUpdates = null;
        for(propKey in lastProps){
            if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) continue;
            if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for(styleName in lastStyle)if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) styleUpdates = {
                    };
                    styleUpdates[styleName] = '';
                }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ;
            else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (propKey === AUTOFOCUS) ;
            else if (registrationNameModules.hasOwnProperty(propKey)) // This is a special case. If any listener updates we need to ensure
            // that the "current" fiber pointer gets updated so we need a commit
            // to update this element.
            {
                if (!updatePayload) updatePayload = [];
            } else // For all other deleted properties we add it to the queue. We use
            // the whitelist in the commit phase instead.
            (updatePayload = updatePayload || []).push(propKey, null);
        }
        for(propKey in nextProps){
            var nextProp = nextProps[propKey];
            var lastProp = lastProps != null ? lastProps[propKey] : undefined;
            if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) continue;
            if (propKey === STYLE) {
                if (nextProp) // Freeze the next style object so that we can assume it won't be
                // mutated. We have already warned for this in the past.
                Object.freeze(nextProp);
                if (lastProp) {
                    // Unset styles on `lastProp` but not on `nextProp`.
                    for(styleName in lastProp)if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                        if (!styleUpdates) styleUpdates = {
                        };
                        styleUpdates[styleName] = '';
                    }
                     // Update styles that changed since `lastProp`.
                    for(styleName in nextProp)if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                        if (!styleUpdates) styleUpdates = {
                        };
                        styleUpdates[styleName] = nextProp[styleName];
                    }
                } else {
                    // Relies on `updateStylesByID` not mutating `styleUpdates`.
                    if (!styleUpdates) {
                        if (!updatePayload) updatePayload = [];
                        updatePayload.push(propKey, styleUpdates);
                    }
                    styleUpdates = nextProp;
                }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                var lastHtml = lastProp ? lastProp[HTML$1] : undefined;
                if (nextHtml != null) {
                    if (lastHtml !== nextHtml) (updatePayload = updatePayload || []).push(propKey, nextHtml);
                }
            } else if (propKey === CHILDREN) {
                if (lastProp !== nextProp && (typeof nextProp === 'string' || typeof nextProp === 'number')) (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (registrationNameModules.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    // We eagerly listen to this even though we haven't committed yet.
                    if (typeof nextProp !== 'function') warnForInvalidEventListener(propKey, nextProp);
                    ensureListeningTo(rootContainerElement, propKey);
                }
                if (!updatePayload && lastProp !== nextProp) // This is a special case. If any listener updates we need to ensure
                // that the "current" props pointer gets updated so we need a commit
                // to update this element.
                updatePayload = [];
            } else // For any other property we always add it to the queue and then we
            // filter it out using the whitelist during the commit.
            (updatePayload = updatePayload || []).push(propKey, nextProp);
        }
        if (styleUpdates) {
            validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
            (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
        }
        return updatePayload;
    } // Apply the diff.
    function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
        // Update checked *before* name.
        // In the middle of an update, it is possible to have multiple checked.
        // When a checked radio tries to change name, browser makes another radio's checked false.
        if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) updateChecked(domElement, nextRawProps);
        var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
        var isCustomComponentTag = isCustomComponent(tag, nextRawProps); // Apply the diff.
        updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag); // TODO: Ensure that an update gets scheduled if any of the special props
        // changed.
        switch(tag){
            case 'input':
                // Update the wrapper around inputs *after* updating props. This has to
                // happen after `updateDOMProperties`. Otherwise HTML5 input validations
                // raise warnings and prevent the new value from being assigned.
                updateWrapper(domElement, nextRawProps);
                break;
            case 'textarea':
                updateWrapper$1(domElement, nextRawProps);
                break;
            case 'select':
                // <select> value update needs to occur after <option> children
                // reconciliation
                postUpdateWrapper(domElement, nextRawProps);
                break;
        }
    }
    function getPossibleStandardName(propName) {
        var lowerCasedName = propName.toLowerCase();
        if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) return null;
        return possibleStandardNames[lowerCasedName] || null;
    }
    function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
        var isCustomComponentTag;
        var extraAttributeNames;
        suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
        isCustomComponentTag = isCustomComponent(tag, rawProps);
        validatePropertiesInDevelopment(tag, rawProps);
        switch(tag){
            case 'iframe':
            case 'object':
            case 'embed':
                trapBubbledEvent(TOP_LOAD, domElement);
                break;
            case 'video':
            case 'audio':
                // Create listener for each media event
                for(var i = 0; i < mediaEventTypes.length; i++)trapBubbledEvent(mediaEventTypes[i], domElement);
                break;
            case 'source':
                trapBubbledEvent(TOP_ERROR, domElement);
                break;
            case 'img':
            case 'image':
            case 'link':
                trapBubbledEvent(TOP_ERROR, domElement);
                trapBubbledEvent(TOP_LOAD, domElement);
                break;
            case 'form':
                trapBubbledEvent(TOP_RESET, domElement);
                trapBubbledEvent(TOP_SUBMIT, domElement);
                break;
            case 'details':
                trapBubbledEvent(TOP_TOGGLE, domElement);
                break;
            case 'input':
                initWrapperState(domElement, rawProps);
                trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
                // to onChange. Even if there is no listener.
                ensureListeningTo(rootContainerElement, 'onChange');
                break;
            case 'option':
                validateProps(domElement, rawProps);
                break;
            case 'select':
                initWrapperState$1(domElement, rawProps);
                trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
                // to onChange. Even if there is no listener.
                ensureListeningTo(rootContainerElement, 'onChange');
                break;
            case 'textarea':
                initWrapperState$2(domElement, rawProps);
                trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
                // to onChange. Even if there is no listener.
                ensureListeningTo(rootContainerElement, 'onChange');
                break;
        }
        assertValidProps(tag, rawProps);
        extraAttributeNames = new Set();
        var attributes = domElement.attributes;
        for(var _i = 0; _i < attributes.length; _i++){
            var name = attributes[_i].name.toLowerCase();
            switch(name){
                // Built-in SSR attribute is whitelisted
                case 'data-reactroot':
                    break;
                // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                case 'value':
                    break;
                case 'checked':
                    break;
                case 'selected':
                    break;
                default:
                    // Intentionally use the original name.
                    // See discussion in https://github.com/facebook/react/pull/10676.
                    extraAttributeNames.add(attributes[_i].name);
            }
        }
        var updatePayload = null;
        for(var propKey in rawProps){
            if (!rawProps.hasOwnProperty(propKey)) continue;
            var nextProp = rawProps[propKey];
            if (propKey === CHILDREN) {
                // For text content children we compare against textContent. This
                // might match additional HTML that is hidden when we read it using
                // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
                // satisfies our requirement. Our requirement is not to produce perfect
                // HTML and attributes. Ideally we should preserve structure but it's
                // ok not to if the visible content is still enough to indicate what
                // even listeners these nodes might be wired up to.
                // TODO: Warn if there is more than a single textNode as a child.
                // TODO: Should we use domElement.firstChild.nodeValue to compare?
                if (typeof nextProp === 'string') {
                    if (domElement.textContent !== nextProp) {
                        if (!suppressHydrationWarning) warnForTextDifference(domElement.textContent, nextProp);
                        updatePayload = [
                            CHILDREN,
                            nextProp
                        ];
                    }
                } else if (typeof nextProp === 'number') {
                    if (domElement.textContent !== '' + nextProp) {
                        if (!suppressHydrationWarning) warnForTextDifference(domElement.textContent, nextProp);
                        updatePayload = [
                            CHILDREN,
                            '' + nextProp
                        ];
                    }
                }
            } else if (registrationNameModules.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    if (typeof nextProp !== 'function') warnForInvalidEventListener(propKey, nextProp);
                    ensureListeningTo(rootContainerElement, propKey);
                }
            } else if (typeof isCustomComponentTag === 'boolean') {
                // Validate that the properties correspond to their expected values.
                var serverValue = void 0;
                var propertyInfo = getPropertyInfo(propKey);
                if (suppressHydrationWarning) ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // TODO: Only ignore them on controlled tags.
                propKey === 'value' || propKey === 'checked' || propKey === 'selected') ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                    var serverHTML = domElement.innerHTML;
                    var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                    var expectedHTML = normalizeHTML(domElement, nextHtml != null ? nextHtml : '');
                    if (expectedHTML !== serverHTML) warnForPropDifference(propKey, serverHTML, expectedHTML);
                } else if (propKey === STYLE) {
                    // $FlowFixMe - Should be inferred as not undefined.
                    extraAttributeNames.delete(propKey);
                    if (canDiffStyleForHydrationWarning) {
                        var expectedStyle = createDangerousStringForStyles(nextProp);
                        serverValue = domElement.getAttribute('style');
                        if (expectedStyle !== serverValue) warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                } else if (isCustomComponentTag) {
                    // $FlowFixMe - Should be inferred as not undefined.
                    extraAttributeNames.delete(propKey.toLowerCase());
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                    if (nextProp !== serverValue) warnForPropDifference(propKey, serverValue, nextProp);
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                    var isMismatchDueToBadCasing = false;
                    if (propertyInfo !== null) {
                        // $FlowFixMe - Should be inferred as not undefined.
                        extraAttributeNames.delete(propertyInfo.attributeName);
                        serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                    } else {
                        var ownNamespace = parentNamespace;
                        if (ownNamespace === HTML_NAMESPACE$1) ownNamespace = getIntrinsicNamespace(tag);
                        if (ownNamespace === HTML_NAMESPACE$1) // $FlowFixMe - Should be inferred as not undefined.
                        extraAttributeNames.delete(propKey.toLowerCase());
                        else {
                            var standardName = getPossibleStandardName(propKey);
                            if (standardName !== null && standardName !== propKey) {
                                // If an SVG prop is supplied with bad casing, it will
                                // be successfully parsed from HTML, but will produce a mismatch
                                // (and would be incorrectly rendered on the client).
                                // However, we already warn about bad casing elsewhere.
                                // So we'll skip the misleading extra mismatch warning in this case.
                                isMismatchDueToBadCasing = true; // $FlowFixMe - Should be inferred as not undefined.
                                extraAttributeNames.delete(standardName);
                            } // $FlowFixMe - Should be inferred as not undefined.
                            extraAttributeNames.delete(propKey);
                        }
                        serverValue = getValueForAttribute(domElement, propKey, nextProp);
                    }
                    if (nextProp !== serverValue && !isMismatchDueToBadCasing) warnForPropDifference(propKey, serverValue, nextProp);
                }
            }
        }
        // $FlowFixMe - Should be inferred as not undefined.
        if (extraAttributeNames.size > 0 && !suppressHydrationWarning) // $FlowFixMe - Should be inferred as not undefined.
        warnForExtraAttributes(extraAttributeNames);
        switch(tag){
            case 'input':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
            case 'textarea':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper$3(domElement);
                break;
            case 'select':
            case 'option':
                break;
            default:
                if (typeof rawProps.onClick === 'function') // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
                break;
        }
        return updatePayload;
    }
    function diffHydratedText(textNode, text) {
        var isDifferent = textNode.nodeValue !== text;
        return isDifferent;
    }
    function warnForUnmatchedText(textNode, text) {
        warnForTextDifference(textNode.nodeValue, text);
    }
    function warnForDeletedHydratableElement(parentNode, child) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error('Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
    }
    function warnForDeletedHydratableText(parentNode, child) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
    }
    function warnForInsertedHydratedElement(parentNode, tag, props) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error('Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
    }
    function warnForInsertedHydratedText(parentNode, text) {
        if (text === '') // We expect to insert empty text nodes since they're not represented in
        // the HTML.
        // TODO: Remove this special case if we can just avoid inserting empty
        // text nodes.
        return;
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
    }
    function restoreControlledState$3(domElement, tag, props) {
        switch(tag){
            case 'input':
                restoreControlledState(domElement, props);
                return;
            case 'textarea':
                restoreControlledState$2(domElement, props);
                return;
            case 'select':
                restoreControlledState$1(domElement, props);
                return;
        }
    }
    function getActiveElement(doc) {
        doc = doc || (typeof document !== 'undefined' ? document : undefined);
        if (typeof doc === 'undefined') return null;
        try {
            return doc.activeElement || doc.body;
        } catch (e) {
            return doc.body;
        }
    }
    /**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */ function getLeafNode(node) {
        while(node && node.firstChild)node = node.firstChild;
        return node;
    }
    /**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */ function getSiblingNode(node) {
        while(node){
            if (node.nextSibling) return node.nextSibling;
            node = node.parentNode;
        }
    }
    /**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */ function getNodeForCharacterOffset(root, offset) {
        var node = getLeafNode(root);
        var nodeStart = 0;
        var nodeEnd = 0;
        while(node){
            if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) return {
                    node: node,
                    offset: offset - nodeStart
                };
                nodeStart = nodeEnd;
            }
            node = getLeafNode(getSiblingNode(node));
        }
    }
    /**
 * @param {DOMElement} outerNode
 * @return {?object}
 */ function getOffsets(outerNode) {
        var ownerDocument = outerNode.ownerDocument;
        var win = ownerDocument && ownerDocument.defaultView || window;
        var selection = win.getSelection && win.getSelection();
        if (!selection || selection.rangeCount === 0) return null;
        var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset; // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
        // up/down buttons on an <input type="number">. Anonymous divs do not seem to
        // expose properties, triggering a "Permission denied error" if any of its
        // properties are accessed. The only seemingly possible way to avoid erroring
        // is to access a property that typically works for non-anonymous divs and
        // catch any error that may otherwise arise. See
        // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
        try {
            /* eslint-disable no-unused-expressions */ anchorNode.nodeType;
            focusNode.nodeType;
        /* eslint-enable no-unused-expressions */ } catch (e) {
            return null;
        }
        return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
    }
    /**
 * Returns {start, end} where `start` is the character/codepoint index of
 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
 * `end` is the index of (focusNode, focusOffset).
 *
 * Returns null if you pass in garbage input but we should probably just crash.
 *
 * Exported only for testing.
 */ function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
        var length = 0;
        var start = -1;
        var end = -1;
        var indexWithinAnchor = 0;
        var indexWithinFocus = 0;
        var node = outerNode;
        var parentNode = null;
        outer: while(true){
            var next = null;
            while(true){
                if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) start = length + anchorOffset;
                if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) end = length + focusOffset;
                if (node.nodeType === TEXT_NODE) length += node.nodeValue.length;
                if ((next = node.firstChild) === null) break;
                 // Moving from `node` to its first child `next`.
                parentNode = node;
                node = next;
            }
            while(true){
                if (node === outerNode) break outer;
                if (parentNode === anchorNode && (++indexWithinAnchor) === anchorOffset) start = length;
                if (parentNode === focusNode && (++indexWithinFocus) === focusOffset) end = length;
                if ((next = node.nextSibling) !== null) break;
                node = parentNode;
                parentNode = node.parentNode;
            } // Moving from `node` to its next sibling `next`.
            node = next;
        }
        if (start === -1 || end === -1) // This should never happen. (Would happen if the anchor/focus nodes aren't
        // actually inside the passed-in node.)
        return null;
        return {
            start: start,
            end: end
        };
    }
    /**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */ function setOffsets(node, offsets) {
        var doc = node.ownerDocument || document;
        var win = doc && doc.defaultView || window; // Edge fails with "Object expected" in some scenarios.
        // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
        // fails when pasting 100+ items)
        if (!win.getSelection) return;
        var selection = win.getSelection();
        var length = node.textContent.length;
        var start = Math.min(offsets.start, length);
        var end = offsets.end === undefined ? start : Math.min(offsets.end, length); // IE 11 uses modern selection, but doesn't support the extend method.
        // Flip backward selections, so we can set with a single range.
        if (!selection.extend && start > end) {
            var temp = end;
            end = start;
            start = temp;
        }
        var startMarker = getNodeForCharacterOffset(node, start);
        var endMarker = getNodeForCharacterOffset(node, end);
        if (startMarker && endMarker) {
            if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) return;
            var range = doc.createRange();
            range.setStart(startMarker.node, startMarker.offset);
            selection.removeAllRanges();
            if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
            } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
            }
        }
    }
    function isTextNode(node) {
        return node && node.nodeType === TEXT_NODE;
    }
    function containsNode(outerNode, innerNode) {
        if (!outerNode || !innerNode) return false;
        else if (outerNode === innerNode) return true;
        else if (isTextNode(outerNode)) return false;
        else if (isTextNode(innerNode)) return containsNode(outerNode, innerNode.parentNode);
        else if ('contains' in outerNode) return outerNode.contains(innerNode);
        else if (outerNode.compareDocumentPosition) return !!(outerNode.compareDocumentPosition(innerNode) & 16);
        else return false;
    }
    function isInDocument(node) {
        return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
    }
    function isSameOriginFrame(iframe) {
        try {
            // Accessing the contentDocument of a HTMLIframeElement can cause the browser
            // to throw, e.g. if it has a cross-origin src attribute.
            // Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:
            // iframe.contentDocument.defaultView;
            // A safety way is to access one of the cross origin properties: Window or Location
            // Which might result in "SecurityError" DOM Exception and it is compatible to Safari.
            // https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl
            return typeof iframe.contentWindow.location.href === 'string';
        } catch (err) {
            return false;
        }
    }
    function getActiveElementDeep() {
        var win = window;
        var element = getActiveElement();
        while(element instanceof win.HTMLIFrameElement){
            if (isSameOriginFrame(element)) win = element.contentWindow;
            else return element;
            element = getActiveElement(win.document);
        }
        return element;
    }
    /**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */ /**
 * @hasSelectionCapabilities: we get the element types that support selection
 * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
 * and `selectionEnd` rows.
 */ function hasSelectionCapabilities(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
    }
    function getSelectionInformation() {
        var focusedElem = getActiveElementDeep();
        return {
            // Used by Flare
            activeElementDetached: null,
            focusedElem: focusedElem,
            selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
        };
    }
    /**
 * @restoreSelection: If any selection information was potentially lost,
 * restore it. This is useful when performing operations that could remove dom
 * nodes and place them back in, resulting in focus being lost.
 */ function restoreSelection(priorSelectionInformation) {
        var curFocusedElem = getActiveElementDeep();
        var priorFocusedElem = priorSelectionInformation.focusedElem;
        var priorSelectionRange = priorSelectionInformation.selectionRange;
        if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
            if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) setSelection(priorFocusedElem, priorSelectionRange);
             // Focusing a node can change the scroll position, which is undesirable
            var ancestors = [];
            var ancestor = priorFocusedElem;
            while(ancestor = ancestor.parentNode)if (ancestor.nodeType === ELEMENT_NODE) ancestors.push({
                element: ancestor,
                left: ancestor.scrollLeft,
                top: ancestor.scrollTop
            });
            if (typeof priorFocusedElem.focus === 'function') priorFocusedElem.focus();
            for(var i = 0; i < ancestors.length; i++){
                var info = ancestors[i];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
            }
        }
    }
    /**
 * @getSelection: Gets the selection bounds of a focused textarea, input or
 * contentEditable node.
 * -@input: Look up selection bounds of this input
 * -@return {start: selectionStart, end: selectionEnd}
 */ function getSelection(input) {
        var selection;
        if ('selectionStart' in input) // Modern browser with input or textarea.
        selection = {
            start: input.selectionStart,
            end: input.selectionEnd
        };
        else // Content editable or old IE textarea.
        selection = getOffsets(input);
        return selection || {
            start: 0,
            end: 0
        };
    }
    /**
 * @setSelection: Sets the selection bounds of a textarea or input and focuses
 * the input.
 * -@input     Set selection bounds of this input or textarea
 * -@offsets   Object of same form that is returned from get*
 */ function setSelection(input, offsets) {
        var start = offsets.start, end = offsets.end;
        if (end === undefined) end = start;
        if ('selectionStart' in input) {
            input.selectionStart = start;
            input.selectionEnd = Math.min(end, input.value.length);
        } else setOffsets(input, offsets);
    }
    var validateDOMNesting = function() {
    };
    var updatedAncestorInfo = function() {
    };
    // This validation code was written based on the HTML5 parsing spec:
    // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
    //
    // Note: this does not catch all invalid nesting, nor does it try to (as it's
    // not clear what practical benefit doing so provides); instead, we warn only
    // for cases where the parser will give a parse tree differing from what React
    // intended. For example, <b><div></div></b> is invalid but we don't warn
    // because it still parses correctly; we do warn for other cases like nested
    // <p> tags where the beginning of the second element implicitly closes the
    // first, causing a confusing mess.
    // https://html.spec.whatwg.org/multipage/syntax.html#special
    var specialTags = [
        'address',
        'applet',
        'area',
        'article',
        'aside',
        'base',
        'basefont',
        'bgsound',
        'blockquote',
        'body',
        'br',
        'button',
        'caption',
        'center',
        'col',
        'colgroup',
        'dd',
        'details',
        'dir',
        'div',
        'dl',
        'dt',
        'embed',
        'fieldset',
        'figcaption',
        'figure',
        'footer',
        'form',
        'frame',
        'frameset',
        'h1',
        'h2',
        'h3',
        'h4',
        'h5',
        'h6',
        'head',
        'header',
        'hgroup',
        'hr',
        'html',
        'iframe',
        'img',
        'input',
        'isindex',
        'li',
        'link',
        'listing',
        'main',
        'marquee',
        'menu',
        'menuitem',
        'meta',
        'nav',
        'noembed',
        'noframes',
        'noscript',
        'object',
        'ol',
        'p',
        'param',
        'plaintext',
        'pre',
        'script',
        'section',
        'select',
        'source',
        'style',
        'summary',
        'table',
        'tbody',
        'td',
        'template',
        'textarea',
        'tfoot',
        'th',
        'thead',
        'title',
        'tr',
        'track',
        'ul',
        'wbr',
        'xmp'
    ]; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
    var inScopeTags = [
        'applet',
        'caption',
        'html',
        'table',
        'td',
        'th',
        'marquee',
        'object',
        'template',
        // TODO: Distinguish by namespace here -- for <title>, including it here
        // errs on the side of fewer warnings
        'foreignObject',
        'desc',
        'title'
    ]; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
    var buttonScopeTags = inScopeTags.concat([
        'button'
    ]); // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
    var impliedEndTags = [
        'dd',
        'dt',
        'li',
        'option',
        'optgroup',
        'p',
        'rp',
        'rt'
    ];
    var emptyAncestorInfo = {
        current: null,
        formTag: null,
        aTagInScope: null,
        buttonTagInScope: null,
        nobrTagInScope: null,
        pTagInButtonScope: null,
        listItemTagAutoclosing: null,
        dlItemTagAutoclosing: null
    };
    updatedAncestorInfo = function(oldInfo, tag) {
        var ancestorInfo = _assign({
        }, oldInfo || emptyAncestorInfo);
        var info = {
            tag: tag
        };
        if (inScopeTags.indexOf(tag) !== -1) {
            ancestorInfo.aTagInScope = null;
            ancestorInfo.buttonTagInScope = null;
            ancestorInfo.nobrTagInScope = null;
        }
        if (buttonScopeTags.indexOf(tag) !== -1) ancestorInfo.pTagInButtonScope = null;
         // See rules for 'li', 'dd', 'dt' start tags in
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
        if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
            ancestorInfo.listItemTagAutoclosing = null;
            ancestorInfo.dlItemTagAutoclosing = null;
        }
        ancestorInfo.current = info;
        if (tag === 'form') ancestorInfo.formTag = info;
        if (tag === 'a') ancestorInfo.aTagInScope = info;
        if (tag === 'button') ancestorInfo.buttonTagInScope = info;
        if (tag === 'nobr') ancestorInfo.nobrTagInScope = info;
        if (tag === 'p') ancestorInfo.pTagInButtonScope = info;
        if (tag === 'li') ancestorInfo.listItemTagAutoclosing = info;
        if (tag === 'dd' || tag === 'dt') ancestorInfo.dlItemTagAutoclosing = info;
        return ancestorInfo;
    };
    /**
   * Returns whether
   */ var isTagValidWithParent = function(tag, parentTag) {
        // First, let's check if we're in an unusual parsing mode...
        switch(parentTag){
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
            case 'select':
                return tag === 'option' || tag === 'optgroup' || tag === '#text';
            case 'optgroup':
                return tag === 'option' || tag === '#text';
            // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
            // but
            case 'option':
                return tag === '#text';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
            // No special behavior since these rules fall back to "in body" mode for
            // all except special table nodes which cause bad parsing behavior anyway.
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
            case 'tr':
                return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
            case 'tbody':
            case 'thead':
            case 'tfoot':
                return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
            case 'colgroup':
                return tag === 'col' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
            case 'table':
                return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
            case 'head':
                return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
            case 'html':
                return tag === 'head' || tag === 'body' || tag === 'frameset';
            case 'frameset':
                return tag === 'frame';
            case '#document':
                return tag === 'html';
        } // Probably in the "in body" parsing mode, so we outlaw only tag combos
        // where the parsing rules cause implicit opens or closes to be added.
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
        switch(tag){
            case 'h1':
            case 'h2':
            case 'h3':
            case 'h4':
            case 'h5':
            case 'h6':
                return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';
            case 'rp':
            case 'rt':
                return impliedEndTags.indexOf(parentTag) === -1;
            case 'body':
            case 'caption':
            case 'col':
            case 'colgroup':
            case 'frameset':
            case 'frame':
            case 'head':
            case 'html':
            case 'tbody':
            case 'td':
            case 'tfoot':
            case 'th':
            case 'thead':
            case 'tr':
                // These tags are only valid with a few parents that have special child
                // parsing rules -- if we're down here, then none of those matched and
                // so we allow it only if we don't know what the parent is, as all other
                // cases are invalid.
                return parentTag == null;
        }
        return true;
    };
    /**
   * Returns whether
   */ var findInvalidAncestorForTag = function(tag, ancestorInfo) {
        switch(tag){
            case 'address':
            case 'article':
            case 'aside':
            case 'blockquote':
            case 'center':
            case 'details':
            case 'dialog':
            case 'dir':
            case 'div':
            case 'dl':
            case 'fieldset':
            case 'figcaption':
            case 'figure':
            case 'footer':
            case 'header':
            case 'hgroup':
            case 'main':
            case 'menu':
            case 'nav':
            case 'ol':
            case 'p':
            case 'section':
            case 'summary':
            case 'ul':
            case 'pre':
            case 'listing':
            case 'table':
            case 'hr':
            case 'xmp':
            case 'h1':
            case 'h2':
            case 'h3':
            case 'h4':
            case 'h5':
            case 'h6':
                return ancestorInfo.pTagInButtonScope;
            case 'form':
                return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
            case 'li':
                return ancestorInfo.listItemTagAutoclosing;
            case 'dd':
            case 'dt':
                return ancestorInfo.dlItemTagAutoclosing;
            case 'button':
                return ancestorInfo.buttonTagInScope;
            case 'a':
                // Spec says something about storing a list of markers, but it sounds
                // equivalent to this check.
                return ancestorInfo.aTagInScope;
            case 'nobr':
                return ancestorInfo.nobrTagInScope;
        }
        return null;
    };
    var didWarn$1 = {
    };
    validateDOMNesting = function(childTag, childText, ancestorInfo) {
        ancestorInfo = ancestorInfo || emptyAncestorInfo;
        var parentInfo = ancestorInfo.current;
        var parentTag = parentInfo && parentInfo.tag;
        if (childText != null) {
            if (childTag != null) error('validateDOMNesting: when childText is passed, childTag should be null');
            childTag = '#text';
        }
        var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
        var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
        var invalidParentOrAncestor = invalidParent || invalidAncestor;
        if (!invalidParentOrAncestor) return;
        var ancestorTag = invalidParentOrAncestor.tag;
        var addendum = getCurrentFiberStackInDev();
        var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + addendum;
        if (didWarn$1[warnKey]) return;
        didWarn$1[warnKey] = true;
        var tagDisplayName = childTag;
        var whitespaceInfo = '';
        if (childTag === '#text') {
            if (/\S/.test(childText)) tagDisplayName = 'Text nodes';
            else {
                tagDisplayName = 'Whitespace text nodes';
                whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
            }
        } else tagDisplayName = '<' + childTag + '>';
        if (invalidParent) {
            var info = '';
            if (ancestorTag === 'table' && childTag === 'tr') info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
            error('validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info);
        } else error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
    };
    var SUPPRESS_HYDRATION_WARNING$1;
    SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
    var SUSPENSE_START_DATA = '$';
    var SUSPENSE_END_DATA = '/$';
    var SUSPENSE_PENDING_START_DATA = '$?';
    var SUSPENSE_FALLBACK_START_DATA = '$!';
    var STYLE$1 = 'style';
    var eventsEnabled = null;
    var selectionInformation = null;
    function shouldAutoFocusHostComponent(type, props) {
        switch(type){
            case 'button':
            case 'input':
            case 'select':
            case 'textarea':
                return !!props.autoFocus;
        }
        return false;
    }
    function getRootHostContext(rootContainerInstance) {
        var type;
        var namespace;
        var nodeType = rootContainerInstance.nodeType;
        switch(nodeType){
            case DOCUMENT_NODE:
            case DOCUMENT_FRAGMENT_NODE:
                type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
                var root = rootContainerInstance.documentElement;
                namespace = root ? root.namespaceURI : getChildNamespace(null, '');
                break;
            default:
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
        }
        var validatedTag = type.toLowerCase();
        var ancestorInfo = updatedAncestorInfo(null, validatedTag);
        return {
            namespace: namespace,
            ancestorInfo: ancestorInfo
        };
    }
    function getChildHostContext(parentHostContext, type, rootContainerInstance) {
        var parentHostContextDev = parentHostContext;
        var namespace = getChildNamespace(parentHostContextDev.namespace, type);
        var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
        return {
            namespace: namespace,
            ancestorInfo: ancestorInfo
        };
    }
    function getPublicInstance(instance) {
        return instance;
    }
    function prepareForCommit(containerInfo) {
        eventsEnabled = isEnabled();
        selectionInformation = getSelectionInformation();
        setEnabled(false);
    }
    function resetAfterCommit(containerInfo) {
        restoreSelection(selectionInformation);
        setEnabled(eventsEnabled);
        eventsEnabled = null;
        selectionInformation = null;
    }
    function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        var parentNamespace;
        // TODO: take namespace into account when validating.
        var hostContextDev = hostContext;
        validateDOMNesting(type, null, hostContextDev.ancestorInfo);
        if (typeof props.children === 'string' || typeof props.children === 'number') {
            var string = '' + props.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
        }
        parentNamespace = hostContextDev.namespace;
        var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
        precacheFiberNode(internalInstanceHandle, domElement);
        updateFiberProps(domElement, props);
        return domElement;
    }
    function appendInitialChild(parentInstance, child) {
        parentInstance.appendChild(child);
    }
    function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
        setInitialProperties(domElement, type, props, rootContainerInstance);
        return shouldAutoFocusHostComponent(type, props);
    }
    function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
        var hostContextDev = hostContext;
        if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
            var string = '' + newProps.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
        }
        return diffProperties(domElement, type, oldProps, newProps, rootContainerInstance);
    }
    function shouldSetTextContent(type, props) {
        return type === 'textarea' || type === 'option' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
    }
    function shouldDeprioritizeSubtree(type, props) {
        return !!props.hidden;
    }
    function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
        var hostContextDev = hostContext;
        validateDOMNesting(null, text, hostContextDev.ancestorInfo);
        var textNode = createTextNode(text, rootContainerInstance);
        precacheFiberNode(internalInstanceHandle, textNode);
        return textNode;
    }
    // if a component just imports ReactDOM (e.g. for findDOMNode).
    // Some environments might not have setTimeout or clearTimeout.
    var scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
    var cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
    var noTimeout = -1; // -------------------
    function commitMount(domElement, type, newProps, internalInstanceHandle) {
        // Despite the naming that might imply otherwise, this method only
        // fires if there is an `Update` effect scheduled during mounting.
        // This happens if `finalizeInitialChildren` returns `true` (which it
        // does to implement the `autoFocus` attribute on the client). But
        // there are also other cases when this might happen (such as patching
        // up text content during hydration mismatch). So we'll check this again.
        if (shouldAutoFocusHostComponent(type, newProps)) domElement.focus();
    }
    function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
        // Update the props handle so that we know which props are the ones with
        // with current event handlers.
        updateFiberProps(domElement, newProps); // Apply the diff to the DOM node.
        updateProperties(domElement, updatePayload, type, oldProps, newProps);
    }
    function resetTextContent(domElement) {
        setTextContent(domElement, '');
    }
    function commitTextUpdate(textInstance, oldText, newText) {
        textInstance.nodeValue = newText;
    }
    function appendChild(parentInstance, child) {
        parentInstance.appendChild(child);
    }
    function appendChildToContainer(container, child) {
        var parentNode;
        if (container.nodeType === COMMENT_NODE) {
            parentNode = container.parentNode;
            parentNode.insertBefore(child, container);
        } else {
            parentNode = container;
            parentNode.appendChild(child);
        } // This container might be used for a portal.
        // If something inside a portal is clicked, that click should bubble
        // through the React tree. However, on Mobile Safari the click would
        // never bubble through the *DOM* tree unless an ancestor with onclick
        // event exists. So we wouldn't see it and dispatch it.
        // This is why we ensure that non React root containers have inline onclick
        // defined.
        // https://github.com/facebook/react/issues/11918
        var reactRootContainer = container._reactRootContainer;
        if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(parentNode);
    }
    function insertBefore(parentInstance, child, beforeChild) {
        parentInstance.insertBefore(child, beforeChild);
    }
    function insertInContainerBefore(container, child, beforeChild) {
        if (container.nodeType === COMMENT_NODE) container.parentNode.insertBefore(child, beforeChild);
        else container.insertBefore(child, beforeChild);
    }
    function removeChild(parentInstance, child) {
        parentInstance.removeChild(child);
    }
    function removeChildFromContainer(container, child) {
        if (container.nodeType === COMMENT_NODE) container.parentNode.removeChild(child);
        else container.removeChild(child);
    }
    function hideInstance(instance) {
        var style1 = instance.style;
        if (typeof style1.setProperty === 'function') style1.setProperty('display', 'none', 'important');
        else style1.display = 'none';
    }
    function hideTextInstance(textInstance) {
        textInstance.nodeValue = '';
    }
    function unhideInstance(instance, props) {
        var styleProp = props[STYLE$1];
        var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null;
        instance.style.display = dangerousStyleValue('display', display);
    }
    function unhideTextInstance(textInstance, text) {
        textInstance.nodeValue = text;
    } // -------------------
    function canHydrateInstance(instance, type, props) {
        if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) return null;
         // This has now been refined to an element node.
        return instance;
    }
    function canHydrateTextInstance(instance, text) {
        if (text === '' || instance.nodeType !== TEXT_NODE) // Empty strings are not parsed by HTML so there won't be a correct match here.
        return null;
         // This has now been refined to a text node.
        return instance;
    }
    function isSuspenseInstancePending(instance) {
        return instance.data === SUSPENSE_PENDING_START_DATA;
    }
    function isSuspenseInstanceFallback(instance) {
        return instance.data === SUSPENSE_FALLBACK_START_DATA;
    }
    function getNextHydratable(node) {
        // Skip non-hydratable nodes.
        for(; node != null; node = node.nextSibling){
            var nodeType = node.nodeType;
            if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) break;
        }
        return node;
    }
    function getNextHydratableSibling(instance) {
        return getNextHydratable(instance.nextSibling);
    }
    function getFirstHydratableChild(parentInstance) {
        return getNextHydratable(parentInstance.firstChild);
    }
    function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        precacheFiberNode(internalInstanceHandle, instance); // TODO: Possibly defer this until the commit phase where all the events
        // get attached.
        updateFiberProps(instance, props);
        var parentNamespace;
        var hostContextDev = hostContext;
        parentNamespace = hostContextDev.namespace;
        return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance);
    }
    function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
        precacheFiberNode(internalInstanceHandle, textInstance);
        return diffHydratedText(textInstance, text);
    }
    function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
        var node = suspenseInstance.nextSibling; // Skip past all nodes within this suspense boundary.
        // There might be nested nodes so we need to keep track of how
        // deep we are and only break out when we're back on top.
        var depth = 0;
        while(node){
            if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_END_DATA) {
                    if (depth === 0) return getNextHydratableSibling(node);
                    else depth--;
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) depth++;
            }
            node = node.nextSibling;
        } // TODO: Warn, we didn't find the end comment boundary.
        return null;
    } // Returns the SuspenseInstance if this node is a direct child of a
    // SuspenseInstance. I.e. if its previous sibling is a Comment with
    // SUSPENSE_x_START_DATA. Otherwise, null.
    function getParentSuspenseInstance(targetInstance) {
        var node = targetInstance.previousSibling; // Skip past all nodes within this suspense boundary.
        // There might be nested nodes so we need to keep track of how
        // deep we are and only break out when we're back on top.
        var depth = 0;
        while(node){
            if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                    if (depth === 0) return node;
                    else depth--;
                } else if (data === SUSPENSE_END_DATA) depth++;
            }
            node = node.previousSibling;
        }
        return null;
    }
    function commitHydratedContainer(container) {
        // Retry if any event replaying was blocked on this.
        retryIfBlockedOn(container);
    }
    function commitHydratedSuspenseInstance(suspenseInstance) {
        // Retry if any event replaying was blocked on this.
        retryIfBlockedOn(suspenseInstance);
    }
    function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
        warnForUnmatchedText(textInstance, text);
    }
    function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) warnForUnmatchedText(textInstance, text);
    }
    function didNotHydrateContainerInstance(parentContainer, instance) {
        if (instance.nodeType === ELEMENT_NODE) warnForDeletedHydratableElement(parentContainer, instance);
        else if (instance.nodeType === COMMENT_NODE) ;
        else warnForDeletedHydratableText(parentContainer, instance);
    }
    function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            if (instance.nodeType === ELEMENT_NODE) warnForDeletedHydratableElement(parentInstance, instance);
            else if (instance.nodeType === COMMENT_NODE) ;
            else warnForDeletedHydratableText(parentInstance, instance);
        }
    }
    function didNotFindHydratableContainerInstance(parentContainer, type, props) {
        warnForInsertedHydratedElement(parentContainer, type);
    }
    function didNotFindHydratableContainerTextInstance(parentContainer, text) {
        warnForInsertedHydratedText(parentContainer, text);
    }
    function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) warnForInsertedHydratedElement(parentInstance, type);
    }
    function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) warnForInsertedHydratedText(parentInstance, text);
    }
    function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
        parentProps[SUPPRESS_HYDRATION_WARNING$1];
    }
    var randomKey = Math.random().toString(36).slice(2);
    var internalInstanceKey = '__reactInternalInstance$' + randomKey;
    var internalEventHandlersKey = '__reactEventHandlers$' + randomKey;
    var internalContainerInstanceKey = '__reactContainere$' + randomKey;
    function precacheFiberNode(hostInst, node) {
        node[internalInstanceKey] = hostInst;
    }
    function markContainerAsRoot(hostRoot, node) {
        node[internalContainerInstanceKey] = hostRoot;
    }
    function unmarkContainerAsRoot(node) {
        node[internalContainerInstanceKey] = null;
    }
    function isContainerMarkedAsRoot(node) {
        return !!node[internalContainerInstanceKey];
    } // Given a DOM node, return the closest HostComponent or HostText fiber ancestor.
    // If the target node is part of a hydrated or not yet rendered subtree, then
    // this may also return a SuspenseComponent or HostRoot to indicate that.
    // Conceptually the HostRoot fiber is a child of the Container node. So if you
    // pass the Container node as the targetNode, you will not actually get the
    // HostRoot back. To get to the HostRoot, you need to pass a child of it.
    // The same thing applies to Suspense boundaries.
    function getClosestInstanceFromNode(targetNode) {
        var targetInst = targetNode[internalInstanceKey];
        if (targetInst) // Don't return HostRoot or SuspenseComponent here.
        return targetInst;
         // If the direct event target isn't a React owned DOM node, we need to look
        // to see if one of its parents is a React owned DOM node.
        var parentNode = targetNode.parentNode;
        while(parentNode){
            // We'll check if this is a container root that could include
            // React nodes in the future. We need to check this first because
            // if we're a child of a dehydrated container, we need to first
            // find that inner container before moving on to finding the parent
            // instance. Note that we don't check this field on  the targetNode
            // itself because the fibers are conceptually between the container
            // node and the first child. It isn't surrounding the container node.
            // If it's not a container, we check if it's an instance.
            targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
            if (targetInst) {
                // Since this wasn't the direct target of the event, we might have
                // stepped past dehydrated DOM nodes to get here. However they could
                // also have been non-React nodes. We need to answer which one.
                // If we the instance doesn't have any children, then there can't be
                // a nested suspense boundary within it. So we can use this as a fast
                // bailout. Most of the time, when people add non-React children to
                // the tree, it is using a ref to a child-less DOM node.
                // Normally we'd only need to check one of the fibers because if it
                // has ever gone from having children to deleting them or vice versa
                // it would have deleted the dehydrated boundary nested inside already.
                // However, since the HostRoot starts out with an alternate it might
                // have one on the alternate so we need to check in case this was a
                // root.
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                    // Next we need to figure out if the node that skipped past is
                    // nested within a dehydrated boundary and if so, which one.
                    var suspenseInstance = getParentSuspenseInstance(targetNode);
                    while(suspenseInstance !== null){
                        // We found a suspense instance. That means that we haven't
                        // hydrated it yet. Even though we leave the comments in the
                        // DOM after hydrating, and there are boundaries in the DOM
                        // that could already be hydrated, we wouldn't have found them
                        // through this pass since if the target is hydrated it would
                        // have had an internalInstanceKey on it.
                        // Let's get the fiber associated with the SuspenseComponent
                        // as the deepest instance.
                        var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                        if (targetSuspenseInst) return targetSuspenseInst;
                         // If we don't find a Fiber on the comment, it might be because
                        // we haven't gotten to hydrate it yet. There might still be a
                        // parent boundary that hasn't above this one so we need to find
                        // the outer most that is known.
                        suspenseInstance = getParentSuspenseInstance(suspenseInstance); // If we don't find one, then that should mean that the parent
                    // host component also hasn't hydrated yet. We can return it
                    // below since it will bail out on the isMounted check later.
                    }
                }
                return targetInst;
            }
            targetNode = parentNode;
            parentNode = targetNode.parentNode;
        }
        return null;
    }
    /**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */ function getInstanceFromNode$1(node) {
        var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
        if (inst) {
            if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) return inst;
            else return null;
        }
        return null;
    }
    /**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */ function getNodeFromInstance$1(inst) {
        if (inst.tag === HostComponent || inst.tag === HostText) // In Fiber this, is just the state node right now. We assume it will be
        // a host component or host text.
        return inst.stateNode;
         // Without this first invariant, passing a non-DOM-component triggers the next
        throw Error("getNodeFromInstance: Invalid argument.");
    }
    function getFiberCurrentPropsFromNode$1(node) {
        return node[internalEventHandlersKey] || null;
    }
    function updateFiberProps(node, props) {
        node[internalEventHandlersKey] = props;
    }
    function getParent(inst) {
        do inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.
        while (inst && inst.tag !== HostComponent)
        if (inst) return inst;
        return null;
    }
    /**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */ function getLowestCommonAncestor(instA, instB) {
        var depthA = 0;
        for(var tempA = instA; tempA; tempA = getParent(tempA))depthA++;
        var depthB = 0;
        for(var tempB = instB; tempB; tempB = getParent(tempB))depthB++;
         // If A is deeper, crawl up.
        while(depthA - depthB > 0){
            instA = getParent(instA);
            depthA--;
        } // If B is deeper, crawl up.
        while(depthB - depthA > 0){
            instB = getParent(instB);
            depthB--;
        } // Walk in lockstep until we find a match.
        var depth = depthA;
        while(depth--){
            if (instA === instB || instA === instB.alternate) return instA;
            instA = getParent(instA);
            instB = getParent(instB);
        }
        return null;
    }
    /**
 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
 */ function traverseTwoPhase(inst, fn, arg) {
        var path = [];
        while(inst){
            path.push(inst);
            inst = getParent(inst);
        }
        var i;
        for(i = path.length; (i--) > 0;)fn(path[i], 'captured', arg);
        for(i = 0; i < path.length; i++)fn(path[i], 'bubbled', arg);
    }
    /**
 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
 * should would receive a `mouseEnter` or `mouseLeave` event.
 *
 * Does not invoke the callback on the nearest common ancestor because nothing
 * "entered" or "left" that element.
 */ function traverseEnterLeave(from, to, fn, argFrom, argTo) {
        var common = from && to ? getLowestCommonAncestor(from, to) : null;
        var pathFrom = [];
        while(true){
            if (!from) break;
            if (from === common) break;
            var alternate = from.alternate;
            if (alternate !== null && alternate === common) break;
            pathFrom.push(from);
            from = getParent(from);
        }
        var pathTo = [];
        while(true){
            if (!to) break;
            if (to === common) break;
            var _alternate = to.alternate;
            if (_alternate !== null && _alternate === common) break;
            pathTo.push(to);
            to = getParent(to);
        }
        for(var i = 0; i < pathFrom.length; i++)fn(pathFrom[i], 'bubbled', argFrom);
        for(var _i = pathTo.length; (_i--) > 0;)fn(pathTo[_i], 'captured', argTo);
    }
    function isInteractive(tag) {
        return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
    }
    function shouldPreventMouseEvent(name, type, props) {
        switch(name){
            case 'onClick':
            case 'onClickCapture':
            case 'onDoubleClick':
            case 'onDoubleClickCapture':
            case 'onMouseDown':
            case 'onMouseDownCapture':
            case 'onMouseMove':
            case 'onMouseMoveCapture':
            case 'onMouseUp':
            case 'onMouseUpCapture':
            case 'onMouseEnter':
                return !!(props.disabled && isInteractive(type));
            default:
                return false;
        }
    }
    /**
 * @param {object} inst The instance, which is the source of events.
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @return {?function} The stored callback.
 */ function getListener(inst, registrationName) {
        var listener; // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
        // live here; needs to be moved to a better place soon
        var stateNode = inst.stateNode;
        if (!stateNode) // Work in progress (ex: onload events in incremental mode).
        return null;
        var props = getFiberCurrentPropsFromNode(stateNode);
        if (!props) // Work in progress.
        return null;
        listener = props[registrationName];
        if (shouldPreventMouseEvent(registrationName, inst.type, props)) return null;
        if (!(!listener || typeof listener === 'function')) throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
        return listener;
    }
    /**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */ function listenerAtPhase(inst, event, propagationPhase) {
        var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
        return getListener(inst, registrationName);
    }
    /**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing even a
 * single one.
 */ /**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */ function accumulateDirectionalDispatches(inst, phase, event) {
        if (!inst) error('Dispatching inst must not be null');
        var listener = listenerAtPhase(inst, event, phase);
        if (listener) {
            event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
            event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
        }
    }
    /**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We cannot perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */ function accumulateTwoPhaseDispatchesSingle(event) {
        if (event && event.dispatchConfig.phasedRegistrationNames) traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
    }
    /**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */ function accumulateDispatches(inst, ignoredDirection, event) {
        if (inst && event && event.dispatchConfig.registrationName) {
            var registrationName = event.dispatchConfig.registrationName;
            var listener = getListener(inst, registrationName);
            if (listener) {
                event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
                event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
            }
        }
    }
    /**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */ function accumulateDirectDispatchesSingle(event) {
        if (event && event.dispatchConfig.registrationName) accumulateDispatches(event._targetInst, null, event);
    }
    function accumulateTwoPhaseDispatches(events) {
        forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
    }
    function accumulateEnterLeaveDispatches(leave, enter, from, to) {
        traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
    }
    function accumulateDirectDispatches(events) {
        forEachAccumulated(events, accumulateDirectDispatchesSingle);
    }
    /**
 * These variables store information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 *
 */ var root = null;
    var startText = null;
    var fallbackText = null;
    function initialize(nativeEventTarget) {
        root = nativeEventTarget;
        startText = getText();
        return true;
    }
    function reset() {
        root = null;
        startText = null;
        fallbackText = null;
    }
    function getData() {
        if (fallbackText) return fallbackText;
        var start;
        var startValue = startText;
        var startLength = startValue.length;
        var end;
        var endValue = getText();
        var endLength = endValue.length;
        for(start = 0; start < startLength; start++){
            if (startValue[start] !== endValue[start]) break;
        }
        var minEnd = startLength - start;
        for(end = 1; end <= minEnd; end++){
            if (startValue[startLength - end] !== endValue[endLength - end]) break;
        }
        var sliceTail = end > 1 ? 1 - end : undefined;
        fallbackText = endValue.slice(start, sliceTail);
        return fallbackText;
    }
    function getText() {
        if ('value' in root) return root.value;
        return root.textContent;
    }
    var EVENT_POOL_SIZE = 10;
    /**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var EventInterface = {
        type: null,
        target: null,
        // currentTarget is set when dispatching; no use in copying it here
        currentTarget: function() {
            return null;
        },
        eventPhase: null,
        bubbles: null,
        cancelable: null,
        timeStamp: function(event) {
            return event.timeStamp || Date.now();
        },
        defaultPrevented: null,
        isTrusted: null
    };
    function functionThatReturnsTrue() {
        return true;
    }
    function functionThatReturnsFalse() {
        return false;
    }
    /**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {*} targetInst Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @param {DOMEventTarget} nativeEventTarget Target node.
 */ function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
        // these have a getter/setter for warnings
        delete this.nativeEvent;
        delete this.preventDefault;
        delete this.stopPropagation;
        delete this.isDefaultPrevented;
        delete this.isPropagationStopped;
        this.dispatchConfig = dispatchConfig;
        this._targetInst = targetInst;
        this.nativeEvent = nativeEvent;
        var Interface = this.constructor.Interface;
        for(var propName in Interface){
            if (!Interface.hasOwnProperty(propName)) continue;
            delete this[propName]; // this has a getter/setter for warnings
            var normalize = Interface[propName];
            if (normalize) this[propName] = normalize(nativeEvent);
            else if (propName === 'target') this.target = nativeEventTarget;
            else this[propName] = nativeEvent[propName];
        }
        var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
        if (defaultPrevented) this.isDefaultPrevented = functionThatReturnsTrue;
        else this.isDefaultPrevented = functionThatReturnsFalse;
        this.isPropagationStopped = functionThatReturnsFalse;
        return this;
    }
    _assign(SyntheticEvent.prototype, {
        preventDefault: function() {
            this.defaultPrevented = true;
            var event = this.nativeEvent;
            if (!event) return;
            if (event.preventDefault) event.preventDefault();
            else if (typeof event.returnValue !== 'unknown') event.returnValue = false;
            this.isDefaultPrevented = functionThatReturnsTrue;
        },
        stopPropagation: function() {
            var event = this.nativeEvent;
            if (!event) return;
            if (event.stopPropagation) event.stopPropagation();
            else if (typeof event.cancelBubble !== 'unknown') // The ChangeEventPlugin registers a "propertychange" event for
            // IE. This event does not support bubbling or cancelling, and
            // any references to cancelBubble throw "Member not found".  A
            // typeof check of "unknown" circumvents this issue (and is also
            // IE specific).
            event.cancelBubble = true;
            this.isPropagationStopped = functionThatReturnsTrue;
        },
        /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */ persist: function() {
            this.isPersistent = functionThatReturnsTrue;
        },
        /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */ isPersistent: functionThatReturnsFalse,
        /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */ destructor: function() {
            var Interface = this.constructor.Interface;
            for(var propName in Interface)Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
            this.dispatchConfig = null;
            this._targetInst = null;
            this.nativeEvent = null;
            this.isDefaultPrevented = functionThatReturnsFalse;
            this.isPropagationStopped = functionThatReturnsFalse;
            this._dispatchListeners = null;
            this._dispatchInstances = null;
            Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
            Object.defineProperty(this, 'isDefaultPrevented', getPooledWarningPropertyDefinition('isDefaultPrevented', functionThatReturnsFalse));
            Object.defineProperty(this, 'isPropagationStopped', getPooledWarningPropertyDefinition('isPropagationStopped', functionThatReturnsFalse));
            Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', function() {
            }));
            Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', function() {
            }));
        }
    });
    SyntheticEvent.Interface = EventInterface;
    /**
 * Helper to reduce boilerplate when creating subclasses.
 */ SyntheticEvent.extend = function(Interface) {
        var Super = this;
        var E = function() {
        };
        E.prototype = Super.prototype;
        var prototype = new E();
        function Class() {
            return Super.apply(this, arguments);
        }
        _assign(prototype, Class.prototype);
        Class.prototype = prototype;
        Class.prototype.constructor = Class;
        Class.Interface = _assign({
        }, Super.Interface, Interface);
        Class.extend = Super.extend;
        addEventPoolingTo(Class);
        return Class;
    };
    addEventPoolingTo(SyntheticEvent);
    /**
 * Helper to nullify syntheticEvent instance properties when destructing
 *
 * @param {String} propName
 * @param {?object} getVal
 * @return {object} defineProperty object
 */ function getPooledWarningPropertyDefinition(propName, getVal) {
        var isFunction = typeof getVal === 'function';
        function set1(val) {
            var action = isFunction ? 'setting the method' : 'setting the property';
            warn2(action, 'This is effectively a no-op');
            return val;
        }
        function get1() {
            var action = isFunction ? 'accessing the method' : 'accessing the property';
            var result = isFunction ? 'This is a no-op function' : 'This is set to null';
            warn2(action, result);
            return getVal;
        }
        function warn2(action, result) {
            error("This synthetic event is reused for performance reasons. If you're seeing this, you're %s `%s` on a released/nullified synthetic event. %s. If you must keep the original synthetic event around, use event.persist(). See https://fb.me/react-event-pooling for more information.", action, propName, result);
        }
        return {
            configurable: true,
            set: set1,
            get: get1
        };
    }
    function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
        var EventConstructor = this;
        if (EventConstructor.eventPool.length) {
            var instance = EventConstructor.eventPool.pop();
            EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
            return instance;
        }
        return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);
    }
    function releasePooledEvent(event) {
        var EventConstructor = this;
        if (!(event instanceof EventConstructor)) throw Error("Trying to release an event instance into a pool of a different type.");
        event.destructor();
        if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) EventConstructor.eventPool.push(event);
    }
    function addEventPoolingTo(EventConstructor) {
        EventConstructor.eventPool = [];
        EventConstructor.getPooled = getPooledEvent;
        EventConstructor.release = releasePooledEvent;
    }
    /**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */ var SyntheticCompositionEvent = SyntheticEvent.extend({
        data: null
    });
    /**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */ var SyntheticInputEvent = SyntheticEvent.extend({
        data: null
    });
    var END_KEYCODES = [
        9,
        13,
        27,
        32
    ]; // Tab, Return, Esc, Space
    var START_KEYCODE = 229;
    var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;
    var documentMode = null;
    if (canUseDOM && 'documentMode' in document) documentMode = document.documentMode;
     // Webkit offers a very useful `textInput` event that can be used to
    // directly represent `beforeInput`. The IE `textinput` event is not as
    // useful, so we don't use it.
    var canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode; // In IE9+, we have access to composition events, but the data supplied
    // by the native compositionend event may be incorrect. Japanese ideographic
    // spaces, for instance (\u3000) are not recorded correctly.
    var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
    var SPACEBAR_CODE = 32;
    var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE); // Events and their corresponding property names.
    var eventTypes = {
        beforeInput: {
            phasedRegistrationNames: {
                bubbled: 'onBeforeInput',
                captured: 'onBeforeInputCapture'
            },
            dependencies: [
                TOP_COMPOSITION_END,
                TOP_KEY_PRESS,
                TOP_TEXT_INPUT,
                TOP_PASTE
            ]
        },
        compositionEnd: {
            phasedRegistrationNames: {
                bubbled: 'onCompositionEnd',
                captured: 'onCompositionEndCapture'
            },
            dependencies: [
                TOP_BLUR,
                TOP_COMPOSITION_END,
                TOP_KEY_DOWN,
                TOP_KEY_PRESS,
                TOP_KEY_UP,
                TOP_MOUSE_DOWN
            ]
        },
        compositionStart: {
            phasedRegistrationNames: {
                bubbled: 'onCompositionStart',
                captured: 'onCompositionStartCapture'
            },
            dependencies: [
                TOP_BLUR,
                TOP_COMPOSITION_START,
                TOP_KEY_DOWN,
                TOP_KEY_PRESS,
                TOP_KEY_UP,
                TOP_MOUSE_DOWN
            ]
        },
        compositionUpdate: {
            phasedRegistrationNames: {
                bubbled: 'onCompositionUpdate',
                captured: 'onCompositionUpdateCapture'
            },
            dependencies: [
                TOP_BLUR,
                TOP_COMPOSITION_UPDATE,
                TOP_KEY_DOWN,
                TOP_KEY_PRESS,
                TOP_KEY_UP,
                TOP_MOUSE_DOWN
            ]
        }
    }; // Track whether we've ever handled a keypress on the space key.
    var hasSpaceKeypress = false;
    /**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */ function isKeypressCommand(nativeEvent) {
        return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
    }
    /**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */ function getCompositionEventType(topLevelType) {
        switch(topLevelType){
            case TOP_COMPOSITION_START:
                return eventTypes.compositionStart;
            case TOP_COMPOSITION_END:
                return eventTypes.compositionEnd;
            case TOP_COMPOSITION_UPDATE:
                return eventTypes.compositionUpdate;
        }
    }
    /**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */ function isFallbackCompositionStart(topLevelType, nativeEvent) {
        return topLevelType === TOP_KEY_DOWN && nativeEvent.keyCode === START_KEYCODE;
    }
    /**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */ function isFallbackCompositionEnd(topLevelType, nativeEvent) {
        switch(topLevelType){
            case TOP_KEY_UP:
                // Command keys insert or clear IME input.
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
            case TOP_KEY_DOWN:
                // Expect IME keyCode on each keydown. If we get any other
                // code we must have exited earlier.
                return nativeEvent.keyCode !== START_KEYCODE;
            case TOP_KEY_PRESS:
            case TOP_MOUSE_DOWN:
            case TOP_BLUR:
                // Events are not possible without cancelling IME.
                return true;
            default:
                return false;
        }
    }
    /**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */ function getDataFromCustomEvent(nativeEvent) {
        var detail = nativeEvent.detail;
        if (typeof detail === 'object' && 'data' in detail) return detail.data;
        return null;
    }
    /**
 * Check if a composition event was triggered by Korean IME.
 * Our fallback mode does not work well with IE's Korean IME,
 * so just use native composition events when Korean IME is used.
 * Although CompositionEvent.locale property is deprecated,
 * it is available in IE, where our fallback mode is enabled.
 *
 * @param {object} nativeEvent
 * @return {boolean}
 */ function isUsingKoreanIME(nativeEvent) {
        return nativeEvent.locale === 'ko';
    } // Track the current IME composition status, if any.
    var isComposing = false;
    /**
 * @return {?object} A SyntheticCompositionEvent.
 */ function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var eventType;
        var fallbackData;
        if (canUseCompositionEvent) eventType = getCompositionEventType(topLevelType);
        else if (!isComposing) {
            if (isFallbackCompositionStart(topLevelType, nativeEvent)) eventType = eventTypes.compositionStart;
        } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) eventType = eventTypes.compositionEnd;
        if (!eventType) return null;
        if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
            // The current composition is stored statically and must not be
            // overwritten while composition continues.
            if (!isComposing && eventType === eventTypes.compositionStart) isComposing = initialize(nativeEventTarget);
            else if (eventType === eventTypes.compositionEnd) {
                if (isComposing) fallbackData = getData();
            }
        }
        var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);
        if (fallbackData) // Inject data generated from fallback path into the synthetic event.
        // This matches the property of native CompositionEventInterface.
        event.data = fallbackData;
        else {
            var customData = getDataFromCustomEvent(nativeEvent);
            if (customData !== null) event.data = customData;
        }
        accumulateTwoPhaseDispatches(event);
        return event;
    }
    /**
 * @param {TopLevelType} topLevelType Number from `TopLevelType`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The string corresponding to this `beforeInput` event.
 */ function getNativeBeforeInputChars(topLevelType, nativeEvent) {
        switch(topLevelType){
            case TOP_COMPOSITION_END:
                return getDataFromCustomEvent(nativeEvent);
            case TOP_KEY_PRESS:
                /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */ var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) return null;
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
            case TOP_TEXT_INPUT:
                // Record the characters to be added to the DOM.
                var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled
                // it at the keypress level and bail immediately. Android Chrome
                // doesn't give us keycodes, so we need to ignore it.
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) return null;
                return chars;
            default:
                // For other native event types, do nothing.
                return null;
        }
    }
    /**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 *
 * @param {number} topLevelType Number from `TopLevelEventTypes`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The fallback string for this `beforeInput` event.
 */ function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
        // If we are currently composing (IME) and using a fallback to do so,
        // try to extract the composed characters from the fallback object.
        // If composition event is available, we extract a string only at
        // compositionevent, otherwise extract it at fallback events.
        if (isComposing) {
            if (topLevelType === TOP_COMPOSITION_END || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
            }
            return null;
        }
        switch(topLevelType){
            case TOP_PASTE:
                // If a paste event occurs after a keypress, throw out the input
                // chars. Paste events should not lead to BeforeInput events.
                return null;
            case TOP_KEY_PRESS:
                /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */ if (!isKeypressCommand(nativeEvent)) {
                    // IE fires the `keypress` event when a user types an emoji via
                    // Touch keyboard of Windows.  In such a case, the `char` property
                    // holds an emoji character like `\uD83D\uDE0A`.  Because its length
                    // is 2, the property `which` does not represent an emoji correctly.
                    // In such a case, we directly return the `char` property instead of
                    // using `which`.
                    if (nativeEvent.char && nativeEvent.char.length > 1) return nativeEvent.char;
                    else if (nativeEvent.which) return String.fromCharCode(nativeEvent.which);
                }
                return null;
            case TOP_COMPOSITION_END:
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
            default:
                return null;
        }
    }
    /**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */ function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var chars;
        if (canUseTextInputEvent) chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
        else chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
         // If no characters are being inserted, no BeforeInput event should
        // be fired.
        if (!chars) return null;
        var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);
        event.data = chars;
        accumulateTwoPhaseDispatches(event);
        return event;
    }
    /**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */ var BeforeInputEventPlugin = {
        eventTypes: eventTypes,
        extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
            var composition = extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);
            var beforeInput = extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);
            if (composition === null) return beforeInput;
            if (beforeInput === null) return composition;
            return [
                composition,
                beforeInput
            ];
        }
    };
    /**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */ var supportedInputTypes = {
        color: true,
        date: true,
        datetime: true,
        'datetime-local': true,
        email: true,
        month: true,
        number: true,
        password: true,
        range: true,
        search: true,
        tel: true,
        text: true,
        time: true,
        url: true,
        week: true
    };
    function isTextInputElement(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        if (nodeName === 'input') return !!supportedInputTypes[elem.type];
        if (nodeName === 'textarea') return true;
        return false;
    }
    var eventTypes$1 = {
        change: {
            phasedRegistrationNames: {
                bubbled: 'onChange',
                captured: 'onChangeCapture'
            },
            dependencies: [
                TOP_BLUR,
                TOP_CHANGE,
                TOP_CLICK,
                TOP_FOCUS,
                TOP_INPUT,
                TOP_KEY_DOWN,
                TOP_KEY_UP,
                TOP_SELECTION_CHANGE
            ]
        }
    };
    function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
        var event = SyntheticEvent.getPooled(eventTypes$1.change, inst, nativeEvent, target);
        event.type = 'change'; // Flag this event loop as needing state restore.
        enqueueStateRestore(target);
        accumulateTwoPhaseDispatches(event);
        return event;
    }
    /**
 * For IE shims
 */ var activeElement = null;
    var activeElementInst = null;
    /**
 * SECTION: handle `change` event
 */ function shouldUseChangeEvent(elem) {
        var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
    }
    function manualDispatchChangeEvent(nativeEvent) {
        var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget(nativeEvent)); // If change and propertychange bubbled, we'd just bind to it like all the
        // other events and have it go through ReactBrowserEventEmitter. Since it
        // doesn't, we manually listen for the events and so we have to enqueue and
        // process the abstract event manually.
        //
        // Batching is necessary here in order to ensure that all event handlers run
        // before the next rerender (including event handlers attached to ancestor
        // elements instead of directly on the input). Without this, controlled
        // components don't work properly in conjunction with event bubbling because
        // the component is rerendered and the value reverted before all the event
        // handlers can run. See https://github.com/facebook/react/issues/708.
        batchedUpdates(runEventInBatch, event);
    }
    function runEventInBatch(event) {
        runEventsInBatch(event);
    }
    function getInstIfValueChanged(targetInst) {
        var targetNode = getNodeFromInstance$1(targetInst);
        if (updateValueIfChanged(targetNode)) return targetInst;
    }
    function getTargetInstForChangeEvent(topLevelType, targetInst) {
        if (topLevelType === TOP_CHANGE) return targetInst;
    }
    /**
 * SECTION: handle `input` event
 */ var isInputEventSupported = false;
    if (canUseDOM) // IE9 claims to support the input event but fails to trigger it when
    // deleting text, so we ignore its input events.
    isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
    /**
 * (For IE <=9) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */ function startWatchingForValueChange(target, targetInst) {
        activeElement = target;
        activeElementInst = targetInst;
        activeElement.attachEvent('onpropertychange', handlePropertyChange);
    }
    /**
 * (For IE <=9) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */ function stopWatchingForValueChange() {
        if (!activeElement) return;
        activeElement.detachEvent('onpropertychange', handlePropertyChange);
        activeElement = null;
        activeElementInst = null;
    }
    /**
 * (For IE <=9) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */ function handlePropertyChange(nativeEvent) {
        if (nativeEvent.propertyName !== 'value') return;
        if (getInstIfValueChanged(activeElementInst)) manualDispatchChangeEvent(nativeEvent);
    }
    function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
        if (topLevelType === TOP_FOCUS) {
            // In IE9, propertychange fires for most input events but is buggy and
            // doesn't fire when text is deleted, but conveniently, selectionchange
            // appears to fire in all of the remaining cases so we catch those and
            // forward the event if the value has changed
            // In either case, we don't want to call the event handler if the value
            // is changed from JS so we redefine a setter for `.value` that updates
            // our activeElementValue variable, allowing us to ignore those changes
            //
            // stopWatching() should be a noop here but we call it just in case we
            // missed a blur event somehow.
            stopWatchingForValueChange();
            startWatchingForValueChange(target, targetInst);
        } else if (topLevelType === TOP_BLUR) stopWatchingForValueChange();
    } // For IE8 and IE9.
    function getTargetInstForInputEventPolyfill(topLevelType, targetInst) {
        if (topLevelType === TOP_SELECTION_CHANGE || topLevelType === TOP_KEY_UP || topLevelType === TOP_KEY_DOWN) // On the selectionchange event, the target is just document which isn't
        // helpful for us so just check activeElement instead.
        //
        // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
        // propertychange on the first input event after setting `value` from a
        // script and fires only keydown, keypress, keyup. Catching keyup usually
        // gets it and catching keydown lets us fire an event for the first
        // keystroke if user does a key repeat (it'll be a little delayed: right
        // before the second keystroke). Other input methods (e.g., paste) seem to
        // fire selectionchange normally.
        return getInstIfValueChanged(activeElementInst);
    }
    /**
 * SECTION: handle `click` event
 */ function shouldUseClickEvent(elem) {
        // Use the `click` event to detect changes to checkbox and radio inputs.
        // This approach works across all browsers, whereas `change` does not fire
        // until `blur` in IE8.
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
    }
    function getTargetInstForClickEvent(topLevelType, targetInst) {
        if (topLevelType === TOP_CLICK) return getInstIfValueChanged(targetInst);
    }
    function getTargetInstForInputOrChangeEvent(topLevelType, targetInst) {
        if (topLevelType === TOP_INPUT || topLevelType === TOP_CHANGE) return getInstIfValueChanged(targetInst);
    }
    function handleControlledInputBlur(node) {
        var state = node._wrapperState;
        if (!state || !state.controlled || node.type !== 'number') return;
        // If controlled, assign the value attribute to the current value on blur
        setDefaultValue(node, 'number', node.value);
    }
    /**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */ var ChangeEventPlugin = {
        eventTypes: eventTypes$1,
        _isInputEventSupported: isInputEventSupported,
        extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
            var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) getTargetInstFunc = getTargetInstForChangeEvent;
            else if (isTextInputElement(targetNode)) {
                if (isInputEventSupported) getTargetInstFunc = getTargetInstForInputOrChangeEvent;
                else {
                    getTargetInstFunc = getTargetInstForInputEventPolyfill;
                    handleEventFunc = handleEventsForInputEventPolyfill;
                }
            } else if (shouldUseClickEvent(targetNode)) getTargetInstFunc = getTargetInstForClickEvent;
            if (getTargetInstFunc) {
                var inst = getTargetInstFunc(topLevelType, targetInst);
                if (inst) {
                    var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
                    return event;
                }
            }
            if (handleEventFunc) handleEventFunc(topLevelType, targetNode, targetInst);
             // When blurring, set the value attribute for number inputs
            if (topLevelType === TOP_BLUR) handleControlledInputBlur(targetNode);
        }
    };
    var SyntheticUIEvent = SyntheticEvent.extend({
        view: null,
        detail: null
    });
    /**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */ var modifierKeyToProp = {
        Alt: 'altKey',
        Control: 'ctrlKey',
        Meta: 'metaKey',
        Shift: 'shiftKey'
    }; // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
    // getModifierState. If getModifierState is not supported, we map it to a set of
    // modifier keys exposed by the event. In this case, Lock-keys are not supported.
    function modifierStateGetter(keyArg) {
        var syntheticEvent = this;
        var nativeEvent = syntheticEvent.nativeEvent;
        if (nativeEvent.getModifierState) return nativeEvent.getModifierState(keyArg);
        var keyProp = modifierKeyToProp[keyArg];
        return keyProp ? !!nativeEvent[keyProp] : false;
    }
    function getEventModifierState(nativeEvent) {
        return modifierStateGetter;
    }
    var previousScreenX = 0;
    var previousScreenY = 0; // Use flags to signal movementX/Y has already been set
    var isMovementXSet = false;
    var isMovementYSet = false;
    /**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var SyntheticMouseEvent = SyntheticUIEvent.extend({
        screenX: null,
        screenY: null,
        clientX: null,
        clientY: null,
        pageX: null,
        pageY: null,
        ctrlKey: null,
        shiftKey: null,
        altKey: null,
        metaKey: null,
        getModifierState: getEventModifierState,
        button: null,
        buttons: null,
        relatedTarget: function(event) {
            return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
        },
        movementX: function(event) {
            if ('movementX' in event) return event.movementX;
            var screenX = previousScreenX;
            previousScreenX = event.screenX;
            if (!isMovementXSet) {
                isMovementXSet = true;
                return 0;
            }
            return event.type === 'mousemove' ? event.screenX - screenX : 0;
        },
        movementY: function(event) {
            if ('movementY' in event) return event.movementY;
            var screenY = previousScreenY;
            previousScreenY = event.screenY;
            if (!isMovementYSet) {
                isMovementYSet = true;
                return 0;
            }
            return event.type === 'mousemove' ? event.screenY - screenY : 0;
        }
    });
    /**
 * @interface PointerEvent
 * @see http://www.w3.org/TR/pointerevents/
 */ var SyntheticPointerEvent = SyntheticMouseEvent.extend({
        pointerId: null,
        width: null,
        height: null,
        pressure: null,
        tangentialPressure: null,
        tiltX: null,
        tiltY: null,
        twist: null,
        pointerType: null,
        isPrimary: null
    });
    var eventTypes$2 = {
        mouseEnter: {
            registrationName: 'onMouseEnter',
            dependencies: [
                TOP_MOUSE_OUT,
                TOP_MOUSE_OVER
            ]
        },
        mouseLeave: {
            registrationName: 'onMouseLeave',
            dependencies: [
                TOP_MOUSE_OUT,
                TOP_MOUSE_OVER
            ]
        },
        pointerEnter: {
            registrationName: 'onPointerEnter',
            dependencies: [
                TOP_POINTER_OUT,
                TOP_POINTER_OVER
            ]
        },
        pointerLeave: {
            registrationName: 'onPointerLeave',
            dependencies: [
                TOP_POINTER_OUT,
                TOP_POINTER_OVER
            ]
        }
    };
    var EnterLeaveEventPlugin = {
        eventTypes: eventTypes$2,
        /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   */ extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
            var isOverEvent = topLevelType === TOP_MOUSE_OVER || topLevelType === TOP_POINTER_OVER;
            var isOutEvent = topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_POINTER_OUT;
            if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0 && (nativeEvent.relatedTarget || nativeEvent.fromElement)) // If this is an over event with a target, then we've already dispatched
            // the event in the out event of the other target. If this is replayed,
            // then it's because we couldn't dispatch against this target previously
            // so we have to do it now instead.
            return null;
            if (!isOutEvent && !isOverEvent) // Must not be a mouse or pointer in or out - ignoring.
            return null;
            var win;
            if (nativeEventTarget.window === nativeEventTarget) // `nativeEventTarget` is probably a window object.
            win = nativeEventTarget;
            else {
                // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
                var doc = nativeEventTarget.ownerDocument;
                if (doc) win = doc.defaultView || doc.parentWindow;
                else win = window;
            }
            var from;
            var to;
            if (isOutEvent) {
                from = targetInst;
                var related = nativeEvent.relatedTarget || nativeEvent.toElement;
                to = related ? getClosestInstanceFromNode(related) : null;
                if (to !== null) {
                    var nearestMounted = getNearestMountedFiber(to);
                    if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) to = null;
                }
            } else {
                // Moving to a node from outside the window.
                from = null;
                to = targetInst;
            }
            if (from === to) // Nothing pertains to our managed components.
            return null;
            var eventInterface, leaveEventType, enterEventType, eventTypePrefix;
            if (topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_MOUSE_OVER) {
                eventInterface = SyntheticMouseEvent;
                leaveEventType = eventTypes$2.mouseLeave;
                enterEventType = eventTypes$2.mouseEnter;
                eventTypePrefix = 'mouse';
            } else if (topLevelType === TOP_POINTER_OUT || topLevelType === TOP_POINTER_OVER) {
                eventInterface = SyntheticPointerEvent;
                leaveEventType = eventTypes$2.pointerLeave;
                enterEventType = eventTypes$2.pointerEnter;
                eventTypePrefix = 'pointer';
            }
            var fromNode = from == null ? win : getNodeFromInstance$1(from);
            var toNode = to == null ? win : getNodeFromInstance$1(to);
            var leave = eventInterface.getPooled(leaveEventType, from, nativeEvent, nativeEventTarget);
            leave.type = eventTypePrefix + 'leave';
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = eventInterface.getPooled(enterEventType, to, nativeEvent, nativeEventTarget);
            enter.type = eventTypePrefix + 'enter';
            enter.target = toNode;
            enter.relatedTarget = fromNode;
            accumulateEnterLeaveDispatches(leave, enter, from, to); // If we are not processing the first ancestor, then we
            // should not process the same nativeEvent again, as we
            // will have already processed it in the first ancestor.
            if ((eventSystemFlags & IS_FIRST_ANCESTOR) === 0) return [
                leave
            ];
            return [
                leave,
                enter
            ];
        }
    };
    /**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */ function is(x, y) {
        return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
    }
    var objectIs = typeof Object.is === 'function' ? Object.is : is;
    var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
    /**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */ function shallowEqual(objA, objB) {
        if (objectIs(objA, objB)) return true;
        if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) return false;
        var keysA = Object.keys(objA);
        var keysB = Object.keys(objB);
        if (keysA.length !== keysB.length) return false;
         // Test for A's keys different from B.
        for(var i = 0; i < keysA.length; i++){
            if (!hasOwnProperty$2.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]])) return false;
        }
        return true;
    }
    var skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;
    var eventTypes$3 = {
        select: {
            phasedRegistrationNames: {
                bubbled: 'onSelect',
                captured: 'onSelectCapture'
            },
            dependencies: [
                TOP_BLUR,
                TOP_CONTEXT_MENU,
                TOP_DRAG_END,
                TOP_FOCUS,
                TOP_KEY_DOWN,
                TOP_KEY_UP,
                TOP_MOUSE_DOWN,
                TOP_MOUSE_UP,
                TOP_SELECTION_CHANGE
            ]
        }
    };
    var activeElement$1 = null;
    var activeElementInst$1 = null;
    var lastSelection = null;
    var mouseDown = false;
    /**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @return {object}
 */ function getSelection$1(node) {
        if ('selectionStart' in node && hasSelectionCapabilities(node)) return {
            start: node.selectionStart,
            end: node.selectionEnd
        };
        else {
            var win = node.ownerDocument && node.ownerDocument.defaultView || window;
            var selection = win.getSelection();
            return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
            };
        }
    }
    /**
 * Get document associated with the event target.
 *
 * @param {object} nativeEventTarget
 * @return {Document}
 */ function getEventTargetDocument(eventTarget) {
        return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
    }
    /**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @param {object} nativeEventTarget
 * @return {?SyntheticEvent}
 */ function constructSelectEvent(nativeEvent, nativeEventTarget) {
        // Ensure we have the right element, and that the user is not dragging a
        // selection (this matches native `select` event behavior). In HTML5, select
        // fires only on input and textarea thus if there's no focused element we
        // won't dispatch.
        var doc = getEventTargetDocument(nativeEventTarget);
        if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) return null;
         // Only fire when selection has actually changed.
        var currentSelection = getSelection$1(activeElement$1);
        if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
            lastSelection = currentSelection;
            var syntheticEvent = SyntheticEvent.getPooled(eventTypes$3.select, activeElementInst$1, nativeEvent, nativeEventTarget);
            syntheticEvent.type = 'select';
            syntheticEvent.target = activeElement$1;
            accumulateTwoPhaseDispatches(syntheticEvent);
            return syntheticEvent;
        }
        return null;
    }
    /**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */ var SelectEventPlugin = {
        eventTypes: eventTypes$3,
        extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, container) {
            var containerOrDoc = container || getEventTargetDocument(nativeEventTarget); // Track whether all listeners exists for this plugin. If none exist, we do
            // not extract events. See #3639.
            if (!containerOrDoc || !isListeningToAllDependencies('onSelect', containerOrDoc)) return null;
            var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;
            switch(topLevelType){
                // Track the input node that has focus.
                case TOP_FOCUS:
                    if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
                        activeElement$1 = targetNode;
                        activeElementInst$1 = targetInst;
                        lastSelection = null;
                    }
                    break;
                case TOP_BLUR:
                    activeElement$1 = null;
                    activeElementInst$1 = null;
                    lastSelection = null;
                    break;
                // Don't fire the event while the user is dragging. This matches the
                // semantics of the native select event.
                case TOP_MOUSE_DOWN:
                    mouseDown = true;
                    break;
                case TOP_CONTEXT_MENU:
                case TOP_MOUSE_UP:
                case TOP_DRAG_END:
                    mouseDown = false;
                    return constructSelectEvent(nativeEvent, nativeEventTarget);
                // Chrome and IE fire non-standard event when selection is changed (and
                // sometimes when it hasn't). IE's event fires out of order with respect
                // to key and input events on deletion, so we discard it.
                //
                // Firefox doesn't support selectionchange, so check selection status
                // after each key entry. The selection changes after keydown and before
                // keyup, but we check on keydown as well in the case of holding down a
                // key, when multiple keydown events are fired but only one keyup is.
                // This is also our approach for IE handling, for the reason above.
                case TOP_SELECTION_CHANGE:
                    if (skipSelectionChangeEvent) break;
                // falls through
                case TOP_KEY_DOWN:
                case TOP_KEY_UP:
                    return constructSelectEvent(nativeEvent, nativeEventTarget);
            }
            return null;
        }
    };
    /**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */ var SyntheticAnimationEvent = SyntheticEvent.extend({
        animationName: null,
        elapsedTime: null,
        pseudoElement: null
    });
    /**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */ var SyntheticClipboardEvent = SyntheticEvent.extend({
        clipboardData: function(event) {
            return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
        }
    });
    /**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var SyntheticFocusEvent = SyntheticUIEvent.extend({
        relatedTarget: null
    });
    /**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */ function getEventCharCode(nativeEvent) {
        var charCode;
        var keyCode = nativeEvent.keyCode;
        if ('charCode' in nativeEvent) {
            charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.
            if (charCode === 0 && keyCode === 13) charCode = 13;
        } else // IE8 does not implement `charCode`, but `keyCode` has the correct value.
        charCode = keyCode;
         // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
        // report Enter as charCode 10 when ctrl is pressed.
        if (charCode === 10) charCode = 13;
         // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
        // Must not discard the (non-)printable Enter-key.
        if (charCode >= 32 || charCode === 13) return charCode;
        return 0;
    }
    /**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */ var normalizeKey = {
        Esc: 'Escape',
        Spacebar: ' ',
        Left: 'ArrowLeft',
        Up: 'ArrowUp',
        Right: 'ArrowRight',
        Down: 'ArrowDown',
        Del: 'Delete',
        Win: 'OS',
        Menu: 'ContextMenu',
        Apps: 'ContextMenu',
        Scroll: 'ScrollLock',
        MozPrintableKey: 'Unidentified'
    };
    /**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */ var translateToKey = {
        '8': 'Backspace',
        '9': 'Tab',
        '12': 'Clear',
        '13': 'Enter',
        '16': 'Shift',
        '17': 'Control',
        '18': 'Alt',
        '19': 'Pause',
        '20': 'CapsLock',
        '27': 'Escape',
        '32': ' ',
        '33': 'PageUp',
        '34': 'PageDown',
        '35': 'End',
        '36': 'Home',
        '37': 'ArrowLeft',
        '38': 'ArrowUp',
        '39': 'ArrowRight',
        '40': 'ArrowDown',
        '45': 'Insert',
        '46': 'Delete',
        '112': 'F1',
        '113': 'F2',
        '114': 'F3',
        '115': 'F4',
        '116': 'F5',
        '117': 'F6',
        '118': 'F7',
        '119': 'F8',
        '120': 'F9',
        '121': 'F10',
        '122': 'F11',
        '123': 'F12',
        '144': 'NumLock',
        '145': 'ScrollLock',
        '224': 'Meta'
    };
    /**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */ function getEventKey(nativeEvent) {
        if (nativeEvent.key) {
            // Normalize inconsistent values reported by browsers due to
            // implementations of a working draft specification.
            // FireFox implements `key` but returns `MozPrintableKey` for all
            // printable characters (normalized to `Unidentified`), ignore it.
            var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
            if (key !== 'Unidentified') return key;
        } // Browser does not implement `key`, polyfill as much of it as we can.
        if (nativeEvent.type === 'keypress') {
            var charCode = getEventCharCode(nativeEvent); // The enter-key is technically both printable and non-printable and can
            // thus be captured by `keypress`, no other non-printable key should.
            return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
        }
        if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') // While user keyboard layout determines the actual meaning of each
        // `keyCode` value, almost all function keys have a universal value.
        return translateToKey[nativeEvent.keyCode] || 'Unidentified';
        return '';
    }
    /**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var SyntheticKeyboardEvent = SyntheticUIEvent.extend({
        key: getEventKey,
        location: null,
        ctrlKey: null,
        shiftKey: null,
        altKey: null,
        metaKey: null,
        repeat: null,
        locale: null,
        getModifierState: getEventModifierState,
        // Legacy Interface
        charCode: function(event) {
            // `charCode` is the result of a KeyPress event and represents the value of
            // the actual printable character.
            // KeyPress is deprecated, but its replacement is not yet final and not
            // implemented in any major browser. Only KeyPress has charCode.
            if (event.type === 'keypress') return getEventCharCode(event);
            return 0;
        },
        keyCode: function(event) {
            // `keyCode` is the result of a KeyDown/Up event and represents the value of
            // physical keyboard key.
            // The actual meaning of the value depends on the users' keyboard layout
            // which cannot be detected. Assuming that it is a US keyboard layout
            // provides a surprisingly accurate mapping for US and European users.
            // Due to this, it is left to the user to implement at this time.
            if (event.type === 'keydown' || event.type === 'keyup') return event.keyCode;
            return 0;
        },
        which: function(event) {
            // `which` is an alias for either `keyCode` or `charCode` depending on the
            // type of the event.
            if (event.type === 'keypress') return getEventCharCode(event);
            if (event.type === 'keydown' || event.type === 'keyup') return event.keyCode;
            return 0;
        }
    });
    /**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var SyntheticDragEvent = SyntheticMouseEvent.extend({
        dataTransfer: null
    });
    /**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */ var SyntheticTouchEvent = SyntheticUIEvent.extend({
        touches: null,
        targetTouches: null,
        changedTouches: null,
        altKey: null,
        metaKey: null,
        ctrlKey: null,
        shiftKey: null,
        getModifierState: getEventModifierState
    });
    /**
 * @interface Event
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
 */ var SyntheticTransitionEvent = SyntheticEvent.extend({
        propertyName: null,
        elapsedTime: null,
        pseudoElement: null
    });
    /**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var SyntheticWheelEvent = SyntheticMouseEvent.extend({
        deltaX: function(event) {
            return 'deltaX' in event ? event.deltaX : 'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
        },
        deltaY: function(event) {
            return 'deltaY' in event ? event.deltaY : 'wheelDeltaY' in event ? -event.wheelDeltaY : 'wheelDelta' in event ? -event.wheelDelta : 0;
        },
        deltaZ: null,
        // Browsers without "deltaMode" is reporting in raw wheel delta where one
        // notch on the scroll is always +/- 120, roughly equivalent to pixels.
        // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
        // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
        deltaMode: null
    });
    var knownHTMLTopLevelTypes = [
        TOP_ABORT,
        TOP_CANCEL,
        TOP_CAN_PLAY,
        TOP_CAN_PLAY_THROUGH,
        TOP_CLOSE,
        TOP_DURATION_CHANGE,
        TOP_EMPTIED,
        TOP_ENCRYPTED,
        TOP_ENDED,
        TOP_ERROR,
        TOP_INPUT,
        TOP_INVALID,
        TOP_LOAD,
        TOP_LOADED_DATA,
        TOP_LOADED_METADATA,
        TOP_LOAD_START,
        TOP_PAUSE,
        TOP_PLAY,
        TOP_PLAYING,
        TOP_PROGRESS,
        TOP_RATE_CHANGE,
        TOP_RESET,
        TOP_SEEKED,
        TOP_SEEKING,
        TOP_STALLED,
        TOP_SUBMIT,
        TOP_SUSPEND,
        TOP_TIME_UPDATE,
        TOP_TOGGLE,
        TOP_VOLUME_CHANGE,
        TOP_WAITING
    ];
    var SimpleEventPlugin = {
        // simpleEventPluginEventTypes gets populated from
        // the DOMEventProperties module.
        eventTypes: simpleEventPluginEventTypes,
        extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
            var dispatchConfig = topLevelEventsToDispatchConfig.get(topLevelType);
            if (!dispatchConfig) return null;
            var EventConstructor;
            switch(topLevelType){
                case TOP_KEY_PRESS:
                    // Firefox creates a keypress event for function keys too. This removes
                    // the unwanted keypress events. Enter is however both printable and
                    // non-printable. One would expect Tab to be as well (but it isn't).
                    if (getEventCharCode(nativeEvent) === 0) return null;
                /* falls through */ case TOP_KEY_DOWN:
                case TOP_KEY_UP:
                    EventConstructor = SyntheticKeyboardEvent;
                    break;
                case TOP_BLUR:
                case TOP_FOCUS:
                    EventConstructor = SyntheticFocusEvent;
                    break;
                case TOP_CLICK:
                    // Firefox creates a click event on right mouse clicks. This removes the
                    // unwanted click events.
                    if (nativeEvent.button === 2) return null;
                /* falls through */ case TOP_AUX_CLICK:
                case TOP_DOUBLE_CLICK:
                case TOP_MOUSE_DOWN:
                case TOP_MOUSE_MOVE:
                case TOP_MOUSE_UP:
                /* falls through */ case TOP_MOUSE_OUT:
                case TOP_MOUSE_OVER:
                case TOP_CONTEXT_MENU:
                    EventConstructor = SyntheticMouseEvent;
                    break;
                case TOP_DRAG:
                case TOP_DRAG_END:
                case TOP_DRAG_ENTER:
                case TOP_DRAG_EXIT:
                case TOP_DRAG_LEAVE:
                case TOP_DRAG_OVER:
                case TOP_DRAG_START:
                case TOP_DROP:
                    EventConstructor = SyntheticDragEvent;
                    break;
                case TOP_TOUCH_CANCEL:
                case TOP_TOUCH_END:
                case TOP_TOUCH_MOVE:
                case TOP_TOUCH_START:
                    EventConstructor = SyntheticTouchEvent;
                    break;
                case TOP_ANIMATION_END:
                case TOP_ANIMATION_ITERATION:
                case TOP_ANIMATION_START:
                    EventConstructor = SyntheticAnimationEvent;
                    break;
                case TOP_TRANSITION_END:
                    EventConstructor = SyntheticTransitionEvent;
                    break;
                case TOP_SCROLL:
                    EventConstructor = SyntheticUIEvent;
                    break;
                case TOP_WHEEL:
                    EventConstructor = SyntheticWheelEvent;
                    break;
                case TOP_COPY:
                case TOP_CUT:
                case TOP_PASTE:
                    EventConstructor = SyntheticClipboardEvent;
                    break;
                case TOP_GOT_POINTER_CAPTURE:
                case TOP_LOST_POINTER_CAPTURE:
                case TOP_POINTER_CANCEL:
                case TOP_POINTER_DOWN:
                case TOP_POINTER_MOVE:
                case TOP_POINTER_OUT:
                case TOP_POINTER_OVER:
                case TOP_POINTER_UP:
                    EventConstructor = SyntheticPointerEvent;
                    break;
                default:
                    if (knownHTMLTopLevelTypes.indexOf(topLevelType) === -1) error("SimpleEventPlugin: Unhandled event type, `%s`. This warning is likely caused by a bug in React. Please file an issue.", topLevelType);
                    // @see http://www.w3.org/TR/html5/index.html#events-0
                    EventConstructor = SyntheticEvent;
                    break;
            }
            var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
            accumulateTwoPhaseDispatches(event);
            return event;
        }
    };
    /**
 * Specifies a deterministic ordering of `EventPlugin`s. A convenient way to
 * reason about plugins, without having to package every one of them. This
 * is better than having plugins be ordered in the same order that they
 * are injected because that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */ var DOMEventPluginOrder = [
        'ResponderEventPlugin',
        'SimpleEventPlugin',
        'EnterLeaveEventPlugin',
        'ChangeEventPlugin',
        'SelectEventPlugin',
        'BeforeInputEventPlugin'
    ];
    /**
 * Inject modules for resolving DOM hierarchy and plugin ordering.
 */ injectEventPluginOrder(DOMEventPluginOrder);
    setComponentTree(getFiberCurrentPropsFromNode$1, getInstanceFromNode$1, getNodeFromInstance$1);
    /**
 * Some important event plugins included by default (without having to require
 * them).
 */ injectEventPluginsByName({
        SimpleEventPlugin: SimpleEventPlugin,
        EnterLeaveEventPlugin: EnterLeaveEventPlugin,
        ChangeEventPlugin: ChangeEventPlugin,
        SelectEventPlugin: SelectEventPlugin,
        BeforeInputEventPlugin: BeforeInputEventPlugin
    });
    // Prefix measurements so that it's possible to filter them.
    // Longer prefixes are hard to read in DevTools.
    var reactEmoji = "\u269B";
    var warningEmoji = "\u26D4";
    var supportsUserTiming = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function'; // Keep track of current fiber so that we know the path to unwind on pause.
    // TODO: this looks the same as nextUnitOfWork in scheduler. Can we unify them?
    var currentFiber = null; // If we're in the middle of user code, which fiber and method is it?
    // Reusing `currentFiber` would be confusing for this because user code fiber
    // can change during commit phase too, but we don't need to unwind it (since
    // lifecycles in the commit phase don't resemble a tree).
    var currentPhase = null;
    var currentPhaseFiber = null; // Did lifecycle hook schedule an update? This is often a performance problem,
    // so we will keep track of it, and include it in the report.
    // Track commits caused by cascading updates.
    var isCommitting = false;
    var hasScheduledUpdateInCurrentCommit = false;
    var hasScheduledUpdateInCurrentPhase = false;
    var commitCountInCurrentWorkLoop = 0;
    var effectCountInCurrentCommit = 0;
    // to avoid stretch the commit phase with measurement overhead.
    var labelsInCurrentCommit = new Set();
    var formatMarkName = function(markName) {
        return reactEmoji + " " + markName;
    };
    var formatLabel = function(label, warning) {
        var prefix = warning ? warningEmoji + " " : reactEmoji + " ";
        var suffix = warning ? " Warning: " + warning : '';
        return "" + prefix + label + suffix;
    };
    var beginMark = function(markName) {
        performance.mark(formatMarkName(markName));
    };
    var clearMark = function(markName) {
        performance.clearMarks(formatMarkName(markName));
    };
    var endMark = function(label, markName, warning) {
        var formattedMarkName = formatMarkName(markName);
        var formattedLabel = formatLabel(label, warning);
        try {
            performance.measure(formattedLabel, formattedMarkName);
        } catch (err) {
        } // If previous mark was missing for some reason, this will throw.
        // This could only happen if React crashed in an unexpected place earlier.
        // Don't pile on with more errors.
        // Clear marks immediately to avoid growing buffer.
        performance.clearMarks(formattedMarkName);
        performance.clearMeasures(formattedLabel);
    };
    var getFiberMarkName = function(label, debugID) {
        return label + " (#" + debugID + ")";
    };
    var getFiberLabel = function(componentName, isMounted1, phase) {
        if (phase === null) // These are composite component total time measurements.
        return componentName + " [" + (isMounted1 ? 'update' : 'mount') + "]";
        else // Composite component methods.
        return componentName + "." + phase;
    };
    var beginFiberMark = function(fiber, phase) {
        var componentName = getComponentName(fiber.type) || 'Unknown';
        var debugID = fiber._debugID;
        var isMounted1 = fiber.alternate !== null;
        var label = getFiberLabel(componentName, isMounted1, phase);
        if (isCommitting && labelsInCurrentCommit.has(label)) // During the commit phase, we don't show duplicate labels because
        // there is a fixed overhead for every measurement, and we don't
        // want to stretch the commit phase beyond necessary.
        return false;
        labelsInCurrentCommit.add(label);
        var markName = getFiberMarkName(label, debugID);
        beginMark(markName);
        return true;
    };
    var clearFiberMark = function(fiber, phase) {
        var componentName = getComponentName(fiber.type) || 'Unknown';
        var debugID = fiber._debugID;
        var isMounted1 = fiber.alternate !== null;
        var label = getFiberLabel(componentName, isMounted1, phase);
        var markName = getFiberMarkName(label, debugID);
        clearMark(markName);
    };
    var endFiberMark = function(fiber, phase, warning) {
        var componentName = getComponentName(fiber.type) || 'Unknown';
        var debugID = fiber._debugID;
        var isMounted1 = fiber.alternate !== null;
        var label = getFiberLabel(componentName, isMounted1, phase);
        var markName = getFiberMarkName(label, debugID);
        endMark(label, markName, warning);
    };
    var shouldIgnoreFiber = function(fiber) {
        // Host components should be skipped in the timeline.
        // We could check typeof fiber.type, but does this work with RN?
        switch(fiber.tag){
            case HostRoot:
            case HostComponent:
            case HostText:
            case HostPortal:
            case Fragment:
            case ContextProvider:
            case ContextConsumer:
            case Mode:
                return true;
            default:
                return false;
        }
    };
    var clearPendingPhaseMeasurement = function() {
        if (currentPhase !== null && currentPhaseFiber !== null) clearFiberMark(currentPhaseFiber, currentPhase);
        currentPhaseFiber = null;
        currentPhase = null;
        hasScheduledUpdateInCurrentPhase = false;
    };
    var pauseTimers = function() {
        // Stops all currently active measurements so that they can be resumed
        // if we continue in a later deferred loop from the same unit of work.
        var fiber = currentFiber;
        while(fiber){
            if (fiber._debugIsCurrentlyTiming) endFiberMark(fiber, null, null);
            fiber = fiber.return;
        }
    };
    var resumeTimersRecursively = function(fiber) {
        if (fiber.return !== null) resumeTimersRecursively(fiber.return);
        if (fiber._debugIsCurrentlyTiming) beginFiberMark(fiber, null);
    };
    var resumeTimers = function() {
        // Resumes all measurements that were active during the last deferred loop.
        if (currentFiber !== null) resumeTimersRecursively(currentFiber);
    };
    function recordEffect() {
        effectCountInCurrentCommit++;
    }
    function recordScheduleUpdate() {
        if (isCommitting) hasScheduledUpdateInCurrentCommit = true;
        if (currentPhase !== null && currentPhase !== 'componentWillMount' && currentPhase !== 'componentWillReceiveProps') hasScheduledUpdateInCurrentPhase = true;
    }
    function startWorkTimer(fiber) {
        if (!supportsUserTiming || shouldIgnoreFiber(fiber)) return;
         // If we pause, this is the fiber to unwind from.
        currentFiber = fiber;
        if (!beginFiberMark(fiber, null)) return;
        fiber._debugIsCurrentlyTiming = true;
    }
    function cancelWorkTimer(fiber) {
        if (!supportsUserTiming || shouldIgnoreFiber(fiber)) return;
         // Remember we shouldn't complete measurement for this fiber.
        // Otherwise flamechart will be deep even for small updates.
        fiber._debugIsCurrentlyTiming = false;
        clearFiberMark(fiber, null);
    }
    function stopWorkTimer(fiber) {
        if (!supportsUserTiming || shouldIgnoreFiber(fiber)) return;
         // If we pause, its parent is the fiber to unwind from.
        currentFiber = fiber.return;
        if (!fiber._debugIsCurrentlyTiming) return;
        fiber._debugIsCurrentlyTiming = false;
        endFiberMark(fiber, null, null);
    }
    function stopFailedWorkTimer(fiber) {
        if (!supportsUserTiming || shouldIgnoreFiber(fiber)) return;
         // If we pause, its parent is the fiber to unwind from.
        currentFiber = fiber.return;
        if (!fiber._debugIsCurrentlyTiming) return;
        fiber._debugIsCurrentlyTiming = false;
        var warning = fiber.tag === SuspenseComponent ? 'Rendering was suspended' : 'An error was thrown inside this error boundary';
        endFiberMark(fiber, null, warning);
    }
    function startPhaseTimer(fiber, phase) {
        if (!supportsUserTiming) return;
        clearPendingPhaseMeasurement();
        if (!beginFiberMark(fiber, phase)) return;
        currentPhaseFiber = fiber;
        currentPhase = phase;
    }
    function stopPhaseTimer() {
        if (!supportsUserTiming) return;
        if (currentPhase !== null && currentPhaseFiber !== null) {
            var warning = hasScheduledUpdateInCurrentPhase ? 'Scheduled a cascading update' : null;
            endFiberMark(currentPhaseFiber, currentPhase, warning);
        }
        currentPhase = null;
        currentPhaseFiber = null;
    }
    function startWorkLoopTimer(nextUnitOfWork) {
        currentFiber = nextUnitOfWork;
        if (!supportsUserTiming) return;
        commitCountInCurrentWorkLoop = 0; // This is top level call.
        // Any other measurements are performed within.
        beginMark('(React Tree Reconciliation)'); // Resume any measurements that were in progress during the last loop.
        resumeTimers();
    }
    function stopWorkLoopTimer(interruptedBy, didCompleteRoot) {
        if (!supportsUserTiming) return;
        var warning = null;
        if (interruptedBy !== null) {
            if (interruptedBy.tag === HostRoot) warning = 'A top-level update interrupted the previous render';
            else {
                var componentName = getComponentName(interruptedBy.type) || 'Unknown';
                warning = "An update to " + componentName + " interrupted the previous render";
            }
        } else if (commitCountInCurrentWorkLoop > 1) warning = 'There were cascading updates';
        commitCountInCurrentWorkLoop = 0;
        var label = didCompleteRoot ? '(React Tree Reconciliation: Completed Root)' : '(React Tree Reconciliation: Yielded)'; // Pause any measurements until the next loop.
        pauseTimers();
        endMark(label, '(React Tree Reconciliation)', warning);
    }
    function startCommitTimer() {
        if (!supportsUserTiming) return;
        isCommitting = true;
        hasScheduledUpdateInCurrentCommit = false;
        labelsInCurrentCommit.clear();
        beginMark('(Committing Changes)');
    }
    function stopCommitTimer() {
        if (!supportsUserTiming) return;
        var warning = null;
        if (hasScheduledUpdateInCurrentCommit) warning = 'Lifecycle hook scheduled a cascading update';
        else if (commitCountInCurrentWorkLoop > 0) warning = 'Caused by a cascading update in earlier commit';
        hasScheduledUpdateInCurrentCommit = false;
        commitCountInCurrentWorkLoop++;
        isCommitting = false;
        labelsInCurrentCommit.clear();
        endMark('(Committing Changes)', '(Committing Changes)', warning);
    }
    function startCommitSnapshotEffectsTimer() {
        if (!supportsUserTiming) return;
        effectCountInCurrentCommit = 0;
        beginMark('(Committing Snapshot Effects)');
    }
    function stopCommitSnapshotEffectsTimer() {
        if (!supportsUserTiming) return;
        var count = effectCountInCurrentCommit;
        effectCountInCurrentCommit = 0;
        endMark("(Committing Snapshot Effects: " + count + " Total)", '(Committing Snapshot Effects)', null);
    }
    function startCommitHostEffectsTimer() {
        if (!supportsUserTiming) return;
        effectCountInCurrentCommit = 0;
        beginMark('(Committing Host Effects)');
    }
    function stopCommitHostEffectsTimer() {
        if (!supportsUserTiming) return;
        var count = effectCountInCurrentCommit;
        effectCountInCurrentCommit = 0;
        endMark("(Committing Host Effects: " + count + " Total)", '(Committing Host Effects)', null);
    }
    function startCommitLifeCyclesTimer() {
        if (!supportsUserTiming) return;
        effectCountInCurrentCommit = 0;
        beginMark('(Calling Lifecycle Methods)');
    }
    function stopCommitLifeCyclesTimer() {
        if (!supportsUserTiming) return;
        var count = effectCountInCurrentCommit;
        effectCountInCurrentCommit = 0;
        endMark("(Calling Lifecycle Methods: " + count + " Total)", '(Calling Lifecycle Methods)', null);
    }
    var valueStack = [];
    var fiberStack;
    fiberStack = [];
    var index = -1;
    function createCursor(defaultValue) {
        return {
            current: defaultValue
        };
    }
    function pop(cursor, fiber) {
        if (index < 0) {
            error('Unexpected pop.');
            return;
        }
        if (fiber !== fiberStack[index]) error('Unexpected Fiber popped.');
        cursor.current = valueStack[index];
        valueStack[index] = null;
        fiberStack[index] = null;
        index--;
    }
    function push(cursor, value, fiber) {
        index++;
        valueStack[index] = cursor.current;
        fiberStack[index] = fiber;
        cursor.current = value;
    }
    var warnedAboutMissingGetChildContext;
    warnedAboutMissingGetChildContext = {
    };
    var emptyContextObject = {
    };
    Object.freeze(emptyContextObject);
    var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.
    var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.
    // We use this to get access to the parent context after we have already
    // pushed the next context provider, and now need to merge their contexts.
    var previousContext = emptyContextObject;
    function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
        if (didPushOwnContextIfProvider && isContextProvider(Component)) // If the fiber is a context provider itself, when we read its context
        // we may have already pushed its own child context on the stack. A context
        // provider should not "see" its own child context. Therefore we read the
        // previous (parent) context instead for a context provider.
        return previousContext;
        return contextStackCursor.current;
    }
    function cacheContext(workInProgress, unmaskedContext, maskedContext) {
        var instance = workInProgress.stateNode;
        instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
        instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
    }
    function getMaskedContext(workInProgress, unmaskedContext) {
        var type = workInProgress.type;
        var contextTypes = type.contextTypes;
        if (!contextTypes) return emptyContextObject;
         // Avoid recreating masked context unless unmasked context has changed.
        // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
        // This may trigger infinite loops if componentWillReceiveProps calls setState.
        var instance = workInProgress.stateNode;
        if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) return instance.__reactInternalMemoizedMaskedChildContext;
        var context = {
        };
        for(var key in contextTypes)context[key] = unmaskedContext[key];
        var name = getComponentName(type) || 'Unknown';
        checkPropTypes(contextTypes, context, 'context', name, getCurrentFiberStackInDev);
        // Context is created before the class component is instantiated so check for instance.
        if (instance) cacheContext(workInProgress, unmaskedContext, context);
        return context;
    }
    function hasContextChanged() {
        return didPerformWorkStackCursor.current;
    }
    function isContextProvider(type) {
        var childContextTypes = type.childContextTypes;
        return childContextTypes !== null && childContextTypes !== undefined;
    }
    function popContext(fiber) {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
    }
    function popTopLevelContextObject(fiber) {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
    }
    function pushTopLevelContextObject(fiber, context, didChange) {
        if (!(contextStackCursor.current === emptyContextObject)) throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
        push(contextStackCursor, context, fiber);
        push(didPerformWorkStackCursor, didChange, fiber);
    }
    function processChildContext(fiber, type, parentContext) {
        var instance = fiber.stateNode;
        var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.
        // It has only been added in Fiber to match the (unintentional) behavior in Stack.
        if (typeof instance.getChildContext !== 'function') {
            var componentName = getComponentName(type) || 'Unknown';
            if (!warnedAboutMissingGetChildContext[componentName]) {
                warnedAboutMissingGetChildContext[componentName] = true;
                error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
            }
            return parentContext;
        }
        var childContext;
        startPhaseTimer(fiber, 'getChildContext');
        childContext = instance.getChildContext();
        stopPhaseTimer();
        for(var contextKey in childContext){
            if (!(contextKey in childContextTypes)) throw Error((getComponentName(type) || 'Unknown') + ".getChildContext(): key \"" + contextKey + "\" is not defined in childContextTypes.");
        }
        var name = getComponentName(type) || 'Unknown';
        checkPropTypes(childContextTypes, childContext, 'child context', name, // somebody calls unstable_renderSubtreeIntoContainer() and we process
        // context from the parent component instance. The stack will be missing
        // because it's outside of the reconciliation, and so the pointer has not
        // been set. This is rare and doesn't matter. We'll also remove that API.
        getCurrentFiberStackInDev);
        return _assign({
        }, parentContext, {
        }, childContext);
    }
    function pushContextProvider(workInProgress) {
        var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.
        // If the instance does not exist yet, we will push null at first,
        // and replace it on the stack later when invalidating the context.
        var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.
        // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.
        previousContext = contextStackCursor.current;
        push(contextStackCursor, memoizedMergedChildContext, workInProgress);
        push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
        return true;
    }
    function invalidateContextProvider(workInProgress, type, didChange) {
        var instance = workInProgress.stateNode;
        if (!instance) throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
        if (didChange) {
            // Merge parent and own context.
            // Skip this if we're not updating due to sCU.
            // This avoids unnecessarily recomputing memoized values.
            var mergedContext = processChildContext(workInProgress, type, previousContext);
            instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.
            // It is important to unwind the context in the reverse order.
            pop(didPerformWorkStackCursor, workInProgress);
            pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.
            push(contextStackCursor, mergedContext, workInProgress);
            push(didPerformWorkStackCursor, didChange, workInProgress);
        } else {
            pop(didPerformWorkStackCursor, workInProgress);
            push(didPerformWorkStackCursor, didChange, workInProgress);
        }
    }
    function findCurrentUnmaskedContext(fiber) {
        // Currently this is only used with renderSubtreeIntoContainer; not sure if it
        // makes sense elsewhere
        if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
        var node = fiber;
        do {
            switch(node.tag){
                case HostRoot:
                    return node.stateNode.context;
                case ClassComponent:
                    var Component = node.type;
                    if (isContextProvider(Component)) return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    break;
            }
            node = node.return;
        }while (node !== null)
        throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
    }
    var LegacyRoot = 0;
    var BlockingRoot = 1;
    var ConcurrentRoot = 2;
    var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority, Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback, Scheduler_cancelCallback = Scheduler.unstable_cancelCallback, Scheduler_shouldYield = Scheduler.unstable_shouldYield, Scheduler_requestPaint = Scheduler.unstable_requestPaint, Scheduler_now = Scheduler.unstable_now, Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority, Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, Scheduler_NormalPriority = Scheduler.unstable_NormalPriority, Scheduler_LowPriority = Scheduler.unstable_LowPriority, Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;
    // Provide explicit error message when production+profiling bundle of e.g.
    // react-dom is used with production (non-profiling) bundle of
    // scheduler/tracing
    if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at http://fb.me/react-profiling");
    var fakeCallbackNode = {
    }; // Except for NoPriority, these correspond to Scheduler priorities. We use
    // ascending numbers so we can compare them like numbers. They start at 90 to
    // avoid clashing with Scheduler's priorities.
    var ImmediatePriority = 99;
    var UserBlockingPriority$1 = 98;
    var NormalPriority = 97;
    var LowPriority = 96;
    var IdlePriority = 95; // NoPriority is the absence of priority. Also React-only.
    var NoPriority = 90;
    var shouldYield = Scheduler_shouldYield;
    var requestPaint = Scheduler_requestPaint !== undefined ? Scheduler_requestPaint : function() {
    };
    var syncQueue = null;
    var immediateQueueCallbackNode = null;
    var isFlushingSyncQueue = false;
    var initialTimeMs = Scheduler_now(); // If the initial timestamp is reasonably small, use Scheduler's `now` directly.
    // This will be the case for modern browsers that support `performance.now`. In
    // older browsers, Scheduler falls back to `Date.now`, which returns a Unix
    // timestamp. In that case, subtract the module initialization time to simulate
    // the behavior of performance.now and keep our times small enough to fit
    // within 32 bits.
    // TODO: Consider lifting this into Scheduler.
    var now = initialTimeMs < 10000 ? Scheduler_now : function() {
        return Scheduler_now() - initialTimeMs;
    };
    function getCurrentPriorityLevel() {
        switch(Scheduler_getCurrentPriorityLevel()){
            case Scheduler_ImmediatePriority:
                return ImmediatePriority;
            case Scheduler_UserBlockingPriority:
                return UserBlockingPriority$1;
            case Scheduler_NormalPriority:
                return NormalPriority;
            case Scheduler_LowPriority:
                return LowPriority;
            case Scheduler_IdlePriority:
                return IdlePriority;
            default:
                throw Error("Unknown priority level.");
        }
    }
    function reactPriorityToSchedulerPriority(reactPriorityLevel) {
        switch(reactPriorityLevel){
            case ImmediatePriority:
                return Scheduler_ImmediatePriority;
            case UserBlockingPriority$1:
                return Scheduler_UserBlockingPriority;
            case NormalPriority:
                return Scheduler_NormalPriority;
            case LowPriority:
                return Scheduler_LowPriority;
            case IdlePriority:
                return Scheduler_IdlePriority;
            default:
                throw Error("Unknown priority level.");
        }
    }
    function runWithPriority$1(reactPriorityLevel, fn) {
        var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
        return Scheduler_runWithPriority(priorityLevel, fn);
    }
    function scheduleCallback(reactPriorityLevel, callback, options) {
        var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
        return Scheduler_scheduleCallback(priorityLevel, callback, options);
    }
    function scheduleSyncCallback(callback) {
        // Push this callback into an internal queue. We'll flush these either in
        // the next tick, or earlier if something calls `flushSyncCallbackQueue`.
        if (syncQueue === null) {
            syncQueue = [
                callback
            ]; // Flush the queue in the next tick, at the earliest.
            immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
        } else // Push onto existing queue. Don't need to schedule a callback because
        // we already scheduled one when we created the queue.
        syncQueue.push(callback);
        return fakeCallbackNode;
    }
    function cancelCallback(callbackNode) {
        if (callbackNode !== fakeCallbackNode) Scheduler_cancelCallback(callbackNode);
    }
    function flushSyncCallbackQueue() {
        if (immediateQueueCallbackNode !== null) {
            var node = immediateQueueCallbackNode;
            immediateQueueCallbackNode = null;
            Scheduler_cancelCallback(node);
        }
        flushSyncCallbackQueueImpl();
    }
    function flushSyncCallbackQueueImpl() {
        if (!isFlushingSyncQueue && syncQueue !== null) {
            // Prevent re-entrancy.
            isFlushingSyncQueue = true;
            var i = 0;
            try {
                var _isSync = true;
                var queue = syncQueue;
                runWithPriority$1(ImmediatePriority, function() {
                    for(; i < queue.length; i++){
                        var callback = queue[i];
                        do callback = callback(_isSync);
                        while (callback !== null)
                    }
                });
                syncQueue = null;
            } catch (error4) {
                // If something throws, leave the remaining callbacks on the queue.
                if (syncQueue !== null) syncQueue = syncQueue.slice(i + 1);
                 // Resume flushing in the next tick
                Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
                throw error4;
            } finally{
                isFlushingSyncQueue = false;
            }
        }
    }
    var NoMode = 0;
    var StrictMode = 1; // TODO: Remove BlockingMode and ConcurrentMode by reading from the root
    // tag instead
    var BlockingMode = 2;
    var ConcurrentMode = 4;
    var ProfileMode = 8;
    // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
    // Math.pow(2, 30) - 1
    // 0b111111111111111111111111111111
    var MAX_SIGNED_31_BIT_INT = 1073741823;
    var NoWork = 0; // TODO: Think of a better name for Never. The key difference with Idle is that
    // Never work can be committed in an inconsistent state without tearing the UI.
    // The main example is offscreen content, like a hidden subtree. So one possible
    // name is Offscreen. However, it also includes dehydrated Suspense boundaries,
    // which are inconsistent in the sense that they haven't finished yet, but
    // aren't visibly inconsistent because the server rendered HTML matches what the
    // hydrated tree would look like.
    var Never = 1; // Idle is slightly higher priority than Never. It must completely finish in
    // order to be consistent.
    var Idle = 2; // Continuous Hydration is slightly higher than Idle and is used to increase
    // priority of hover targets.
    var ContinuousHydration = 3;
    var Sync = MAX_SIGNED_31_BIT_INT;
    var Batched = Sync - 1;
    var UNIT_SIZE = 10;
    var MAGIC_NUMBER_OFFSET = Batched - 1; // 1 unit of expiration time represents 10ms.
    function msToExpirationTime(ms) {
        // Always subtract from the offset so that we don't clash with the magic number for NoWork.
        return MAGIC_NUMBER_OFFSET - (ms / UNIT_SIZE | 0);
    }
    function expirationTimeToMs(expirationTime) {
        return (MAGIC_NUMBER_OFFSET - expirationTime) * UNIT_SIZE;
    }
    function ceiling(num, precision) {
        return ((num / precision | 0) + 1) * precision;
    }
    function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {
        return MAGIC_NUMBER_OFFSET - ceiling(MAGIC_NUMBER_OFFSET - currentTime + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE);
    } // TODO: This corresponds to Scheduler's NormalPriority, not LowPriority. Update
    // the names to reflect.
    var LOW_PRIORITY_EXPIRATION = 5000;
    var LOW_PRIORITY_BATCH_SIZE = 250;
    function computeAsyncExpiration(currentTime) {
        return computeExpirationBucket(currentTime, LOW_PRIORITY_EXPIRATION, LOW_PRIORITY_BATCH_SIZE);
    }
    function computeSuspenseExpiration(currentTime, timeoutMs) {
        // TODO: Should we warn if timeoutMs is lower than the normal pri expiration time?
        return computeExpirationBucket(currentTime, timeoutMs, LOW_PRIORITY_BATCH_SIZE);
    } // We intentionally set a higher expiration time for interactive updates in
    // dev than in production.
    //
    // If the main thread is being blocked so long that you hit the expiration,
    // it's a problem that could be solved with better scheduling.
    //
    // People will be more likely to notice this and fix it with the long
    // expiration time in development.
    //
    // In production we opt for better UX at the risk of masking scheduling
    // problems, by expiring fast.
    var HIGH_PRIORITY_EXPIRATION = 500;
    var HIGH_PRIORITY_BATCH_SIZE = 100;
    function computeInteractiveExpiration(currentTime) {
        return computeExpirationBucket(currentTime, HIGH_PRIORITY_EXPIRATION, HIGH_PRIORITY_BATCH_SIZE);
    }
    function inferPriorityFromExpirationTime(currentTime, expirationTime) {
        if (expirationTime === Sync) return ImmediatePriority;
        if (expirationTime === Never || expirationTime === Idle) return IdlePriority;
        var msUntil = expirationTimeToMs(expirationTime) - expirationTimeToMs(currentTime);
        if (msUntil <= 0) return ImmediatePriority;
        if (msUntil <= HIGH_PRIORITY_EXPIRATION + HIGH_PRIORITY_BATCH_SIZE) return UserBlockingPriority$1;
        if (msUntil <= LOW_PRIORITY_EXPIRATION + LOW_PRIORITY_BATCH_SIZE) return NormalPriority;
         // TODO: Handle LowPriority
        // Assume anything lower has idle priority
        return IdlePriority;
    }
    var ReactStrictModeWarnings = {
        recordUnsafeLifecycleWarnings: function(fiber, instance) {
        },
        flushPendingUnsafeLifecycleWarnings: function() {
        },
        recordLegacyContextWarning: function(fiber, instance) {
        },
        flushLegacyContextWarning: function() {
        },
        discardPendingWarnings: function() {
        }
    };
    var findStrictRoot = function(fiber) {
        var maybeStrictRoot = null;
        var node = fiber;
        while(node !== null){
            if (node.mode & StrictMode) maybeStrictRoot = node;
            node = node.return;
        }
        return maybeStrictRoot;
    };
    var setToSortedString = function(set1) {
        var array = [];
        set1.forEach(function(value) {
            array.push(value);
        });
        return array.sort().join(', ');
    };
    var pendingComponentWillMountWarnings = [];
    var pendingUNSAFE_ComponentWillMountWarnings = [];
    var pendingComponentWillReceivePropsWarnings = [];
    var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
    var pendingComponentWillUpdateWarnings = [];
    var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.
    var didWarnAboutUnsafeLifecycles = new Set();
    ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
        // Dedup strategy: Warn once per component.
        if (didWarnAboutUnsafeLifecycles.has(fiber.type)) return;
        if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) pendingComponentWillMountWarnings.push(fiber);
        if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === 'function') pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
        if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) pendingComponentWillReceivePropsWarnings.push(fiber);
        if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
        if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) pendingComponentWillUpdateWarnings.push(fiber);
        if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === 'function') pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
    };
    ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
        // We do an initial pass to gather component names
        var componentWillMountUniqueNames = new Set();
        if (pendingComponentWillMountWarnings.length > 0) {
            pendingComponentWillMountWarnings.forEach(function(fiber) {
                componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillMountWarnings = [];
        }
        var UNSAFE_componentWillMountUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
            pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillMountWarnings = [];
        }
        var componentWillReceivePropsUniqueNames = new Set();
        if (pendingComponentWillReceivePropsWarnings.length > 0) {
            pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillReceivePropsWarnings = [];
        }
        var UNSAFE_componentWillReceivePropsUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
            pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        }
        var componentWillUpdateUniqueNames = new Set();
        if (pendingComponentWillUpdateWarnings.length > 0) {
            pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillUpdateWarnings = [];
        }
        var UNSAFE_componentWillUpdateUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
            pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
        } // Finally, we flush all the warnings
        // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'
        if (UNSAFE_componentWillMountUniqueNames.size > 0) {
            var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
            error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
        }
        if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
            error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n\nPlease update the following components: %s", _sortedNames);
        }
        if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
            error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
        }
        if (componentWillMountUniqueNames.size > 0) {
            var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
            warn1("componentWillMount has been renamed, and is not recommended for use. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
        }
        if (componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
            warn1("componentWillReceiveProps has been renamed, and is not recommended for use. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
        }
        if (componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
            warn1("componentWillUpdate has been renamed, and is not recommended for use. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
        }
    };
    var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.
    var didWarnAboutLegacyContext = new Set();
    ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
        var strictRoot = findStrictRoot(fiber);
        if (strictRoot === null) {
            error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
            return;
        } // Dedup strategy: Warn once per component.
        if (didWarnAboutLegacyContext.has(fiber.type)) return;
        var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
        if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
            if (warningsForRoot === undefined) {
                warningsForRoot = [];
                pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
            }
            warningsForRoot.push(fiber);
        }
    };
    ReactStrictModeWarnings.flushLegacyContextWarning = function() {
        pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
            if (fiberArray.length === 0) return;
            var firstFiber = fiberArray[0];
            var uniqueNames = new Set();
            fiberArray.forEach(function(fiber) {
                uniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutLegacyContext.add(fiber.type);
            });
            var sortedNames = setToSortedString(uniqueNames);
            var firstComponentStack = getStackByFiberInDevAndProd(firstFiber);
            error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://fb.me/react-legacy-context%s", sortedNames, firstComponentStack);
        });
    };
    ReactStrictModeWarnings.discardPendingWarnings = function() {
        pendingComponentWillMountWarnings = [];
        pendingUNSAFE_ComponentWillMountWarnings = [];
        pendingComponentWillReceivePropsWarnings = [];
        pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        pendingComponentWillUpdateWarnings = [];
        pendingUNSAFE_ComponentWillUpdateWarnings = [];
        pendingLegacyContextWarning = new Map();
    };
    var resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.
    var failedBoundaries = null;
    var setRefreshHandler = function(handler) {
        resolveFamily = handler;
    };
    function resolveFunctionForHotReloading(type) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return type;
        var family = resolveFamily(type);
        if (family === undefined) return type;
         // Use the latest known implementation.
        return family.current;
    }
    function resolveClassForHotReloading(type) {
        // No implementation differences.
        return resolveFunctionForHotReloading(type);
    }
    function resolveForwardRefForHotReloading(type) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return type;
        var family = resolveFamily(type);
        if (family === undefined) {
            // Check if we're dealing with a real forwardRef. Don't want to crash early.
            if (type !== null && type !== undefined && typeof type.render === 'function') {
                // ForwardRef is special because its resolved .type is an object,
                // but it's possible that we only have its inner render function in the map.
                // If that inner render function is different, we'll build a new forwardRef type.
                var currentRender = resolveFunctionForHotReloading(type.render);
                if (type.render !== currentRender) {
                    var syntheticType = {
                        $$typeof: REACT_FORWARD_REF_TYPE,
                        render: currentRender
                    };
                    if (type.displayName !== undefined) syntheticType.displayName = type.displayName;
                    return syntheticType;
                }
            }
            return type;
        } // Use the latest known implementation.
        return family.current;
    }
    function isCompatibleFamilyForHotReloading(fiber, element) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return false;
        var prevType = fiber.elementType;
        var nextType = element.type; // If we got here, we know types aren't === equal.
        var needsCompareFamilies = false;
        var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;
        switch(fiber.tag){
            case ClassComponent:
                if (typeof nextType === 'function') needsCompareFamilies = true;
                break;
            case FunctionComponent:
                if (typeof nextType === 'function') needsCompareFamilies = true;
                else if ($$typeofNextType === REACT_LAZY_TYPE) // We don't know the inner type yet.
                // We're going to assume that the lazy inner type is stable,
                // and so it is sufficient to avoid reconciling it away.
                // We're not going to unwrap or actually use the new lazy type.
                needsCompareFamilies = true;
                break;
            case ForwardRef:
                if ($$typeofNextType === REACT_FORWARD_REF_TYPE) needsCompareFamilies = true;
                else if ($$typeofNextType === REACT_LAZY_TYPE) needsCompareFamilies = true;
                break;
            case MemoComponent:
            case SimpleMemoComponent:
                if ($$typeofNextType === REACT_MEMO_TYPE) // TODO: if it was but can no longer be simple,
                // we shouldn't set this.
                needsCompareFamilies = true;
                else if ($$typeofNextType === REACT_LAZY_TYPE) needsCompareFamilies = true;
                break;
            default:
                return false;
        } // Check if both types have a family and it's the same one.
        if (needsCompareFamilies) {
            // Note: memo() and forwardRef() we'll compare outer rather than inner type.
            // This means both of them need to be registered to preserve state.
            // If we unwrapped and compared the inner types for wrappers instead,
            // then we would risk falsely saying two separate memo(Foo)
            // calls are equivalent because they wrap the same Foo function.
            var prevFamily = resolveFamily(prevType);
            if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) return true;
        }
        return false;
    }
    function markFailedErrorBoundaryForHotReloading(fiber) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return;
        if (typeof WeakSet !== 'function') return;
        if (failedBoundaries === null) failedBoundaries = new WeakSet();
        failedBoundaries.add(fiber);
    }
    var scheduleRefresh = function(root1, update) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return;
        var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
        flushPassiveEffects();
        flushSync(function() {
            scheduleFibersWithFamiliesRecursively(root1.current, updatedFamilies, staleFamilies);
        });
    };
    var scheduleRoot = function(root1, element) {
        if (root1.context !== emptyContextObject) // Super edge case: root has a legacy _renderSubtree context
        // but we don't know the parentComponent so we can't pass it.
        // Just ignore. We'll delete this with _renderSubtree code path later.
        return;
        flushPassiveEffects();
        syncUpdates(function() {
            updateContainer(element, root1, null, null);
        });
    };
    function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
        var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
        var candidateType = null;
        switch(tag){
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
                candidateType = type;
                break;
            case ForwardRef:
                candidateType = type.render;
                break;
        }
        if (resolveFamily === null) throw new Error('Expected resolveFamily to be set during hot reload.');
        var needsRender = false;
        var needsRemount = false;
        if (candidateType !== null) {
            var family = resolveFamily(candidateType);
            if (family !== undefined) {
                if (staleFamilies.has(family)) needsRemount = true;
                else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) needsRemount = true;
                    else needsRender = true;
                }
            }
        }
        if (failedBoundaries !== null) {
            if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) needsRemount = true;
        }
        if (needsRemount) fiber._debugNeedsRemount = true;
        if (needsRemount || needsRender) scheduleWork(fiber, Sync);
        if (child !== null && !needsRemount) scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
        if (sibling !== null) scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
    }
    var findHostInstancesForRefresh = function(root1, families) {
        var hostInstances = new Set();
        var types = new Set(families.map(function(family) {
            return family.current;
        }));
        findHostInstancesForMatchingFibersRecursively(root1.current, types, hostInstances);
        return hostInstances;
    };
    function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
        var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
        var candidateType = null;
        switch(tag){
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
                candidateType = type;
                break;
            case ForwardRef:
                candidateType = type.render;
                break;
        }
        var didMatch = false;
        if (candidateType !== null) {
            if (types.has(candidateType)) didMatch = true;
        }
        if (didMatch) // We have a match. This only drills down to the closest host components.
        // There's no need to search deeper because for the purpose of giving
        // visual feedback, "flashing" outermost parent rectangles is sufficient.
        findHostInstancesForFiberShallowly(fiber, hostInstances);
        else // If there's no match, maybe there will be one further down in the child tree.
        if (child !== null) findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
        if (sibling !== null) findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
    }
    function findHostInstancesForFiberShallowly(fiber, hostInstances) {
        var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
        if (foundHostInstances) return;
         // If we didn't find any host children, fallback to closest host parent.
        var node = fiber;
        while(true){
            switch(node.tag){
                case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
            }
            if (node.return === null) throw new Error('Expected to reach root first.');
            node = node.return;
        }
    }
    function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
        var node = fiber;
        var foundHostInstances = false;
        while(true){
            if (node.tag === HostComponent) {
                // We got a match.
                foundHostInstances = true;
                hostInstances.add(node.stateNode); // There may still be more, so keep searching.
            } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === fiber) return foundHostInstances;
            while(node.sibling === null){
                if (node.return === null || node.return === fiber) return foundHostInstances;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
        return false;
    }
    function resolveDefaultProps(Component, baseProps) {
        if (Component && Component.defaultProps) {
            // Resolve default props. Taken from ReactElement
            var props = _assign({
            }, baseProps);
            var defaultProps = Component.defaultProps;
            for(var propName in defaultProps)if (props[propName] === undefined) props[propName] = defaultProps[propName];
            return props;
        }
        return baseProps;
    }
    function readLazyComponentType(lazyComponent) {
        initializeLazyComponentType(lazyComponent);
        if (lazyComponent._status !== Resolved) throw lazyComponent._result;
        return lazyComponent._result;
    }
    var valueCursor = createCursor(null);
    var rendererSigil;
    // Use this to detect multiple renderers using the same context
    rendererSigil = {
    };
    var currentlyRenderingFiber = null;
    var lastContextDependency = null;
    var lastContextWithAllBitsObserved = null;
    var isDisallowedContextReadInDEV = false;
    function resetContextDependencies() {
        // This is called right before React yields execution, to ensure `readContext`
        // cannot be called outside the render phase.
        currentlyRenderingFiber = null;
        lastContextDependency = null;
        lastContextWithAllBitsObserved = null;
        isDisallowedContextReadInDEV = false;
    }
    function enterDisallowedContextReadInDEV() {
        isDisallowedContextReadInDEV = true;
    }
    function exitDisallowedContextReadInDEV() {
        isDisallowedContextReadInDEV = false;
    }
    function pushProvider(providerFiber, nextValue) {
        var context = providerFiber.type._context;
        push(valueCursor, context._currentValue, providerFiber);
        context._currentValue = nextValue;
        if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
        context._currentRenderer = rendererSigil;
    }
    function popProvider(providerFiber) {
        var currentValue = valueCursor.current;
        pop(valueCursor, providerFiber);
        var context = providerFiber.type._context;
        context._currentValue = currentValue;
    }
    function calculateChangedBits(context, newValue, oldValue) {
        if (objectIs(oldValue, newValue)) // No change
        return 0;
        else {
            var changedBits = typeof context._calculateChangedBits === 'function' ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
            if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) error("calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: %s", changedBits);
            return changedBits | 0;
        }
    }
    function scheduleWorkOnParentPath(parent, renderExpirationTime) {
        // Update the child expiration time of all the ancestors, including
        // the alternates.
        var node = parent;
        while(node !== null){
            var alternate = node.alternate;
            if (node.childExpirationTime < renderExpirationTime) {
                node.childExpirationTime = renderExpirationTime;
                if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) alternate.childExpirationTime = renderExpirationTime;
            } else if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) alternate.childExpirationTime = renderExpirationTime;
            else break;
            node = node.return;
        }
    }
    function propagateContextChange(workInProgress, context, changedBits, renderExpirationTime) {
        var fiber = workInProgress.child;
        if (fiber !== null) // Set the return pointer of the child to the work-in-progress fiber.
        fiber.return = workInProgress;
        while(fiber !== null){
            var nextFiber = void 0; // Visit this fiber.
            var list = fiber.dependencies;
            if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while(dependency !== null){
                    // Check if the context matches.
                    if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
                        // Match! Schedule an update on this fiber.
                        if (fiber.tag === ClassComponent) {
                            // Schedule a force update on the work-in-progress.
                            var update = createUpdate(renderExpirationTime, null);
                            update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the
                            // update to the current fiber, too, which means it will persist even if
                            // this render is thrown away. Since it's a race condition, not sure it's
                            // worth fixing.
                            enqueueUpdate(fiber, update);
                        }
                        if (fiber.expirationTime < renderExpirationTime) fiber.expirationTime = renderExpirationTime;
                        var alternate = fiber.alternate;
                        if (alternate !== null && alternate.expirationTime < renderExpirationTime) alternate.expirationTime = renderExpirationTime;
                        scheduleWorkOnParentPath(fiber.return, renderExpirationTime); // Mark the expiration time on the list, too.
                        if (list.expirationTime < renderExpirationTime) list.expirationTime = renderExpirationTime;
                         // Since we already found a match, we can stop traversing the
                        break;
                    }
                    dependency = dependency.next;
                }
            } else if (fiber.tag === ContextProvider) // Don't scan deeper if this is a matching provider
            nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
            else // Traverse down.
            nextFiber = fiber.child;
            if (nextFiber !== null) // Set the return pointer of the child to the work-in-progress fiber.
            nextFiber.return = fiber;
            else {
                // No child. Traverse to next sibling.
                nextFiber = fiber;
                while(nextFiber !== null){
                    if (nextFiber === workInProgress) {
                        // We're back to the root of this subtree. Exit.
                        nextFiber = null;
                        break;
                    }
                    var sibling = nextFiber.sibling;
                    if (sibling !== null) {
                        // Set the return pointer of the sibling to the work-in-progress fiber.
                        sibling.return = nextFiber.return;
                        nextFiber = sibling;
                        break;
                    } // No more siblings. Traverse up.
                    nextFiber = nextFiber.return;
                }
            }
            fiber = nextFiber;
        }
    }
    function prepareToReadContext(workInProgress, renderExpirationTime) {
        currentlyRenderingFiber = workInProgress;
        lastContextDependency = null;
        lastContextWithAllBitsObserved = null;
        var dependencies = workInProgress.dependencies;
        if (dependencies !== null) {
            var firstContext = dependencies.firstContext;
            if (firstContext !== null) {
                if (dependencies.expirationTime >= renderExpirationTime) // Context list has a pending update. Mark that this fiber performed work.
                markWorkInProgressReceivedUpdate();
                 // Reset the work-in-progress list
                dependencies.firstContext = null;
            }
        }
    }
    function readContext(context, observedBits) {
        // This warning would fire if you read context inside a Hook like useMemo.
        // Unlike the class check below, it's not enforced in production for perf.
        if (isDisallowedContextReadInDEV) error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
        if (lastContextWithAllBitsObserved === context) ;
        else if (observedBits === false || observedBits === 0) ;
        else {
            var resolvedObservedBits; // Avoid deopting on observable arguments or heterogeneous types.
            if (typeof observedBits !== 'number' || observedBits === MAX_SIGNED_31_BIT_INT) {
                // Observe all updates.
                lastContextWithAllBitsObserved = context;
                resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
            } else resolvedObservedBits = observedBits;
            var contextItem = {
                context: context,
                observedBits: resolvedObservedBits,
                next: null
            };
            if (lastContextDependency === null) {
                if (!(currentlyRenderingFiber !== null)) throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                 // This is the first dependency for this component. Create a new list.
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                    expirationTime: NoWork,
                    firstContext: contextItem,
                    responders: null
                };
            } else // Append a new context item.
            lastContextDependency = lastContextDependency.next = contextItem;
        }
        return context._currentValue;
    }
    var UpdateState = 0;
    var ReplaceState = 1;
    var ForceUpdate = 2;
    var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.
    // It should only be read right after calling `processUpdateQueue`, via
    // `checkHasForceUpdateAfterProcessing`.
    var hasForceUpdate = false;
    var didWarnUpdateInsideUpdate;
    var currentlyProcessingQueue;
    didWarnUpdateInsideUpdate = false;
    currentlyProcessingQueue = null;
    function initializeUpdateQueue(fiber) {
        var queue = {
            baseState: fiber.memoizedState,
            baseQueue: null,
            shared: {
                pending: null
            },
            effects: null
        };
        fiber.updateQueue = queue;
    }
    function cloneUpdateQueue(current2, workInProgress) {
        // Clone the update queue from current. Unless it's already a clone.
        var queue = workInProgress.updateQueue;
        var currentQueue = current2.updateQueue;
        if (queue === currentQueue) {
            var clone = {
                baseState: currentQueue.baseState,
                baseQueue: currentQueue.baseQueue,
                shared: currentQueue.shared,
                effects: currentQueue.effects
            };
            workInProgress.updateQueue = clone;
        }
    }
    function createUpdate(expirationTime, suspenseConfig) {
        var update = {
            expirationTime: expirationTime,
            suspenseConfig: suspenseConfig,
            tag: UpdateState,
            payload: null,
            callback: null,
            next: null
        };
        update.next = update;
        update.priority = getCurrentPriorityLevel();
        return update;
    }
    function enqueueUpdate(fiber, update) {
        var updateQueue = fiber.updateQueue;
        if (updateQueue === null) // Only occurs if the fiber has been unmounted.
        return;
        var sharedQueue = updateQueue.shared;
        var pending = sharedQueue.pending;
        if (pending === null) // This is the first update. Create a circular list.
        update.next = update;
        else {
            update.next = pending.next;
            pending.next = update;
        }
        sharedQueue.pending = update;
        if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
            error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
            didWarnUpdateInsideUpdate = true;
        }
    }
    function enqueueCapturedUpdate(workInProgress, update) {
        var current2 = workInProgress.alternate;
        if (current2 !== null) // Ensure the work-in-progress queue is a clone
        cloneUpdateQueue(current2, workInProgress);
         // Captured updates go only on the work-in-progress queue.
        var queue = workInProgress.updateQueue; // Append the update to the end of the list.
        var last = queue.baseQueue;
        if (last === null) {
            queue.baseQueue = update.next = update;
            update.next = update;
        } else {
            update.next = last.next;
            last.next = update;
        }
    }
    function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
        switch(update.tag){
            case ReplaceState:
                var payload = update.payload;
                if (typeof payload === 'function') {
                    enterDisallowedContextReadInDEV();
                    if (workInProgress.mode & StrictMode) payload.call(instance, prevState, nextProps);
                    var nextState = payload.call(instance, prevState, nextProps);
                    exitDisallowedContextReadInDEV();
                    return nextState;
                } // State object
                return payload;
            case CaptureUpdate:
                workInProgress.effectTag = workInProgress.effectTag & ~ShouldCapture | DidCapture;
            // Intentional fallthrough
            case UpdateState:
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === 'function') {
                    enterDisallowedContextReadInDEV();
                    if (workInProgress.mode & StrictMode) _payload.call(instance, prevState, nextProps);
                    partialState = _payload.call(instance, prevState, nextProps);
                    exitDisallowedContextReadInDEV();
                } else // Partial state object
                partialState = _payload;
                if (partialState === null || partialState === undefined) // Null and undefined are treated as no-ops.
                return prevState;
                 // Merge the partial state and the previous state.
                return _assign({
                }, prevState, partialState);
            case ForceUpdate:
                hasForceUpdate = true;
                return prevState;
        }
        return prevState;
    }
    function processUpdateQueue(workInProgress, props, instance, renderExpirationTime) {
        // This is always non-null on a ClassComponent or HostRoot
        var queue = workInProgress.updateQueue;
        hasForceUpdate = false;
        currentlyProcessingQueue = queue.shared;
        var baseQueue = queue.baseQueue; // The last pending update that hasn't been processed yet.
        var pendingQueue = queue.shared.pending;
        if (pendingQueue !== null) {
            // We have new updates that haven't been processed yet.
            // We'll add them to the base queue.
            if (baseQueue !== null) {
                // Merge the pending queue and the base queue.
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
            }
            baseQueue = pendingQueue;
            queue.shared.pending = null; // TODO: Pass `current` as argument
            var current2 = workInProgress.alternate;
            if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                if (currentQueue !== null) currentQueue.baseQueue = pendingQueue;
            }
        } // These values may change as we process the queue.
        if (baseQueue !== null) {
            var first = baseQueue.next; // Iterate through the list of updates to compute the result.
            var newState = queue.baseState;
            var newExpirationTime = NoWork;
            var newBaseState = null;
            var newBaseQueueFirst = null;
            var newBaseQueueLast = null;
            if (first !== null) {
                var update = first;
                do {
                    var updateExpirationTime = update.expirationTime;
                    if (updateExpirationTime < renderExpirationTime) {
                        // Priority is insufficient. Skip this update. If this is the first
                        // skipped update, the previous update/state is the new base
                        // update/state.
                        var clone = {
                            expirationTime: update.expirationTime,
                            suspenseConfig: update.suspenseConfig,
                            tag: update.tag,
                            payload: update.payload,
                            callback: update.callback,
                            next: null
                        };
                        if (newBaseQueueLast === null) {
                            newBaseQueueFirst = newBaseQueueLast = clone;
                            newBaseState = newState;
                        } else newBaseQueueLast = newBaseQueueLast.next = clone;
                         // Update the remaining priority in the queue.
                        if (updateExpirationTime > newExpirationTime) newExpirationTime = updateExpirationTime;
                    } else {
                        // This update does have sufficient priority.
                        if (newBaseQueueLast !== null) {
                            var _clone = {
                                expirationTime: Sync,
                                // This update is going to be committed so we never want uncommit it.
                                suspenseConfig: update.suspenseConfig,
                                tag: update.tag,
                                payload: update.payload,
                                callback: update.callback,
                                next: null
                            };
                            newBaseQueueLast = newBaseQueueLast.next = _clone;
                        } // Mark the event time of this update as relevant to this render pass.
                        // TODO: This should ideally use the true event time of this update rather than
                        // its priority which is a derived and not reverseable value.
                        // TODO: We should skip this update if it was already committed but currently
                        // we have no way of detecting the difference between a committed and suspended
                        // update here.
                        markRenderEventTimeAndConfig(updateExpirationTime, update.suspenseConfig); // Process this update.
                        newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);
                        var callback = update.callback;
                        if (callback !== null) {
                            workInProgress.effectTag |= Callback;
                            var effects = queue.effects;
                            if (effects === null) queue.effects = [
                                update
                            ];
                            else effects.push(update);
                        }
                    }
                    update = update.next;
                    if (update === null || update === first) {
                        pendingQueue = queue.shared.pending;
                        if (pendingQueue === null) break;
                        else {
                            // An update was scheduled from inside a reducer. Add the new
                            // pending updates to the end of the list and keep processing.
                            update = baseQueue.next = pendingQueue.next;
                            pendingQueue.next = first;
                            queue.baseQueue = baseQueue = pendingQueue;
                            queue.shared.pending = null;
                        }
                    }
                }while (true)
            }
            if (newBaseQueueLast === null) newBaseState = newState;
            else newBaseQueueLast.next = newBaseQueueFirst;
            queue.baseState = newBaseState;
            queue.baseQueue = newBaseQueueLast; // Set the remaining expiration time to be whatever is remaining in the queue.
            // This should be fine because the only two other things that contribute to
            // expiration time are props and context. We're already in the middle of the
            // begin phase by the time we start processing the queue, so we've already
            // dealt with the props. Context in components that specify
            // shouldComponentUpdate is tricky; but we'll have to account for
            // that regardless.
            markUnprocessedUpdateTime(newExpirationTime);
            workInProgress.expirationTime = newExpirationTime;
            workInProgress.memoizedState = newState;
        }
        currentlyProcessingQueue = null;
    }
    function callCallback(callback, context) {
        if (!(typeof callback === 'function')) throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
        callback.call(context);
    }
    function resetHasForceUpdateBeforeProcessing() {
        hasForceUpdate = false;
    }
    function checkHasForceUpdateAfterProcessing() {
        return hasForceUpdate;
    }
    function commitUpdateQueue(finishedWork, finishedQueue, instance) {
        // Commit the effects
        var effects = finishedQueue.effects;
        finishedQueue.effects = null;
        if (effects !== null) for(var i = 0; i < effects.length; i++){
            var effect = effects[i];
            var callback = effect.callback;
            if (callback !== null) {
                effect.callback = null;
                callCallback(callback, instance);
            }
        }
    }
    var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
    function requestCurrentSuspenseConfig() {
        return ReactCurrentBatchConfig.suspense;
    }
    var fakeInternalInstance = {
    };
    var isArray = Array.isArray; // React.Component uses a shared frozen object by default.
    // We'll use it to determine whether we need to initialize legacy refs.
    var emptyRefsObject = new React.Component().refs;
    var didWarnAboutStateAssignmentForComponent;
    var didWarnAboutUninitializedState;
    var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
    var didWarnAboutLegacyLifecyclesAndDerivedState;
    var didWarnAboutUndefinedDerivedState;
    var warnOnUndefinedDerivedState;
    var warnOnInvalidCallback;
    var didWarnAboutDirectlyAssigningPropsToState;
    var didWarnAboutContextTypeAndContextTypes;
    var didWarnAboutInvalidateContextType;
    didWarnAboutStateAssignmentForComponent = new Set();
    didWarnAboutUninitializedState = new Set();
    didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
    didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
    didWarnAboutDirectlyAssigningPropsToState = new Set();
    didWarnAboutUndefinedDerivedState = new Set();
    didWarnAboutContextTypeAndContextTypes = new Set();
    didWarnAboutInvalidateContextType = new Set();
    var didWarnOnInvalidCallback = new Set();
    warnOnInvalidCallback = function(callback, callerName) {
        if (callback === null || typeof callback === 'function') return;
        var key = callerName + "_" + callback;
        if (!didWarnOnInvalidCallback.has(key)) {
            didWarnOnInvalidCallback.add(key);
            error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
        }
    };
    warnOnUndefinedDerivedState = function(type, partialState) {
        if (partialState === undefined) {
            var componentName = getComponentName(type) || 'Component';
            if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
            }
        }
    }; // This is so gross but it's at least non-critical and can be removed if
    // it causes problems. This is meant to give a nicer error message for
    // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
    // ...)) which otherwise throws a "_processChildContext is not a function"
    // exception.
    Object.defineProperty(fakeInternalInstance, '_processChildContext', {
        enumerable: false,
        value: function() {
            throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
        }
    });
    Object.freeze(fakeInternalInstance);
    function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
        var prevState = workInProgress.memoizedState;
        if (workInProgress.mode & StrictMode) // Invoke the function an extra time to help detect side-effects.
        getDerivedStateFromProps(nextProps, prevState);
        var partialState = getDerivedStateFromProps(nextProps, prevState);
        warnOnUndefinedDerivedState(ctor, partialState);
        var memoizedState = partialState === null || partialState === undefined ? prevState : _assign({
        }, prevState, partialState);
        workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the
        // base state.
        if (workInProgress.expirationTime === NoWork) {
            // Queue is always non-null for classes
            var updateQueue = workInProgress.updateQueue;
            updateQueue.baseState = memoizedState;
        }
    }
    var classComponentUpdater = {
        isMounted: isMounted,
        enqueueSetState: function(inst, payload, callback) {
            var fiber = get(inst);
            var currentTime = requestCurrentTimeForUpdate();
            var suspenseConfig = requestCurrentSuspenseConfig();
            var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
            var update = createUpdate(expirationTime, suspenseConfig);
            update.payload = payload;
            if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback(callback, 'setState');
                update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleWork(fiber, expirationTime);
        },
        enqueueReplaceState: function(inst, payload, callback) {
            var fiber = get(inst);
            var currentTime = requestCurrentTimeForUpdate();
            var suspenseConfig = requestCurrentSuspenseConfig();
            var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
            var update = createUpdate(expirationTime, suspenseConfig);
            update.tag = ReplaceState;
            update.payload = payload;
            if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback(callback, 'replaceState');
                update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleWork(fiber, expirationTime);
        },
        enqueueForceUpdate: function(inst, callback) {
            var fiber = get(inst);
            var currentTime = requestCurrentTimeForUpdate();
            var suspenseConfig = requestCurrentSuspenseConfig();
            var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
            var update = createUpdate(expirationTime, suspenseConfig);
            update.tag = ForceUpdate;
            if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback(callback, 'forceUpdate');
                update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleWork(fiber, expirationTime);
        }
    };
    function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
        var instance = workInProgress.stateNode;
        if (typeof instance.shouldComponentUpdate === 'function') {
            if (workInProgress.mode & StrictMode) // Invoke the function an extra time to help detect side-effects.
            instance.shouldComponentUpdate(newProps, newState, nextContext);
            startPhaseTimer(workInProgress, 'shouldComponentUpdate');
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
            stopPhaseTimer();
            if (shouldUpdate === undefined) error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentName(ctor) || 'Component');
            return shouldUpdate;
        }
        if (ctor.prototype && ctor.prototype.isPureReactComponent) return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
        return true;
    }
    function checkClassInstance(workInProgress, ctor, newProps) {
        var instance = workInProgress.stateNode;
        var name = getComponentName(ctor) || 'Component';
        var renderPresent = instance.render;
        if (!renderPresent) {
            if (ctor.prototype && typeof ctor.prototype.render === 'function') error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
            else error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
        }
        if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
        if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
        if (instance.propTypes) error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
        if (instance.contextType) error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
        if (instance.contextTypes) error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
        if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
            didWarnAboutContextTypeAndContextTypes.add(ctor);
            error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
        }
        if (typeof instance.componentShouldUpdate === 'function') error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
        if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentName(ctor) || 'A pure component');
        if (typeof instance.componentDidUnmount === 'function') error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
        if (typeof instance.componentDidReceiveProps === 'function') error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
        if (typeof instance.componentWillRecieveProps === 'function') error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
        if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
        var hasMutatedProps = instance.props !== newProps;
        if (instance.props !== undefined && hasMutatedProps) error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
        if (instance.defaultProps) error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
        if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
            error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentName(ctor));
        }
        if (typeof instance.getDerivedStateFromProps === 'function') error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
        if (typeof instance.getDerivedStateFromError === 'function') error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
        if (typeof ctor.getSnapshotBeforeUpdate === 'function') error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
        var _state = instance.state;
        if (_state && (typeof _state !== 'object' || isArray(_state))) error('%s.state: must be set to an object or null', name);
        if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
    }
    function adoptClassInstance(workInProgress, instance) {
        instance.updater = classComponentUpdater;
        workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates
        set(instance, workInProgress);
        instance._reactInternalInstance = fakeInternalInstance;
    }
    function constructClassInstance(workInProgress, ctor, props) {
        var isLegacyContextConsumer = false;
        var unmaskedContext = emptyContextObject;
        var context = emptyContextObject;
        var contextType = ctor.contextType;
        if ('contextType' in ctor) {
            var isValid = contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>
            if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = '';
                if (contextType === undefined) addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                else if (typeof contextType !== 'object') addendum = ' However, it is set to a ' + typeof contextType + '.';
                else if (contextType.$$typeof === REACT_PROVIDER_TYPE) addendum = ' Did you accidentally pass the Context.Provider instead?';
                else if (contextType._context !== undefined) // <Context.Consumer>
                addendum = ' Did you accidentally pass the Context.Consumer instead?';
                else addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';
                error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentName(ctor) || 'Component', addendum);
            }
        }
        if (typeof contextType === 'object' && contextType !== null) context = readContext(contextType);
        else {
            unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            var contextTypes = ctor.contextTypes;
            isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
            context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
        } // Instantiate twice to help detect side-effects.
        if (workInProgress.mode & StrictMode) new ctor(props, context); // eslint-disable-line no-new
        var instance = new ctor(props, context);
        var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
        adoptClassInstance(workInProgress, instance);
        if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
            var componentName = getComponentName(ctor) || 'Component';
            if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? 'null' : 'undefined', componentName);
            }
        } // If new component APIs are defined, "unsafe" lifecycles won't be called.
        // Warn about these lifecycles if they are present.
        // Don't warn about react-lifecycles-compat polyfilled methods though.
        if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
            var foundWillMountName = null;
            var foundWillReceivePropsName = null;
            var foundWillUpdateName = null;
            if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) foundWillMountName = 'componentWillMount';
            else if (typeof instance.UNSAFE_componentWillMount === 'function') foundWillMountName = 'UNSAFE_componentWillMount';
            if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) foundWillReceivePropsName = 'componentWillReceiveProps';
            else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
            if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) foundWillUpdateName = 'componentWillUpdate';
            else if (typeof instance.UNSAFE_componentWillUpdate === 'function') foundWillUpdateName = 'UNSAFE_componentWillUpdate';
            if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentName(ctor) || 'Component';
                var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : '', foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : '', foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : '');
                }
            }
        }
        // ReactFiberContext usually updates this cache but can't for newly-created instances.
        if (isLegacyContextConsumer) cacheContext(workInProgress, unmaskedContext, context);
        return instance;
    }
    function callComponentWillMount(workInProgress, instance) {
        startPhaseTimer(workInProgress, 'componentWillMount');
        var oldState = instance.state;
        if (typeof instance.componentWillMount === 'function') instance.componentWillMount();
        if (typeof instance.UNSAFE_componentWillMount === 'function') instance.UNSAFE_componentWillMount();
        stopPhaseTimer();
        if (oldState !== instance.state) {
            error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentName(workInProgress.type) || 'Component');
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
    }
    function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
        var oldState = instance.state;
        startPhaseTimer(workInProgress, 'componentWillReceiveProps');
        if (typeof instance.componentWillReceiveProps === 'function') instance.componentWillReceiveProps(newProps, nextContext);
        if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
        stopPhaseTimer();
        if (instance.state !== oldState) {
            var componentName = getComponentName(workInProgress.type) || 'Component';
            if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                didWarnAboutStateAssignmentForComponent.add(componentName);
                error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
    } // Invokes the mount life-cycles on a previously never rendered instance.
    function mountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
        checkClassInstance(workInProgress, ctor, newProps);
        var instance = workInProgress.stateNode;
        instance.props = newProps;
        instance.state = workInProgress.memoizedState;
        instance.refs = emptyRefsObject;
        initializeUpdateQueue(workInProgress);
        var contextType = ctor.contextType;
        if (typeof contextType === 'object' && contextType !== null) instance.context = readContext(contextType);
        else {
            var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            instance.context = getMaskedContext(workInProgress, unmaskedContext);
        }
        if (instance.state === newProps) {
            var componentName = getComponentName(ctor) || 'Component';
            if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
            }
        }
        if (workInProgress.mode & StrictMode) ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
        processUpdateQueue(workInProgress, newProps, instance, renderExpirationTime);
        instance.state = workInProgress.memoizedState;
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            instance.state = workInProgress.memoizedState;
        } // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
            callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's
            // process them now.
            processUpdateQueue(workInProgress, newProps, instance, renderExpirationTime);
            instance.state = workInProgress.memoizedState;
        }
        if (typeof instance.componentDidMount === 'function') workInProgress.effectTag |= Update;
    }
    function resumeMountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
        var instance = workInProgress.stateNode;
        var oldProps = workInProgress.memoizedProps;
        instance.props = oldProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === 'object' && contextType !== null) nextContext = readContext(contextType);
        else {
            var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
        // ever the previously attempted to render - not the "current". However,
        // during componentDidUpdate we pass the "current" props.
        // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
            if (oldProps !== newProps || oldContext !== nextContext) callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress, newProps, instance, renderExpirationTime);
        newState = workInProgress.memoizedState;
        if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidMount === 'function') workInProgress.effectTag |= Update;
            return false;
        }
        if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);
        if (shouldUpdate) {
            // In order to support react-lifecycles-compat polyfilled components,
            // Unsafe lifecycles should not be invoked for components using the new APIs.
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
                startPhaseTimer(workInProgress, 'componentWillMount');
                if (typeof instance.componentWillMount === 'function') instance.componentWillMount();
                if (typeof instance.UNSAFE_componentWillMount === 'function') instance.UNSAFE_componentWillMount();
                stopPhaseTimer();
            }
            if (typeof instance.componentDidMount === 'function') workInProgress.effectTag |= Update;
        } else {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidMount === 'function') workInProgress.effectTag |= Update;
             // If shouldComponentUpdate returned false, we should still update the
            // memoized state to indicate that this work can be reused.
            workInProgress.memoizedProps = newProps;
            workInProgress.memoizedState = newState;
        } // Update the existing instance's state, props, and context pointers even
        // if shouldComponentUpdate returns false.
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
    } // Invokes the update life-cycles and returns false if it shouldn't rerender.
    function updateClassInstance(current3, workInProgress, ctor, newProps, renderExpirationTime) {
        var instance = workInProgress.stateNode;
        cloneUpdateQueue(current3, workInProgress);
        var oldProps = workInProgress.memoizedProps;
        instance.props = workInProgress.type === workInProgress.elementType ? oldProps : resolveDefaultProps(workInProgress.type, oldProps);
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === 'object' && contextType !== null) nextContext = readContext(contextType);
        else {
            var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
        // ever the previously attempted to render - not the "current". However,
        // during componentDidUpdate we pass the "current" props.
        // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
            if (oldProps !== newProps || oldContext !== nextContext) callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress, newProps, instance, renderExpirationTime);
        newState = workInProgress.memoizedState;
        if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidUpdate === 'function') {
                if (oldProps !== current3.memoizedProps || oldState !== current3.memoizedState) workInProgress.effectTag |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === 'function') {
                if (oldProps !== current3.memoizedProps || oldState !== current3.memoizedState) workInProgress.effectTag |= Snapshot;
            }
            return false;
        }
        if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);
        if (shouldUpdate) {
            // In order to support react-lifecycles-compat polyfilled components,
            // Unsafe lifecycles should not be invoked for components using the new APIs.
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
                startPhaseTimer(workInProgress, 'componentWillUpdate');
                if (typeof instance.componentWillUpdate === 'function') instance.componentWillUpdate(newProps, newState, nextContext);
                if (typeof instance.UNSAFE_componentWillUpdate === 'function') instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                stopPhaseTimer();
            }
            if (typeof instance.componentDidUpdate === 'function') workInProgress.effectTag |= Update;
            if (typeof instance.getSnapshotBeforeUpdate === 'function') workInProgress.effectTag |= Snapshot;
        } else {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidUpdate === 'function') {
                if (oldProps !== current3.memoizedProps || oldState !== current3.memoizedState) workInProgress.effectTag |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === 'function') {
                if (oldProps !== current3.memoizedProps || oldState !== current3.memoizedState) workInProgress.effectTag |= Snapshot;
            } // If shouldComponentUpdate returned false, we should still update the
            // memoized props/state to indicate that this work can be reused.
            workInProgress.memoizedProps = newProps;
            workInProgress.memoizedState = newState;
        } // Update the existing instance's state, props, and context pointers even
        // if shouldComponentUpdate returns false.
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
    }
    var didWarnAboutMaps;
    var didWarnAboutGenerators;
    var didWarnAboutStringRefs;
    var ownerHasKeyUseWarning;
    var ownerHasFunctionTypeWarning;
    var warnForMissingKey = function(child) {
    };
    didWarnAboutMaps = false;
    didWarnAboutGenerators = false;
    didWarnAboutStringRefs = {
    };
    /**
   * Warn if there's no key explicitly set on dynamic arrays of children or
   * object keys are not valid. This allows us to keep track of children between
   * updates.
   */ ownerHasKeyUseWarning = {
    };
    ownerHasFunctionTypeWarning = {
    };
    warnForMissingKey = function(child) {
        if (child === null || typeof child !== 'object') return;
        if (!child._store || child._store.validated || child.key != null) return;
        if (!(typeof child._store === 'object')) throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
        child._store.validated = true;
        var currentComponentErrorInfo = "Each child in a list should have a unique \"key\" prop. See https://fb.me/react-warning-keys for more information." + getCurrentFiberStackInDev();
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) return;
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
        error("Each child in a list should have a unique \"key\" prop. See https://fb.me/react-warning-keys for more information.");
    };
    var isArray$1 = Array.isArray;
    function coerceRef(returnFiber, current3, element) {
        var mixedRef = element.ref;
        if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
            // TODO: Clean this up once we turn on the string ref warning for
            // everyone, because the strict mode case will no longer be relevant
            if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && // because these cannot be automatically converted to an arrow function
            // using a codemod. Therefore, we don't have to warn about string refs again.
            !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                var componentName = getComponentName(returnFiber.type) || 'Component';
                if (!didWarnAboutStringRefs[componentName]) {
                    error("A string ref, \"%s\", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://fb.me/react-strict-mode-string-ref%s", mixedRef, getStackByFiberInDevAndProd(returnFiber));
                    didWarnAboutStringRefs[componentName] = true;
                }
            }
            if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                    var ownerFiber = owner;
                    if (!(ownerFiber.tag === ClassComponent)) throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://fb.me/react-strict-mode-string-ref");
                    inst = ownerFiber.stateNode;
                }
                if (!inst) throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref
                if (current3 !== null && current3.ref !== null && typeof current3.ref === 'function' && current3.ref._stringRef === stringRef) return current3.ref;
                var ref = function(value) {
                    var refs = inst.refs;
                    if (refs === emptyRefsObject) // This is a lazy pooled frozen object, so we need to initialize.
                    refs = inst.refs = {
                    };
                    if (value === null) delete refs[stringRef];
                    else refs[stringRef] = value;
                };
                ref._stringRef = stringRef;
                return ref;
            } else {
                if (!(typeof mixedRef === 'string')) throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                if (!element._owner) throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information.");
            }
        }
        return mixedRef;
    }
    function throwOnInvalidObjectType(returnFiber, newChild) {
        if (returnFiber.type !== 'textarea') {
            var addendum = '';
            addendum = " If you meant to render a collection of children, use an array instead." + getCurrentFiberStackInDev();
            throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild) + ")." + addendum);
        }
    }
    function warnOnFunctionType() {
        var currentComponentErrorInfo = "Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it." + getCurrentFiberStackInDev();
        if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) return;
        ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;
        error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
    } // This wrapper function exists because I expect to clone the code in each path
    // to be able to optimize each path individually by branching early. This needs
    // a compiler or we can do it manually. Helpers that don't need this branching
    // live outside of this function.
    function ChildReconciler(shouldTrackSideEffects) {
        function deleteChild(returnFiber, childToDelete) {
            if (!shouldTrackSideEffects) // Noop.
            return;
             // Deletions are added in reversed order so we add it to the front.
            // At this point, the return fiber's effect list is empty except for
            // deletions, so we can just append the deletion to the list. The remaining
            // effects aren't added until the complete phase. Once we implement
            // resuming, this may not be true.
            var last = returnFiber.lastEffect;
            if (last !== null) {
                last.nextEffect = childToDelete;
                returnFiber.lastEffect = childToDelete;
            } else returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
            childToDelete.nextEffect = null;
            childToDelete.effectTag = Deletion;
        }
        function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) // Noop.
            return null;
             // TODO: For the shouldClone case, this could be micro-optimized a bit by
            // assuming that after the first child we've already added everything.
            var childToDelete = currentFirstChild;
            while(childToDelete !== null){
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
            }
            return null;
        }
        function mapRemainingChildren(returnFiber, currentFirstChild) {
            // Add the remaining children to a temporary map so that we can find them by
            // keys quickly. Implicit (null) keys get added to this set with their index
            // instead.
            var existingChildren = new Map();
            var existingChild = currentFirstChild;
            while(existingChild !== null){
                if (existingChild.key !== null) existingChildren.set(existingChild.key, existingChild);
                else existingChildren.set(existingChild.index, existingChild);
                existingChild = existingChild.sibling;
            }
            return existingChildren;
        }
        function useFiber(fiber, pendingProps) {
            // We currently set sibling to null and index to 0 here because it is easy
            // to forget to do before returning it. E.g. for the single child case.
            var clone = createWorkInProgress(fiber, pendingProps);
            clone.index = 0;
            clone.sibling = null;
            return clone;
        }
        function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex;
            if (!shouldTrackSideEffects) // Noop.
            return lastPlacedIndex;
            var current3 = newFiber.alternate;
            if (current3 !== null) {
                var oldIndex = current3.index;
                if (oldIndex < lastPlacedIndex) {
                    // This is a move.
                    newFiber.effectTag = Placement;
                    return lastPlacedIndex;
                } else // This item can stay in place.
                return oldIndex;
            } else {
                // This is an insertion.
                newFiber.effectTag = Placement;
                return lastPlacedIndex;
            }
        }
        function placeSingleChild(newFiber) {
            // This is simpler for the single child case. We only need to do a
            // placement for inserting new children.
            if (shouldTrackSideEffects && newFiber.alternate === null) newFiber.effectTag = Placement;
            return newFiber;
        }
        function updateTextNode(returnFiber, current3, textContent, expirationTime) {
            if (current3 === null || current3.tag !== HostText) {
                // Insert
                var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
                created.return = returnFiber;
                return created;
            } else {
                // Update
                var existing = useFiber(current3, textContent);
                existing.return = returnFiber;
                return existing;
            }
        }
        function updateElement(returnFiber, current3, element, expirationTime) {
            if (current3 !== null) {
                if (current3.elementType === element.type || isCompatibleFamilyForHotReloading(current3, element)) {
                    // Move based on index
                    var existing = useFiber(current3, element.props);
                    existing.ref = coerceRef(returnFiber, current3, element);
                    existing.return = returnFiber;
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                    return existing;
                }
            } // Insert
            var created = createFiberFromElement(element, returnFiber.mode, expirationTime);
            created.ref = coerceRef(returnFiber, current3, element);
            created.return = returnFiber;
            return created;
        }
        function updatePortal(returnFiber, current3, portal, expirationTime) {
            if (current3 === null || current3.tag !== HostPortal || current3.stateNode.containerInfo !== portal.containerInfo || current3.stateNode.implementation !== portal.implementation) {
                // Insert
                var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
                created.return = returnFiber;
                return created;
            } else {
                // Update
                var existing = useFiber(current3, portal.children || []);
                existing.return = returnFiber;
                return existing;
            }
        }
        function updateFragment(returnFiber, current3, fragment, expirationTime, key) {
            if (current3 === null || current3.tag !== Fragment) {
                // Insert
                var created = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key);
                created.return = returnFiber;
                return created;
            } else {
                // Update
                var existing = useFiber(current3, fragment);
                existing.return = returnFiber;
                return existing;
            }
        }
        function createChild(returnFiber, newChild, expirationTime) {
            if (typeof newChild === 'string' || typeof newChild === 'number') {
                // Text nodes don't have keys. If the previous node is implicitly keyed
                // we can continue to replace it without aborting even if it is not a text
                // node.
                var created = createFiberFromText('' + newChild, returnFiber.mode, expirationTime);
                created.return = returnFiber;
                return created;
            }
            if (typeof newChild === 'object' && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        var _created = createFiberFromElement(newChild, returnFiber.mode, expirationTime);
                        _created.ref = coerceRef(returnFiber, null, newChild);
                        _created.return = returnFiber;
                        return _created;
                    case REACT_PORTAL_TYPE:
                        var _created2 = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);
                        _created2.return = returnFiber;
                        return _created2;
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                    var _created3 = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null);
                    _created3.return = returnFiber;
                    return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === 'function') warnOnFunctionType();
            return null;
        }
        function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
            // Update the fiber if the keys match, otherwise return null.
            var key = oldFiber !== null ? oldFiber.key : null;
            if (typeof newChild === 'string' || typeof newChild === 'number') {
                // Text nodes don't have keys. If the previous node is implicitly keyed
                // we can continue to replace it without aborting even if it is not a text
                // node.
                if (key !== null) return null;
                return updateTextNode(returnFiber, oldFiber, '' + newChild, expirationTime);
            }
            if (typeof newChild === 'object' && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        if (newChild.key === key) {
                            if (newChild.type === REACT_FRAGMENT_TYPE) return updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key);
                            return updateElement(returnFiber, oldFiber, newChild, expirationTime);
                        } else return null;
                    case REACT_PORTAL_TYPE:
                        if (newChild.key === key) return updatePortal(returnFiber, oldFiber, newChild, expirationTime);
                        else return null;
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                    if (key !== null) return null;
                    return updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === 'function') warnOnFunctionType();
            return null;
        }
        function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
            if (typeof newChild === 'string' || typeof newChild === 'number') {
                // Text nodes don't have keys, so we neither have to check the old nor
                // new node for the key. If both are text nodes, they match.
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, '' + newChild, expirationTime);
            }
            if (typeof newChild === 'object' && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                        if (newChild.type === REACT_FRAGMENT_TYPE) return updateFragment(returnFiber, _matchedFiber, newChild.props.children, expirationTime, newChild.key);
                        return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);
                    case REACT_PORTAL_TYPE:
                        var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                        return updatePortal(returnFiber, _matchedFiber2, newChild, expirationTime);
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                    var _matchedFiber3 = existingChildren.get(newIdx) || null;
                    return updateFragment(returnFiber, _matchedFiber3, newChild, expirationTime, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === 'function') warnOnFunctionType();
            return null;
        }
        /**
   * Warns if there is a duplicate or missing key
   */ function warnOnInvalidKey(child, knownKeys) {
            if (typeof child !== 'object' || child === null) return knownKeys;
            switch(child.$$typeof){
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                    warnForMissingKey(child);
                    var key = child.key;
                    if (typeof key !== 'string') break;
                    if (knownKeys === null) {
                        knownKeys = new Set();
                        knownKeys.add(key);
                        break;
                    }
                    if (!knownKeys.has(key)) {
                        knownKeys.add(key);
                        break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
            }
            return knownKeys;
        }
        function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
            // First, validate keys.
            var knownKeys = null;
            for(var i = 0; i < newChildren.length; i++){
                var child = newChildren[i];
                knownKeys = warnOnInvalidKey(child, knownKeys);
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            for(; oldFiber !== null && newIdx < newChildren.length; newIdx++){
                if (oldFiber.index > newIdx) {
                    nextOldFiber = oldFiber;
                    oldFiber = null;
                } else nextOldFiber = oldFiber.sibling;
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);
                if (newFiber === null) {
                    // TODO: This breaks on empty slots like null children. That's
                    // unfortunate because it triggers the slow path all the time. We need
                    // a better way to communicate whether this was a miss or null,
                    // boolean, undefined, etc.
                    if (oldFiber === null) oldFiber = nextOldFiber;
                    break;
                }
                if (shouldTrackSideEffects) {
                    if (oldFiber && newFiber.alternate === null) // We matched the slot, but we didn't reuse the existing fiber, so we
                    // need to delete the existing child.
                    deleteChild(returnFiber, oldFiber);
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                resultingFirstChild = newFiber;
                else // TODO: Defer siblings if we're not at the right index for this slot.
                // I.e. if we had null values before, then we want to defer this
                // for each null value. However, we also don't want to call updateSlot
                // with the previous one.
                previousNewFiber.sibling = newFiber;
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
            }
            if (newIdx === newChildren.length) {
                // We've reached the end of the new children. We can delete the rest.
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
            }
            if (oldFiber === null) {
                // If we don't have any more existing children we can choose a fast path
                // since the rest will all be insertions.
                for(; newIdx < newChildren.length; newIdx++){
                    var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);
                    if (_newFiber === null) continue;
                    lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                    resultingFirstChild = _newFiber;
                    else previousNewFiber.sibling = _newFiber;
                    previousNewFiber = _newFiber;
                }
                return resultingFirstChild;
            } // Add all children to a key map for quick lookups.
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.
            for(; newIdx < newChildren.length; newIdx++){
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);
                if (_newFiber2 !== null) {
                    if (shouldTrackSideEffects) {
                        if (_newFiber2.alternate !== null) // The new fiber is a work in progress, but if there exists a
                        // current, that means that we reused the fiber. We need to delete
                        // it from the child list so that we don't add it to the deletion
                        // list.
                        existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                    lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) resultingFirstChild = _newFiber2;
                    else previousNewFiber.sibling = _newFiber2;
                    previousNewFiber = _newFiber2;
                }
            }
            if (shouldTrackSideEffects) // Any existing children that weren't consumed above were deleted. We need
            // to add them to the deletion list.
            existingChildren.forEach(function(child) {
                return deleteChild(returnFiber, child);
            });
            return resultingFirstChild;
        }
        function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
            // This is the same implementation as reconcileChildrenArray(),
            // but using the iterator instead.
            var iteratorFn = getIteratorFn(newChildrenIterable);
            if (!(typeof iteratorFn === 'function')) throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
            // We don't support rendering Generators because it's a mutation.
            // See https://github.com/facebook/react/issues/12995
            if (typeof Symbol === 'function' && newChildrenIterable[Symbol.toStringTag] === 'Generator') {
                if (!didWarnAboutGenerators) error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                didWarnAboutGenerators = true;
            } // Warn about using Maps as children
            if (newChildrenIterable.entries === iteratorFn) {
                if (!didWarnAboutMaps) error("Using Maps as children is unsupported and will likely yield unexpected results. Convert it to a sequence/iterable of keyed ReactElements instead.");
                didWarnAboutMaps = true;
            } // First, validate keys.
            // We'll get a different iterator later for the main pass.
            var _newChildren = iteratorFn.call(newChildrenIterable);
            if (_newChildren) {
                var knownKeys = null;
                var _step = _newChildren.next();
                for(; !_step.done; _step = _newChildren.next()){
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys);
                }
            }
            var newChildren = iteratorFn.call(newChildrenIterable);
            if (!(newChildren != null)) throw Error("An iterable object provided no iterator.");
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            var step = newChildren.next();
            for(; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()){
                if (oldFiber.index > newIdx) {
                    nextOldFiber = oldFiber;
                    oldFiber = null;
                } else nextOldFiber = oldFiber.sibling;
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);
                if (newFiber === null) {
                    // TODO: This breaks on empty slots like null children. That's
                    // unfortunate because it triggers the slow path all the time. We need
                    // a better way to communicate whether this was a miss or null,
                    // boolean, undefined, etc.
                    if (oldFiber === null) oldFiber = nextOldFiber;
                    break;
                }
                if (shouldTrackSideEffects) {
                    if (oldFiber && newFiber.alternate === null) // We matched the slot, but we didn't reuse the existing fiber, so we
                    // need to delete the existing child.
                    deleteChild(returnFiber, oldFiber);
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                resultingFirstChild = newFiber;
                else // TODO: Defer siblings if we're not at the right index for this slot.
                // I.e. if we had null values before, then we want to defer this
                // for each null value. However, we also don't want to call updateSlot
                // with the previous one.
                previousNewFiber.sibling = newFiber;
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
            }
            if (step.done) {
                // We've reached the end of the new children. We can delete the rest.
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
            }
            if (oldFiber === null) {
                // If we don't have any more existing children we can choose a fast path
                // since the rest will all be insertions.
                for(; !step.done; newIdx++, step = newChildren.next()){
                    var _newFiber3 = createChild(returnFiber, step.value, expirationTime);
                    if (_newFiber3 === null) continue;
                    lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                    resultingFirstChild = _newFiber3;
                    else previousNewFiber.sibling = _newFiber3;
                    previousNewFiber = _newFiber3;
                }
                return resultingFirstChild;
            } // Add all children to a key map for quick lookups.
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.
            for(; !step.done; newIdx++, step = newChildren.next()){
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);
                if (_newFiber4 !== null) {
                    if (shouldTrackSideEffects) {
                        if (_newFiber4.alternate !== null) // The new fiber is a work in progress, but if there exists a
                        // current, that means that we reused the fiber. We need to delete
                        // it from the child list so that we don't add it to the deletion
                        // list.
                        existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                    lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) resultingFirstChild = _newFiber4;
                    else previousNewFiber.sibling = _newFiber4;
                    previousNewFiber = _newFiber4;
                }
            }
            if (shouldTrackSideEffects) // Any existing children that weren't consumed above were deleted. We need
            // to add them to the deletion list.
            existingChildren.forEach(function(child) {
                return deleteChild(returnFiber, child);
            });
            return resultingFirstChild;
        }
        function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {
            // There's no need to check for keys on text nodes since we don't have a
            // way to define them.
            if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                // We already have an existing node so let's just update it and delete
                // the rest.
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
            } // The existing first child is not a text node so we need to create one
            // and delete the existing ones.
            deleteRemainingChildren(returnFiber, currentFirstChild);
            var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
            created.return = returnFiber;
            return created;
        }
        function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {
            var key = element.key;
            var child = currentFirstChild;
            while(child !== null){
                // TODO: If key === null and child.key === null, then this only applies to
                // the first item in the list.
                if (child.key === key) {
                    switch(child.tag){
                        case Fragment:
                            if (element.type === REACT_FRAGMENT_TYPE) {
                                deleteRemainingChildren(returnFiber, child.sibling);
                                var existing = useFiber(child, element.props.children);
                                existing.return = returnFiber;
                                existing._debugSource = element._source;
                                existing._debugOwner = element._owner;
                                return existing;
                            }
                            break;
                        case Block:
                        // We intentionally fallthrough here if enableBlocksAPI is not on.
                        // eslint-disable-next-lined no-fallthrough
                        default:
                            if (child.elementType === element.type || isCompatibleFamilyForHotReloading(child, element)) {
                                deleteRemainingChildren(returnFiber, child.sibling);
                                var _existing3 = useFiber(child, element.props);
                                _existing3.ref = coerceRef(returnFiber, child, element);
                                _existing3.return = returnFiber;
                                _existing3._debugSource = element._source;
                                _existing3._debugOwner = element._owner;
                                return _existing3;
                            }
                            break;
                    } // Didn't match.
                    deleteRemainingChildren(returnFiber, child);
                    break;
                } else deleteChild(returnFiber, child);
                child = child.sibling;
            }
            if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, expirationTime, element.key);
                created.return = returnFiber;
                return created;
            } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, expirationTime);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
            }
        }
        function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {
            var key = portal.key;
            var child = currentFirstChild;
            while(child !== null){
                // TODO: If key === null and child.key === null, then this only applies to
                // the first item in the list.
                if (child.key === key) {
                    if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var existing = useFiber(child, portal.children || []);
                        existing.return = returnFiber;
                        return existing;
                    } else {
                        deleteRemainingChildren(returnFiber, child);
                        break;
                    }
                } else deleteChild(returnFiber, child);
                child = child.sibling;
            }
            var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
            created.return = returnFiber;
            return created;
        } // This API will tag the children with the side-effect of the reconciliation
        // itself. They will be added to the side-effect list as we pass through the
        // children and the parent.
        function reconcileChildFibers(returnFiber, currentFirstChild, newChild, expirationTime) {
            // This function is not recursive.
            // If the top level item is an array, we treat it as a set of children,
            // not as a fragment. Nested arrays on the other hand will be treated as
            // fragment nodes. Recursion happens at the normal flow.
            // Handle top level unkeyed fragments as if they were arrays.
            // This leads to an ambiguity between <>{[...]}</> and <>...</>.
            // We treat the ambiguous cases above the same.
            var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
            if (isUnkeyedTopLevelFragment) newChild = newChild.props.children;
             // Handle object types
            var isObject = typeof newChild === 'object' && newChild !== null;
            if (isObject) switch(newChild.$$typeof){
                case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime));
                case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime));
            }
            if (typeof newChild === 'string' || typeof newChild === 'number') return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, expirationTime));
            if (isArray$1(newChild)) return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
            if (getIteratorFn(newChild)) return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
            if (isObject) throwOnInvalidObjectType(returnFiber, newChild);
            if (typeof newChild === 'function') warnOnFunctionType();
            if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) // If the new child is undefined, and the return fiber is a composite
            // component, throw an error. If Fiber return types are disabled,
            // we already threw above.
            switch(returnFiber.tag){
                case ClassComponent:
                    var instance = returnFiber.stateNode;
                    if (instance.render._isMockFunction) break;
                // Intentionally fall through to the next case, which handles both
                // functions and classes
                // eslint-disable-next-lined no-fallthrough
                case FunctionComponent:
                    var Component = returnFiber.type;
                    throw Error((Component.displayName || Component.name || 'Component') + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
            }
             // Remaining cases are all treated as empty.
            return deleteRemainingChildren(returnFiber, currentFirstChild);
        }
        return reconcileChildFibers;
    }
    var reconcileChildFibers = ChildReconciler(true);
    var mountChildFibers = ChildReconciler(false);
    function cloneChildFibers(current3, workInProgress) {
        if (!(current3 === null || workInProgress.child === current3.child)) throw Error("Resuming work not yet implemented.");
        if (workInProgress.child === null) return;
        var currentChild = workInProgress.child;
        var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
        workInProgress.child = newChild;
        newChild.return = workInProgress;
        while(currentChild.sibling !== null){
            currentChild = currentChild.sibling;
            newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
            newChild.return = workInProgress;
        }
        newChild.sibling = null;
    } // Reset a workInProgress child set to prepare it for a second pass.
    function resetChildFibers(workInProgress, renderExpirationTime) {
        var child = workInProgress.child;
        while(child !== null){
            resetWorkInProgress(child, renderExpirationTime);
            child = child.sibling;
        }
    }
    var NO_CONTEXT = {
    };
    var contextStackCursor$1 = createCursor(NO_CONTEXT);
    var contextFiberStackCursor = createCursor(NO_CONTEXT);
    var rootInstanceStackCursor = createCursor(NO_CONTEXT);
    function requiredContext(c) {
        if (!(c !== NO_CONTEXT)) throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
        return c;
    }
    function getRootHostContainer() {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        return rootInstance;
    }
    function pushHostContainer(fiber, nextRootInstance) {
        // Push current root instance onto the stack;
        // This allows us to reset root when portals are popped.
        push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.
        // This enables us to pop only Fibers that provide unique contexts.
        push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.
        // However, we can't just call getRootHostContext() and push it because
        // we'd have a different number of entries on the stack depending on
        // whether getRootHostContext() throws somewhere in renderer code or not.
        // So we push an empty value first. This lets us safely unwind on errors.
        push(contextStackCursor$1, NO_CONTEXT, fiber);
        var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.
        pop(contextStackCursor$1, fiber);
        push(contextStackCursor$1, nextRootContext, fiber);
    }
    function popHostContainer(fiber) {
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
        pop(rootInstanceStackCursor, fiber);
    }
    function getHostContext() {
        var context = requiredContext(contextStackCursor$1.current);
        return context;
    }
    function pushHostContext(fiber) {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        var context = requiredContext(contextStackCursor$1.current);
        var nextContext = getChildHostContext(context, fiber.type); // Don't push this Fiber's context unless it's unique.
        if (context === nextContext) return;
         // Track the context and the Fiber that provided it.
        // This enables us to pop only Fibers that provide unique contexts.
        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor$1, nextContext, fiber);
    }
    function popHostContext(fiber) {
        // Do not pop unless this Fiber provided the current context.
        // pushHostContext() only pushes Fibers that provide unique contexts.
        if (contextFiberStackCursor.current !== fiber) return;
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
    }
    var DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is
    // inherited deeply down the subtree. The upper bits only affect
    // this immediate suspense boundary and gets reset each new
    // boundary or suspense list.
    var SubtreeSuspenseContextMask = 1; // Subtree Flags:
    // InvisibleParentSuspenseContext indicates that one of our parent Suspense
    // boundaries is not currently showing visible main content.
    // Either because it is already showing a fallback or is not mounted at all.
    // We can use this to determine if it is desirable to trigger a fallback at
    // the parent. If not, then we might need to trigger undesirable boundaries
    // and/or suspend the commit to avoid hiding the parent content.
    var InvisibleParentSuspenseContext = 1; // Shallow Flags:
    // ForceSuspenseFallback can be used by SuspenseList to force newly added
    // items into their fallback state during one of the render passes.
    var ForceSuspenseFallback = 2;
    var suspenseStackCursor = createCursor(DefaultSuspenseContext);
    function hasSuspenseContext(parentContext, flag) {
        return (parentContext & flag) !== 0;
    }
    function setDefaultShallowSuspenseContext(parentContext) {
        return parentContext & SubtreeSuspenseContextMask;
    }
    function setShallowSuspenseContext(parentContext, shallowContext) {
        return parentContext & SubtreeSuspenseContextMask | shallowContext;
    }
    function addSubtreeSuspenseContext(parentContext, subtreeContext) {
        return parentContext | subtreeContext;
    }
    function pushSuspenseContext(fiber, newContext) {
        push(suspenseStackCursor, newContext, fiber);
    }
    function popSuspenseContext(fiber) {
        pop(suspenseStackCursor, fiber);
    }
    function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
        // If it was the primary children that just suspended, capture and render the
        // fallback. Otherwise, don't capture and bubble to the next boundary.
        var nextState = workInProgress.memoizedState;
        if (nextState !== null) {
            if (nextState.dehydrated !== null) // A dehydrated boundary always captures.
            return true;
            return false;
        }
        var props = workInProgress.memoizedProps; // In order to capture, the Suspense component must have a fallback prop.
        if (props.fallback === undefined) return false;
         // Regular boundaries always capture.
        if (props.unstable_avoidThisFallback !== true) return true;
         // If it's a boundary we should avoid, then we prefer to bubble up to the
        // parent boundary if it is currently invisible.
        if (hasInvisibleParent) return false;
         // If the parent is not able to handle it, we must handle it.
        return true;
    }
    function findFirstSuspended(row) {
        var node = row;
        while(node !== null){
            if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                    var dehydrated = state.dehydrated;
                    if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) return node;
                }
            } else if (node.tag === SuspenseListComponent && // keep track of whether it suspended or not.
            node.memoizedProps.revealOrder !== undefined) {
                var didSuspend = (node.effectTag & DidCapture) !== NoEffect;
                if (didSuspend) return node;
            } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === row) return null;
            while(node.sibling === null){
                if (node.return === null || node.return === row) return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
        return null;
    }
    function createDeprecatedResponderListener(responder, props) {
        var eventResponderListener = {
            responder: responder,
            props: props
        };
        Object.freeze(eventResponderListener);
        return eventResponderListener;
    }
    var HasEffect = /* */ 1; // Represents the phase in which the effect (not the clean-up) fires.
    var Layout = /*    */ 2;
    var Passive$1 = /*   */ 4;
    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
    var didWarnAboutMismatchedHooksForComponent;
    didWarnAboutMismatchedHooksForComponent = new Set();
    // These are set right before calling the component.
    var renderExpirationTime = NoWork; // The work-in-progress fiber. I've named it differently to distinguish it from
    // the work-in-progress hook.
    var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The
    // current hook list is the list that belongs to the current fiber. The
    // work-in-progress hook list is a new list that will be added to the
    // work-in-progress fiber.
    var currentHook = null;
    var workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This
    // does not get reset if we do another render pass; only when we're completely
    // finished evaluating this component. This is an optimization so we know
    // whether we need to clear render phase updates after a throw.
    var didScheduleRenderPhaseUpdate = false;
    var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook
    var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.
    // The list stores the order of hooks used during the initial render (mount).
    // Subsequent renders (updates) reference this list.
    var hookTypesDev = null;
    var hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore
    // the dependencies for Hooks that need them (e.g. useEffect or useMemo).
    // When true, such Hooks will always be "remounted". Only used during hot reload.
    var ignorePreviousDependencies = false;
    function mountHookTypesDev() {
        var hookName = currentHookNameInDev;
        if (hookTypesDev === null) hookTypesDev = [
            hookName
        ];
        else hookTypesDev.push(hookName);
    }
    function updateHookTypesDev() {
        var hookName = currentHookNameInDev;
        if (hookTypesDev !== null) {
            hookTypesUpdateIndexDev++;
            if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) warnOnHookMismatchInDev(hookName);
        }
    }
    function checkDepsAreArrayDev(deps) {
        if (deps !== undefined && deps !== null && !Array.isArray(deps)) // Verify deps, but only on mount to avoid extra checks.
        // It's unlikely their type would change as usually you define them inline.
        error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
    }
    function warnOnHookMismatchInDev(currentHookName) {
        var componentName = getComponentName(currentlyRenderingFiber$1.type);
        if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
            didWarnAboutMismatchedHooksForComponent.add(componentName);
            if (hookTypesDev !== null) {
                var table = '';
                var secondColumnStart = 30;
                for(var i = 0; i <= hookTypesUpdateIndexDev; i++){
                    var oldHookName = hookTypesDev[i];
                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i + 1 + ". " + oldHookName; // Extra space so second column lines up
                    // lol @ IE not supporting String#repeat
                    while(row.length < secondColumnStart)row += ' ';
                    row += newHookName + '\n';
                    table += row;
                }
                error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://fb.me/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
            }
        }
    }
    function throwInvalidHookError() {
        throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.");
    }
    function areHookInputsEqual(nextDeps, prevDeps) {
        if (ignorePreviousDependencies) // Only true when this component is being hot reloaded.
        return false;
        if (prevDeps === null) {
            error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            return false;
        }
        // Don't bother comparing lengths in prod because these arrays should be
        // passed inline.
        if (nextDeps.length !== prevDeps.length) error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(', ') + "]", "[" + nextDeps.join(', ') + "]");
        for(var i = 0; i < prevDeps.length && i < nextDeps.length; i++){
            if (objectIs(nextDeps[i], prevDeps[i])) continue;
            return false;
        }
        return true;
    }
    function renderWithHooks(current3, workInProgress, Component, props, secondArg, nextRenderExpirationTime) {
        renderExpirationTime = nextRenderExpirationTime;
        currentlyRenderingFiber$1 = workInProgress;
        hookTypesDev = current3 !== null ? current3._debugHookTypes : null;
        hookTypesUpdateIndexDev = -1; // Used for hot reloading:
        ignorePreviousDependencies = current3 !== null && current3.type !== workInProgress.type;
        workInProgress.memoizedState = null;
        workInProgress.updateQueue = null;
        workInProgress.expirationTime = NoWork; // The following should have already been reset
        if (current3 !== null && current3.memoizedState !== null) ReactCurrentDispatcher.current = HooksDispatcherOnUpdateInDEV;
        else if (hookTypesDev !== null) // This dispatcher handles an edge case where a component is updating,
        // but no stateful hooks have been used.
        // We want to match the production code behavior (which will use HooksDispatcherOnMount),
        // but with the extra DEV validation to ensure hooks ordering hasn't changed.
        // This dispatcher does that.
        ReactCurrentDispatcher.current = HooksDispatcherOnMountWithHookTypesInDEV;
        else ReactCurrentDispatcher.current = HooksDispatcherOnMountInDEV;
        var children = Component(props, secondArg); // Check if there was a render phase update
        if (workInProgress.expirationTime === renderExpirationTime) {
            // Keep rendering in a loop for as long as render phase updates continue to
            // be scheduled. Use a counter to prevent infinite loops.
            var numberOfReRenders = 0;
            do {
                workInProgress.expirationTime = NoWork;
                if (!(numberOfReRenders < RE_RENDER_LIMIT)) throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                numberOfReRenders += 1;
                // Even when hot reloading, allow dependencies to stabilize
                // after first render to prevent infinite render phase updates.
                ignorePreviousDependencies = false;
                currentHook = null;
                workInProgressHook = null;
                workInProgress.updateQueue = null;
                // Also validate hook order for cascading updates.
                hookTypesUpdateIndexDev = -1;
                ReactCurrentDispatcher.current = HooksDispatcherOnRerenderInDEV;
                children = Component(props, secondArg);
            }while (workInProgress.expirationTime === renderExpirationTime)
        } // We can assume the previous dispatcher is always this one, since we set it
        // at the beginning of the render phase and there's no re-entrancy.
        ReactCurrentDispatcher.current = ContextOnlyDispatcher;
        workInProgress._debugHookTypes = hookTypesDev;
        // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.
        var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
        renderExpirationTime = NoWork;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        workInProgressHook = null;
        currentHookNameInDev = null;
        hookTypesDev = null;
        hookTypesUpdateIndexDev = -1;
        didScheduleRenderPhaseUpdate = false;
        if (!!didRenderTooFewHooks) throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
        return children;
    }
    function bailoutHooks(current3, workInProgress, expirationTime) {
        workInProgress.updateQueue = current3.updateQueue;
        workInProgress.effectTag &= ~(Passive | Update);
        if (current3.expirationTime <= expirationTime) current3.expirationTime = NoWork;
    }
    function resetHooksAfterThrow() {
        // We can assume the previous dispatcher is always this one, since we set it
        // at the beginning of the render phase and there's no re-entrancy.
        ReactCurrentDispatcher.current = ContextOnlyDispatcher;
        if (didScheduleRenderPhaseUpdate) {
            // There were render phase updates. These are only valid for this render
            // phase, which we are now aborting. Remove the updates from the queues so
            // they do not persist to the next render. Do not remove updates from hooks
            // that weren't processed.
            //
            // Only reset the updates from the queue if it has a clone. If it does
            // not have a clone, that means it wasn't processed, and the updates were
            // scheduled before we entered the render phase.
            var hook = currentlyRenderingFiber$1.memoizedState;
            while(hook !== null){
                var queue = hook.queue;
                if (queue !== null) queue.pending = null;
                hook = hook.next;
            }
        }
        renderExpirationTime = NoWork;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        workInProgressHook = null;
        hookTypesDev = null;
        hookTypesUpdateIndexDev = -1;
        currentHookNameInDev = null;
        didScheduleRenderPhaseUpdate = false;
    }
    function mountWorkInProgressHook() {
        var hook = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null
        };
        if (workInProgressHook === null) // This is the first hook in the list
        currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
        else // Append to the end of the list
        workInProgressHook = workInProgressHook.next = hook;
        return workInProgressHook;
    }
    function updateWorkInProgressHook() {
        // This function is used both for updates and for re-renders triggered by a
        // render phase update. It assumes there is either a current hook we can
        // clone, or a work-in-progress hook from a previous render pass that we can
        // use as a base. When we reach the end of the base list, we must switch to
        // the dispatcher used for mounts.
        var nextCurrentHook;
        if (currentHook === null) {
            var current3 = currentlyRenderingFiber$1.alternate;
            if (current3 !== null) nextCurrentHook = current3.memoizedState;
            else nextCurrentHook = null;
        } else nextCurrentHook = currentHook.next;
        var nextWorkInProgressHook;
        if (workInProgressHook === null) nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
        else nextWorkInProgressHook = workInProgressHook.next;
        if (nextWorkInProgressHook !== null) {
            // There's already a work-in-progress. Reuse it.
            workInProgressHook = nextWorkInProgressHook;
            nextWorkInProgressHook = workInProgressHook.next;
            currentHook = nextCurrentHook;
        } else {
            // Clone from the current hook.
            if (!(nextCurrentHook !== null)) throw Error("Rendered more hooks than during the previous render.");
            currentHook = nextCurrentHook;
            var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
            };
            if (workInProgressHook === null) // This is the first hook in the list.
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
            else // Append to the end of the list.
            workInProgressHook = workInProgressHook.next = newHook;
        }
        return workInProgressHook;
    }
    function createFunctionComponentUpdateQueue() {
        return {
            lastEffect: null
        };
    }
    function basicStateReducer(state, action) {
        // $FlowFixMe: Flow doesn't like mixed types
        return typeof action === 'function' ? action(state) : action;
    }
    function mountReducer(reducer, initialArg, init) {
        var hook = mountWorkInProgressHook();
        var initialState;
        if (init !== undefined) initialState = init(initialArg);
        else initialState = initialArg;
        hook.memoizedState = hook.baseState = initialState;
        var queue = hook.queue = {
            pending: null,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState
        };
        var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
        return [
            hook.memoizedState,
            dispatch
        ];
    }
    function updateReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;
        if (!(queue !== null)) throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        queue.lastRenderedReducer = reducer;
        var current4 = currentHook; // The last rebase update that is NOT part of the base state.
        var baseQueue = current4.baseQueue; // The last pending update that hasn't been processed yet.
        var pendingQueue = queue.pending;
        if (pendingQueue !== null) {
            // We have new updates that haven't been processed yet.
            // We'll add them to the base queue.
            if (baseQueue !== null) {
                // Merge the pending queue and the base queue.
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
            }
            current4.baseQueue = baseQueue = pendingQueue;
            queue.pending = null;
        }
        if (baseQueue !== null) {
            // We have a queue to process.
            var first = baseQueue.next;
            var newState = current4.baseState;
            var newBaseState = null;
            var newBaseQueueFirst = null;
            var newBaseQueueLast = null;
            var update = first;
            do {
                var updateExpirationTime = update.expirationTime;
                if (updateExpirationTime < renderExpirationTime) {
                    // Priority is insufficient. Skip this update. If this is the first
                    // skipped update, the previous update/state is the new base
                    // update/state.
                    var clone = {
                        expirationTime: update.expirationTime,
                        suspenseConfig: update.suspenseConfig,
                        action: update.action,
                        eagerReducer: update.eagerReducer,
                        eagerState: update.eagerState,
                        next: null
                    };
                    if (newBaseQueueLast === null) {
                        newBaseQueueFirst = newBaseQueueLast = clone;
                        newBaseState = newState;
                    } else newBaseQueueLast = newBaseQueueLast.next = clone;
                     // Update the remaining priority in the queue.
                    if (updateExpirationTime > currentlyRenderingFiber$1.expirationTime) {
                        currentlyRenderingFiber$1.expirationTime = updateExpirationTime;
                        markUnprocessedUpdateTime(updateExpirationTime);
                    }
                } else {
                    // This update does have sufficient priority.
                    if (newBaseQueueLast !== null) {
                        var _clone = {
                            expirationTime: Sync,
                            // This update is going to be committed so we never want uncommit it.
                            suspenseConfig: update.suspenseConfig,
                            action: update.action,
                            eagerReducer: update.eagerReducer,
                            eagerState: update.eagerState,
                            next: null
                        };
                        newBaseQueueLast = newBaseQueueLast.next = _clone;
                    } // Mark the event time of this update as relevant to this render pass.
                    // TODO: This should ideally use the true event time of this update rather than
                    // its priority which is a derived and not reverseable value.
                    // TODO: We should skip this update if it was already committed but currently
                    // we have no way of detecting the difference between a committed and suspended
                    // update here.
                    markRenderEventTimeAndConfig(updateExpirationTime, update.suspenseConfig); // Process this update.
                    if (update.eagerReducer === reducer) // If this update was processed eagerly, and its reducer matches the
                    // current reducer, we can use the eagerly computed state.
                    newState = update.eagerState;
                    else {
                        var action = update.action;
                        newState = reducer(newState, action);
                    }
                }
                update = update.next;
            }while (update !== null && update !== first)
            if (newBaseQueueLast === null) newBaseState = newState;
            else newBaseQueueLast.next = newBaseQueueFirst;
             // Mark that the fiber performed work, but only if the new state is
            // different from the current state.
            if (!objectIs(newState, hook.memoizedState)) markWorkInProgressReceivedUpdate();
            hook.memoizedState = newState;
            hook.baseState = newBaseState;
            hook.baseQueue = newBaseQueueLast;
            queue.lastRenderedState = newState;
        }
        var dispatch = queue.dispatch;
        return [
            hook.memoizedState,
            dispatch
        ];
    }
    function rerenderReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;
        if (!(queue !== null)) throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous
        // work-in-progress hook.
        var dispatch = queue.dispatch;
        var lastRenderPhaseUpdate = queue.pending;
        var newState = hook.memoizedState;
        if (lastRenderPhaseUpdate !== null) {
            // The queue doesn't persist past this render pass.
            queue.pending = null;
            var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            var update = firstRenderPhaseUpdate;
            do {
                // Process this render phase update. We don't have to check the
                // priority because it will always be the same as the current
                // render's.
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
            }while (update !== firstRenderPhaseUpdate) // Mark that the fiber performed work, but only if the new state is
            // different from the current state.
            if (!objectIs(newState, hook.memoizedState)) markWorkInProgressReceivedUpdate();
            hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to
            // the base state unless the queue is empty.
            // TODO: Not sure if this is the desired semantics, but it's what we
            // do for gDSFP. I can't remember why.
            if (hook.baseQueue === null) hook.baseState = newState;
            queue.lastRenderedState = newState;
        }
        return [
            newState,
            dispatch
        ];
    }
    function mountState(initialState) {
        var hook = mountWorkInProgressHook();
        if (typeof initialState === 'function') // $FlowFixMe: Flow doesn't like mixed types
        initialState = initialState();
        hook.memoizedState = hook.baseState = initialState;
        var queue = hook.queue = {
            pending: null,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialState
        };
        var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
        return [
            hook.memoizedState,
            dispatch
        ];
    }
    function updateState(initialState) {
        return updateReducer(basicStateReducer);
    }
    function rerenderState(initialState) {
        return rerenderReducer(basicStateReducer);
    }
    function pushEffect(tag, create, destroy, deps) {
        var effect = {
            tag: tag,
            create: create,
            destroy: destroy,
            deps: deps,
            // Circular
            next: null
        };
        var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
        if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.lastEffect = effect.next = effect;
        } else {
            var lastEffect = componentUpdateQueue.lastEffect;
            if (lastEffect === null) componentUpdateQueue.lastEffect = effect.next = effect;
            else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
            }
        }
        return effect;
    }
    function mountRef(initialValue) {
        var hook = mountWorkInProgressHook();
        var ref = {
            current: initialValue
        };
        Object.seal(ref);
        hook.memoizedState = ref;
        return ref;
    }
    function updateRef(initialValue) {
        var hook = updateWorkInProgressHook();
        return hook.memoizedState;
    }
    function mountEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        currentlyRenderingFiber$1.effectTag |= fiberEffectTag;
        hook.memoizedState = pushEffect(HasEffect | hookEffectTag, create, undefined, nextDeps);
    }
    function updateEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var destroy = undefined;
        if (currentHook !== null) {
            var prevEffect = currentHook.memoizedState;
            destroy = prevEffect.destroy;
            if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                    pushEffect(hookEffectTag, create, destroy, nextDeps);
                    return;
                }
            }
        }
        currentlyRenderingFiber$1.effectTag |= fiberEffectTag;
        hook.memoizedState = pushEffect(HasEffect | hookEffectTag, create, destroy, nextDeps);
    }
    function mountEffect(create, deps) {
        // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
        if ('undefined' !== typeof jest) warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
        return mountEffectImpl(Update | Passive, Passive$1, create, deps);
    }
    function updateEffect(create, deps) {
        // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
        if ('undefined' !== typeof jest) warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
        return updateEffectImpl(Update | Passive, Passive$1, create, deps);
    }
    function mountLayoutEffect(create, deps) {
        return mountEffectImpl(Update, Layout, create, deps);
    }
    function updateLayoutEffect(create, deps) {
        return updateEffectImpl(Update, Layout, create, deps);
    }
    function imperativeHandleEffect(create, ref) {
        if (typeof ref === 'function') {
            var refCallback = ref;
            var _inst = create();
            refCallback(_inst);
            return function() {
                refCallback(null);
            };
        } else if (ref !== null && ref !== undefined) {
            var refObject = ref;
            if (!refObject.hasOwnProperty('current')) error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", 'an object with keys {' + Object.keys(refObject).join(', ') + '}');
            var _inst2 = create();
            refObject.current = _inst2;
            return function() {
                refObject.current = null;
            };
        }
    }
    function mountImperativeHandle(ref, create, deps) {
        if (typeof create !== 'function') error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : 'null');
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([
            ref
        ]) : null;
        return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
    }
    function updateImperativeHandle(ref, create, deps) {
        if (typeof create !== 'function') error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : 'null');
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([
            ref
        ]) : null;
        return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
    }
    function mountDebugValue(value, formatterFn) {
    // The react-debug-hooks package injects its own implementation
    // so that e.g. DevTools can display custom hook values.
    }
    var updateDebugValue = mountDebugValue;
    function mountCallback(callback, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        hook.memoizedState = [
            callback,
            nextDeps
        ];
        return callback;
    }
    function updateCallback(callback, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) {
            if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) return prevState[0];
            }
        }
        hook.memoizedState = [
            callback,
            nextDeps
        ];
        return callback;
    }
    function mountMemo(nextCreate, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var nextValue = nextCreate();
        hook.memoizedState = [
            nextValue,
            nextDeps
        ];
        return nextValue;
    }
    function updateMemo(nextCreate, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) // Assume these are defined. If they're not, areHookInputsEqual will warn.
        {
            if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) return prevState[0];
            }
        }
        var nextValue = nextCreate();
        hook.memoizedState = [
            nextValue,
            nextDeps
        ];
        return nextValue;
    }
    function mountDeferredValue(value, config) {
        var _mountState = mountState(value), prevValue = _mountState[0], setValue = _mountState[1];
        mountEffect(function() {
            var previousConfig = ReactCurrentBatchConfig$1.suspense;
            ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;
            try {
                setValue(value);
            } finally{
                ReactCurrentBatchConfig$1.suspense = previousConfig;
            }
        }, [
            value,
            config
        ]);
        return prevValue;
    }
    function updateDeferredValue(value, config) {
        var _updateState = updateState(), prevValue = _updateState[0], setValue = _updateState[1];
        updateEffect(function() {
            var previousConfig = ReactCurrentBatchConfig$1.suspense;
            ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;
            try {
                setValue(value);
            } finally{
                ReactCurrentBatchConfig$1.suspense = previousConfig;
            }
        }, [
            value,
            config
        ]);
        return prevValue;
    }
    function rerenderDeferredValue(value, config) {
        var _rerenderState = rerenderState(), prevValue = _rerenderState[0], setValue = _rerenderState[1];
        updateEffect(function() {
            var previousConfig = ReactCurrentBatchConfig$1.suspense;
            ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;
            try {
                setValue(value);
            } finally{
                ReactCurrentBatchConfig$1.suspense = previousConfig;
            }
        }, [
            value,
            config
        ]);
        return prevValue;
    }
    function startTransition(setPending, config, callback) {
        var priorityLevel = getCurrentPriorityLevel();
        runWithPriority$1(priorityLevel < UserBlockingPriority$1 ? UserBlockingPriority$1 : priorityLevel, function() {
            setPending(true);
        });
        runWithPriority$1(priorityLevel > NormalPriority ? NormalPriority : priorityLevel, function() {
            var previousConfig = ReactCurrentBatchConfig$1.suspense;
            ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;
            try {
                setPending(false);
                callback();
            } finally{
                ReactCurrentBatchConfig$1.suspense = previousConfig;
            }
        });
    }
    function mountTransition(config) {
        var _mountState2 = mountState(false), isPending = _mountState2[0], setPending = _mountState2[1];
        var start = mountCallback(startTransition.bind(null, setPending, config), [
            setPending,
            config
        ]);
        return [
            start,
            isPending
        ];
    }
    function updateTransition(config) {
        var _updateState2 = updateState(), isPending = _updateState2[0], setPending = _updateState2[1];
        var start = updateCallback(startTransition.bind(null, setPending, config), [
            setPending,
            config
        ]);
        return [
            start,
            isPending
        ];
    }
    function rerenderTransition(config) {
        var _rerenderState2 = rerenderState(), isPending = _rerenderState2[0], setPending = _rerenderState2[1];
        var start = updateCallback(startTransition.bind(null, setPending, config), [
            setPending,
            config
        ]);
        return [
            start,
            isPending
        ];
    }
    function dispatchAction(fiber, queue, action) {
        if (typeof arguments[3] === 'function') error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
        var currentTime = requestCurrentTimeForUpdate();
        var suspenseConfig = requestCurrentSuspenseConfig();
        var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
        var update = {
            expirationTime: expirationTime,
            suspenseConfig: suspenseConfig,
            action: action,
            eagerReducer: null,
            eagerState: null,
            next: null
        };
        update.priority = getCurrentPriorityLevel();
        var pending = queue.pending;
        if (pending === null) // This is the first update. Create a circular list.
        update.next = update;
        else {
            update.next = pending.next;
            pending.next = update;
        }
        queue.pending = update;
        var alternate = fiber.alternate;
        if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
            // This is a render phase update. Stash it in a lazily-created map of
            // queue -> linked list of updates. After this render pass, we'll restart
            // and apply the stashed updates on top of the work-in-progress hook.
            didScheduleRenderPhaseUpdate = true;
            update.expirationTime = renderExpirationTime;
            currentlyRenderingFiber$1.expirationTime = renderExpirationTime;
        } else {
            if (fiber.expirationTime === NoWork && (alternate === null || alternate.expirationTime === NoWork)) {
                // The queue is currently empty, which means we can eagerly compute the
                // next state before entering the render phase. If the new state is the
                // same as the current state, we may be able to bail out entirely.
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                    var prevDispatcher;
                    prevDispatcher = ReactCurrentDispatcher.current;
                    ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                    try {
                        var currentState = queue.lastRenderedState;
                        var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute
                        // it, on the update object. If the reducer hasn't changed by the
                        // time we enter the render phase, then the eager state can be used
                        // without calling the reducer again.
                        update.eagerReducer = lastRenderedReducer;
                        update.eagerState = eagerState;
                        if (objectIs(eagerState, currentState)) // Fast path. We can bail out without scheduling React to re-render.
                        // It's still possible that we'll need to rebase this update later,
                        // if the component re-renders for a different reason and by that
                        // time the reducer has changed.
                        return;
                    } catch (error4) {
                    } finally{
                        ReactCurrentDispatcher.current = prevDispatcher;
                    }
                }
            }
            // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
            if ('undefined' !== typeof jest) {
                warnIfNotScopedWithMatchingAct(fiber);
                warnIfNotCurrentlyActingUpdatesInDev(fiber);
            }
            scheduleWork(fiber, expirationTime);
        }
    }
    var ContextOnlyDispatcher = {
        readContext: readContext,
        useCallback: throwInvalidHookError,
        useContext: throwInvalidHookError,
        useEffect: throwInvalidHookError,
        useImperativeHandle: throwInvalidHookError,
        useLayoutEffect: throwInvalidHookError,
        useMemo: throwInvalidHookError,
        useReducer: throwInvalidHookError,
        useRef: throwInvalidHookError,
        useState: throwInvalidHookError,
        useDebugValue: throwInvalidHookError,
        useResponder: throwInvalidHookError,
        useDeferredValue: throwInvalidHookError,
        useTransition: throwInvalidHookError
    };
    var HooksDispatcherOnMountInDEV = null;
    var HooksDispatcherOnMountWithHookTypesInDEV = null;
    var HooksDispatcherOnUpdateInDEV = null;
    var HooksDispatcherOnRerenderInDEV = null;
    var InvalidNestedHooksDispatcherOnMountInDEV = null;
    var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
    var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
    var warnInvalidContextAccess = function() {
        error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
    };
    var warnInvalidHookAccess = function() {
        error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://fb.me/rules-of-hooks");
    };
    HooksDispatcherOnMountInDEV = {
        readContext: function(context, observedBits) {
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            mountHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactCurrentDispatcher.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            mountHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactCurrentDispatcher.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            mountHookTypesDev();
            return mountDebugValue();
        },
        useResponder: function(responder, props) {
            currentHookNameInDev = 'useResponder';
            mountHookTypesDev();
            return createDeprecatedResponderListener(responder, props);
        },
        useDeferredValue: function(value, config) {
            currentHookNameInDev = 'useDeferredValue';
            mountHookTypesDev();
            return mountDeferredValue(value, config);
        },
        useTransition: function(config) {
            currentHookNameInDev = 'useTransition';
            mountHookTypesDev();
            return mountTransition(config);
        }
    };
    HooksDispatcherOnMountWithHookTypesInDEV = {
        readContext: function(context, observedBits) {
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            updateHookTypesDev();
            return mountCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            updateHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            updateHookTypesDev();
            return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            updateHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            updateHookTypesDev();
            return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactCurrentDispatcher.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            updateHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactCurrentDispatcher.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            updateHookTypesDev();
            return mountDebugValue();
        },
        useResponder: function(responder, props) {
            currentHookNameInDev = 'useResponder';
            updateHookTypesDev();
            return createDeprecatedResponderListener(responder, props);
        },
        useDeferredValue: function(value, config) {
            currentHookNameInDev = 'useDeferredValue';
            updateHookTypesDev();
            return mountDeferredValue(value, config);
        },
        useTransition: function(config) {
            currentHookNameInDev = 'useTransition';
            updateHookTypesDev();
            return mountTransition(config);
        }
    };
    HooksDispatcherOnUpdateInDEV = {
        readContext: function(context, observedBits) {
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            updateHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateState(initialState);
            } finally{
                ReactCurrentDispatcher.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            updateHookTypesDev();
            return updateDebugValue();
        },
        useResponder: function(responder, props) {
            currentHookNameInDev = 'useResponder';
            updateHookTypesDev();
            return createDeprecatedResponderListener(responder, props);
        },
        useDeferredValue: function(value, config) {
            currentHookNameInDev = 'useDeferredValue';
            updateHookTypesDev();
            return updateDeferredValue(value, config);
        },
        useTransition: function(config) {
            currentHookNameInDev = 'useTransition';
            updateHookTypesDev();
            return updateTransition(config);
        }
    };
    HooksDispatcherOnRerenderInDEV = {
        readContext: function(context, observedBits) {
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            updateHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
                return rerenderReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
                return rerenderState(initialState);
            } finally{
                ReactCurrentDispatcher.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            updateHookTypesDev();
            return updateDebugValue();
        },
        useResponder: function(responder, props) {
            currentHookNameInDev = 'useResponder';
            updateHookTypesDev();
            return createDeprecatedResponderListener(responder, props);
        },
        useDeferredValue: function(value, config) {
            currentHookNameInDev = 'useDeferredValue';
            updateHookTypesDev();
            return rerenderDeferredValue(value, config);
        },
        useTransition: function(config) {
            currentHookNameInDev = 'useTransition';
            updateHookTypesDev();
            return rerenderTransition(config);
        }
    };
    InvalidNestedHooksDispatcherOnMountInDEV = {
        readContext: function(context, observedBits) {
            warnInvalidContextAccess();
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactCurrentDispatcher.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactCurrentDispatcher.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDebugValue();
        },
        useResponder: function(responder, props) {
            currentHookNameInDev = 'useResponder';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return createDeprecatedResponderListener(responder, props);
        },
        useDeferredValue: function(value, config) {
            currentHookNameInDev = 'useDeferredValue';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDeferredValue(value, config);
        },
        useTransition: function(config) {
            currentHookNameInDev = 'useTransition';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountTransition(config);
        }
    };
    InvalidNestedHooksDispatcherOnUpdateInDEV = {
        readContext: function(context, observedBits) {
            warnInvalidContextAccess();
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateState(initialState);
            } finally{
                ReactCurrentDispatcher.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
        },
        useResponder: function(responder, props) {
            currentHookNameInDev = 'useResponder';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return createDeprecatedResponderListener(responder, props);
        },
        useDeferredValue: function(value, config) {
            currentHookNameInDev = 'useDeferredValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDeferredValue(value, config);
        },
        useTransition: function(config) {
            currentHookNameInDev = 'useTransition';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateTransition(config);
        }
    };
    InvalidNestedHooksDispatcherOnRerenderInDEV = {
        readContext: function(context, observedBits) {
            warnInvalidContextAccess();
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return rerenderReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return rerenderState(initialState);
            } finally{
                ReactCurrentDispatcher.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
        },
        useResponder: function(responder, props) {
            currentHookNameInDev = 'useResponder';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return createDeprecatedResponderListener(responder, props);
        },
        useDeferredValue: function(value, config) {
            currentHookNameInDev = 'useDeferredValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderDeferredValue(value, config);
        },
        useTransition: function(config) {
            currentHookNameInDev = 'useTransition';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderTransition(config);
        }
    };
    var now$1 = Scheduler.unstable_now;
    var commitTime = 0;
    var profilerStartTime = -1;
    function getCommitTime() {
        return commitTime;
    }
    function recordCommitTime() {
        commitTime = now$1();
    }
    function startProfilerTimer(fiber) {
        profilerStartTime = now$1();
        if (fiber.actualStartTime < 0) fiber.actualStartTime = now$1();
    }
    function stopProfilerTimerIfRunning(fiber) {
        profilerStartTime = -1;
    }
    function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
        if (profilerStartTime >= 0) {
            var elapsedTime = now$1() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            if (overrideBaseTime) fiber.selfBaseDuration = elapsedTime;
            profilerStartTime = -1;
        }
    }
    // This may have been an insertion or a hydration.
    var hydrationParentFiber = null;
    var nextHydratableInstance = null;
    var isHydrating = false;
    function enterHydrationState(fiber) {
        var parentInstance = fiber.stateNode.containerInfo;
        nextHydratableInstance = getFirstHydratableChild(parentInstance);
        hydrationParentFiber = fiber;
        isHydrating = true;
        return true;
    }
    function deleteHydratableInstance(returnFiber, instance) {
        switch(returnFiber.tag){
            case HostRoot:
                didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
                break;
            case HostComponent:
                didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
                break;
        }
        var childToDelete = createFiberFromHostInstanceForDeletion();
        childToDelete.stateNode = instance;
        childToDelete.return = returnFiber;
        childToDelete.effectTag = Deletion; // This might seem like it belongs on progressedFirstDeletion. However,
        // these children are not part of the reconciliation list of children.
        // Even if we abort and rereconcile the children, that will try to hydrate
        // again and the nodes are still in the host tree so these will be
        // recreated.
        if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = childToDelete;
            returnFiber.lastEffect = childToDelete;
        } else returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
    }
    function insertNonHydratedInstance(returnFiber, fiber) {
        fiber.effectTag = fiber.effectTag & ~Hydrating | Placement;
        switch(returnFiber.tag){
            case HostRoot:
                var parentContainer = returnFiber.stateNode.containerInfo;
                switch(fiber.tag){
                    case HostComponent:
                        var type = fiber.type;
                        var props = fiber.pendingProps;
                        didNotFindHydratableContainerInstance(parentContainer, type);
                        break;
                    case HostText:
                        var text = fiber.pendingProps;
                        didNotFindHydratableContainerTextInstance(parentContainer, text);
                        break;
                }
                break;
            case HostComponent:
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                switch(fiber.tag){
                    case HostComponent:
                        var _type = fiber.type;
                        var _props = fiber.pendingProps;
                        didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
                        break;
                    case HostText:
                        var _text = fiber.pendingProps;
                        didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                        break;
                    case SuspenseComponent:
                        didNotFindHydratableSuspenseInstance(parentType, parentProps);
                        break;
                }
                break;
            default:
                return;
        }
    }
    function tryHydrate(fiber, nextInstance) {
        switch(fiber.tag){
            case HostComponent:
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                    fiber.stateNode = instance;
                    return true;
                }
                return false;
            case HostText:
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                    fiber.stateNode = textInstance;
                    return true;
                }
                return false;
            case SuspenseComponent:
                return false;
            default:
                return false;
        }
    }
    function tryToClaimNextHydratableInstance(fiber) {
        if (!isHydrating) return;
        var nextInstance = nextHydratableInstance;
        if (!nextInstance) {
            // Nothing to hydrate. Make it an insertion.
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
        }
        var firstAttemptedInstance = nextInstance;
        if (!tryHydrate(fiber, nextInstance)) {
            // If we can't hydrate this instance let's try the next one.
            // We use this as a heuristic. It's based on intuition and not data so it
            // might be flawed or unnecessary.
            nextInstance = getNextHydratableSibling(firstAttemptedInstance);
            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                // Nothing to hydrate. Make it an insertion.
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
            } // We matched the next one, we'll now assume that the first one was
            // superfluous and we'll delete it. Since we can't eagerly delete it
            // we'll have to schedule a deletion. To do that, this node needs a dummy
            // fiber associated with it.
            deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
        }
        hydrationParentFiber = fiber;
        nextHydratableInstance = getFirstHydratableChild(nextInstance);
    }
    function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
        var instance = fiber.stateNode;
        var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber); // TODO: Type this specific to this type of component.
        fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
        // is a new ref we mark this as an update.
        if (updatePayload !== null) return true;
        return false;
    }
    function prepareToHydrateHostTextInstance(fiber) {
        var textInstance = fiber.stateNode;
        var textContent = fiber.memoizedProps;
        var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
        if (shouldUpdate) {
            // We assume that prepareToHydrateHostTextInstance is called in a context where the
            // hydration parent is the parent host component of this host text.
            var returnFiber = hydrationParentFiber;
            if (returnFiber !== null) switch(returnFiber.tag){
                case HostRoot:
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                    break;
                case HostComponent:
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                    break;
            }
        }
        return shouldUpdate;
    }
    function skipPastDehydratedSuspenseInstance(fiber) {
        var suspenseState = fiber.memoizedState;
        var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
        if (!suspenseInstance) throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
        return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
    }
    function popToNextHostParent(fiber) {
        var parent = fiber.return;
        while(parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent)parent = parent.return;
        hydrationParentFiber = parent;
    }
    function popHydrationState(fiber) {
        if (fiber !== hydrationParentFiber) // We're deeper than the current hydration context, inside an inserted
        // tree.
        return false;
        if (!isHydrating) {
            // If we're not currently hydrating but we're in a hydration context, then
            // we were an insertion and now need to pop up reenter hydration of our
            // siblings.
            popToNextHostParent(fiber);
            isHydrating = true;
            return false;
        }
        var type = fiber.type; // If we have any remaining hydratable nodes, we need to delete them now.
        // We only do this deeper than head and body since they tend to have random
        // other nodes in them. We also ignore components with pure text content in
        // side of them.
        // TODO: Better heuristic.
        if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
            var nextInstance = nextHydratableInstance;
            while(nextInstance){
                deleteHydratableInstance(fiber, nextInstance);
                nextInstance = getNextHydratableSibling(nextInstance);
            }
        }
        popToNextHostParent(fiber);
        if (fiber.tag === SuspenseComponent) nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
        else nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
        return true;
    }
    function resetHydrationState() {
        hydrationParentFiber = null;
        nextHydratableInstance = null;
        isHydrating = false;
    }
    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
    var didReceiveUpdate = false;
    var didWarnAboutBadClass;
    var didWarnAboutModulePatternComponent;
    var didWarnAboutContextTypeOnFunctionComponent;
    var didWarnAboutGetDerivedStateOnFunctionComponent;
    var didWarnAboutFunctionRefs;
    var didWarnAboutReassigningProps;
    var didWarnAboutRevealOrder;
    var didWarnAboutTailOptions;
    didWarnAboutBadClass = {
    };
    didWarnAboutModulePatternComponent = {
    };
    didWarnAboutContextTypeOnFunctionComponent = {
    };
    didWarnAboutGetDerivedStateOnFunctionComponent = {
    };
    didWarnAboutFunctionRefs = {
    };
    didWarnAboutReassigningProps = false;
    didWarnAboutRevealOrder = {
    };
    didWarnAboutTailOptions = {
    };
    function reconcileChildren(current4, workInProgress, nextChildren, renderExpirationTime1) {
        if (current4 === null) // If this is a fresh new component that hasn't been rendered yet, we
        // won't update its child set by applying minimal side-effects. Instead,
        // we will add them all to the child before it gets rendered. That means
        // we can optimize this reconciliation pass by not tracking side-effects.
        workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime1);
        else // If the current child is the same as the work in progress, it means that
        // we haven't yet started any work on these children. Therefore, we use
        // the clone algorithm to create a copy of all the current children.
        // If we had any progressed work already, that is invalid at this point so
        // let's throw it out.
        workInProgress.child = reconcileChildFibers(workInProgress, current4.child, nextChildren, renderExpirationTime1);
    }
    function forceUnmountCurrentAndReconcile(current4, workInProgress, nextChildren, renderExpirationTime1) {
        // This function is fork of reconcileChildren. It's used in cases where we
        // want to reconcile without matching against the existing set. This has the
        // effect of all current children being unmounted; even if the type and key
        // are the same, the old child is unmounted and a new child is created.
        //
        // To do this, we're going to go through the reconcile algorithm twice. In
        // the first pass, we schedule a deletion for all the current children by
        // passing null.
        workInProgress.child = reconcileChildFibers(workInProgress, current4.child, null, renderExpirationTime1); // In the second pass, we mount the new children. The trick here is that we
        // pass null in place of where we usually pass the current child set. This has
        // the effect of remounting all children regardless of whether their
        // identities match.
        workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime1);
    }
    function updateForwardRef(current4, workInProgress, Component, nextProps, renderExpirationTime1) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(Component), getCurrentFiberStackInDev);
        }
        var render = Component.render;
        var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent
        var nextChildren;
        prepareToReadContext(workInProgress, renderExpirationTime1);
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        nextChildren = renderWithHooks(current4, workInProgress, render, nextProps, ref, renderExpirationTime1);
        if (workInProgress.mode & StrictMode) // Only double-render components with Hooks
        {
            if (workInProgress.memoizedState !== null) nextChildren = renderWithHooks(current4, workInProgress, render, nextProps, ref, renderExpirationTime1);
        }
        setIsRendering(false);
        if (current4 !== null && !didReceiveUpdate) {
            bailoutHooks(current4, workInProgress, renderExpirationTime1);
            return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderExpirationTime1);
        } // React DevTools reads this flag.
        workInProgress.effectTag |= PerformedWork;
        reconcileChildren(current4, workInProgress, nextChildren, renderExpirationTime1);
        return workInProgress.child;
    }
    function updateMemoComponent(current4, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime1) {
        if (current4 === null) {
            var type = Component.type;
            if (isSimpleFunctionComponent(type) && Component.compare === null && Component.defaultProps === undefined) {
                var resolvedType = type;
                resolvedType = resolveFunctionForHotReloading(type);
                // and with only the default shallow comparison, we upgrade it
                // to a SimpleMemoComponent to allow fast path updates.
                workInProgress.tag = SimpleMemoComponent;
                workInProgress.type = resolvedType;
                validateFunctionComponentInDev(workInProgress, type);
                return updateSimpleMemoComponent(current4, workInProgress, resolvedType, nextProps, updateExpirationTime, renderExpirationTime1);
            }
            var innerPropTypes = type.propTypes;
            if (innerPropTypes) // Inner memo component props aren't currently validated in createElement.
            // We could move it there, but we'd still need this for lazy code path.
            checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(type), getCurrentFiberStackInDev);
            var child = createFiberFromTypeAndProps(Component.type, null, nextProps, null, workInProgress.mode, renderExpirationTime1);
            child.ref = workInProgress.ref;
            child.return = workInProgress;
            workInProgress.child = child;
            return child;
        }
        var _type = Component.type;
        var _innerPropTypes = _type.propTypes;
        if (_innerPropTypes) // Inner memo component props aren't currently validated in createElement.
        // We could move it there, but we'd still need this for lazy code path.
        checkPropTypes(_innerPropTypes, nextProps, 'prop', getComponentName(_type), getCurrentFiberStackInDev);
        var currentChild = current4.child; // This is always exactly one child
        if (updateExpirationTime < renderExpirationTime1) {
            // This will be the props with resolved defaultProps,
            // unlike current.memoizedProps which will be the unresolved ones.
            var prevProps = currentChild.memoizedProps; // Default to shallow comparison
            var compare = Component.compare;
            compare = compare !== null ? compare : shallowEqual;
            if (compare(prevProps, nextProps) && current4.ref === workInProgress.ref) return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderExpirationTime1);
        } // React DevTools reads this flag.
        workInProgress.effectTag |= PerformedWork;
        var newChild = createWorkInProgress(currentChild, nextProps);
        newChild.ref = workInProgress.ref;
        newChild.return = workInProgress;
        workInProgress.child = newChild;
        return newChild;
    }
    function updateSimpleMemoComponent(current4, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime1) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var outerMemoType = workInProgress.elementType;
            if (outerMemoType.$$typeof === REACT_LAZY_TYPE) // We warn when you define propTypes on lazy()
            // so let's just skip over it to find memo() outer wrapper.
            // Inner props for memo are validated later.
            outerMemoType = refineResolvedLazyComponent(outerMemoType);
            var outerPropTypes = outerMemoType && outerMemoType.propTypes;
            if (outerPropTypes) checkPropTypes(outerPropTypes, nextProps, 'prop', getComponentName(outerMemoType), getCurrentFiberStackInDev);
             // Inner propTypes will be validated in the function component path.
        }
        if (current4 !== null) {
            var prevProps = current4.memoizedProps;
            if (shallowEqual(prevProps, nextProps) && current4.ref === workInProgress.ref && workInProgress.type === current4.type) {
                didReceiveUpdate = false;
                if (updateExpirationTime < renderExpirationTime1) {
                    // The pending update priority was cleared at the beginning of
                    // beginWork. We're about to bail out, but there might be additional
                    // updates at a lower priority. Usually, the priority level of the
                    // remaining updates is accumlated during the evaluation of the
                    // component (i.e. when processing the update queue). But since since
                    // we're bailing out early *without* evaluating the component, we need
                    // to account for it here, too. Reset to the value of the current fiber.
                    // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,
                    // because a MemoComponent fiber does not have hooks or an update queue;
                    // rather, it wraps around an inner component, which may or may not
                    // contains hooks.
                    // TODO: Move the reset at in beginWork out of the common path so that
                    // this is no longer necessary.
                    workInProgress.expirationTime = current4.expirationTime;
                    return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderExpirationTime1);
                }
            }
        }
        return updateFunctionComponent(current4, workInProgress, Component, nextProps, renderExpirationTime1);
    }
    function updateFragment(current4, workInProgress, renderExpirationTime1) {
        var nextChildren = workInProgress.pendingProps;
        reconcileChildren(current4, workInProgress, nextChildren, renderExpirationTime1);
        return workInProgress.child;
    }
    function updateMode(current4, workInProgress, renderExpirationTime1) {
        var nextChildren = workInProgress.pendingProps.children;
        reconcileChildren(current4, workInProgress, nextChildren, renderExpirationTime1);
        return workInProgress.child;
    }
    function updateProfiler(current4, workInProgress, renderExpirationTime1) {
        workInProgress.effectTag |= Update;
        var nextProps = workInProgress.pendingProps;
        var nextChildren = nextProps.children;
        reconcileChildren(current4, workInProgress, nextChildren, renderExpirationTime1);
        return workInProgress.child;
    }
    function markRef(current4, workInProgress) {
        var ref = workInProgress.ref;
        if (current4 === null && ref !== null || current4 !== null && current4.ref !== ref) // Schedule a Ref effect
        workInProgress.effectTag |= Ref;
    }
    function updateFunctionComponent(current4, workInProgress, Component, nextProps, renderExpirationTime1) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(Component), getCurrentFiberStackInDev);
        }
        var context;
        var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
        context = getMaskedContext(workInProgress, unmaskedContext);
        var nextChildren;
        prepareToReadContext(workInProgress, renderExpirationTime1);
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        nextChildren = renderWithHooks(current4, workInProgress, Component, nextProps, context, renderExpirationTime1);
        if (workInProgress.mode & StrictMode) // Only double-render components with Hooks
        {
            if (workInProgress.memoizedState !== null) nextChildren = renderWithHooks(current4, workInProgress, Component, nextProps, context, renderExpirationTime1);
        }
        setIsRendering(false);
        if (current4 !== null && !didReceiveUpdate) {
            bailoutHooks(current4, workInProgress, renderExpirationTime1);
            return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderExpirationTime1);
        } // React DevTools reads this flag.
        workInProgress.effectTag |= PerformedWork;
        reconcileChildren(current4, workInProgress, nextChildren, renderExpirationTime1);
        return workInProgress.child;
    }
    function updateClassComponent(current4, workInProgress, Component, nextProps, renderExpirationTime1) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(Component), getCurrentFiberStackInDev);
        }
        // During mounting we don't know the child context yet as the instance doesn't exist.
        // We will invalidate the child context in finishClassComponent() right after rendering.
        var hasContext;
        if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress);
        } else hasContext = false;
        prepareToReadContext(workInProgress, renderExpirationTime1);
        var instance = workInProgress.stateNode;
        var shouldUpdate;
        if (instance === null) {
            if (current4 !== null) {
                // A class component without an instance only mounts if it suspended
                // inside a non-concurrent tree, in an inconsistent state. We want to
                // treat it like a new mount, even though an empty version of it already
                // committed. Disconnect the alternate pointers.
                current4.alternate = null;
                workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect
                workInProgress.effectTag |= Placement;
            } // In the initial pass we might need to construct the instance.
            constructClassInstance(workInProgress, Component, nextProps);
            mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime1);
            shouldUpdate = true;
        } else if (current4 === null) // In a resume, we'll already have an instance we can reuse.
        shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderExpirationTime1);
        else shouldUpdate = updateClassInstance(current4, workInProgress, Component, nextProps, renderExpirationTime1);
        var nextUnitOfWork = finishClassComponent(current4, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime1);
        var inst = workInProgress.stateNode;
        if (inst.props !== nextProps) {
            if (!didWarnAboutReassigningProps) error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentName(workInProgress.type) || 'a component');
            didWarnAboutReassigningProps = true;
        }
        return nextUnitOfWork;
    }
    function finishClassComponent(current4, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime1) {
        // Refs should update even if shouldComponentUpdate returns false
        markRef(current4, workInProgress);
        var didCaptureError = (workInProgress.effectTag & DidCapture) !== NoEffect;
        if (!shouldUpdate && !didCaptureError) {
            // Context providers should defer to sCU for rendering
            if (hasContext) invalidateContextProvider(workInProgress, Component, false);
            return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderExpirationTime1);
        }
        var instance = workInProgress.stateNode; // Rerender
        ReactCurrentOwner$1.current = workInProgress;
        var nextChildren;
        if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
            // If we captured an error, but getDerivedStateFromError is not defined,
            // unmount all the children. componentDidCatch will schedule an update to
            // re-render a fallback. This is temporary until we migrate everyone to
            // the new API.
            // TODO: Warn in a future release.
            nextChildren = null;
            stopProfilerTimerIfRunning();
        } else {
            setIsRendering(true);
            nextChildren = instance.render();
            if (workInProgress.mode & StrictMode) instance.render();
            setIsRendering(false);
        } // React DevTools reads this flag.
        workInProgress.effectTag |= PerformedWork;
        if (current4 !== null && didCaptureError) // If we're recovering from an error, reconcile without reusing any of
        // the existing children. Conceptually, the normal children and the children
        // that are shown on error are two different sets, so we shouldn't reuse
        // normal children even if their identities match.
        forceUnmountCurrentAndReconcile(current4, workInProgress, nextChildren, renderExpirationTime1);
        else reconcileChildren(current4, workInProgress, nextChildren, renderExpirationTime1);
         // Memoize state using the values we just used to render.
        // TODO: Restructure so we never read values from the instance.
        workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.
        if (hasContext) invalidateContextProvider(workInProgress, Component, true);
        return workInProgress.child;
    }
    function pushHostRootContext(workInProgress) {
        var root1 = workInProgress.stateNode;
        if (root1.pendingContext) pushTopLevelContextObject(workInProgress, root1.pendingContext, root1.pendingContext !== root1.context);
        else if (root1.context) // Should always be set
        pushTopLevelContextObject(workInProgress, root1.context, false);
        pushHostContainer(workInProgress, root1.containerInfo);
    }
    function updateHostRoot(current4, workInProgress, renderExpirationTime1) {
        pushHostRootContext(workInProgress);
        var updateQueue = workInProgress.updateQueue;
        if (!(current4 !== null && updateQueue !== null)) throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
        var nextProps = workInProgress.pendingProps;
        var prevState = workInProgress.memoizedState;
        var prevChildren = prevState !== null ? prevState.element : null;
        cloneUpdateQueue(current4, workInProgress);
        processUpdateQueue(workInProgress, nextProps, null, renderExpirationTime1);
        var nextState = workInProgress.memoizedState; // Caution: React DevTools currently depends on this property
        // being called "element".
        var nextChildren = nextState.element;
        if (nextChildren === prevChildren) {
            // If the state is the same as before, that's a bailout because we had
            // no work that expires at this time.
            resetHydrationState();
            return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderExpirationTime1);
        }
        var root1 = workInProgress.stateNode;
        if (root1.hydrate && enterHydrationState(workInProgress)) {
            // If we don't have any current children this might be the first pass.
            // We always try to hydrate. If this isn't a hydration pass there won't
            // be any children to hydrate which is effectively the same thing as
            // not hydrating.
            var child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime1);
            workInProgress.child = child;
            var node = child;
            while(node){
                // Mark each child as hydrating. This is a fast path to know whether this
                // tree is part of a hydrating tree. This is used to determine if a child
                // node has fully mounted yet, and for scheduling event replaying.
                // Conceptually this is similar to Placement in that a new subtree is
                // inserted into the React tree here. It just happens to not need DOM
                // mutations because it already exists.
                node.effectTag = node.effectTag & ~Placement | Hydrating;
                node = node.sibling;
            }
        } else {
            // Otherwise reset hydration state in case we aborted and resumed another
            // root.
            reconcileChildren(current4, workInProgress, nextChildren, renderExpirationTime1);
            resetHydrationState();
        }
        return workInProgress.child;
    }
    function updateHostComponent(current4, workInProgress, renderExpirationTime1) {
        pushHostContext(workInProgress);
        if (current4 === null) tryToClaimNextHydratableInstance(workInProgress);
        var type = workInProgress.type;
        var nextProps = workInProgress.pendingProps;
        var prevProps = current4 !== null ? current4.memoizedProps : null;
        var nextChildren = nextProps.children;
        var isDirectTextChild = shouldSetTextContent(type, nextProps);
        if (isDirectTextChild) // We special case a direct text child of a host node. This is a common
        // case. We won't handle it as a reified child. We will instead handle
        // this in the host environment that also has access to this prop. That
        // avoids allocating another HostText fiber and traversing it.
        nextChildren = null;
        else if (prevProps !== null && shouldSetTextContent(type, prevProps)) // If we're switching from a direct text child to a normal child, or to
        // empty, we need to schedule the text content to be reset.
        workInProgress.effectTag |= ContentReset;
        markRef(current4, workInProgress); // Check the host config to see if the children are offscreen/hidden.
        if (workInProgress.mode & ConcurrentMode && renderExpirationTime1 !== Never && shouldDeprioritizeSubtree(type, nextProps)) {
            markSpawnedWork(Never);
            workInProgress.expirationTime = workInProgress.childExpirationTime = Never;
            return null;
        }
        reconcileChildren(current4, workInProgress, nextChildren, renderExpirationTime1);
        return workInProgress.child;
    }
    function updateHostText(current4, workInProgress) {
        if (current4 === null) tryToClaimNextHydratableInstance(workInProgress);
         // Nothing to do here. This is terminal. We'll do the completion step
        // immediately after.
        return null;
    }
    function mountLazyComponent(_current, workInProgress, elementType, updateExpirationTime, renderExpirationTime1) {
        if (_current !== null) {
            // A lazy component only mounts if it suspended inside a non-
            // concurrent tree, in an inconsistent state. We want to treat it like
            // a new mount, even though an empty version of it already committed.
            // Disconnect the alternate pointers.
            _current.alternate = null;
            workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect
            workInProgress.effectTag |= Placement;
        }
        var props = workInProgress.pendingProps; // We can't start a User Timing measurement with correct label yet.
        // Cancel and resume right after we know the tag.
        cancelWorkTimer(workInProgress);
        var Component = readLazyComponentType(elementType); // Store the unwrapped component in the type.
        workInProgress.type = Component;
        var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
        startWorkTimer(workInProgress);
        var resolvedProps = resolveDefaultProps(Component, props);
        var child;
        switch(resolvedTag){
            case FunctionComponent:
                validateFunctionComponentInDev(workInProgress, Component);
                workInProgress.type = Component = resolveFunctionForHotReloading(Component);
                child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime1);
                return child;
            case ClassComponent:
                workInProgress.type = Component = resolveClassForHotReloading(Component);
                child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime1);
                return child;
            case ForwardRef:
                workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
                child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderExpirationTime1);
                return child;
            case MemoComponent:
                if (workInProgress.type !== workInProgress.elementType) {
                    var outerPropTypes = Component.propTypes;
                    if (outerPropTypes) checkPropTypes(outerPropTypes, resolvedProps, 'prop', getComponentName(Component), getCurrentFiberStackInDev);
                }
                child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), updateExpirationTime, renderExpirationTime1);
                return child;
        }
        var hint = '';
        if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) hint = ' Did you wrap a component in React.lazy() more than once?';
        throw Error("Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint);
    }
    function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderExpirationTime1) {
        if (_current !== null) {
            // An incomplete component only mounts if it suspended inside a non-
            // concurrent tree, in an inconsistent state. We want to treat it like
            // a new mount, even though an empty version of it already committed.
            // Disconnect the alternate pointers.
            _current.alternate = null;
            workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect
            workInProgress.effectTag |= Placement;
        } // Promote the fiber to a class and try rendering again.
        workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`
        // Push context providers early to prevent context stack mismatches.
        // During mounting we don't know the child context yet as the instance doesn't exist.
        // We will invalidate the child context in finishClassComponent() right after rendering.
        var hasContext;
        if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress);
        } else hasContext = false;
        prepareToReadContext(workInProgress, renderExpirationTime1);
        constructClassInstance(workInProgress, Component, nextProps);
        mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime1);
        return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime1);
    }
    function mountIndeterminateComponent(_current, workInProgress, Component, renderExpirationTime1) {
        if (_current !== null) {
            // An indeterminate component only mounts if it suspended inside a non-
            // concurrent tree, in an inconsistent state. We want to treat it like
            // a new mount, even though an empty version of it already committed.
            // Disconnect the alternate pointers.
            _current.alternate = null;
            workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect
            workInProgress.effectTag |= Placement;
        }
        var props = workInProgress.pendingProps;
        var context;
        var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
        context = getMaskedContext(workInProgress, unmaskedContext);
        prepareToReadContext(workInProgress, renderExpirationTime1);
        var value;
        if (Component.prototype && typeof Component.prototype.render === 'function') {
            var componentName = getComponentName(Component) || 'Unknown';
            if (!didWarnAboutBadClass[componentName]) {
                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
            }
        }
        if (workInProgress.mode & StrictMode) ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
        setIsRendering(true);
        ReactCurrentOwner$1.current = workInProgress;
        value = renderWithHooks(null, workInProgress, Component, props, context, renderExpirationTime1);
        setIsRendering(false);
        workInProgress.effectTag |= PerformedWork;
        if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
            var _componentName = getComponentName(Component) || 'Unknown';
            if (!didWarnAboutModulePatternComponent[_componentName]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
            }
            workInProgress.tag = ClassComponent; // Throw out any hooks that were used.
            workInProgress.memoizedState = null;
            workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.
            // During mounting we don't know the child context yet as the instance doesn't exist.
            // We will invalidate the child context in finishClassComponent() right after rendering.
            var hasContext = false;
            if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress);
            } else hasContext = false;
            workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
            initializeUpdateQueue(workInProgress);
            var getDerivedStateFromProps = Component.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === 'function') applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
            adoptClassInstance(workInProgress, value);
            mountClassInstance(workInProgress, Component, props, renderExpirationTime1);
            return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime1);
        } else {
            // Proceed under the assumption that this is a function component
            workInProgress.tag = FunctionComponent;
            if (workInProgress.mode & StrictMode) // Only double-render components with Hooks
            {
                if (workInProgress.memoizedState !== null) value = renderWithHooks(null, workInProgress, Component, props, context, renderExpirationTime1);
            }
            reconcileChildren(null, workInProgress, value, renderExpirationTime1);
            validateFunctionComponentInDev(workInProgress, Component);
            return workInProgress.child;
        }
    }
    function validateFunctionComponentInDev(workInProgress, Component) {
        if (Component) {
            if (Component.childContextTypes) error('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');
        }
        if (workInProgress.ref !== null) {
            var info = '';
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) info += '\n\nCheck the render method of `' + ownerName + '`.';
            var warningKey = ownerName || workInProgress._debugID || '';
            var debugSource = workInProgress._debugSource;
            if (debugSource) warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
            if (!didWarnAboutFunctionRefs[warningKey]) {
                didWarnAboutFunctionRefs[warningKey] = true;
                error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
            }
        }
        if (typeof Component.getDerivedStateFromProps === 'function') {
            var _componentName2 = getComponentName(Component) || 'Unknown';
            if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2]) {
                error('%s: Function components do not support getDerivedStateFromProps.', _componentName2);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2] = true;
            }
        }
        if (typeof Component.contextType === 'object' && Component.contextType !== null) {
            var _componentName3 = getComponentName(Component) || 'Unknown';
            if (!didWarnAboutContextTypeOnFunctionComponent[_componentName3]) {
                error('%s: Function components do not support contextType.', _componentName3);
                didWarnAboutContextTypeOnFunctionComponent[_componentName3] = true;
            }
        }
    }
    var SUSPENDED_MARKER = {
        dehydrated: null,
        retryTime: NoWork
    };
    function shouldRemainOnFallback(suspenseContext, current4, workInProgress) {
        // If the context is telling us that we should show a fallback, and we're not
        // already showing content, then we should show the fallback instead.
        return hasSuspenseContext(suspenseContext, ForceSuspenseFallback) && (current4 === null || current4.memoizedState !== null);
    }
    function updateSuspenseComponent(current4, workInProgress, renderExpirationTime1) {
        var mode = workInProgress.mode;
        var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.
        if (shouldSuspend(workInProgress)) workInProgress.effectTag |= DidCapture;
        var suspenseContext = suspenseStackCursor.current;
        var nextDidTimeout = false;
        var didSuspend = (workInProgress.effectTag & DidCapture) !== NoEffect;
        if (didSuspend || shouldRemainOnFallback(suspenseContext, current4)) {
            // Something in this boundary's subtree already suspended. Switch to
            // rendering the fallback children.
            nextDidTimeout = true;
            workInProgress.effectTag &= ~DidCapture;
        } else {
            // Attempting the main content
            if (current4 === null || current4.memoizedState !== null) // This is a new mount or this boundary is already showing a fallback state.
            // Mark this subtree context as having at least one invisible parent that could
            // handle the fallback state.
            // Boundaries without fallbacks or should be avoided are not considered since
            // they cannot handle preferred fallback states.
            {
                if (nextProps.fallback !== undefined && nextProps.unstable_avoidThisFallback !== true) suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
            }
        }
        suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        pushSuspenseContext(workInProgress, suspenseContext); // This next part is a bit confusing. If the children timeout, we switch to
        // showing the fallback children in place of the "primary" children.
        // However, we don't want to delete the primary children because then their
        // state will be lost (both the React state and the host state, e.g.
        // uncontrolled form inputs). Instead we keep them mounted and hide them.
        // Both the fallback children AND the primary children are rendered at the
        // same time. Once the primary children are un-suspended, we can delete
        // the fallback children — don't need to preserve their state.
        //
        // The two sets of children are siblings in the host environment, but
        // semantically, for purposes of reconciliation, they are two separate sets.
        // So we store them using two fragment fibers.
        //
        // However, we want to avoid allocating extra fibers for every placeholder.
        // They're only necessary when the children time out, because that's the
        // only time when both sets are mounted.
        //
        // So, the extra fragment fibers are only used if the children time out.
        // Otherwise, we render the primary children directly. This requires some
        // custom reconciliation logic to preserve the state of the primary
        // children. It's essentially a very basic form of re-parenting.
        if (current4 === null) {
            // If we're currently hydrating, try to hydrate this boundary.
            // But only if this has a fallback.
            if (nextProps.fallback !== undefined) tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.
             // This is the initial mount. This branch is pretty simple because there's
            // no previous state that needs to be preserved.
            if (nextDidTimeout) {
                // Mount separate fragments for primary and fallback children.
                var nextFallbackChildren = nextProps.fallback;
                var primaryChildFragment = createFiberFromFragment(null, mode, NoWork, null);
                primaryChildFragment.return = workInProgress;
                if ((workInProgress.mode & BlockingMode) === NoMode) {
                    // Outside of blocking mode, we commit the effects from the
                    // partially completed, timed-out tree, too.
                    var progressedState = workInProgress.memoizedState;
                    var progressedPrimaryChild = progressedState !== null ? workInProgress.child.child : workInProgress.child;
                    primaryChildFragment.child = progressedPrimaryChild;
                    var progressedChild = progressedPrimaryChild;
                    while(progressedChild !== null){
                        progressedChild.return = primaryChildFragment;
                        progressedChild = progressedChild.sibling;
                    }
                }
                var fallbackChildFragment = createFiberFromFragment(nextFallbackChildren, mode, renderExpirationTime1, null);
                fallbackChildFragment.return = workInProgress;
                primaryChildFragment.sibling = fallbackChildFragment; // Skip the primary children, and continue working on the
                // fallback children.
                workInProgress.memoizedState = SUSPENDED_MARKER;
                workInProgress.child = primaryChildFragment;
                return fallbackChildFragment;
            } else {
                // Mount the primary children without an intermediate fragment fiber.
                var nextPrimaryChildren = nextProps.children;
                workInProgress.memoizedState = null;
                return workInProgress.child = mountChildFibers(workInProgress, null, nextPrimaryChildren, renderExpirationTime1);
            }
        } else {
            // This is an update. This branch is more complicated because we need to
            // ensure the state of the primary children is preserved.
            var prevState = current4.memoizedState;
            if (prevState !== null) {
                // wrapped in a fragment fiber.
                var currentPrimaryChildFragment = current4.child;
                var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
                if (nextDidTimeout) {
                    // Still timed out. Reuse the current primary children by cloning
                    // its fragment. We're going to skip over these entirely.
                    var _nextFallbackChildren2 = nextProps.fallback;
                    var _primaryChildFragment2 = createWorkInProgress(currentPrimaryChildFragment, currentPrimaryChildFragment.pendingProps);
                    _primaryChildFragment2.return = workInProgress;
                    if ((workInProgress.mode & BlockingMode) === NoMode) {
                        // Outside of blocking mode, we commit the effects from the
                        // partially completed, timed-out tree, too.
                        var _progressedState = workInProgress.memoizedState;
                        var _progressedPrimaryChild = _progressedState !== null ? workInProgress.child.child : workInProgress.child;
                        if (_progressedPrimaryChild !== currentPrimaryChildFragment.child) {
                            _primaryChildFragment2.child = _progressedPrimaryChild;
                            var _progressedChild2 = _progressedPrimaryChild;
                            while(_progressedChild2 !== null){
                                _progressedChild2.return = _primaryChildFragment2;
                                _progressedChild2 = _progressedChild2.sibling;
                            }
                        }
                    } // Because primaryChildFragment is a new fiber that we're inserting as the
                    // parent of a new tree, we need to set its treeBaseDuration.
                    if (workInProgress.mode & ProfileMode) {
                        // treeBaseDuration is the sum of all the child tree base durations.
                        var _treeBaseDuration = 0;
                        var _hiddenChild = _primaryChildFragment2.child;
                        while(_hiddenChild !== null){
                            _treeBaseDuration += _hiddenChild.treeBaseDuration;
                            _hiddenChild = _hiddenChild.sibling;
                        }
                        _primaryChildFragment2.treeBaseDuration = _treeBaseDuration;
                    } // Clone the fallback child fragment, too. These we'll continue
                    // working on.
                    var _fallbackChildFragment2 = createWorkInProgress(currentFallbackChildFragment, _nextFallbackChildren2);
                    _fallbackChildFragment2.return = workInProgress;
                    _primaryChildFragment2.sibling = _fallbackChildFragment2;
                    _primaryChildFragment2.childExpirationTime = NoWork; // Skip the primary children, and continue working on the
                    // fallback children.
                    workInProgress.memoizedState = SUSPENDED_MARKER;
                    workInProgress.child = _primaryChildFragment2;
                    return _fallbackChildFragment2;
                } else {
                    // No longer suspended. Switch back to showing the primary children,
                    // and remove the intermediate fragment fiber.
                    var _nextPrimaryChildren = nextProps.children;
                    var currentPrimaryChild = currentPrimaryChildFragment.child;
                    var primaryChild = reconcileChildFibers(workInProgress, currentPrimaryChild, _nextPrimaryChildren, renderExpirationTime1); // If this render doesn't suspend, we need to delete the fallback
                    // children. Wait until the complete phase, after we've confirmed the
                    // fallback is no longer needed.
                    // TODO: Would it be better to store the fallback fragment on
                    // the stateNode?
                    // Continue rendering the children, like we normally do.
                    workInProgress.memoizedState = null;
                    return workInProgress.child = primaryChild;
                }
            } else {
                // The current tree has not already timed out. That means the primary
                // children are not wrapped in a fragment fiber.
                var _currentPrimaryChild = current4.child;
                if (nextDidTimeout) {
                    // Timed out. Wrap the children in a fragment fiber to keep them
                    // separate from the fallback children.
                    var _nextFallbackChildren3 = nextProps.fallback;
                    var _primaryChildFragment3 = createFiberFromFragment(// going to render this fragment.
                    null, mode, NoWork, null);
                    _primaryChildFragment3.return = workInProgress;
                    _primaryChildFragment3.child = _currentPrimaryChild;
                    if (_currentPrimaryChild !== null) _currentPrimaryChild.return = _primaryChildFragment3;
                     // Even though we're creating a new fiber, there are no new children,
                    // because we're reusing an already mounted tree. So we don't need to
                    // schedule a placement.
                    // primaryChildFragment.effectTag |= Placement;
                    if ((workInProgress.mode & BlockingMode) === NoMode) {
                        // Outside of blocking mode, we commit the effects from the
                        // partially completed, timed-out tree, too.
                        var _progressedState2 = workInProgress.memoizedState;
                        var _progressedPrimaryChild2 = _progressedState2 !== null ? workInProgress.child.child : workInProgress.child;
                        _primaryChildFragment3.child = _progressedPrimaryChild2;
                        var _progressedChild3 = _progressedPrimaryChild2;
                        while(_progressedChild3 !== null){
                            _progressedChild3.return = _primaryChildFragment3;
                            _progressedChild3 = _progressedChild3.sibling;
                        }
                    } // Because primaryChildFragment is a new fiber that we're inserting as the
                    // parent of a new tree, we need to set its treeBaseDuration.
                    if (workInProgress.mode & ProfileMode) {
                        // treeBaseDuration is the sum of all the child tree base durations.
                        var _treeBaseDuration2 = 0;
                        var _hiddenChild2 = _primaryChildFragment3.child;
                        while(_hiddenChild2 !== null){
                            _treeBaseDuration2 += _hiddenChild2.treeBaseDuration;
                            _hiddenChild2 = _hiddenChild2.sibling;
                        }
                        _primaryChildFragment3.treeBaseDuration = _treeBaseDuration2;
                    } // Create a fragment from the fallback children, too.
                    var _fallbackChildFragment3 = createFiberFromFragment(_nextFallbackChildren3, mode, renderExpirationTime1, null);
                    _fallbackChildFragment3.return = workInProgress;
                    _primaryChildFragment3.sibling = _fallbackChildFragment3;
                    _fallbackChildFragment3.effectTag |= Placement;
                    _primaryChildFragment3.childExpirationTime = NoWork; // Skip the primary children, and continue working on the
                    // fallback children.
                    workInProgress.memoizedState = SUSPENDED_MARKER;
                    workInProgress.child = _primaryChildFragment3;
                    return _fallbackChildFragment3;
                } else {
                    // Still haven't timed out. Continue rendering the children, like we
                    // normally do.
                    workInProgress.memoizedState = null;
                    var _nextPrimaryChildren2 = nextProps.children;
                    return workInProgress.child = reconcileChildFibers(workInProgress, _currentPrimaryChild, _nextPrimaryChildren2, renderExpirationTime1);
                }
            }
        }
    }
    function scheduleWorkOnFiber(fiber, renderExpirationTime1) {
        if (fiber.expirationTime < renderExpirationTime1) fiber.expirationTime = renderExpirationTime1;
        var alternate = fiber.alternate;
        if (alternate !== null && alternate.expirationTime < renderExpirationTime1) alternate.expirationTime = renderExpirationTime1;
        scheduleWorkOnParentPath(fiber.return, renderExpirationTime1);
    }
    function propagateSuspenseContextChange(workInProgress, firstChild, renderExpirationTime1) {
        // Mark any Suspense boundaries with fallbacks as having work to do.
        // If they were previously forced into fallbacks, they may now be able
        // to unblock.
        var node = firstChild;
        while(node !== null){
            if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) scheduleWorkOnFiber(node, renderExpirationTime1);
            } else if (node.tag === SuspenseListComponent) // If the tail is hidden there might not be an Suspense boundaries
            // to schedule work on. In this case we have to schedule it on the
            // list itself.
            // We don't have to traverse to the children of the list since
            // the list will propagate the change when it rerenders.
            scheduleWorkOnFiber(node, renderExpirationTime1);
            else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === workInProgress) return;
            while(node.sibling === null){
                if (node.return === null || node.return === workInProgress) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function findLastContentRow(firstChild) {
        // This is going to find the last row among these children that is already
        // showing content on the screen, as opposed to being in fallback state or
        // new. If a row has multiple Suspense boundaries, any of them being in the
        // fallback state, counts as the whole row being in a fallback state.
        // Note that the "rows" will be workInProgress, but any nested children
        // will still be current since we haven't rendered them yet. The mounted
        // order may not be the same as the new order. We use the new order.
        var row = firstChild;
        var lastContentRow = null;
        while(row !== null){
            var currentRow = row.alternate; // New rows can't be content rows.
            if (currentRow !== null && findFirstSuspended(currentRow) === null) lastContentRow = row;
            row = row.sibling;
        }
        return lastContentRow;
    }
    function validateRevealOrder(revealOrder) {
        if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {
            didWarnAboutRevealOrder[revealOrder] = true;
            if (typeof revealOrder === 'string') switch(revealOrder.toLowerCase()){
                case 'together':
                case 'forwards':
                case 'backwards':
                    error("\"%s\" is not a valid value for revealOrder on <SuspenseList />. Use lowercase \"%s\" instead.", revealOrder, revealOrder.toLowerCase());
                    break;
                case 'forward':
                case 'backward':
                    error("\"%s\" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use \"%ss\" instead.", revealOrder, revealOrder.toLowerCase());
                    break;
                default:
                    error("\"%s\" is not a supported revealOrder on <SuspenseList />. Did you mean \"together\", \"forwards\" or \"backwards\"?", revealOrder);
                    break;
            }
            else error("%s is not a supported value for revealOrder on <SuspenseList />. Did you mean \"together\", \"forwards\" or \"backwards\"?", revealOrder);
        }
    }
    function validateTailOptions(tailMode, revealOrder) {
        if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
            if (tailMode !== 'collapsed' && tailMode !== 'hidden') {
                didWarnAboutTailOptions[tailMode] = true;
                error("\"%s\" is not a supported value for tail on <SuspenseList />. Did you mean \"collapsed\" or \"hidden\"?", tailMode);
            } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {
                didWarnAboutTailOptions[tailMode] = true;
                error("<SuspenseList tail=\"%s\" /> is only valid if revealOrder is \"forwards\" or \"backwards\". Did you mean to specify revealOrder=\"forwards\"?", tailMode);
            }
        }
    }
    function validateSuspenseListNestedChild(childSlot, index1) {
        var isArray1 = Array.isArray(childSlot);
        var isIterable = !isArray1 && typeof getIteratorFn(childSlot) === 'function';
        if (isArray1 || isIterable) {
            var type = isArray1 ? 'array' : 'iterable';
            error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index1, type);
            return false;
        }
        return true;
    }
    function validateSuspenseListChildren(children, revealOrder) {
        if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {
            if (Array.isArray(children)) for(var i = 0; i < children.length; i++){
                if (!validateSuspenseListNestedChild(children[i], i)) return;
            }
            else {
                var iteratorFn = getIteratorFn(children);
                if (typeof iteratorFn === 'function') {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                        var step = childrenIterator.next();
                        var _i = 0;
                        for(; !step.done; step = childrenIterator.next()){
                            if (!validateSuspenseListNestedChild(step.value, _i)) return;
                            _i++;
                        }
                    }
                } else error("A single row was passed to a <SuspenseList revealOrder=\"%s\" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?", revealOrder);
            }
        }
    }
    function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
        var renderState = workInProgress.memoizedState;
        if (renderState === null) workInProgress.memoizedState = {
            isBackwards: isBackwards,
            rendering: null,
            renderingStartTime: 0,
            last: lastContentRow,
            tail: tail,
            tailExpiration: 0,
            tailMode: tailMode,
            lastEffect: lastEffectBeforeRendering
        };
        else {
            // We can reuse the existing object from previous renders.
            renderState.isBackwards = isBackwards;
            renderState.rendering = null;
            renderState.renderingStartTime = 0;
            renderState.last = lastContentRow;
            renderState.tail = tail;
            renderState.tailExpiration = 0;
            renderState.tailMode = tailMode;
            renderState.lastEffect = lastEffectBeforeRendering;
        }
    } // This can end up rendering this component multiple passes.
    // The first pass splits the children fibers into two sets. A head and tail.
    // We first render the head. If anything is in fallback state, we do another
    // pass through beginWork to rerender all children (including the tail) with
    // the force suspend context. If the first render didn't have anything in
    // in fallback state. Then we render each row in the tail one-by-one.
    // That happens in the completeWork phase without going back to beginWork.
    function updateSuspenseListComponent(current4, workInProgress, renderExpirationTime1) {
        var nextProps = workInProgress.pendingProps;
        var revealOrder = nextProps.revealOrder;
        var tailMode = nextProps.tail;
        var newChildren = nextProps.children;
        validateRevealOrder(revealOrder);
        validateTailOptions(tailMode, revealOrder);
        validateSuspenseListChildren(newChildren, revealOrder);
        reconcileChildren(current4, workInProgress, newChildren, renderExpirationTime1);
        var suspenseContext = suspenseStackCursor.current;
        var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        if (shouldForceFallback) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
            workInProgress.effectTag |= DidCapture;
        } else {
            var didSuspendBefore = current4 !== null && (current4.effectTag & DidCapture) !== NoEffect;
            if (didSuspendBefore) // If we previously forced a fallback, we need to schedule work
            // on any nested boundaries to let them know to try to render
            // again. This is the same as context updating.
            propagateSuspenseContextChange(workInProgress, workInProgress.child, renderExpirationTime1);
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        }
        pushSuspenseContext(workInProgress, suspenseContext);
        if ((workInProgress.mode & BlockingMode) === NoMode) // Outside of blocking mode, SuspenseList doesn't work so we just
        // use make it a noop by treating it as the default revealOrder.
        workInProgress.memoizedState = null;
        else switch(revealOrder){
            case 'forwards':
                var lastContentRow = findLastContentRow(workInProgress.child);
                var tail;
                if (lastContentRow === null) {
                    // The whole list is part of the tail.
                    // TODO: We could fast path by just rendering the tail now.
                    tail = workInProgress.child;
                    workInProgress.child = null;
                } else {
                    // Disconnect the tail rows after the content row.
                    // We're going to render them separately later.
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                }
                initSuspenseListRenderState(workInProgress, false, tail, lastContentRow, tailMode, workInProgress.lastEffect);
                break;
            case 'backwards':
                // We're going to find the first row that has existing content.
                // At the same time we're going to reverse the list of everything
                // we pass in the meantime. That's going to be our tail in reverse
                // order.
                var _tail = null;
                var row = workInProgress.child;
                workInProgress.child = null;
                while(row !== null){
                    var currentRow = row.alternate; // New rows can't be content rows.
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                        // This is the beginning of the main content.
                        workInProgress.child = row;
                        break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                } // TODO: If workInProgress.child is null, we can continue on the tail immediately.
                initSuspenseListRenderState(workInProgress, true, _tail, null, tailMode, workInProgress.lastEffect);
                break;
            case 'together':
                initSuspenseListRenderState(workInProgress, false, null, null, undefined, workInProgress.lastEffect);
                break;
            default:
                // The default reveal order is the same as not having
                // a boundary.
                workInProgress.memoizedState = null;
        }
        return workInProgress.child;
    }
    function updatePortalComponent(current4, workInProgress, renderExpirationTime1) {
        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
        var nextChildren = workInProgress.pendingProps;
        if (current4 === null) // Portals are special because we don't append the children during mount
        // but at commit. Therefore we need to track insertions which the normal
        // flow doesn't do during mount. This doesn't happen at the root because
        // the root always starts with a "current" with a null child.
        // TODO: Consider unifying this with how the root works.
        workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime1);
        else reconcileChildren(current4, workInProgress, nextChildren, renderExpirationTime1);
        return workInProgress.child;
    }
    function updateContextProvider(current4, workInProgress, renderExpirationTime1) {
        var providerType = workInProgress.type;
        var context = providerType._context;
        var newProps = workInProgress.pendingProps;
        var oldProps = workInProgress.memoizedProps;
        var newValue = newProps.value;
        var providerPropTypes = workInProgress.type.propTypes;
        if (providerPropTypes) checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider', getCurrentFiberStackInDev);
        pushProvider(workInProgress, newValue);
        if (oldProps !== null) {
            var oldValue = oldProps.value;
            var changedBits = calculateChangedBits(context, newValue, oldValue);
            if (changedBits === 0) {
                // No change. Bailout early if children are the same.
                if (oldProps.children === newProps.children && !hasContextChanged()) return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderExpirationTime1);
            } else // The context value changed. Search for matching consumers and schedule
            // them to update.
            propagateContextChange(workInProgress, context, changedBits, renderExpirationTime1);
        }
        var newChildren = newProps.children;
        reconcileChildren(current4, workInProgress, newChildren, renderExpirationTime1);
        return workInProgress.child;
    }
    var hasWarnedAboutUsingContextAsConsumer = false;
    function updateContextConsumer(current4, workInProgress, renderExpirationTime1) {
        var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In
        if (context._context === undefined) {
            // This may be because it's a Context (rather than a Consumer).
            // Or it may be because it's older React where they're the same thing.
            // We only want to warn if we're sure it's a new React.
            if (context !== context.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
            }
        } else context = context._context;
        var newProps = workInProgress.pendingProps;
        var render = newProps.children;
        if (typeof render !== 'function') error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
        prepareToReadContext(workInProgress, renderExpirationTime1);
        var newValue = readContext(context, newProps.unstable_observedBits);
        var newChildren;
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        newChildren = render(newValue);
        setIsRendering(false);
        workInProgress.effectTag |= PerformedWork;
        reconcileChildren(current4, workInProgress, newChildren, renderExpirationTime1);
        return workInProgress.child;
    }
    function markWorkInProgressReceivedUpdate() {
        didReceiveUpdate = true;
    }
    function bailoutOnAlreadyFinishedWork(current4, workInProgress, renderExpirationTime1) {
        cancelWorkTimer(workInProgress);
        if (current4 !== null) // Reuse previous dependencies
        workInProgress.dependencies = current4.dependencies;
        // Don't update "base" render times for bailouts.
        stopProfilerTimerIfRunning();
        var updateExpirationTime = workInProgress.expirationTime;
        if (updateExpirationTime !== NoWork) markUnprocessedUpdateTime(updateExpirationTime);
         // Check if the children have any pending work.
        var childExpirationTime = workInProgress.childExpirationTime;
        if (childExpirationTime < renderExpirationTime1) // The children don't have any work either. We can skip them.
        // TODO: Once we add back resuming, we should check if the children are
        // a work-in-progress set. If so, we need to transfer their effects.
        return null;
        else {
            // This fiber doesn't have work, but its subtree does. Clone the child
            // fibers and continue.
            cloneChildFibers(current4, workInProgress);
            return workInProgress.child;
        }
    }
    function remountFiber(current4, oldWorkInProgress, newWorkInProgress) {
        var returnFiber = oldWorkInProgress.return;
        if (returnFiber === null) throw new Error('Cannot swap the root fiber.');
         // Disconnect from the old current.
        // It will get deleted.
        current4.alternate = null;
        oldWorkInProgress.alternate = null; // Connect to the new tree.
        newWorkInProgress.index = oldWorkInProgress.index;
        newWorkInProgress.sibling = oldWorkInProgress.sibling;
        newWorkInProgress.return = oldWorkInProgress.return;
        newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.
        if (oldWorkInProgress === returnFiber.child) returnFiber.child = newWorkInProgress;
        else {
            var prevSibling = returnFiber.child;
            if (prevSibling === null) throw new Error('Expected parent to have a child.');
            while(prevSibling.sibling !== oldWorkInProgress){
                prevSibling = prevSibling.sibling;
                if (prevSibling === null) throw new Error('Expected to find the previous sibling.');
            }
            prevSibling.sibling = newWorkInProgress;
        } // Delete the old fiber and place the new one.
        // Since the old fiber is disconnected, we have to schedule it manually.
        var last = returnFiber.lastEffect;
        if (last !== null) {
            last.nextEffect = current4;
            returnFiber.lastEffect = current4;
        } else returnFiber.firstEffect = returnFiber.lastEffect = current4;
        current4.nextEffect = null;
        current4.effectTag = Deletion;
        newWorkInProgress.effectTag |= Placement; // Restart work from the new fiber.
        return newWorkInProgress;
    }
    function beginWork(current4, workInProgress, renderExpirationTime1) {
        var updateExpirationTime = workInProgress.expirationTime;
        if (workInProgress._debugNeedsRemount && current4 !== null) // This will restart the begin phase with a new fiber.
        return remountFiber(current4, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.expirationTime));
        if (current4 !== null) {
            var oldProps = current4.memoizedProps;
            var newProps = workInProgress.pendingProps;
            if (oldProps !== newProps || hasContextChanged() || workInProgress.type !== current4.type) // If props or context changed, mark the fiber as having performed work.
            // This may be unset if the props are determined to be equal later (memo).
            didReceiveUpdate = true;
            else if (updateExpirationTime < renderExpirationTime1) {
                didReceiveUpdate = false; // This fiber does not have any pending work. Bailout without entering
                // the begin phase. There's still some bookkeeping we that needs to be done
                // in this optimized path, mostly pushing stuff onto the stack.
                switch(workInProgress.tag){
                    case HostRoot:
                        pushHostRootContext(workInProgress);
                        resetHydrationState();
                        break;
                    case HostComponent:
                        pushHostContext(workInProgress);
                        if (workInProgress.mode & ConcurrentMode && renderExpirationTime1 !== Never && shouldDeprioritizeSubtree(workInProgress.type, newProps)) {
                            markSpawnedWork(Never);
                            workInProgress.expirationTime = workInProgress.childExpirationTime = Never;
                            return null;
                        }
                        break;
                    case ClassComponent:
                        var Component = workInProgress.type;
                        if (isContextProvider(Component)) pushContextProvider(workInProgress);
                        break;
                    case HostPortal:
                        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
                        break;
                    case ContextProvider:
                        var newValue = workInProgress.memoizedProps.value;
                        pushProvider(workInProgress, newValue);
                        break;
                    case Profiler:
                        // Profiler should only call onRender when one of its descendants actually rendered.
                        var hasChildWork = workInProgress.childExpirationTime >= renderExpirationTime1;
                        if (hasChildWork) workInProgress.effectTag |= Update;
                        break;
                    case SuspenseComponent:
                        var state = workInProgress.memoizedState;
                        if (state !== null) {
                            // whether to retry the primary children, or to skip over it and
                            // go straight to the fallback. Check the priority of the primary
                            // child fragment.
                            var primaryChildFragment = workInProgress.child;
                            var primaryChildExpirationTime = primaryChildFragment.childExpirationTime;
                            if (primaryChildExpirationTime !== NoWork && primaryChildExpirationTime >= renderExpirationTime1) // The primary children have pending work. Use the normal path
                            // to attempt to render the primary children again.
                            return updateSuspenseComponent(current4, workInProgress, renderExpirationTime1);
                            else {
                                pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient
                                // priority. Bailout.
                                var child = bailoutOnAlreadyFinishedWork(current4, workInProgress, renderExpirationTime1);
                                if (child !== null) // The fallback children have pending work. Skip over the
                                // primary children and work on the fallback.
                                return child.sibling;
                                else return null;
                            }
                        } else pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                        break;
                    case SuspenseListComponent:
                        var didSuspendBefore = (current4.effectTag & DidCapture) !== NoEffect;
                        var _hasChildWork = workInProgress.childExpirationTime >= renderExpirationTime1;
                        if (didSuspendBefore) {
                            if (_hasChildWork) // If something was in fallback state last time, and we have all the
                            // same children then we're still in progressive loading state.
                            // Something might get unblocked by state updates or retries in the
                            // tree which will affect the tail. So we need to use the normal
                            // path to compute the correct tail.
                            return updateSuspenseListComponent(current4, workInProgress, renderExpirationTime1);
                             // If none of the children had any work, that means that none of
                            // them got retried so they'll still be blocked in the same way
                            // as before. We can fast bail out.
                            workInProgress.effectTag |= DidCapture;
                        } // If nothing suspended before and we're rendering the same children,
                        // then the tail doesn't matter. Anything new that suspends will work
                        // in the "together" mode, so we can continue from the state we had.
                        var renderState = workInProgress.memoizedState;
                        if (renderState !== null) {
                            // Reset to the "together" mode in case we've started a different
                            // update in the past but didn't complete it.
                            renderState.rendering = null;
                            renderState.tail = null;
                        }
                        pushSuspenseContext(workInProgress, suspenseStackCursor.current);
                        if (_hasChildWork) break;
                        else // If none of the children had any work, that means that none of
                        // them got retried so they'll still be blocked in the same way
                        // as before. We can fast bail out.
                        return null;
                }
                return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderExpirationTime1);
            } else // An update was scheduled on this fiber, but there are no new props
            // nor legacy context. Set this to false. If an update queue or context
            // consumer produces a changed value, it will set this to true. Otherwise,
            // the component will assume the children have not changed and bail out.
            didReceiveUpdate = false;
        } else didReceiveUpdate = false;
         // Before entering the begin phase, clear pending update priority.
        // TODO: This assumes that we're about to evaluate the component and process
        // the update queue. However, there's an exception: SimpleMemoComponent
        // sometimes bails out later in the begin phase. This indicates that we should
        // move this assignment out of the common path and into each branch.
        workInProgress.expirationTime = NoWork;
        switch(workInProgress.tag){
            case IndeterminateComponent:
                return mountIndeterminateComponent(current4, workInProgress, workInProgress.type, renderExpirationTime1);
            case LazyComponent:
                var elementType = workInProgress.elementType;
                return mountLazyComponent(current4, workInProgress, elementType, updateExpirationTime, renderExpirationTime1);
            case FunctionComponent:
                var _Component = workInProgress.type;
                var unresolvedProps = workInProgress.pendingProps;
                var resolvedProps = workInProgress.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
                return updateFunctionComponent(current4, workInProgress, _Component, resolvedProps, renderExpirationTime1);
            case ClassComponent:
                var _Component2 = workInProgress.type;
                var _unresolvedProps = workInProgress.pendingProps;
                var _resolvedProps = workInProgress.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);
                return updateClassComponent(current4, workInProgress, _Component2, _resolvedProps, renderExpirationTime1);
            case HostRoot:
                return updateHostRoot(current4, workInProgress, renderExpirationTime1);
            case HostComponent:
                return updateHostComponent(current4, workInProgress, renderExpirationTime1);
            case HostText:
                return updateHostText(current4, workInProgress);
            case SuspenseComponent:
                return updateSuspenseComponent(current4, workInProgress, renderExpirationTime1);
            case HostPortal:
                return updatePortalComponent(current4, workInProgress, renderExpirationTime1);
            case ForwardRef:
                var type = workInProgress.type;
                var _unresolvedProps2 = workInProgress.pendingProps;
                var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current4, workInProgress, type, _resolvedProps2, renderExpirationTime1);
            case Fragment:
                return updateFragment(current4, workInProgress, renderExpirationTime1);
            case Mode:
                return updateMode(current4, workInProgress, renderExpirationTime1);
            case Profiler:
                return updateProfiler(current4, workInProgress, renderExpirationTime1);
            case ContextProvider:
                return updateContextProvider(current4, workInProgress, renderExpirationTime1);
            case ContextConsumer:
                return updateContextConsumer(current4, workInProgress, renderExpirationTime1);
            case MemoComponent:
                var _type2 = workInProgress.type;
                var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                if (workInProgress.type !== workInProgress.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) checkPropTypes(outerPropTypes, _resolvedProps3, 'prop', getComponentName(_type2), getCurrentFiberStackInDev);
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current4, workInProgress, _type2, _resolvedProps3, updateExpirationTime, renderExpirationTime1);
            case SimpleMemoComponent:
                return updateSimpleMemoComponent(current4, workInProgress, workInProgress.type, workInProgress.pendingProps, updateExpirationTime, renderExpirationTime1);
            case IncompleteClassComponent:
                var _Component3 = workInProgress.type;
                var _unresolvedProps4 = workInProgress.pendingProps;
                var _resolvedProps4 = workInProgress.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);
                return mountIncompleteClassComponent(current4, workInProgress, _Component3, _resolvedProps4, renderExpirationTime1);
            case SuspenseListComponent:
                return updateSuspenseListComponent(current4, workInProgress, renderExpirationTime1);
        }
        throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
    }
    function markUpdate(workInProgress) {
        // Tag the fiber with an update effect. This turns a Placement into
        // a PlacementAndUpdate.
        workInProgress.effectTag |= Update;
    }
    function markRef$1(workInProgress) {
        workInProgress.effectTag |= Ref;
    }
    var appendAllChildren;
    var updateHostContainer;
    var updateHostComponent$1;
    var updateHostText$1;
    // Mutation mode
    appendAllChildren = function(parent, workInProgress, needsVisibilityToggle, isHidden) {
        // We only have the top Fiber that was created but we need recurse down its
        // children to find all the terminal nodes.
        var node = workInProgress.child;
        while(node !== null){
            if (node.tag === HostComponent || node.tag === HostText) appendInitialChild(parent, node.stateNode);
            else if (node.tag === HostPortal) ;
            else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === workInProgress) return;
            while(node.sibling === null){
                if (node.return === null || node.return === workInProgress) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    };
    updateHostContainer = function(workInProgress) {
    };
    updateHostComponent$1 = function(current4, workInProgress, type, newProps, rootContainerInstance) {
        // If we have an alternate, that means this is an update and we need to
        // schedule a side-effect to do the updates.
        var oldProps = current4.memoizedProps;
        if (oldProps === newProps) // In mutation mode, this is sufficient for a bailout because
        // we won't touch this node even if children changed.
        return;
         // If we get updated because one of our children updated, we don't
        // have newProps so we'll have to reuse them.
        // TODO: Split the update API as separate for the props vs. children.
        // Even better would be if children weren't special cased at all tho.
        var instance = workInProgress.stateNode;
        var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host
        // component is hitting the resume path. Figure out why. Possibly
        // related to `hidden`.
        var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.
        workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
        // is a new ref we mark this as an update. All the work is done in commitWork.
        if (updatePayload) markUpdate(workInProgress);
    };
    updateHostText$1 = function(current4, workInProgress, oldText, newText) {
        // If the text differs, mark it as an update. All the work in done in commitWork.
        if (oldText !== newText) markUpdate(workInProgress);
    };
    function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
        switch(renderState.tailMode){
            case 'hidden':
                // Any insertions at the end of the tail list after this point
                // should be invisible. If there are already mounted boundaries
                // anything before them are not considered for collapsing.
                // Therefore we need to go through the whole tail to find if
                // there are any.
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while(tailNode !== null){
                    if (tailNode.alternate !== null) lastTailNode = tailNode;
                    tailNode = tailNode.sibling;
                } // Next we're simply going to delete all insertions after the
                // last rendered item.
                if (lastTailNode === null) // All remaining items in the tail are insertions.
                renderState.tail = null;
                else // Detach the insertion after the last node that was already
                // inserted.
                lastTailNode.sibling = null;
                break;
            case 'collapsed':
                // Any insertions at the end of the tail list after this point
                // should be invisible. If there are already mounted boundaries
                // anything before them are not considered for collapsing.
                // Therefore we need to go through the whole tail to find if
                // there are any.
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while(_tailNode !== null){
                    if (_tailNode.alternate !== null) _lastTailNode = _tailNode;
                    _tailNode = _tailNode.sibling;
                } // Next we're simply going to delete all insertions after the
                // last rendered item.
                if (_lastTailNode === null) {
                    // All remaining items in the tail are insertions.
                    if (!hasRenderedATailFallback && renderState.tail !== null) // We suspended during the head. We want to show at least one
                    // row at the tail. So we'll keep on and cut off the rest.
                    renderState.tail.sibling = null;
                    else renderState.tail = null;
                } else // Detach the insertion after the last node that was already
                // inserted.
                _lastTailNode.sibling = null;
                break;
        }
    }
    function completeWork(current4, workInProgress, renderExpirationTime1) {
        var newProps = workInProgress.pendingProps;
        switch(workInProgress.tag){
            case IndeterminateComponent:
            case LazyComponent:
            case SimpleMemoComponent:
            case FunctionComponent:
            case ForwardRef:
            case Fragment:
            case Mode:
            case Profiler:
            case ContextConsumer:
            case MemoComponent:
                return null;
            case ClassComponent:
                var Component = workInProgress.type;
                if (isContextProvider(Component)) popContext(workInProgress);
                return null;
            case HostRoot:
                popHostContainer(workInProgress);
                popTopLevelContextObject(workInProgress);
                var fiberRoot = workInProgress.stateNode;
                if (fiberRoot.pendingContext) {
                    fiberRoot.context = fiberRoot.pendingContext;
                    fiberRoot.pendingContext = null;
                }
                if (current4 === null || current4.child === null) {
                    // If we hydrated, pop so that we can delete any remaining children
                    // that weren't hydrated.
                    var wasHydrated = popHydrationState(workInProgress);
                    if (wasHydrated) // If we hydrated, then we'll need to schedule an update for
                    // the commit side-effects on the root.
                    markUpdate(workInProgress);
                }
                updateHostContainer(workInProgress);
                return null;
            case HostComponent:
                popHostContext(workInProgress);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress.type;
                if (current4 !== null && workInProgress.stateNode != null) {
                    updateHostComponent$1(current4, workInProgress, type, newProps, rootContainerInstance);
                    if (current4.ref !== workInProgress.ref) markRef$1(workInProgress);
                } else {
                    if (!newProps) {
                        if (!(workInProgress.stateNode !== null)) throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                         // This can happen when we abort work.
                        return null;
                    }
                    var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context
                    // "stack" as the parent. Then append children as we go in beginWork
                    // or completeWork depending on whether we want to add them top->down or
                    // bottom->up. Top->down is faster in IE11.
                    var _wasHydrated = popHydrationState(workInProgress);
                    if (_wasHydrated) // TODO: Move this and createInstance step into the beginPhase
                    // to consolidate.
                    {
                        if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) // If changes to the hydrated node need to be applied at the
                        // commit-phase we mark this as such.
                        markUpdate(workInProgress);
                    } else {
                        var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
                        appendAllChildren(instance, workInProgress, false, false); // This needs to be set before we mount Flare event listeners
                        workInProgress.stateNode = instance;
                        // (eg DOM renderer supports auto-focus for certain elements).
                        // Make sure such renderers get scheduled for later work.
                        if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) markUpdate(workInProgress);
                    }
                    if (workInProgress.ref !== null) // If there is a ref on a host node we need to schedule a callback
                    markRef$1(workInProgress);
                }
                return null;
            case HostText:
                var newText = newProps;
                if (current4 && workInProgress.stateNode != null) {
                    var oldText = current4.memoizedProps; // If we have an alternate, that means this is an update and we need
                    // to schedule a side-effect to do the updates.
                    updateHostText$1(current4, workInProgress, oldText, newText);
                } else {
                    if (typeof newText !== 'string') {
                        if (!(workInProgress.stateNode !== null)) throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                         // This can happen when we abort work.
                    }
                    var _rootContainerInstance = getRootHostContainer();
                    var _currentHostContext = getHostContext();
                    var _wasHydrated2 = popHydrationState(workInProgress);
                    if (_wasHydrated2) {
                        if (prepareToHydrateHostTextInstance(workInProgress)) markUpdate(workInProgress);
                    } else workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
                }
                return null;
            case SuspenseComponent:
                popSuspenseContext(workInProgress);
                var nextState = workInProgress.memoizedState;
                if ((workInProgress.effectTag & DidCapture) !== NoEffect) {
                    // Something suspended. Re-render with the fallback children.
                    workInProgress.expirationTime = renderExpirationTime1; // Do not reset the effect list.
                    return workInProgress;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = false;
                if (current4 === null) {
                    if (workInProgress.memoizedProps.fallback !== undefined) popHydrationState(workInProgress);
                } else {
                    var prevState = current4.memoizedState;
                    prevDidTimeout = prevState !== null;
                    if (!nextDidTimeout && prevState !== null) {
                        // We just switched from the fallback to the normal children.
                        // Delete the fallback.
                        // TODO: Would it be better to store the fallback fragment on
                        // the stateNode during the begin phase?
                        var currentFallbackChild = current4.child.sibling;
                        if (currentFallbackChild !== null) {
                            // Deletions go at the beginning of the return fiber's effect list
                            var first = workInProgress.firstEffect;
                            if (first !== null) {
                                workInProgress.firstEffect = currentFallbackChild;
                                currentFallbackChild.nextEffect = first;
                            } else {
                                workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChild;
                                currentFallbackChild.nextEffect = null;
                            }
                            currentFallbackChild.effectTag = Deletion;
                        }
                    }
                }
                if (nextDidTimeout && !prevDidTimeout) // If this subtreee is running in blocking mode we can suspend,
                // otherwise we won't suspend.
                // TODO: This will still suspend a synchronous tree if anything
                // in the concurrent tree already suspended during this render.
                // This is a known bug.
                {
                    if ((workInProgress.mode & BlockingMode) !== NoMode) {
                        // TODO: Move this back to throwException because this is too late
                        // if this is a large tree which is common for initial loads. We
                        // don't know if we should restart a render or not until we get
                        // this marker, and this is too late.
                        // If this render already had a ping or lower pri updates,
                        // and this is the first time we know we're going to suspend we
                        // should be able to immediately restart from within throwException.
                        var hasInvisibleChildContext = current4 === null && workInProgress.memoizedProps.unstable_avoidThisFallback !== true;
                        if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) // If this was in an invisible tree or a new render, then showing
                        // this boundary is ok.
                        renderDidSuspend();
                        else // Otherwise, we're going to have to hide content so we should
                        // suspend for longer if possible.
                        renderDidSuspendDelayIfPossible();
                    }
                }
                // TODO: Only schedule updates if these values are non equal, i.e. it changed.
                if (nextDidTimeout || prevDidTimeout) // If this boundary just timed out, schedule an effect to attach a
                // retry listener to the promise. This flag is also used to hide the
                // primary children. In mutation mode, we also need the flag to
                // *unhide* children that were previously hidden, so check if this
                // is currently timed out, too.
                workInProgress.effectTag |= Update;
                return null;
            case HostPortal:
                popHostContainer(workInProgress);
                updateHostContainer(workInProgress);
                return null;
            case ContextProvider:
                // Pop provider fiber
                popProvider(workInProgress);
                return null;
            case IncompleteClassComponent:
                // Same as class component case. I put it down here so that the tags are
                // sequential to ensure this switch is compiled to a jump table.
                var _Component = workInProgress.type;
                if (isContextProvider(_Component)) popContext(workInProgress);
                return null;
            case SuspenseListComponent:
                popSuspenseContext(workInProgress);
                var renderState = workInProgress.memoizedState;
                if (renderState === null) // We're running in the default, "independent" mode.
                // We don't do anything in this mode.
                return null;
                var didSuspendAlready = (workInProgress.effectTag & DidCapture) !== NoEffect;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                    // We just rendered the head.
                    if (!didSuspendAlready) {
                        // This is the first pass. We need to figure out if anything is still
                        // suspended in the rendered set.
                        // If new content unsuspended, but there's still some content that
                        // didn't. Then we need to do a second pass that forces everything
                        // to keep showing their fallbacks.
                        // We might be suspended if something in this render pass suspended, or
                        // something in the previous committed pass suspended. Otherwise,
                        // there's no chance so we can skip the expensive call to
                        // findFirstSuspended.
                        var cannotBeSuspended = renderHasNotSuspendedYet() && (current4 === null || (current4.effectTag & DidCapture) === NoEffect);
                        if (!cannotBeSuspended) {
                            var row = workInProgress.child;
                            while(row !== null){
                                var suspended = findFirstSuspended(row);
                                if (suspended !== null) {
                                    didSuspendAlready = true;
                                    workInProgress.effectTag |= DidCapture;
                                    cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as
                                    // part of the second pass. In that case nothing will subscribe to
                                    // its thennables. Instead, we'll transfer its thennables to the
                                    // SuspenseList so that it can retry if they resolve.
                                    // There might be multiple of these in the list but since we're
                                    // going to wait for all of them anyway, it doesn't really matter
                                    // which ones gets to ping. In theory we could get clever and keep
                                    // track of how many dependencies remain but it gets tricky because
                                    // in the meantime, we can add/remove/change items and dependencies.
                                    // We might bail out of the loop before finding any but that
                                    // doesn't matter since that means that the other boundaries that
                                    // we did find already has their listeners attached.
                                    var newThennables = suspended.updateQueue;
                                    if (newThennables !== null) {
                                        workInProgress.updateQueue = newThennables;
                                        workInProgress.effectTag |= Update;
                                    } // Rerender the whole list, but this time, we'll force fallbacks
                                    // to stay in place.
                                    // Reset the effect list before doing the second pass since that's now invalid.
                                    if (renderState.lastEffect === null) workInProgress.firstEffect = null;
                                    workInProgress.lastEffect = renderState.lastEffect; // Reset the child fibers to their original state.
                                    resetChildFibers(workInProgress, renderExpirationTime1); // Set up the Suspense Context to force suspense and immediately
                                    // rerender the children.
                                    pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                                    return workInProgress.child;
                                }
                                row = row.sibling;
                            }
                        }
                    } else cutOffTailIfNeeded(renderState, false);
                     // Next we're going to render the tail.
                } else {
                    // Append the rendered row to the child list.
                    if (!didSuspendAlready) {
                        var _suspended = findFirstSuspended(renderedTail);
                        if (_suspended !== null) {
                            workInProgress.effectTag |= DidCapture;
                            didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't
                            // get lost if this row ends up dropped during a second pass.
                            var _newThennables = _suspended.updateQueue;
                            if (_newThennables !== null) {
                                workInProgress.updateQueue = _newThennables;
                                workInProgress.effectTag |= Update;
                            }
                            cutOffTailIfNeeded(renderState, true); // This might have been modified.
                            if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate) {
                                // We need to delete the row we just rendered.
                                // Reset the effect list to what it was before we rendered this
                                // child. The nested children have already appended themselves.
                                var lastEffect = workInProgress.lastEffect = renderState.lastEffect; // Remove any effects that were appended after this point.
                                if (lastEffect !== null) lastEffect.nextEffect = null;
                                 // We're done.
                                return null;
                            }
                        } else if (// the expiration.
                        now() * 2 - renderState.renderingStartTime > renderState.tailExpiration && renderExpirationTime1 > Never) {
                            // We have now passed our CPU deadline and we'll just give up further
                            // attempts to render the main content and only render fallbacks.
                            // The assumption is that this is usually faster.
                            workInProgress.effectTag |= DidCapture;
                            didSuspendAlready = true;
                            cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
                            // to get it started back up to attempt the next item. If we can show
                            // them, then they really have the same priority as this render.
                            // So we'll pick it back up the very next render pass once we've had
                            // an opportunity to yield for paint.
                            var nextPriority = renderExpirationTime1 - 1;
                            workInProgress.expirationTime = workInProgress.childExpirationTime = nextPriority;
                            markSpawnedWork(nextPriority);
                        }
                    }
                    if (renderState.isBackwards) {
                        // The effect list of the backwards tail will have been added
                        // to the end. This breaks the guarantee that life-cycles fire in
                        // sibling order but that isn't a strong guarantee promised by React.
                        // Especially since these might also just pop in during future commits.
                        // Append to the beginning of the list.
                        renderedTail.sibling = workInProgress.child;
                        workInProgress.child = renderedTail;
                    } else {
                        var previousSibling = renderState.last;
                        if (previousSibling !== null) previousSibling.sibling = renderedTail;
                        else workInProgress.child = renderedTail;
                        renderState.last = renderedTail;
                    }
                }
                if (renderState.tail !== null) {
                    // We still have tail rows to render.
                    if (renderState.tailExpiration === 0) {
                        // Heuristic for how long we're willing to spend rendering rows
                        // until we just give up and show what we have so far.
                        var TAIL_EXPIRATION_TIMEOUT_MS = 500;
                        renderState.tailExpiration = now() + TAIL_EXPIRATION_TIMEOUT_MS; // TODO: This is meant to mimic the train model or JND but this
                    // is a per component value. It should really be since the start
                    // of the total render or last commit. Consider using something like
                    // globalMostRecentFallbackTime. That doesn't account for being
                    // suspended for part of the time or when it's a new render.
                    // It should probably use a global start time value instead.
                    } // Pop a row.
                    var next = renderState.tail;
                    renderState.rendering = next;
                    renderState.tail = next.sibling;
                    renderState.lastEffect = workInProgress.lastEffect;
                    renderState.renderingStartTime = now();
                    next.sibling = null; // Restore the context.
                    // TODO: We can probably just avoid popping it instead and only
                    // setting it the first time we go from not suspended to suspended.
                    var suspenseContext = suspenseStackCursor.current;
                    if (didSuspendAlready) suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                    else suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                    pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.
                    return next;
                }
                return null;
        }
        throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
    }
    function unwindWork(workInProgress, renderExpirationTime1) {
        switch(workInProgress.tag){
            case ClassComponent:
                var Component = workInProgress.type;
                if (isContextProvider(Component)) popContext(workInProgress);
                var effectTag = workInProgress.effectTag;
                if (effectTag & ShouldCapture) {
                    workInProgress.effectTag = effectTag & ~ShouldCapture | DidCapture;
                    return workInProgress;
                }
                return null;
            case HostRoot:
                popHostContainer(workInProgress);
                popTopLevelContextObject(workInProgress);
                var _effectTag = workInProgress.effectTag;
                if (!((_effectTag & DidCapture) === NoEffect)) throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
                workInProgress.effectTag = _effectTag & ~ShouldCapture | DidCapture;
                return workInProgress;
            case HostComponent:
                // TODO: popHydrationState
                popHostContext(workInProgress);
                return null;
            case SuspenseComponent:
                popSuspenseContext(workInProgress);
                var _effectTag2 = workInProgress.effectTag;
                if (_effectTag2 & ShouldCapture) {
                    workInProgress.effectTag = _effectTag2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.
                    return workInProgress;
                }
                return null;
            case SuspenseListComponent:
                popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been
                // caught by a nested boundary. If not, it should bubble through.
                return null;
            case HostPortal:
                popHostContainer(workInProgress);
                return null;
            case ContextProvider:
                popProvider(workInProgress);
                return null;
            default:
                return null;
        }
    }
    function unwindInterruptedWork(interruptedWork) {
        switch(interruptedWork.tag){
            case ClassComponent:
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== undefined) popContext(interruptedWork);
                break;
            case HostRoot:
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                break;
            case HostComponent:
                popHostContext(interruptedWork);
                break;
            case HostPortal:
                popHostContainer(interruptedWork);
                break;
            case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
            case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
            case ContextProvider:
                popProvider(interruptedWork);
                break;
        }
    }
    function createCapturedValue(value, source) {
        // If the value is an error, call this function immediately after it is thrown
        // so the stack is accurate.
        return {
            value: value,
            source: source,
            stack: getStackByFiberInDevAndProd(source)
        };
    }
    function logCapturedError(capturedError) {
        var error4 = capturedError.error;
        var componentName = capturedError.componentName, componentStack = capturedError.componentStack, errorBoundaryName = capturedError.errorBoundaryName, errorBoundaryFound = capturedError.errorBoundaryFound, willRetry = capturedError.willRetry; // Browsers support silencing uncaught errors by calling
        // `preventDefault()` in window `error` handler.
        // We record this information as an expando on the error.
        if (error4 != null && error4._suppressLogging) {
            if (errorBoundaryFound && willRetry) // The error is recoverable and was silenced.
            // Ignore it and don't print the stack addendum.
            // This is handy for testing error boundaries without noise.
            return;
             // The error is fatal. Since the silencing might have
            // been accidental, we'll surface it anyway.
            // However, the browser would have silenced the original error
            // so we'll print it first, and then print the stack addendum.
            console['error'](error4); // Don't transform to our wrapper
        // For a more detailed description of this block, see:
        // https://github.com/facebook/react/pull/13384
        }
        var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : 'The above error occurred in one of your React components:';
        var errorBoundaryMessage; // errorBoundaryFound check is sufficient; errorBoundaryName check is to satisfy Flow.
        if (errorBoundaryFound && errorBoundaryName) {
            if (willRetry) errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
            else errorBoundaryMessage = "This error was initially handled by the error boundary " + errorBoundaryName + ".\n" + "Recreating the tree from scratch failed so React will unmount the tree.";
        } else errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://fb.me/react-error-boundaries to learn more about error boundaries.";
        var combinedMessage = "" + componentNameMessage + componentStack + "\n\n" + ("" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.
        // We don't include the original error message and JS stack because the browser
        // has already printed it. Even if the application swallows the error, it is still
        // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.
        console['error'](combinedMessage); // Don't transform to our wrapper
    }
    var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
    didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
    var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;
    function logError(boundary, errorInfo) {
        var source = errorInfo.source;
        var stack = errorInfo.stack;
        if (stack === null && source !== null) stack = getStackByFiberInDevAndProd(source);
        var capturedError = {
            componentName: source !== null ? getComponentName(source.type) : null,
            componentStack: stack !== null ? stack : '',
            error: errorInfo.value,
            errorBoundary: null,
            errorBoundaryName: null,
            errorBoundaryFound: false,
            willRetry: false
        };
        if (boundary !== null && boundary.tag === ClassComponent) {
            capturedError.errorBoundary = boundary.stateNode;
            capturedError.errorBoundaryName = getComponentName(boundary.type);
            capturedError.errorBoundaryFound = true;
            capturedError.willRetry = true;
        }
        try {
            logCapturedError(capturedError);
        } catch (e) {
            // This method must not throw, or React internal state will get messed up.
            // If console.error is overridden, or logCapturedError() shows a dialog that throws,
            // we want to report this error outside of the normal stack as a last resort.
            // https://github.com/facebook/react/issues/13188
            setTimeout(function() {
                throw e;
            });
        }
    }
    var callComponentWillUnmountWithTimer = function(current4, instance) {
        startPhaseTimer(current4, 'componentWillUnmount');
        instance.props = current4.memoizedProps;
        instance.state = current4.memoizedState;
        instance.componentWillUnmount();
        stopPhaseTimer();
    }; // Capture errors so they don't interrupt unmounting.
    function safelyCallComponentWillUnmount(current4, instance) {
        invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current4, instance);
        if (hasCaughtError()) {
            var unmountError = clearCaughtError();
            captureCommitPhaseError(current4, unmountError);
        }
    }
    function safelyDetachRef(current4) {
        var ref = current4.ref;
        if (ref !== null) {
            if (typeof ref === 'function') {
                invokeGuardedCallback(null, ref, null, null);
                if (hasCaughtError()) {
                    var refError = clearCaughtError();
                    captureCommitPhaseError(current4, refError);
                }
            } else ref.current = null;
        }
    }
    function safelyCallDestroy(current4, destroy) {
        invokeGuardedCallback(null, destroy, null);
        if (hasCaughtError()) {
            var error4 = clearCaughtError();
            captureCommitPhaseError(current4, error4);
        }
    }
    function commitBeforeMutationLifeCycles(current4, finishedWork) {
        switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
            case Block:
                return;
            case ClassComponent:
                if (finishedWork.effectTag & Snapshot) {
                    if (current4 !== null) {
                        var prevProps = current4.memoizedProps;
                        var prevState = current4.memoizedState;
                        startPhaseTimer(finishedWork, 'getSnapshotBeforeUpdate');
                        var instance = finishedWork.stateNode; // We could update instance props and state here,
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                            if (instance.state !== finishedWork.memoizedState) error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                        }
                        var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                        var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                        if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                            didWarnSet.add(finishedWork.type);
                            error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentName(finishedWork.type));
                        }
                        instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                        stopPhaseTimer();
                    }
                }
                return;
            case HostRoot:
            case HostComponent:
            case HostText:
            case HostPortal:
            case IncompleteClassComponent:
                // Nothing to do for these component types
                return;
        }
        throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
    }
    function commitHookEffectListUnmount(tag, finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
                if ((effect.tag & tag) === tag) {
                    // Unmount
                    var destroy = effect.destroy;
                    effect.destroy = undefined;
                    if (destroy !== undefined) destroy();
                }
                effect = effect.next;
            }while (effect !== firstEffect)
        }
    }
    function commitHookEffectListMount(tag, finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
                if ((effect.tag & tag) === tag) {
                    // Mount
                    var create = effect.create;
                    effect.destroy = create();
                    var destroy = effect.destroy;
                    if (destroy !== undefined && typeof destroy !== 'function') {
                        var addendum = void 0;
                        if (destroy === null) addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                        else if (typeof destroy.then === 'function') addendum = "\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://fb.me/react-hooks-data-fetching";
                        else addendum = ' You returned: ' + destroy;
                        error("An effect function must not return anything besides a function, which is used for clean-up.%s%s", addendum, getStackByFiberInDevAndProd(finishedWork));
                    }
                }
                effect = effect.next;
            }while (effect !== firstEffect)
        }
    }
    function commitPassiveHookEffects(finishedWork) {
        if ((finishedWork.effectTag & Passive) !== NoEffect) switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
            case Block:
                // TODO (#17945) We should call all passive destroy functions (for all fibers)
                // before calling any create functions. The current approach only serializes
                // these for a single fiber.
                commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork);
                commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                break;
        }
    }
    function commitLifeCycles(finishedRoot, current4, finishedWork, committedExpirationTime) {
        switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
            case Block:
                // At this point layout effects have already been destroyed (during mutation phase).
                // This is done to prevent sibling component effects from interfering with each other,
                // e.g. a destroy function in one component should never override a ref set
                // by a create function in another component during the same commit.
                commitHookEffectListMount(Layout | HasEffect, finishedWork);
                return;
            case ClassComponent:
                var instance = finishedWork.stateNode;
                if (finishedWork.effectTag & Update) {
                    if (current4 === null) {
                        startPhaseTimer(finishedWork, 'componentDidMount'); // We could update instance props and state here,
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                            if (instance.state !== finishedWork.memoizedState) error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                        }
                        instance.componentDidMount();
                        stopPhaseTimer();
                    } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current4.memoizedProps : resolveDefaultProps(finishedWork.type, current4.memoizedProps);
                        var prevState = current4.memoizedState;
                        startPhaseTimer(finishedWork, 'componentDidUpdate'); // We could update instance props and state here,
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                            if (instance.state !== finishedWork.memoizedState) error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                        }
                        instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        stopPhaseTimer();
                    }
                }
                var updateQueue = finishedWork.updateQueue;
                if (updateQueue !== null) {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                        if (instance.state !== finishedWork.memoizedState) error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                    }
                    // but instead we rely on them being set during last render.
                    // TODO: revisit this when we implement resuming.
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                }
                return;
            case HostRoot:
                var _updateQueue = finishedWork.updateQueue;
                if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) switch(finishedWork.child.tag){
                        case HostComponent:
                            _instance = getPublicInstance(finishedWork.child.stateNode);
                            break;
                        case ClassComponent:
                            _instance = finishedWork.child.stateNode;
                            break;
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                }
                return;
            case HostComponent:
                var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted
                // (eg DOM renderer may schedule auto-focus for inputs and form controls).
                // These effects should only be committed when components are first mounted,
                // aka when there is no current/alternate.
                if (current4 === null && finishedWork.effectTag & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                }
                return;
            case HostText:
                // We have no life-cycles associated with text.
                return;
            case HostPortal:
                // We have no life-cycles associated with portals.
                return;
            case Profiler:
                var onRender = finishedWork.memoizedProps.onRender;
                if (typeof onRender === 'function') onRender(finishedWork.memoizedProps.id, current4 === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, getCommitTime(), finishedRoot.memoizedInteractions);
                return;
            case SuspenseComponent:
                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                return;
            case SuspenseListComponent:
            case IncompleteClassComponent:
            case FundamentalComponent:
            case ScopeComponent:
                return;
        }
        throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
    }
    function hideOrUnhideAllChildren(finishedWork, isHidden) {
        // We only have the top Fiber that was inserted but we need to recurse down its
        // children to find all the terminal nodes.
        var node = finishedWork;
        while(true){
            if (node.tag === HostComponent) {
                var instance = node.stateNode;
                if (isHidden) hideInstance(instance);
                else unhideInstance(node.stateNode, node.memoizedProps);
            } else if (node.tag === HostText) {
                var _instance3 = node.stateNode;
                if (isHidden) hideTextInstance(_instance3);
                else unhideTextInstance(_instance3, node.memoizedProps);
            } else if (node.tag === SuspenseComponent && node.memoizedState !== null && node.memoizedState.dehydrated === null) {
                // Found a nested Suspense component that timed out. Skip over the
                // primary child fragment, which should remain hidden.
                var fallbackChildFragment = node.child.sibling;
                fallbackChildFragment.return = node;
                node = fallbackChildFragment;
                continue;
            } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === finishedWork) return;
            while(node.sibling === null){
                if (node.return === null || node.return === finishedWork) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function commitAttachRef(finishedWork) {
        var ref = finishedWork.ref;
        if (ref !== null) {
            var instance = finishedWork.stateNode;
            var instanceToUse;
            switch(finishedWork.tag){
                case HostComponent:
                    instanceToUse = getPublicInstance(instance);
                    break;
                default:
                    instanceToUse = instance;
            } // Moved outside to ensure DCE works with this flag
            if (typeof ref === 'function') ref(instanceToUse);
            else {
                if (!ref.hasOwnProperty('current')) error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().%s", getComponentName(finishedWork.type), getStackByFiberInDevAndProd(finishedWork));
                ref.current = instanceToUse;
            }
        }
    }
    function commitDetachRef(current4) {
        var currentRef = current4.ref;
        if (currentRef !== null) {
            if (typeof currentRef === 'function') currentRef(null);
            else currentRef.current = null;
        }
    } // User-originating errors (lifecycles and refs) should not interrupt
    // deletion, so don't let them throw. Host-originating errors should
    // interrupt deletion, so it's okay
    function commitUnmount(finishedRoot, current4, renderPriorityLevel) {
        onCommitUnmount(current4);
        switch(current4.tag){
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
            case Block:
                var updateQueue = current4.updateQueue;
                if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                        var firstEffect = lastEffect.next;
                        // When the owner fiber is deleted, the destroy function of a passive
                        // effect hook is called during the synchronous commit phase. This is
                        // a concession to implementation complexity. Calling it in the
                        // passive effect phase (like they usually are, when dependencies
                        // change during an update) would require either traversing the
                        // children of the deleted fiber again, or including unmount effects
                        // as part of the fiber effect list.
                        //
                        // Because this is during the sync commit phase, we need to change
                        // the priority.
                        //
                        // TODO: Reconsider this implementation trade off.
                        var priorityLevel = renderPriorityLevel > NormalPriority ? NormalPriority : renderPriorityLevel;
                        runWithPriority$1(priorityLevel, function() {
                            var effect = firstEffect;
                            do {
                                var _destroy = effect.destroy;
                                if (_destroy !== undefined) safelyCallDestroy(current4, _destroy);
                                effect = effect.next;
                            }while (effect !== firstEffect)
                        });
                    }
                }
                return;
            case ClassComponent:
                safelyDetachRef(current4);
                var instance = current4.stateNode;
                if (typeof instance.componentWillUnmount === 'function') safelyCallComponentWillUnmount(current4, instance);
                return;
            case HostComponent:
                safelyDetachRef(current4);
                return;
            case HostPortal:
                unmountHostComponents(finishedRoot, current4, renderPriorityLevel);
                return;
            case FundamentalComponent:
                return;
            case DehydratedFragment:
                return;
            case ScopeComponent:
                return;
        }
    }
    function commitNestedUnmounts(finishedRoot, root1, renderPriorityLevel) {
        // While we're inside a removed host node we don't want to call
        // removeChild on the inner nodes because they're removed by the top
        // call anyway. We also want to call componentWillUnmount on all
        // composites before this host node is removed from the tree. Therefore
        // we do an inner loop while we're still inside the host node.
        var node = root1;
        while(true){
            commitUnmount(finishedRoot, node, renderPriorityLevel); // Visit children because they may contain more composite or host nodes.
            // Skip portals because commitUnmount() currently visits them recursively.
            if (node.child !== null && // If we don't use mutation we drill down into portals here instead.
            node.tag !== HostPortal) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === root1) return;
            while(node.sibling === null){
                if (node.return === null || node.return === root1) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function detachFiber(current4) {
        var alternate = current4.alternate; // Cut off the return pointers to disconnect it from the tree. Ideally, we
        // should clear the child pointer of the parent alternate to let this
        // get GC:ed but we don't know which for sure which parent is the current
        // one so we'll settle for GC:ing the subtree of this child. This child
        // itself will be GC:ed when the parent updates the next time.
        current4.return = null;
        current4.child = null;
        current4.memoizedState = null;
        current4.updateQueue = null;
        current4.dependencies = null;
        current4.alternate = null;
        current4.firstEffect = null;
        current4.lastEffect = null;
        current4.pendingProps = null;
        current4.memoizedProps = null;
        current4.stateNode = null;
        if (alternate !== null) detachFiber(alternate);
    }
    function getHostParentFiber(fiber) {
        var parent = fiber.return;
        while(parent !== null){
            if (isHostParent(parent)) return parent;
            parent = parent.return;
        }
        throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
    }
    function isHostParent(fiber) {
        return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
    }
    function getHostSibling(fiber) {
        // We're going to search forward into the tree until we find a sibling host
        // node. Unfortunately, if multiple insertions are done in a row we have to
        // search past them. This leads to exponential search for the next sibling.
        // TODO: Find a more efficient way to do this.
        var node = fiber;
        siblings: while(true){
            // If we didn't find anything, let's try the next sibling.
            while(node.sibling === null){
                if (node.return === null || isHostParent(node.return)) // If we pop out of the root or hit the parent the fiber we are the
                // last sibling.
                return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
            while(node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment){
                // If it is not host node and, we might have a host node inside it.
                // Try to search down until we find one.
                if (node.effectTag & Placement) continue siblings;
                 // If we don't have a child, try the siblings instead.
                // We also skip portals because they are not part of this host tree.
                if (node.child === null || node.tag === HostPortal) continue siblings;
                else {
                    node.child.return = node;
                    node = node.child;
                }
            } // Check if this host node is stable or about to be placed.
            if (!(node.effectTag & Placement)) // Found it!
            return node.stateNode;
        }
    }
    function commitPlacement(finishedWork) {
        var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.
        var parent;
        var isContainer;
        var parentStateNode = parentFiber.stateNode;
        switch(parentFiber.tag){
            case HostComponent:
                parent = parentStateNode;
                isContainer = false;
                break;
            case HostRoot:
                parent = parentStateNode.containerInfo;
                isContainer = true;
                break;
            case HostPortal:
                parent = parentStateNode.containerInfo;
                isContainer = true;
                break;
            case FundamentalComponent:
            // eslint-disable-next-line-no-fallthrough
            default:
                throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
        }
        if (parentFiber.effectTag & ContentReset) {
            // Reset the text content of the parent before doing any insertions
            resetTextContent(parent); // Clear ContentReset from the effect tag
            parentFiber.effectTag &= ~ContentReset;
        }
        var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its
        // children to find all the terminal nodes.
        if (isContainer) insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
        else insertOrAppendPlacementNode(finishedWork, before, parent);
    }
    function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
        var tag = node.tag;
        var isHost = tag === HostComponent || tag === HostText;
        if (isHost || enableFundamentalAPI) {
            var stateNode = isHost ? node.stateNode : node.stateNode.instance;
            if (before) insertInContainerBefore(parent, stateNode, before);
            else appendChildToContainer(parent, stateNode);
        } else if (tag === HostPortal) ;
        else {
            var child = node.child;
            if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while(sibling !== null){
                    insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                    sibling = sibling.sibling;
                }
            }
        }
    }
    function insertOrAppendPlacementNode(node, before, parent) {
        var tag = node.tag;
        var isHost = tag === HostComponent || tag === HostText;
        if (isHost || enableFundamentalAPI) {
            var stateNode = isHost ? node.stateNode : node.stateNode.instance;
            if (before) insertBefore(parent, stateNode, before);
            else appendChild(parent, stateNode);
        } else if (tag === HostPortal) ;
        else {
            var child = node.child;
            if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while(sibling !== null){
                    insertOrAppendPlacementNode(sibling, before, parent);
                    sibling = sibling.sibling;
                }
            }
        }
    }
    function unmountHostComponents(finishedRoot, current4, renderPriorityLevel) {
        // We only have the top Fiber that was deleted but we need to recurse down its
        // children to find all the terminal nodes.
        var node = current4; // Each iteration, currentParent is populated with node's host parent if not
        // currentParentIsValid.
        var currentParentIsValid = false; // Note: these two variables *must* always be updated together.
        var currentParent;
        var currentParentIsContainer;
        while(true){
            if (!currentParentIsValid) {
                var parent = node.return;
                findParent: while(true){
                    if (!(parent !== null)) throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
                    var parentStateNode = parent.stateNode;
                    switch(parent.tag){
                        case HostComponent:
                            currentParent = parentStateNode;
                            currentParentIsContainer = false;
                            break findParent;
                        case HostRoot:
                            currentParent = parentStateNode.containerInfo;
                            currentParentIsContainer = true;
                            break findParent;
                        case HostPortal:
                            currentParent = parentStateNode.containerInfo;
                            currentParentIsContainer = true;
                            break findParent;
                    }
                    parent = parent.return;
                }
                currentParentIsValid = true;
            }
            if (node.tag === HostComponent || node.tag === HostText) {
                commitNestedUnmounts(finishedRoot, node, renderPriorityLevel); // After all the children have unmounted, it is now safe to remove the
                // node from the tree.
                if (currentParentIsContainer) removeChildFromContainer(currentParent, node.stateNode);
                else removeChild(currentParent, node.stateNode);
                 // Don't visit children because we already visited them.
            } else if (node.tag === HostPortal) {
                if (node.child !== null) {
                    // When we go into a portal, it becomes the parent to remove from.
                    // We will reassign it back when we pop the portal on the way up.
                    currentParent = node.stateNode.containerInfo;
                    currentParentIsContainer = true; // Visit children because portals might contain host components.
                    node.child.return = node;
                    node = node.child;
                    continue;
                }
            } else {
                commitUnmount(finishedRoot, node, renderPriorityLevel); // Visit children because we may find more host components below.
                if (node.child !== null) {
                    node.child.return = node;
                    node = node.child;
                    continue;
                }
            }
            if (node === current4) return;
            while(node.sibling === null){
                if (node.return === null || node.return === current4) return;
                node = node.return;
                if (node.tag === HostPortal) // When we go out of the portal, we need to restore the parent.
                // Since we don't keep a stack of them, we will search for it.
                currentParentIsValid = false;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function commitDeletion(finishedRoot, current4, renderPriorityLevel) {
        // Recursively delete all host nodes from the parent.
        // Detach refs and call componentWillUnmount() on the whole subtree.
        unmountHostComponents(finishedRoot, current4, renderPriorityLevel);
        detachFiber(current4);
    }
    function commitWork(current4, finishedWork) {
        switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
            case Block:
                // Layout effects are destroyed during the mutation phase so that all
                // destroy functions for all fibers are called before any create functions.
                // This prevents sibling component effects from interfering with each other,
                // e.g. a destroy function in one component should never override a ref set
                // by a create function in another component during the same commit.
                commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
                return;
            case ClassComponent:
                return;
            case HostComponent:
                var instance = finishedWork.stateNode;
                if (instance != null) {
                    // Commit the work prepared earlier.
                    var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
                    // as the newProps. The updatePayload will contain the real change in
                    // this case.
                    var oldProps = current4 !== null ? current4.memoizedProps : newProps;
                    var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.
                    var updatePayload = finishedWork.updateQueue;
                    finishedWork.updateQueue = null;
                    if (updatePayload !== null) commitUpdate(instance, updatePayload, type, oldProps, newProps);
                }
                return;
            case HostText:
                if (!(finishedWork.stateNode !== null)) throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                var textInstance = finishedWork.stateNode;
                var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
                // as the newProps. The updatePayload will contain the real change in
                // this case.
                var oldText = current4 !== null ? current4.memoizedProps : newText;
                commitTextUpdate(textInstance, oldText, newText);
                return;
            case HostRoot:
                var _root = finishedWork.stateNode;
                if (_root.hydrate) {
                    // We've just hydrated. No need to hydrate again.
                    _root.hydrate = false;
                    commitHydratedContainer(_root.containerInfo);
                }
                return;
            case Profiler:
                return;
            case SuspenseComponent:
                commitSuspenseComponent(finishedWork);
                attachSuspenseRetryListeners(finishedWork);
                return;
            case SuspenseListComponent:
                attachSuspenseRetryListeners(finishedWork);
                return;
            case IncompleteClassComponent:
                return;
        }
        throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
    }
    function commitSuspenseComponent(finishedWork) {
        var newState = finishedWork.memoizedState;
        var newDidTimeout;
        var primaryChildParent = finishedWork;
        if (newState === null) newDidTimeout = false;
        else {
            newDidTimeout = true;
            primaryChildParent = finishedWork.child;
            markCommitTimeOfFallback();
        }
        if (primaryChildParent !== null) hideOrUnhideAllChildren(primaryChildParent, newDidTimeout);
    }
    function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
        var newState = finishedWork.memoizedState;
        if (newState === null) {
            var current4 = finishedWork.alternate;
            if (current4 !== null) {
                var prevState = current4.memoizedState;
                if (prevState !== null) {
                    var suspenseInstance = prevState.dehydrated;
                    if (suspenseInstance !== null) commitHydratedSuspenseInstance(suspenseInstance);
                }
            }
        }
    }
    function attachSuspenseRetryListeners(finishedWork) {
        // If this boundary just timed out, then it will have a set of thenables.
        // For each thenable, attach a listener so that when it resolves, React
        // attempts to re-render the boundary in the primary (pre-timeout) state.
        var thenables = finishedWork.updateQueue;
        if (thenables !== null) {
            finishedWork.updateQueue = null;
            var retryCache = finishedWork.stateNode;
            if (retryCache === null) retryCache = finishedWork.stateNode = new PossiblyWeakSet();
            thenables.forEach(function(thenable) {
                // Memoize using the boundary fiber to prevent redundant listeners.
                var retry = resolveRetryThenable.bind(null, finishedWork, thenable);
                if (!retryCache.has(thenable)) {
                    if (thenable.__reactDoNotTraceInteractions !== true) retry = tracing.unstable_wrap(retry);
                    retryCache.add(thenable);
                    thenable.then(retry, retry);
                }
            });
        }
    }
    function commitResetTextContent(current5) {
        resetTextContent(current5.stateNode);
    }
    var PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;
    function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
        var update = createUpdate(expirationTime, null); // Unmount the root by rendering null.
        update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property
        // being called "element".
        update.payload = {
            element: null
        };
        var error5 = errorInfo.value;
        update.callback = function() {
            onUncaughtError(error5);
            logError(fiber, errorInfo);
        };
        return update;
    }
    function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
        var update = createUpdate(expirationTime, null);
        update.tag = CaptureUpdate;
        var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
        if (typeof getDerivedStateFromError === 'function') {
            var error$1 = errorInfo.value;
            update.payload = function() {
                logError(fiber, errorInfo);
                return getDerivedStateFromError(error$1);
            };
        }
        var inst = fiber.stateNode;
        if (inst !== null && typeof inst.componentDidCatch === 'function') update.callback = function callback() {
            markFailedErrorBoundaryForHotReloading(fiber);
            if (typeof getDerivedStateFromError !== 'function') {
                // To preserve the preexisting retry behavior of error boundaries,
                // we keep track of which ones already failed during this batch.
                // This gets reset before we yield back to the browser.
                // TODO: Warn in strict mode if getDerivedStateFromError is
                // not defined.
                markLegacyErrorBoundaryAsFailed(this); // Only log here if componentDidCatch is the only error boundary method defined
                logError(fiber, errorInfo);
            }
            var error$1 = errorInfo.value;
            var stack = errorInfo.stack;
            this.componentDidCatch(error$1, {
                componentStack: stack !== null ? stack : ''
            });
            if (typeof getDerivedStateFromError !== 'function') // If componentDidCatch is the only error boundary method defined,
            // then it needs to call setState to recover from errors.
            // If no state update is scheduled then the boundary will swallow the error.
            {
                if (fiber.expirationTime !== Sync) error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentName(fiber.type) || 'Unknown');
            }
        };
        else update.callback = function() {
            markFailedErrorBoundaryForHotReloading(fiber);
        };
        return update;
    }
    function attachPingListener(root1, renderExpirationTime1, thenable) {
        // Attach a listener to the promise to "ping" the root and retry. But
        // only if one does not already exist for the current render expiration
        // time (which acts like a "thread ID" here).
        var pingCache = root1.pingCache;
        var threadIDs;
        if (pingCache === null) {
            pingCache = root1.pingCache = new PossiblyWeakMap$1();
            threadIDs = new Set();
            pingCache.set(thenable, threadIDs);
        } else {
            threadIDs = pingCache.get(thenable);
            if (threadIDs === undefined) {
                threadIDs = new Set();
                pingCache.set(thenable, threadIDs);
            }
        }
        if (!threadIDs.has(renderExpirationTime1)) {
            // Memoize using the thread ID to prevent redundant listeners.
            threadIDs.add(renderExpirationTime1);
            var ping = pingSuspendedRoot.bind(null, root1, thenable, renderExpirationTime1);
            thenable.then(ping, ping);
        }
    }
    function throwException(root1, returnFiber, sourceFiber, value, renderExpirationTime1) {
        // The source fiber did not complete.
        sourceFiber.effectTag |= Incomplete; // Its effect list is no longer valid.
        sourceFiber.firstEffect = sourceFiber.lastEffect = null;
        if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
            // This is a thenable.
            var thenable = value;
            if ((sourceFiber.mode & BlockingMode) === NoMode) {
                // Reset the memoizedState to what it was before we attempted
                // to render it.
                var currentSource = sourceFiber.alternate;
                if (currentSource) {
                    sourceFiber.updateQueue = currentSource.updateQueue;
                    sourceFiber.memoizedState = currentSource.memoizedState;
                    sourceFiber.expirationTime = currentSource.expirationTime;
                } else {
                    sourceFiber.updateQueue = null;
                    sourceFiber.memoizedState = null;
                }
            }
            var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext); // Schedule the nearest Suspense to re-render the timed out view.
            var _workInProgress = returnFiber;
            do {
                if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
                    // Found the nearest boundary.
                    // Stash the promise on the boundary fiber. If the boundary times out, we'll
                    // attach another listener to flip the boundary back to its normal state.
                    var thenables = _workInProgress.updateQueue;
                    if (thenables === null) {
                        var updateQueue = new Set();
                        updateQueue.add(thenable);
                        _workInProgress.updateQueue = updateQueue;
                    } else thenables.add(thenable);
                     // If the boundary is outside of blocking mode, we should *not*
                    // suspend the commit. Pretend as if the suspended component rendered
                    // null and keep rendering. In the commit phase, we'll schedule a
                    // subsequent synchronous update to re-render the Suspense.
                    //
                    // Note: It doesn't matter whether the component that suspended was
                    // inside a blocking mode tree. If the Suspense is outside of it, we
                    // should *not* suspend the commit.
                    if ((_workInProgress.mode & BlockingMode) === NoMode) {
                        _workInProgress.effectTag |= DidCapture; // We're going to commit this fiber even though it didn't complete.
                        // But we shouldn't call any lifecycle methods or callbacks. Remove
                        // all lifecycle effect tags.
                        sourceFiber.effectTag &= ~(LifecycleEffectMask | Incomplete);
                        if (sourceFiber.tag === ClassComponent) {
                            var currentSourceFiber = sourceFiber.alternate;
                            if (currentSourceFiber === null) // This is a new mount. Change the tag so it's not mistaken for a
                            // completed class component. For example, we should not call
                            // componentWillUnmount if it is deleted.
                            sourceFiber.tag = IncompleteClassComponent;
                            else {
                                // When we try rendering again, we should not reuse the current fiber,
                                // since it's known to be in an inconsistent state. Use a force update to
                                // prevent a bail out.
                                var update = createUpdate(Sync, null);
                                update.tag = ForceUpdate;
                                enqueueUpdate(sourceFiber, update);
                            }
                        } // The source fiber did not complete. Mark it with Sync priority to
                        // indicate that it still has pending work.
                        sourceFiber.expirationTime = Sync; // Exit without suspending.
                        return;
                    } // Confirmed that the boundary is in a concurrent mode tree. Continue
                    // with the normal suspend path.
                    //
                    // After this we'll use a set of heuristics to determine whether this
                    // render pass will run to completion or restart or "suspend" the commit.
                    // The actual logic for this is spread out in different places.
                    //
                    // This first principle is that if we're going to suspend when we complete
                    // a root, then we should also restart if we get an update or ping that
                    // might unsuspend it, and vice versa. The only reason to suspend is
                    // because you think you might want to restart before committing. However,
                    // it doesn't make sense to restart only while in the period we're suspended.
                    //
                    // Restarting too aggressively is also not good because it starves out any
                    // intermediate loading state. So we use heuristics to determine when.
                    // Suspense Heuristics
                    //
                    // If nothing threw a Promise or all the same fallbacks are already showing,
                    // then don't suspend/restart.
                    //
                    // If this is an initial render of a new tree of Suspense boundaries and
                    // those trigger a fallback, then don't suspend/restart. We want to ensure
                    // that we can show the initial loading state as quickly as possible.
                    //
                    // If we hit a "Delayed" case, such as when we'd switch from content back into
                    // a fallback, then we should always suspend/restart. SuspenseConfig applies to
                    // this case. If none is defined, JND is used instead.
                    //
                    // If we're already showing a fallback and it gets "retried", allowing us to show
                    // another level, but there's still an inner boundary that would show a fallback,
                    // then we suspend/restart for 500ms since the last time we showed a fallback
                    // anywhere in the tree. This effectively throttles progressive loading into a
                    // consistent train of commits. This also gives us an opportunity to restart to
                    // get to the completed state slightly earlier.
                    //
                    // If there's ambiguity due to batching it's resolved in preference of:
                    // 1) "delayed", 2) "initial render", 3) "retry".
                    //
                    // We want to ensure that a "busy" state doesn't get force committed. We want to
                    // ensure that new initial loading states can commit as soon as possible.
                    attachPingListener(root1, renderExpirationTime1, thenable);
                    _workInProgress.effectTag |= ShouldCapture;
                    _workInProgress.expirationTime = renderExpirationTime1;
                    return;
                } // This boundary already captured during this render. Continue to the next
                // boundary.
                _workInProgress = _workInProgress.return;
            }while (_workInProgress !== null) // No boundary was found. Fallthrough to error mode.
            // TODO: Use invariant so the message is stripped in prod?
            value = new Error((getComponentName(sourceFiber.type) || 'A React component') + ' suspended while rendering, but no fallback UI was specified.\n' + '\n' + 'Add a <Suspense fallback=...> component higher in the tree to ' + 'provide a loading indicator or placeholder to display.' + getStackByFiberInDevAndProd(sourceFiber));
        } // We didn't find a boundary that could handle this type of exception. Start
        // over and traverse parent path again, this time treating the exception
        // as an error.
        renderDidError();
        value = createCapturedValue(value, sourceFiber);
        var workInProgress = returnFiber;
        do {
            switch(workInProgress.tag){
                case HostRoot:
                    var _errorInfo = value;
                    workInProgress.effectTag |= ShouldCapture;
                    workInProgress.expirationTime = renderExpirationTime1;
                    var _update = createRootErrorUpdate(workInProgress, _errorInfo, renderExpirationTime1);
                    enqueueCapturedUpdate(workInProgress, _update);
                    return;
                case ClassComponent:
                    // Capture and retry
                    var errorInfo = value;
                    var ctor = workInProgress.type;
                    var instance = workInProgress.stateNode;
                    if ((workInProgress.effectTag & DidCapture) === NoEffect && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                        workInProgress.effectTag |= ShouldCapture;
                        workInProgress.expirationTime = renderExpirationTime1; // Schedule the error boundary to re-render using updated state
                        var _update2 = createClassErrorUpdate(workInProgress, errorInfo, renderExpirationTime1);
                        enqueueCapturedUpdate(workInProgress, _update2);
                        return;
                    }
                    break;
            }
            workInProgress = workInProgress.return;
        }while (workInProgress !== null)
    }
    var ceil = Math.ceil;
    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
    var NoContext = /*                    */ 0;
    var BatchedContext = /*               */ 1;
    var EventContext = /*                 */ 2;
    var DiscreteEventContext = /*         */ 4;
    var LegacyUnbatchedContext = /*       */ 8;
    var RenderContext = /*                */ 16;
    var CommitContext = /*                */ 32;
    var RootIncomplete = 0;
    var RootFatalErrored = 1;
    var RootErrored = 2;
    var RootSuspended = 3;
    var RootSuspendedWithDelay = 4;
    var RootCompleted = 5;
    // Describes where we are in the React execution stack
    var executionContext = NoContext; // The root we're working on
    var workInProgressRoot = null; // The fiber we're working on
    var workInProgress = null; // The expiration time we're rendering
    var renderExpirationTime$1 = NoWork; // Whether to root completed, errored, suspended, etc.
    var workInProgressRootExitStatus = RootIncomplete; // A fatal error, if one is thrown
    var workInProgressRootFatalError = null; // Most recent event time among processed updates during this render.
    // This is conceptually a time stamp but expressed in terms of an ExpirationTime
    // because we deal mostly with expiration times in the hot path, so this avoids
    // the conversion happening in the hot path.
    var workInProgressRootLatestProcessedExpirationTime = Sync;
    var workInProgressRootLatestSuspenseTimeout = Sync;
    var workInProgressRootCanSuspendUsingConfig = null; // The work left over by components that were visited during this render. Only
    // includes unprocessed updates, not work in bailed out children.
    var workInProgressRootNextUnprocessedUpdateTime = NoWork; // If we're pinged while rendering we don't always restart immediately.
    // This flag determines if it might be worthwhile to restart if an opportunity
    // happens latere.
    var workInProgressRootHasPendingPing = false; // The most recent time we committed a fallback. This lets us ensure a train
    // model where we don't commit new loading states in too quick succession.
    var globalMostRecentFallbackTime = 0;
    var FALLBACK_THROTTLE_MS = 500;
    var nextEffect = null;
    var hasUncaughtError = false;
    var firstUncaughtError = null;
    var legacyErrorBoundariesThatAlreadyFailed = null;
    var rootDoesHavePassiveEffects = false;
    var rootWithPendingPassiveEffects = null;
    var pendingPassiveEffectsRenderPriority = NoPriority;
    var pendingPassiveEffectsExpirationTime = NoWork;
    var rootsWithPendingDiscreteUpdates = null; // Use these to prevent an infinite loop of nested updates
    var NESTED_UPDATE_LIMIT = 50;
    var nestedUpdateCount = 0;
    var rootWithNestedUpdates = null;
    var NESTED_PASSIVE_UPDATE_LIMIT = 50;
    var nestedPassiveUpdateCount = 0;
    var interruptedBy = null; // Marks the need to reschedule pending interactions at these expiration times
    // during the commit phase. This enables them to be traced across components
    // that spawn new work during render. E.g. hidden boundaries, suspended SSR
    // hydration or SuspenseList.
    var spawnedWorkDuringRender = null; // Expiration times are computed by adding to the current time (the start
    // time). However, if two updates are scheduled within the same event, we
    // should treat their start times as simultaneous, even if the actual clock
    // time has advanced between the first and second call.
    // In other words, because expiration times determine how updates are batched,
    // we want all updates of like priority that occur within the same event to
    // receive the same expiration time. Otherwise we get tearing.
    var currentEventTime = NoWork;
    function requestCurrentTimeForUpdate() {
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) // We're inside React, so it's fine to read the actual time.
        return msToExpirationTime(now());
         // We're not inside React, so we may be in the middle of a browser event.
        if (currentEventTime !== NoWork) // Use the same start time for all updates until we enter React again.
        return currentEventTime;
         // This is the first update since React yielded. Compute a new start time.
        currentEventTime = msToExpirationTime(now());
        return currentEventTime;
    }
    function getCurrentTime() {
        return msToExpirationTime(now());
    }
    function computeExpirationForFiber(currentTime, fiber, suspenseConfig) {
        var mode = fiber.mode;
        if ((mode & BlockingMode) === NoMode) return Sync;
        var priorityLevel = getCurrentPriorityLevel();
        if ((mode & ConcurrentMode) === NoMode) return priorityLevel === ImmediatePriority ? Sync : Batched;
        if ((executionContext & RenderContext) !== NoContext) // Use whatever time we're already rendering
        // TODO: Should there be a way to opt out, like with `runWithPriority`?
        return renderExpirationTime$1;
        var expirationTime;
        if (suspenseConfig !== null) // Compute an expiration time based on the Suspense timeout.
        expirationTime = computeSuspenseExpiration(currentTime, suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION);
        else // Compute an expiration time based on the Scheduler priority.
        switch(priorityLevel){
            case ImmediatePriority:
                expirationTime = Sync;
                break;
            case UserBlockingPriority$1:
                // TODO: Rename this to computeUserBlockingExpiration
                expirationTime = computeInteractiveExpiration(currentTime);
                break;
            case NormalPriority:
            case LowPriority:
                // TODO: Handle LowPriority
                // TODO: Rename this to... something better.
                expirationTime = computeAsyncExpiration(currentTime);
                break;
            case IdlePriority:
                expirationTime = Idle;
                break;
            default:
                throw Error("Expected a valid priority level");
        }
         // If we're in the middle of rendering a tree, do not update at the same
        // expiration time that is already rendering.
        // TODO: We shouldn't have to do this if the update is on a different root.
        // Refactor computeExpirationForFiber + scheduleUpdate so we have access to
        // the root when we check for this condition.
        if (workInProgressRoot !== null && expirationTime === renderExpirationTime$1) // This is a trick to move this update into a separate batch
        expirationTime -= 1;
        return expirationTime;
    }
    function scheduleUpdateOnFiber(fiber, expirationTime) {
        checkForNestedUpdates();
        warnAboutRenderPhaseUpdatesInDEV(fiber);
        var root1 = markUpdateTimeFromFiberToRoot(fiber, expirationTime);
        if (root1 === null) {
            warnAboutUpdateOnUnmountedFiberInDEV(fiber);
            return;
        }
        checkForInterruption(fiber, expirationTime);
        recordScheduleUpdate(); // TODO: computeExpirationForFiber also reads the priority. Pass the
        // priority as an argument to that function and this one.
        var priorityLevel = getCurrentPriorityLevel();
        if (expirationTime === Sync) {
            if ((executionContext & LegacyUnbatchedContext) !== NoContext && (executionContext & (RenderContext | CommitContext)) === NoContext) {
                // Register pending interactions on the root to avoid losing traced interaction data.
                schedulePendingInteractions(root1, expirationTime); // This is a legacy edge case. The initial mount of a ReactDOM.render-ed
                // root inside of batchedUpdates should be synchronous, but layout updates
                // should be deferred until the end of the batch.
                performSyncWorkOnRoot(root1);
            } else {
                ensureRootIsScheduled(root1);
                schedulePendingInteractions(root1, expirationTime);
                if (executionContext === NoContext) // Flush the synchronous work now, unless we're already working or inside
                // a batch. This is intentionally inside scheduleUpdateOnFiber instead of
                // scheduleCallbackForFiber to preserve the ability to schedule a callback
                // without immediately flushing it. We only do this for user-initiated
                // updates, to preserve historical behavior of legacy mode.
                flushSyncCallbackQueue();
            }
        } else {
            ensureRootIsScheduled(root1);
            schedulePendingInteractions(root1, expirationTime);
        }
        if ((executionContext & DiscreteEventContext) !== NoContext && // discrete, even inside a discrete event.
        (priorityLevel === UserBlockingPriority$1 || priorityLevel === ImmediatePriority)) {
            // This is the result of a discrete event. Track the lowest priority
            // discrete update per root so we can flush them early, if needed.
            if (rootsWithPendingDiscreteUpdates === null) rootsWithPendingDiscreteUpdates = new Map([
                [
                    root1,
                    expirationTime
                ]
            ]);
            else {
                var lastDiscreteTime = rootsWithPendingDiscreteUpdates.get(root1);
                if (lastDiscreteTime === undefined || lastDiscreteTime > expirationTime) rootsWithPendingDiscreteUpdates.set(root1, expirationTime);
            }
        }
    }
    var scheduleWork = scheduleUpdateOnFiber; // This is split into a separate function so we can mark a fiber with pending
    // work without treating it as a typical update that originates from an event;
    // e.g. retrying a Suspense boundary isn't an update, but it does schedule work
    // on a fiber.
    function markUpdateTimeFromFiberToRoot(fiber, expirationTime) {
        // Update the source fiber's expiration time
        if (fiber.expirationTime < expirationTime) fiber.expirationTime = expirationTime;
        var alternate = fiber.alternate;
        if (alternate !== null && alternate.expirationTime < expirationTime) alternate.expirationTime = expirationTime;
         // Walk the parent path to the root and update the child expiration time.
        var node = fiber.return;
        var root1 = null;
        if (node === null && fiber.tag === HostRoot) root1 = fiber.stateNode;
        else while(node !== null){
            alternate = node.alternate;
            if (node.childExpirationTime < expirationTime) {
                node.childExpirationTime = expirationTime;
                if (alternate !== null && alternate.childExpirationTime < expirationTime) alternate.childExpirationTime = expirationTime;
            } else if (alternate !== null && alternate.childExpirationTime < expirationTime) alternate.childExpirationTime = expirationTime;
            if (node.return === null && node.tag === HostRoot) {
                root1 = node.stateNode;
                break;
            }
            node = node.return;
        }
        if (root1 !== null) {
            if (workInProgressRoot === root1) {
                // Received an update to a tree that's in the middle of rendering. Mark
                // that's unprocessed work on this root.
                markUnprocessedUpdateTime(expirationTime);
                if (workInProgressRootExitStatus === RootSuspendedWithDelay) // The root already suspended with a delay, which means this render
                // definitely won't finish. Since we have a new update, let's mark it as
                // suspended now, right before marking the incoming update. This has the
                // effect of interrupting the current render and switching to the update.
                // TODO: This happens to work when receiving an update during the render
                // phase, because of the trick inside computeExpirationForFiber to
                // subtract 1 from `renderExpirationTime` to move it into a
                // separate bucket. But we should probably model it with an exception,
                // using the same mechanism we use to force hydration of a subtree.
                // TODO: This does not account for low pri updates that were already
                // scheduled before the root started rendering. Need to track the next
                // pending expiration time (perhaps by backtracking the return path) and
                // then trigger a restart in the `renderDidSuspendDelayIfPossible` path.
                markRootSuspendedAtTime(root1, renderExpirationTime$1);
            } // Mark that the root has a pending update.
            markRootUpdatedAtTime(root1, expirationTime);
        }
        return root1;
    }
    function getNextRootExpirationTimeToWorkOn(root1) {
        // Determines the next expiration time that the root should render, taking
        // into account levels that may be suspended, or levels that may have
        // received a ping.
        var lastExpiredTime = root1.lastExpiredTime;
        if (lastExpiredTime !== NoWork) return lastExpiredTime;
         // "Pending" refers to any update that hasn't committed yet, including if it
        // suspended. The "suspended" range is therefore a subset.
        var firstPendingTime = root1.firstPendingTime;
        if (!isRootSuspendedAtTime(root1, firstPendingTime)) // The highest priority pending time is not suspended. Let's work on that.
        return firstPendingTime;
         // If the first pending time is suspended, check if there's a lower priority
        // pending level that we know about. Or check if we received a ping. Work
        // on whichever is higher priority.
        var lastPingedTime = root1.lastPingedTime;
        var nextKnownPendingLevel = root1.nextKnownPendingLevel;
        var nextLevel = lastPingedTime > nextKnownPendingLevel ? lastPingedTime : nextKnownPendingLevel;
        if (nextLevel <= Idle && firstPendingTime !== nextLevel) // Don't work on Idle/Never priority unless everything else is committed.
        return NoWork;
        return nextLevel;
    } // Use this function to schedule a task for a root. There's only one task per
    // root; if a task was already scheduled, we'll check to make sure the
    // expiration time of the existing task is the same as the expiration time of
    // the next level that the root has work on. This function is called on every
    // update, and right before exiting a task.
    function ensureRootIsScheduled(root1) {
        var lastExpiredTime = root1.lastExpiredTime;
        if (lastExpiredTime !== NoWork) {
            // Special case: Expired work should flush synchronously.
            root1.callbackExpirationTime = Sync;
            root1.callbackPriority = ImmediatePriority;
            root1.callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root1));
            return;
        }
        var expirationTime = getNextRootExpirationTimeToWorkOn(root1);
        var existingCallbackNode = root1.callbackNode;
        if (expirationTime === NoWork) {
            // There's nothing to work on.
            if (existingCallbackNode !== null) {
                root1.callbackNode = null;
                root1.callbackExpirationTime = NoWork;
                root1.callbackPriority = NoPriority;
            }
            return;
        } // TODO: If this is an update, we already read the current time. Pass the
        // time as an argument.
        var currentTime = requestCurrentTimeForUpdate();
        var priorityLevel = inferPriorityFromExpirationTime(currentTime, expirationTime); // If there's an existing render task, confirm it has the correct priority and
        // expiration time. Otherwise, we'll cancel it and schedule a new one.
        if (existingCallbackNode !== null) {
            var existingCallbackPriority = root1.callbackPriority;
            var existingCallbackExpirationTime = root1.callbackExpirationTime;
            if (existingCallbackExpirationTime === expirationTime && existingCallbackPriority >= priorityLevel) // Existing callback is sufficient.
            return;
             // Need to schedule a new task.
            // TODO: Instead of scheduling a new task, we should be able to change the
            // priority of the existing one.
            cancelCallback(existingCallbackNode);
        }
        root1.callbackExpirationTime = expirationTime;
        root1.callbackPriority = priorityLevel;
        var callbackNode;
        if (expirationTime === Sync) // Sync React callbacks are scheduled on a special internal queue
        callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root1));
        else callbackNode = scheduleCallback(priorityLevel, performConcurrentWorkOnRoot.bind(null, root1), // ordering because tasks are processed in timeout order.
        {
            timeout: expirationTimeToMs(expirationTime) - now()
        });
        root1.callbackNode = callbackNode;
    } // This is the entry point for every concurrent task, i.e. anything that
    // goes through Scheduler.
    function performConcurrentWorkOnRoot(root1, didTimeout) {
        // Since we know we're in a React event, we can clear the current
        // event time. The next update will compute a new event time.
        currentEventTime = NoWork;
        if (didTimeout) {
            // The render task took too long to complete. Mark the current time as
            // expired to synchronously render all expired work in a single batch.
            var currentTime = requestCurrentTimeForUpdate();
            markRootExpiredAtTime(root1, currentTime); // This will schedule a synchronous callback.
            ensureRootIsScheduled(root1);
            return null;
        } // Determine the next expiration time to work on, using the fields stored
        // on the root.
        var expirationTime = getNextRootExpirationTimeToWorkOn(root1);
        if (expirationTime !== NoWork) {
            var originalCallbackNode = root1.callbackNode;
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) throw Error("Should not already be working.");
            flushPassiveEffects(); // If the root or expiration time have changed, throw out the existing stack
            // and prepare a fresh one. Otherwise we'll continue where we left off.
            if (root1 !== workInProgressRoot || expirationTime !== renderExpirationTime$1) {
                prepareFreshStack(root1, expirationTime);
                startWorkOnPendingInteractions(root1, expirationTime);
            } // If we have a work-in-progress fiber, it means there's still work to do
            // in this root.
            if (workInProgress !== null) {
                var prevExecutionContext = executionContext;
                executionContext |= RenderContext;
                var prevDispatcher = pushDispatcher();
                var prevInteractions = pushInteractions(root1);
                startWorkLoopTimer(workInProgress);
                for(;;)try {
                    workLoopConcurrent();
                    break;
                } catch (thrownValue) {
                    handleError(root1, thrownValue);
                }
                resetContextDependencies();
                executionContext = prevExecutionContext;
                popDispatcher(prevDispatcher);
                popInteractions(prevInteractions);
                if (workInProgressRootExitStatus === RootFatalErrored) {
                    var fatalError = workInProgressRootFatalError;
                    stopInterruptedWorkLoopTimer();
                    prepareFreshStack(root1, expirationTime);
                    markRootSuspendedAtTime(root1, expirationTime);
                    ensureRootIsScheduled(root1);
                    throw fatalError;
                }
                if (workInProgress !== null) // There's still work left over. Exit without committing.
                stopInterruptedWorkLoopTimer();
                else {
                    // We now have a consistent tree. The next step is either to commit it,
                    // or, if something suspended, wait to commit it after a timeout.
                    stopFinishedWorkLoopTimer();
                    var finishedWork = root1.finishedWork = root1.current.alternate;
                    root1.finishedExpirationTime = expirationTime;
                    finishConcurrentRender(root1, finishedWork, workInProgressRootExitStatus, expirationTime);
                }
                ensureRootIsScheduled(root1);
                if (root1.callbackNode === originalCallbackNode) // The task node scheduled for this root is the same one that's
                // currently executed. Need to return a continuation.
                return performConcurrentWorkOnRoot.bind(null, root1);
            }
        }
        return null;
    }
    function finishConcurrentRender(root1, finishedWork, exitStatus, expirationTime) {
        // Set this to null to indicate there's no in-progress render.
        workInProgressRoot = null;
        switch(exitStatus){
            case RootIncomplete:
            case RootFatalErrored:
                throw Error("Root did not complete. This is a bug in React.");
            // Flow knows about invariant, so it complains if I add a break
            // statement, but eslint doesn't know about invariant, so it complains
            // if I do. eslint-disable-next-line no-fallthrough
            case RootErrored:
                // If this was an async render, the error may have happened due to
                // a mutation in a concurrent event. Try rendering one more time,
                // synchronously, to see if the error goes away. If there are
                // lower priority updates, let's include those, too, in case they
                // fix the inconsistency. Render at Idle to include all updates.
                // If it was Idle or Never or some not-yet-invented time, render
                // at that time.
                markRootExpiredAtTime(root1, expirationTime > Idle ? Idle : expirationTime); // We assume that this second render pass will be synchronous
                break;
            case RootSuspended:
                markRootSuspendedAtTime(root1, expirationTime);
                var lastSuspendedTime = root1.lastSuspendedTime;
                if (expirationTime === lastSuspendedTime) root1.nextKnownPendingLevel = getRemainingExpirationTime(finishedWork);
                 // We have an acceptable loading state. We need to figure out if we
                // should immediately commit it or wait a bit.
                // If we have processed new updates during this render, we may now
                // have a new loading state ready. We want to ensure that we commit
                // that as soon as possible.
                var hasNotProcessedNewUpdates = workInProgressRootLatestProcessedExpirationTime === Sync;
                if (hasNotProcessedNewUpdates && !IsThisRendererActing.current) {
                    // If we have not processed any new updates during this pass, then
                    // this is either a retry of an existing fallback state or a
                    // hidden tree. Hidden trees shouldn't be batched with other work
                    // and after that's fixed it can only be a retry. We're going to
                    // throttle committing retries so that we don't show too many
                    // loading states too quickly.
                    var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(); // Don't bother with a very short suspense time.
                    if (msUntilTimeout > 10) {
                        if (workInProgressRootHasPendingPing) {
                            var lastPingedTime = root1.lastPingedTime;
                            if (lastPingedTime === NoWork || lastPingedTime >= expirationTime) {
                                // This render was pinged but we didn't get to restart
                                // earlier so try restarting now instead.
                                root1.lastPingedTime = expirationTime;
                                prepareFreshStack(root1, expirationTime);
                                break;
                            }
                        }
                        var nextTime = getNextRootExpirationTimeToWorkOn(root1);
                        if (nextTime !== NoWork && nextTime !== expirationTime) break;
                        if (lastSuspendedTime !== NoWork && lastSuspendedTime !== expirationTime) {
                            // We should prefer to render the fallback of at the last
                            // suspended level. Ping the last suspended level to try
                            // rendering it again.
                            root1.lastPingedTime = lastSuspendedTime;
                            break;
                        } // The render is suspended, it hasn't timed out, and there's no
                        // lower priority work to do. Instead of committing the fallback
                        // immediately, wait for more data to arrive.
                        root1.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root1), msUntilTimeout);
                        break;
                    }
                } // The work expired. Commit immediately.
                commitRoot(root1);
                break;
            case RootSuspendedWithDelay:
                markRootSuspendedAtTime(root1, expirationTime);
                var _lastSuspendedTime = root1.lastSuspendedTime;
                if (expirationTime === _lastSuspendedTime) root1.nextKnownPendingLevel = getRemainingExpirationTime(finishedWork);
                if (!IsThisRendererActing.current) {
                    // We're suspended in a state that should be avoided. We'll try to
                    // avoid committing it for as long as the timeouts let us.
                    if (workInProgressRootHasPendingPing) {
                        var _lastPingedTime = root1.lastPingedTime;
                        if (_lastPingedTime === NoWork || _lastPingedTime >= expirationTime) {
                            // This render was pinged but we didn't get to restart earlier
                            // so try restarting now instead.
                            root1.lastPingedTime = expirationTime;
                            prepareFreshStack(root1, expirationTime);
                            break;
                        }
                    }
                    var _nextTime = getNextRootExpirationTimeToWorkOn(root1);
                    if (_nextTime !== NoWork && _nextTime !== expirationTime) break;
                    if (_lastSuspendedTime !== NoWork && _lastSuspendedTime !== expirationTime) {
                        // We should prefer to render the fallback of at the last
                        // suspended level. Ping the last suspended level to try
                        // rendering it again.
                        root1.lastPingedTime = _lastSuspendedTime;
                        break;
                    }
                    var _msUntilTimeout;
                    if (workInProgressRootLatestSuspenseTimeout !== Sync) // We have processed a suspense config whose expiration time we
                    // can use as the timeout.
                    _msUntilTimeout = expirationTimeToMs(workInProgressRootLatestSuspenseTimeout) - now();
                    else if (workInProgressRootLatestProcessedExpirationTime === Sync) // This should never normally happen because only new updates
                    // cause delayed states, so we should have processed something.
                    // However, this could also happen in an offscreen tree.
                    _msUntilTimeout = 0;
                    else {
                        // If we don't have a suspense config, we're going to use a
                        // heuristic to determine how long we can suspend.
                        var eventTimeMs = inferTimeFromExpirationTime(workInProgressRootLatestProcessedExpirationTime);
                        var currentTimeMs = now();
                        var timeUntilExpirationMs = expirationTimeToMs(expirationTime) - currentTimeMs;
                        var timeElapsed = currentTimeMs - eventTimeMs;
                        if (timeElapsed < 0) // We get this wrong some time since we estimate the time.
                        timeElapsed = 0;
                        _msUntilTimeout = jnd(timeElapsed) - timeElapsed; // Clamp the timeout to the expiration time. TODO: Once the
                        // event time is exact instead of inferred from expiration time
                        // we don't need this.
                        if (timeUntilExpirationMs < _msUntilTimeout) _msUntilTimeout = timeUntilExpirationMs;
                    } // Don't bother with a very short suspense time.
                    if (_msUntilTimeout > 10) {
                        // The render is suspended, it hasn't timed out, and there's no
                        // lower priority work to do. Instead of committing the fallback
                        // immediately, wait for more data to arrive.
                        root1.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root1), _msUntilTimeout);
                        break;
                    }
                } // The work expired. Commit immediately.
                commitRoot(root1);
                break;
            case RootCompleted:
                // The work completed. Ready to commit.
                if (!IsThisRendererActing.current && workInProgressRootLatestProcessedExpirationTime !== Sync && workInProgressRootCanSuspendUsingConfig !== null) {
                    // If we have exceeded the minimum loading delay, which probably
                    // means we have shown a spinner already, we might have to suspend
                    // a bit longer to ensure that the spinner is shown for
                    // enough time.
                    var _msUntilTimeout2 = computeMsUntilSuspenseLoadingDelay(workInProgressRootLatestProcessedExpirationTime, expirationTime, workInProgressRootCanSuspendUsingConfig);
                    if (_msUntilTimeout2 > 10) {
                        markRootSuspendedAtTime(root1, expirationTime);
                        root1.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root1), _msUntilTimeout2);
                        break;
                    }
                }
                commitRoot(root1);
                break;
            default:
                throw Error("Unknown root exit status.");
        }
    } // This is the entry point for synchronous tasks that don't go
    // through Scheduler
    function performSyncWorkOnRoot(root1) {
        // Check if there's expired work on this root. Otherwise, render at Sync.
        var lastExpiredTime = root1.lastExpiredTime;
        var expirationTime = lastExpiredTime !== NoWork ? lastExpiredTime : Sync;
        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) throw Error("Should not already be working.");
        flushPassiveEffects(); // If the root or expiration time have changed, throw out the existing stack
        // and prepare a fresh one. Otherwise we'll continue where we left off.
        if (root1 !== workInProgressRoot || expirationTime !== renderExpirationTime$1) {
            prepareFreshStack(root1, expirationTime);
            startWorkOnPendingInteractions(root1, expirationTime);
        } // If we have a work-in-progress fiber, it means there's still work to do
        // in this root.
        if (workInProgress !== null) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            var prevInteractions = pushInteractions(root1);
            startWorkLoopTimer(workInProgress);
            for(;;)try {
                workLoopSync();
                break;
            } catch (thrownValue) {
                handleError(root1, thrownValue);
            }
            resetContextDependencies();
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            popInteractions(prevInteractions);
            if (workInProgressRootExitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                stopInterruptedWorkLoopTimer();
                prepareFreshStack(root1, expirationTime);
                markRootSuspendedAtTime(root1, expirationTime);
                ensureRootIsScheduled(root1);
                throw fatalError;
            }
            if (workInProgress !== null) throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
            else {
                // We now have a consistent tree. Because this is a sync render, we
                // will commit it even if something suspended.
                stopFinishedWorkLoopTimer();
                root1.finishedWork = root1.current.alternate;
                root1.finishedExpirationTime = expirationTime;
                finishSyncRender(root1);
            } // Before exiting, make sure there's a callback scheduled for the next
            // pending level.
            ensureRootIsScheduled(root1);
        }
        return null;
    }
    function finishSyncRender(root1) {
        // Set this to null to indicate there's no in-progress render.
        workInProgressRoot = null;
        commitRoot(root1);
    }
    function flushDiscreteUpdates() {
        // TODO: Should be able to flush inside batchedUpdates, but not inside `act`.
        // However, `act` uses `batchedUpdates`, so there's no way to distinguish
        // those two cases. Need to fix this before exposing flushDiscreteUpdates
        // as a public API.
        if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
            if ((executionContext & RenderContext) !== NoContext) error("unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering.");
            // This is probably a nested event dispatch triggered by a lifecycle/effect,
            // like `el.focus()`. Exit.
            return;
        }
        flushPendingDiscreteUpdates(); // If the discrete updates scheduled passive effects, flush them now so that
        // they fire before the next serial event.
        flushPassiveEffects();
    }
    function syncUpdates(fn, a, b, c) {
        return runWithPriority$1(ImmediatePriority, fn.bind(null, a, b, c));
    }
    function flushPendingDiscreteUpdates() {
        if (rootsWithPendingDiscreteUpdates !== null) {
            // For each root with pending discrete updates, schedule a callback to
            // immediately flush them.
            var roots = rootsWithPendingDiscreteUpdates;
            rootsWithPendingDiscreteUpdates = null;
            roots.forEach(function(expirationTime, root1) {
                markRootExpiredAtTime(root1, expirationTime);
                ensureRootIsScheduled(root1);
            }); // Now flush the immediate queue.
            flushSyncCallbackQueue();
        }
    }
    function batchedUpdates$1(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        try {
            return fn(a);
        } finally{
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) // Flush the immediate callbacks that were scheduled during this batch
            flushSyncCallbackQueue();
        }
    }
    function batchedEventUpdates$1(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext |= EventContext;
        try {
            return fn(a);
        } finally{
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) // Flush the immediate callbacks that were scheduled during this batch
            flushSyncCallbackQueue();
        }
    }
    function discreteUpdates$1(fn, a, b, c, d) {
        var prevExecutionContext = executionContext;
        executionContext |= DiscreteEventContext;
        try {
            // Should this
            return runWithPriority$1(UserBlockingPriority$1, fn.bind(null, a, b, c, d));
        } finally{
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) // Flush the immediate callbacks that were scheduled during this batch
            flushSyncCallbackQueue();
        }
    }
    function unbatchedUpdates(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext &= ~BatchedContext;
        executionContext |= LegacyUnbatchedContext;
        try {
            return fn(a);
        } finally{
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) // Flush the immediate callbacks that were scheduled during this batch
            flushSyncCallbackQueue();
        }
    }
    function flushSync(fn, a) {
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) throw Error("flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.");
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        try {
            return runWithPriority$1(ImmediatePriority, fn.bind(null, a));
        } finally{
            executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.
            // Note that this will happen even if batchedUpdates is higher up
            // the stack.
            flushSyncCallbackQueue();
        }
    }
    function prepareFreshStack(root1, expirationTime) {
        root1.finishedWork = null;
        root1.finishedExpirationTime = NoWork;
        var timeoutHandle = root1.timeoutHandle;
        if (timeoutHandle !== noTimeout) {
            // The root previous suspended and scheduled a timeout to commit a fallback
            // state. Now that we have additional work, cancel the timeout.
            root1.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above
            cancelTimeout(timeoutHandle);
        }
        if (workInProgress !== null) {
            var interruptedWork = workInProgress.return;
            while(interruptedWork !== null){
                unwindInterruptedWork(interruptedWork);
                interruptedWork = interruptedWork.return;
            }
        }
        workInProgressRoot = root1;
        workInProgress = createWorkInProgress(root1.current, null);
        renderExpirationTime$1 = expirationTime;
        workInProgressRootExitStatus = RootIncomplete;
        workInProgressRootFatalError = null;
        workInProgressRootLatestProcessedExpirationTime = Sync;
        workInProgressRootLatestSuspenseTimeout = Sync;
        workInProgressRootCanSuspendUsingConfig = null;
        workInProgressRootNextUnprocessedUpdateTime = NoWork;
        workInProgressRootHasPendingPing = false;
        spawnedWorkDuringRender = null;
        ReactStrictModeWarnings.discardPendingWarnings();
    }
    function handleError(root1, thrownValue) {
        do {
            try {
                // Reset module-level state that was set during the render phase.
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                if (workInProgress === null || workInProgress.return === null) {
                    // Expected to be working on a non-root fiber. This is a fatal error
                    // because there's no ancestor that can handle it; the root is
                    // supposed to capture all errors that weren't caught by an error
                    // boundary.
                    workInProgressRootExitStatus = RootFatalErrored;
                    workInProgressRootFatalError = thrownValue; // Set `workInProgress` to null. This represents advancing to the next
                    // sibling, or the parent if there are no siblings. But since the root
                    // has no siblings nor a parent, we set it to null. Usually this is
                    // handled by `completeUnitOfWork` or `unwindWork`, but since we're
                    // interntionally not calling those, we need set it here.
                    // TODO: Consider calling `unwindWork` to pop the contexts.
                    workInProgress = null;
                    return null;
                }
                if (enableProfilerTimer && workInProgress.mode & ProfileMode) // Record the time spent rendering before an error was thrown. This
                // avoids inaccurate Profiler durations in the case of a
                // suspended render.
                stopProfilerTimerIfRunningAndRecordDelta(workInProgress, true);
                throwException(root1, workInProgress.return, workInProgress, thrownValue, renderExpirationTime$1);
                workInProgress = completeUnitOfWork(workInProgress);
            } catch (yetAnotherThrownValue) {
                // Something in the return path also threw.
                thrownValue = yetAnotherThrownValue;
                continue;
            } // Return to the normal work loop.
            return;
        }while (true)
    }
    function pushDispatcher(root1) {
        var prevDispatcher = ReactCurrentDispatcher$1.current;
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        if (prevDispatcher === null) // The React isomorphic package does not include a default dispatcher.
        // Instead the first renderer will lazily attach one, in order to give
        // nicer error messages.
        return ContextOnlyDispatcher;
        else return prevDispatcher;
    }
    function popDispatcher(prevDispatcher) {
        ReactCurrentDispatcher$1.current = prevDispatcher;
    }
    function pushInteractions(root1) {
        var prevInteractions = tracing.__interactionsRef.current;
        tracing.__interactionsRef.current = root1.memoizedInteractions;
        return prevInteractions;
    }
    function popInteractions(prevInteractions) {
        tracing.__interactionsRef.current = prevInteractions;
    }
    function markCommitTimeOfFallback() {
        globalMostRecentFallbackTime = now();
    }
    function markRenderEventTimeAndConfig(expirationTime, suspenseConfig) {
        if (expirationTime < workInProgressRootLatestProcessedExpirationTime && expirationTime > Idle) workInProgressRootLatestProcessedExpirationTime = expirationTime;
        if (suspenseConfig !== null) {
            if (expirationTime < workInProgressRootLatestSuspenseTimeout && expirationTime > Idle) {
                workInProgressRootLatestSuspenseTimeout = expirationTime; // Most of the time we only have one config and getting wrong is not bad.
                workInProgressRootCanSuspendUsingConfig = suspenseConfig;
            }
        }
    }
    function markUnprocessedUpdateTime(expirationTime) {
        if (expirationTime > workInProgressRootNextUnprocessedUpdateTime) workInProgressRootNextUnprocessedUpdateTime = expirationTime;
    }
    function renderDidSuspend() {
        if (workInProgressRootExitStatus === RootIncomplete) workInProgressRootExitStatus = RootSuspended;
    }
    function renderDidSuspendDelayIfPossible() {
        if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) workInProgressRootExitStatus = RootSuspendedWithDelay;
         // Check if there's a lower priority update somewhere else in the tree.
        if (workInProgressRootNextUnprocessedUpdateTime !== NoWork && workInProgressRoot !== null) {
            // Mark the current render as suspended, and then mark that there's a
            // pending update.
            // TODO: This should immediately interrupt the current render, instead
            // of waiting until the next time we yield.
            markRootSuspendedAtTime(workInProgressRoot, renderExpirationTime$1);
            markRootUpdatedAtTime(workInProgressRoot, workInProgressRootNextUnprocessedUpdateTime);
        }
    }
    function renderDidError() {
        if (workInProgressRootExitStatus !== RootCompleted) workInProgressRootExitStatus = RootErrored;
    } // Called during render to determine if anything has suspended.
    // Returns false if we're not sure.
    function renderHasNotSuspendedYet() {
        // If something errored or completed, we can't really be sure,
        // so those are false.
        return workInProgressRootExitStatus === RootIncomplete;
    }
    function inferTimeFromExpirationTime(expirationTime) {
        // We don't know exactly when the update was scheduled, but we can infer an
        // approximate start time from the expiration time.
        var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
        return earliestExpirationTimeMs - LOW_PRIORITY_EXPIRATION;
    }
    function inferTimeFromExpirationTimeWithSuspenseConfig(expirationTime, suspenseConfig) {
        // We don't know exactly when the update was scheduled, but we can infer an
        // approximate start time from the expiration time by subtracting the timeout
        // that was added to the event time.
        var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
        return earliestExpirationTimeMs - (suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION);
    } // The work loop is an extremely hot path. Tell Closure not to inline it.
    /** @noinline */ function workLoopSync() {
        // Already timed out, so perform work without checking if we need to yield.
        while(workInProgress !== null)workInProgress = performUnitOfWork(workInProgress);
    }
    /** @noinline */ function workLoopConcurrent() {
        // Perform work until Scheduler asks us to yield
        while(workInProgress !== null && !shouldYield())workInProgress = performUnitOfWork(workInProgress);
    }
    function performUnitOfWork(unitOfWork) {
        // The current, flushed, state of this fiber is the alternate. Ideally
        // nothing should rely on this, but relying on it here means that we don't
        // need an additional field on the work in progress.
        var current5 = unitOfWork.alternate;
        startWorkTimer(unitOfWork);
        setCurrentFiber(unitOfWork);
        var next;
        if ((unitOfWork.mode & ProfileMode) !== NoMode) {
            startProfilerTimer(unitOfWork);
            next = beginWork$1(current5, unitOfWork, renderExpirationTime$1);
            stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
        } else next = beginWork$1(current5, unitOfWork, renderExpirationTime$1);
        resetCurrentFiber();
        unitOfWork.memoizedProps = unitOfWork.pendingProps;
        if (next === null) // If this doesn't spawn new work, complete the current work.
        next = completeUnitOfWork(unitOfWork);
        ReactCurrentOwner$2.current = null;
        return next;
    }
    function completeUnitOfWork(unitOfWork) {
        // Attempt to complete the current unit of work, then move to the next
        // sibling. If there are no more siblings, return to the parent fiber.
        workInProgress = unitOfWork;
        do {
            // The current, flushed, state of this fiber is the alternate. Ideally
            // nothing should rely on this, but relying on it here means that we don't
            // need an additional field on the work in progress.
            var current5 = workInProgress.alternate;
            var returnFiber = workInProgress.return; // Check if the work completed or if something threw.
            if ((workInProgress.effectTag & Incomplete) === NoEffect) {
                setCurrentFiber(workInProgress);
                var next = void 0;
                if ((workInProgress.mode & ProfileMode) === NoMode) next = completeWork(current5, workInProgress, renderExpirationTime$1);
                else {
                    startProfilerTimer(workInProgress);
                    next = completeWork(current5, workInProgress, renderExpirationTime$1); // Update render duration assuming we didn't error.
                    stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
                }
                stopWorkTimer(workInProgress);
                resetCurrentFiber();
                resetChildExpirationTime(workInProgress);
                if (next !== null) // Completing this fiber spawned new work. Work on that next.
                return next;
                if (returnFiber !== null && (returnFiber.effectTag & Incomplete) === NoEffect) {
                    // Append all the effects of the subtree and this fiber onto the effect
                    // list of the parent. The completion order of the children affects the
                    // side-effect order.
                    if (returnFiber.firstEffect === null) returnFiber.firstEffect = workInProgress.firstEffect;
                    if (workInProgress.lastEffect !== null) {
                        if (returnFiber.lastEffect !== null) returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
                        returnFiber.lastEffect = workInProgress.lastEffect;
                    } // If this fiber had side-effects, we append it AFTER the children's
                    // side-effects. We can perform certain side-effects earlier if needed,
                    // by doing multiple passes over the effect list. We don't want to
                    // schedule our own side-effect on our own list because if end up
                    // reusing children we'll schedule this effect onto itself since we're
                    // at the end.
                    var effectTag = workInProgress.effectTag; // Skip both NoWork and PerformedWork tags when creating the effect
                    // list. PerformedWork effect is read by React DevTools but shouldn't be
                    // committed.
                    if (effectTag > PerformedWork) {
                        if (returnFiber.lastEffect !== null) returnFiber.lastEffect.nextEffect = workInProgress;
                        else returnFiber.firstEffect = workInProgress;
                        returnFiber.lastEffect = workInProgress;
                    }
                }
            } else {
                // This fiber did not complete because something threw. Pop values off
                // the stack without entering the complete phase. If this is a boundary,
                // capture values if possible.
                var _next = unwindWork(workInProgress); // Because this fiber did not complete, don't reset its expiration time.
                if ((workInProgress.mode & ProfileMode) !== NoMode) {
                    // Record the render duration for the fiber that errored.
                    stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false); // Include the time spent working on failed children before continuing.
                    var actualDuration = workInProgress.actualDuration;
                    var child = workInProgress.child;
                    while(child !== null){
                        actualDuration += child.actualDuration;
                        child = child.sibling;
                    }
                    workInProgress.actualDuration = actualDuration;
                }
                if (_next !== null) {
                    // If completing this work spawned new work, do that next. We'll come
                    // back here again.
                    // Since we're restarting, remove anything that is not a host effect
                    // from the effect tag.
                    // TODO: The name stopFailedWorkTimer is misleading because Suspense
                    // also captures and restarts.
                    stopFailedWorkTimer(workInProgress);
                    _next.effectTag &= HostEffectMask;
                    return _next;
                }
                stopWorkTimer(workInProgress);
                if (returnFiber !== null) {
                    // Mark the parent fiber as incomplete and clear its effect list.
                    returnFiber.firstEffect = returnFiber.lastEffect = null;
                    returnFiber.effectTag |= Incomplete;
                }
            }
            var siblingFiber = workInProgress.sibling;
            if (siblingFiber !== null) // If there is more work to do in this returnFiber, do that next.
            return siblingFiber;
             // Otherwise, return to the parent
            workInProgress = returnFiber;
        }while (workInProgress !== null) // We've reached the root.
        if (workInProgressRootExitStatus === RootIncomplete) workInProgressRootExitStatus = RootCompleted;
        return null;
    }
    function getRemainingExpirationTime(fiber) {
        var updateExpirationTime = fiber.expirationTime;
        var childExpirationTime = fiber.childExpirationTime;
        return updateExpirationTime > childExpirationTime ? updateExpirationTime : childExpirationTime;
    }
    function resetChildExpirationTime(completedWork) {
        if (renderExpirationTime$1 !== Never && completedWork.childExpirationTime === Never) // The children of this component are hidden. Don't bubble their
        // expiration times.
        return;
        var newChildExpirationTime = NoWork; // Bubble up the earliest expiration time.
        if ((completedWork.mode & ProfileMode) !== NoMode) {
            // In profiling mode, resetChildExpirationTime is also used to reset
            // profiler durations.
            var actualDuration = completedWork.actualDuration;
            var treeBaseDuration = completedWork.selfBaseDuration; // When a fiber is cloned, its actualDuration is reset to 0. This value will
            // only be updated if work is done on the fiber (i.e. it doesn't bailout).
            // When work is done, it should bubble to the parent's actualDuration. If
            // the fiber has not been cloned though, (meaning no work was done), then
            // this value will reflect the amount of time spent working on a previous
            // render. In that case it should not bubble. We determine whether it was
            // cloned by comparing the child pointer.
            var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
            var child = completedWork.child;
            while(child !== null){
                var childUpdateExpirationTime = child.expirationTime;
                var childChildExpirationTime = child.childExpirationTime;
                if (childUpdateExpirationTime > newChildExpirationTime) newChildExpirationTime = childUpdateExpirationTime;
                if (childChildExpirationTime > newChildExpirationTime) newChildExpirationTime = childChildExpirationTime;
                if (shouldBubbleActualDurations) actualDuration += child.actualDuration;
                treeBaseDuration += child.treeBaseDuration;
                child = child.sibling;
            }
            completedWork.actualDuration = actualDuration;
            completedWork.treeBaseDuration = treeBaseDuration;
        } else {
            var _child = completedWork.child;
            while(_child !== null){
                var _childUpdateExpirationTime = _child.expirationTime;
                var _childChildExpirationTime = _child.childExpirationTime;
                if (_childUpdateExpirationTime > newChildExpirationTime) newChildExpirationTime = _childUpdateExpirationTime;
                if (_childChildExpirationTime > newChildExpirationTime) newChildExpirationTime = _childChildExpirationTime;
                _child = _child.sibling;
            }
        }
        completedWork.childExpirationTime = newChildExpirationTime;
    }
    function commitRoot(root1) {
        var renderPriorityLevel = getCurrentPriorityLevel();
        runWithPriority$1(ImmediatePriority, commitRootImpl.bind(null, root1, renderPriorityLevel));
        return null;
    }
    function commitRootImpl(root1, renderPriorityLevel) {
        do // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which
        // means `flushPassiveEffects` will sometimes result in additional
        // passive effects. So we need to keep flushing in a loop until there are
        // no more pending effects.
        // TODO: Might be better if `flushPassiveEffects` did not automatically
        // flush synchronous work at the end, to avoid factoring hazards like this.
        flushPassiveEffects();
        while (rootWithPendingPassiveEffects !== null)
        flushRenderPhaseStrictModeWarningsInDEV();
        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) throw Error("Should not already be working.");
        var finishedWork = root1.finishedWork;
        var expirationTime = root1.finishedExpirationTime;
        if (finishedWork === null) return null;
        root1.finishedWork = null;
        root1.finishedExpirationTime = NoWork;
        if (!(finishedWork !== root1.current)) throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
         // commitRoot never returns a continuation; it always finishes synchronously.
        // So we can clear these now to allow a new callback to be scheduled.
        root1.callbackNode = null;
        root1.callbackExpirationTime = NoWork;
        root1.callbackPriority = NoPriority;
        root1.nextKnownPendingLevel = NoWork;
        startCommitTimer(); // Update the first and last pending times on this root. The new first
        // pending time is whatever is left on the root fiber.
        var remainingExpirationTimeBeforeCommit = getRemainingExpirationTime(finishedWork);
        markRootFinishedAtTime(root1, expirationTime, remainingExpirationTimeBeforeCommit);
        if (root1 === workInProgressRoot) {
            // We can reset these now that they are finished.
            workInProgressRoot = null;
            workInProgress = null;
            renderExpirationTime$1 = NoWork;
        } // This indicates that the last root we worked on is not the same one that
        // we're committing now. This most commonly happens when a suspended root
        // times out.
        // Get the list of effects.
        var firstEffect;
        if (finishedWork.effectTag > PerformedWork) {
            // A fiber's effect list consists only of its children, not itself. So if
            // the root has an effect, we need to add it to the end of the list. The
            // resulting list is the set that would belong to the root's parent, if it
            // had one; that is, all the effects in the tree including the root.
            if (finishedWork.lastEffect !== null) {
                finishedWork.lastEffect.nextEffect = finishedWork;
                firstEffect = finishedWork.firstEffect;
            } else firstEffect = finishedWork;
        } else // There is no effect on the root.
        firstEffect = finishedWork.firstEffect;
        if (firstEffect !== null) {
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            var prevInteractions = pushInteractions(root1); // Reset this to null before calling lifecycles
            ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass
            // of the effect list for each phase: all mutation effects come before all
            // layout effects, and so on.
            // The first phase a "before mutation" phase. We use this phase to read the
            // state of the host tree right before we mutate it. This is where
            // getSnapshotBeforeUpdate is called.
            startCommitSnapshotEffectsTimer();
            prepareForCommit(root1.containerInfo);
            nextEffect = firstEffect;
            do {
                invokeGuardedCallback(null, commitBeforeMutationEffects, null);
                if (hasCaughtError()) {
                    if (!(nextEffect !== null)) throw Error("Should be working on an effect.");
                    var error5 = clearCaughtError();
                    captureCommitPhaseError(nextEffect, error5);
                    nextEffect = nextEffect.nextEffect;
                }
            }while (nextEffect !== null)
            stopCommitSnapshotEffectsTimer();
            // Mark the current commit time to be shared by all Profilers in this
            // batch. This enables them to be grouped later.
            recordCommitTime();
            startCommitHostEffectsTimer();
            nextEffect = firstEffect;
            do {
                invokeGuardedCallback(null, commitMutationEffects, null, root1, renderPriorityLevel);
                if (hasCaughtError()) {
                    if (!(nextEffect !== null)) throw Error("Should be working on an effect.");
                    var _error = clearCaughtError();
                    captureCommitPhaseError(nextEffect, _error);
                    nextEffect = nextEffect.nextEffect;
                }
            }while (nextEffect !== null)
            stopCommitHostEffectsTimer();
            resetAfterCommit(root1.containerInfo); // The work-in-progress tree is now the current tree. This must come after
            // the mutation phase, so that the previous tree is still current during
            // componentWillUnmount, but before the layout phase, so that the finished
            // work is current during componentDidMount/Update.
            root1.current = finishedWork; // The next phase is the layout phase, where we call effects that read
            // the host tree after it's been mutated. The idiomatic use case for this is
            // layout, but class component lifecycles also fire here for legacy reasons.
            startCommitLifeCyclesTimer();
            nextEffect = firstEffect;
            do {
                invokeGuardedCallback(null, commitLayoutEffects, null, root1, expirationTime);
                if (hasCaughtError()) {
                    if (!(nextEffect !== null)) throw Error("Should be working on an effect.");
                    var _error2 = clearCaughtError();
                    captureCommitPhaseError(nextEffect, _error2);
                    nextEffect = nextEffect.nextEffect;
                }
            }while (nextEffect !== null)
            stopCommitLifeCyclesTimer();
            nextEffect = null; // Tell Scheduler to yield at the end of the frame, so the browser has an
            // opportunity to paint.
            requestPaint();
            popInteractions(prevInteractions);
            executionContext = prevExecutionContext;
        } else {
            // No effects.
            root1.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were
            // no effects.
            // TODO: Maybe there's a better way to report this.
            startCommitSnapshotEffectsTimer();
            stopCommitSnapshotEffectsTimer();
            recordCommitTime();
            startCommitHostEffectsTimer();
            stopCommitHostEffectsTimer();
            startCommitLifeCyclesTimer();
            stopCommitLifeCyclesTimer();
        }
        stopCommitTimer();
        var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
        if (rootDoesHavePassiveEffects) {
            // This commit has passive effects. Stash a reference to them. But don't
            // schedule a callback until after flushing layout work.
            rootDoesHavePassiveEffects = false;
            rootWithPendingPassiveEffects = root1;
            pendingPassiveEffectsExpirationTime = expirationTime;
            pendingPassiveEffectsRenderPriority = renderPriorityLevel;
        } else {
            // We are done with the effect chain at this point so let's clear the
            // nextEffect pointers to assist with GC. If we have passive effects, we'll
            // clear this in flushPassiveEffects.
            nextEffect = firstEffect;
            while(nextEffect !== null){
                var nextNextEffect = nextEffect.nextEffect;
                nextEffect.nextEffect = null;
                nextEffect = nextNextEffect;
            }
        } // Check if there's remaining work on this root
        var remainingExpirationTime = root1.firstPendingTime;
        if (remainingExpirationTime !== NoWork) {
            if (spawnedWorkDuringRender !== null) {
                var expirationTimes = spawnedWorkDuringRender;
                spawnedWorkDuringRender = null;
                for(var i = 0; i < expirationTimes.length; i++)scheduleInteractions(root1, expirationTimes[i], root1.memoizedInteractions);
            }
            schedulePendingInteractions(root1, remainingExpirationTime);
        } else // If there's no remaining work, we can clear the set of already failed
        // error boundaries.
        legacyErrorBoundariesThatAlreadyFailed = null;
        if (!rootDidHavePassiveEffects) // If there are no passive effects, then we can complete the pending interactions.
        // Otherwise, we'll wait until after the passive effects are flushed.
        // Wait to do this until after remaining work has been scheduled,
        // so that we don't prematurely signal complete for interactions when there's e.g. hidden work.
        finishPendingInteractions(root1, expirationTime);
        if (remainingExpirationTime === Sync) {
            // Count the number of times the root synchronously re-renders without
            // finishing. If there are too many, it indicates an infinite update loop.
            if (root1 === rootWithNestedUpdates) nestedUpdateCount++;
            else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root1;
            }
        } else nestedUpdateCount = 0;
        onCommitRoot(finishedWork.stateNode, expirationTime); // Always call this before exiting `commitRoot`, to ensure that any
        // additional work on this root is scheduled.
        ensureRootIsScheduled(root1);
        if (hasUncaughtError) {
            hasUncaughtError = false;
            var _error3 = firstUncaughtError;
            firstUncaughtError = null;
            throw _error3;
        }
        if ((executionContext & LegacyUnbatchedContext) !== NoContext) // This is a legacy edge case. We just committed the initial mount of
        // a ReactDOM.render-ed root inside of batchedUpdates. The commit fired
        // synchronously, but layout updates should be deferred until the end
        // of the batch.
        return null;
         // If layout work was scheduled, flush it now.
        flushSyncCallbackQueue();
        return null;
    }
    function commitBeforeMutationEffects() {
        while(nextEffect !== null){
            var effectTag = nextEffect.effectTag;
            if ((effectTag & Snapshot) !== NoEffect) {
                setCurrentFiber(nextEffect);
                recordEffect();
                var current6 = nextEffect.alternate;
                commitBeforeMutationLifeCycles(current6, nextEffect);
                resetCurrentFiber();
            }
            if ((effectTag & Passive) !== NoEffect) // If there are passive effects, schedule a callback to flush at
            // the earliest opportunity.
            {
                if (!rootDoesHavePassiveEffects) {
                    rootDoesHavePassiveEffects = true;
                    scheduleCallback(NormalPriority, function() {
                        flushPassiveEffects();
                        return null;
                    });
                }
            }
            nextEffect = nextEffect.nextEffect;
        }
    }
    function commitMutationEffects(root1, renderPriorityLevel) {
        // TODO: Should probably move the bulk of this function to commitWork.
        while(nextEffect !== null){
            setCurrentFiber(nextEffect);
            var effectTag = nextEffect.effectTag;
            if (effectTag & ContentReset) commitResetTextContent(nextEffect);
            if (effectTag & Ref) {
                var current7 = nextEffect.alternate;
                if (current7 !== null) commitDetachRef(current7);
            } // The following switch statement is only concerned about placement,
            // updates, and deletions. To avoid needing to add a case for every possible
            // bitmap value, we remove the secondary effects from the effect tag and
            // switch on that value.
            var primaryEffectTag = effectTag & (Placement | Update | Deletion | Hydrating);
            switch(primaryEffectTag){
                case Placement:
                    commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
                    // inserted, before any life-cycles like componentDidMount gets called.
                    // TODO: findDOMNode doesn't rely on this any more but isMounted does
                    // and isMounted is deprecated anyway so we should be able to kill this.
                    nextEffect.effectTag &= ~Placement;
                    break;
                case PlacementAndUpdate:
                    // Placement
                    commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
                    // inserted, before any life-cycles like componentDidMount gets called.
                    nextEffect.effectTag &= ~Placement; // Update
                    var _current = nextEffect.alternate;
                    commitWork(_current, nextEffect);
                    break;
                case Hydrating:
                    nextEffect.effectTag &= ~Hydrating;
                    break;
                case HydratingAndUpdate:
                    nextEffect.effectTag &= ~Hydrating; // Update
                    var _current2 = nextEffect.alternate;
                    commitWork(_current2, nextEffect);
                    break;
                case Update:
                    var _current3 = nextEffect.alternate;
                    commitWork(_current3, nextEffect);
                    break;
                case Deletion:
                    commitDeletion(root1, nextEffect, renderPriorityLevel);
                    break;
            } // TODO: Only record a mutation effect if primaryEffectTag is non-zero.
            recordEffect();
            resetCurrentFiber();
            nextEffect = nextEffect.nextEffect;
        }
    }
    function commitLayoutEffects(root1, committedExpirationTime) {
        // TODO: Should probably move the bulk of this function to commitWork.
        while(nextEffect !== null){
            setCurrentFiber(nextEffect);
            var effectTag = nextEffect.effectTag;
            if (effectTag & (Update | Callback)) {
                recordEffect();
                var current8 = nextEffect.alternate;
                commitLifeCycles(root1, current8, nextEffect);
            }
            if (effectTag & Ref) {
                recordEffect();
                commitAttachRef(nextEffect);
            }
            resetCurrentFiber();
            nextEffect = nextEffect.nextEffect;
        }
    }
    function flushPassiveEffects() {
        if (pendingPassiveEffectsRenderPriority !== NoPriority) {
            var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority ? NormalPriority : pendingPassiveEffectsRenderPriority;
            pendingPassiveEffectsRenderPriority = NoPriority;
            return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
        }
    }
    function flushPassiveEffectsImpl() {
        if (rootWithPendingPassiveEffects === null) return false;
        var root1 = rootWithPendingPassiveEffects;
        var expirationTime = pendingPassiveEffectsExpirationTime;
        rootWithPendingPassiveEffects = null;
        pendingPassiveEffectsExpirationTime = NoWork;
        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) throw Error("Cannot flush passive effects while already rendering.");
        var prevExecutionContext = executionContext;
        executionContext |= CommitContext;
        var prevInteractions = pushInteractions(root1);
        // Note: This currently assumes there are no passive effects on the root fiber
        // because the root is not part of its own effect list.
        // This could change in the future.
        var _effect2 = root1.current.firstEffect;
        while(_effect2 !== null){
            setCurrentFiber(_effect2);
            invokeGuardedCallback(null, commitPassiveHookEffects, null, _effect2);
            if (hasCaughtError()) {
                if (!(_effect2 !== null)) throw Error("Should be working on an effect.");
                var _error5 = clearCaughtError();
                captureCommitPhaseError(_effect2, _error5);
            }
            resetCurrentFiber();
            var nextNextEffect = _effect2.nextEffect; // Remove nextEffect pointer to assist GC
            _effect2.nextEffect = null;
            _effect2 = nextNextEffect;
        }
        popInteractions(prevInteractions);
        finishPendingInteractions(root1, expirationTime);
        executionContext = prevExecutionContext;
        flushSyncCallbackQueue(); // If additional passive effects were scheduled, increment a counter. If this
        // exceeds the limit, we'll fire a warning.
        nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
        return true;
    }
    function isAlreadyFailedLegacyErrorBoundary(instance) {
        return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
    }
    function markLegacyErrorBoundaryAsFailed(instance) {
        if (legacyErrorBoundariesThatAlreadyFailed === null) legacyErrorBoundariesThatAlreadyFailed = new Set([
            instance
        ]);
        else legacyErrorBoundariesThatAlreadyFailed.add(instance);
    }
    function prepareToThrowUncaughtError(error6) {
        if (!hasUncaughtError) {
            hasUncaughtError = true;
            firstUncaughtError = error6;
        }
    }
    var onUncaughtError = prepareToThrowUncaughtError;
    function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error6) {
        var errorInfo = createCapturedValue(error6, sourceFiber);
        var update = createRootErrorUpdate(rootFiber, errorInfo, Sync);
        enqueueUpdate(rootFiber, update);
        var root1 = markUpdateTimeFromFiberToRoot(rootFiber, Sync);
        if (root1 !== null) {
            ensureRootIsScheduled(root1);
            schedulePendingInteractions(root1, Sync);
        }
    }
    function captureCommitPhaseError(sourceFiber, error6) {
        if (sourceFiber.tag === HostRoot) {
            // Error was thrown at the root. There is no parent, so the root
            // itself should capture it.
            captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error6);
            return;
        }
        var fiber = sourceFiber.return;
        while(fiber !== null){
            if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error6);
                return;
            } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                    var errorInfo = createCapturedValue(error6, sourceFiber);
                    var update = createClassErrorUpdate(fiber, errorInfo, Sync);
                    enqueueUpdate(fiber, update);
                    var root1 = markUpdateTimeFromFiberToRoot(fiber, Sync);
                    if (root1 !== null) {
                        ensureRootIsScheduled(root1);
                        schedulePendingInteractions(root1, Sync);
                    }
                    return;
                }
            }
            fiber = fiber.return;
        }
    }
    function pingSuspendedRoot(root2, thenable, suspendedTime) {
        var pingCache = root2.pingCache;
        if (pingCache !== null) // The thenable resolved, so we no longer need to memoize, because it will
        // never be thrown again.
        pingCache.delete(thenable);
        if (workInProgressRoot === root2 && renderExpirationTime$1 === suspendedTime) {
            // Received a ping at the same priority level at which we're currently
            // rendering. We might want to restart this render. This should mirror
            // the logic of whether or not a root suspends once it completes.
            // TODO: If we're rendering sync either due to Sync, Batched or expired,
            // we should probably never restart.
            // If we're suspended with delay, we'll always suspend so we can always
            // restart. If we're suspended without any updates, it might be a retry.
            // If it's early in the retry we can restart. We can't know for sure
            // whether we'll eventually process an update during this render pass,
            // but it's somewhat unlikely that we get to a ping before that, since
            // getting to the root most update is usually very fast.
            if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && workInProgressRootLatestProcessedExpirationTime === Sync && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) // Restart from the root. Don't need to schedule a ping because
            // we're already working on this tree.
            prepareFreshStack(root2, renderExpirationTime$1);
            else // Even though we can't restart right now, we might get an
            // opportunity later. So we mark this render as having a ping.
            workInProgressRootHasPendingPing = true;
            return;
        }
        if (!isRootSuspendedAtTime(root2, suspendedTime)) // The root is no longer suspended at this time.
        return;
        var lastPingedTime = root2.lastPingedTime;
        if (lastPingedTime !== NoWork && lastPingedTime < suspendedTime) // There's already a lower priority ping scheduled.
        return;
         // Mark the time at which this ping was scheduled.
        root2.lastPingedTime = suspendedTime;
        ensureRootIsScheduled(root2);
        schedulePendingInteractions(root2, suspendedTime);
    }
    function retryTimedOutBoundary(boundaryFiber, retryTime) {
        // The boundary fiber (a Suspense component or SuspenseList component)
        // previously was rendered in its fallback state. One of the promises that
        // suspended it has resolved, which means at least part of the tree was
        // likely unblocked. Try rendering again, at a new expiration time.
        if (retryTime === NoWork) {
            var suspenseConfig = null; // Retries don't carry over the already committed update.
            var currentTime = requestCurrentTimeForUpdate();
            retryTime = computeExpirationForFiber(currentTime, boundaryFiber, suspenseConfig);
        } // TODO: Special case idle priority?
        var root2 = markUpdateTimeFromFiberToRoot(boundaryFiber, retryTime);
        if (root2 !== null) {
            ensureRootIsScheduled(root2);
            schedulePendingInteractions(root2, retryTime);
        }
    }
    function resolveRetryThenable(boundaryFiber, thenable) {
        var retryTime = NoWork; // Default
        var retryCache;
        retryCache = boundaryFiber.stateNode;
        if (retryCache !== null) // The thenable resolved, so we no longer need to memoize, because it will
        // never be thrown again.
        retryCache.delete(thenable);
        retryTimedOutBoundary(boundaryFiber, retryTime);
    } // Computes the next Just Noticeable Difference (JND) boundary.
    // The theory is that a person can't tell the difference between small differences in time.
    // Therefore, if we wait a bit longer than necessary that won't translate to a noticeable
    // difference in the experience. However, waiting for longer might mean that we can avoid
    // showing an intermediate loading state. The longer we have already waited, the harder it
    // is to tell small differences in time. Therefore, the longer we've already waited,
    // the longer we can wait additionally. At some point we have to give up though.
    // We pick a train model where the next boundary commits at a consistent schedule.
    // These particular numbers are vague estimates. We expect to adjust them based on research.
    function jnd(timeElapsed) {
        return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
    }
    function computeMsUntilSuspenseLoadingDelay(mostRecentEventTime, committedExpirationTime, suspenseConfig) {
        var busyMinDurationMs = suspenseConfig.busyMinDurationMs | 0;
        if (busyMinDurationMs <= 0) return 0;
        var busyDelayMs = suspenseConfig.busyDelayMs | 0; // Compute the time until this render pass would expire.
        var currentTimeMs = now();
        var eventTimeMs = inferTimeFromExpirationTimeWithSuspenseConfig(mostRecentEventTime, suspenseConfig);
        var timeElapsed = currentTimeMs - eventTimeMs;
        if (timeElapsed <= busyDelayMs) // If we haven't yet waited longer than the initial delay, we don't
        // have to wait any additional time.
        return 0;
        var msUntilTimeout = busyDelayMs + busyMinDurationMs - timeElapsed; // This is the value that is passed to `setTimeout`.
        return msUntilTimeout;
    }
    function checkForNestedUpdates() {
        if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = null;
            throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
        }
        if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
            nestedPassiveUpdateCount = 0;
            error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
        }
    }
    function flushRenderPhaseStrictModeWarningsInDEV() {
        ReactStrictModeWarnings.flushLegacyContextWarning();
        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
    }
    function stopFinishedWorkLoopTimer() {
        var didCompleteRoot = true;
        stopWorkLoopTimer(interruptedBy, didCompleteRoot);
        interruptedBy = null;
    }
    function stopInterruptedWorkLoopTimer() {
        // TODO: Track which fiber caused the interruption.
        var didCompleteRoot = false;
        stopWorkLoopTimer(interruptedBy, didCompleteRoot);
        interruptedBy = null;
    }
    function checkForInterruption(fiberThatReceivedUpdate, updateExpirationTime) {
        if (workInProgressRoot !== null && updateExpirationTime > renderExpirationTime$1) interruptedBy = fiberThatReceivedUpdate;
    }
    var didWarnStateUpdateForUnmountedComponent = null;
    function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
        var tag = fiber.tag;
        if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) // Only warn for user-defined components, not internal ones like Suspense.
        return;
        // the problematic code almost always lies inside that component.
        var componentName = getComponentName(fiber.type) || 'ReactComponent';
        if (didWarnStateUpdateForUnmountedComponent !== null) {
            if (didWarnStateUpdateForUnmountedComponent.has(componentName)) return;
            didWarnStateUpdateForUnmountedComponent.add(componentName);
        } else didWarnStateUpdateForUnmountedComponent = new Set([
            componentName
        ]);
        error("Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in %s.%s", tag === ClassComponent ? 'the componentWillUnmount method' : 'a useEffect cleanup function', getStackByFiberInDevAndProd(fiber));
    }
    var beginWork$1;
    var dummyFiber = null;
    beginWork$1 = function(current9, unitOfWork, expirationTime) {
        // If a component throws an error, we replay it again in a synchronously
        // dispatched event, so that the debugger will treat it as an uncaught
        // error See ReactErrorUtils for more information.
        // Before entering the begin phase, copy the work-in-progress onto a dummy
        // fiber. If beginWork throws, we'll use this to reset the state.
        var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
        try {
            return beginWork(current9, unitOfWork, expirationTime);
        } catch (originalError) {
            if (originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') // Don't replay promises. Treat everything else like an error.
            throw originalError;
             // Keep this code in sync with handleError; any changes here must have
            // corresponding changes there.
            resetContextDependencies();
            resetHooksAfterThrow(); // Don't reset current debug fiber, since we're about to work on the
            // same fiber again.
            // Unwind the failed stack frame
            unwindInterruptedWork(unitOfWork); // Restore the original properties of the fiber.
            assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
            if (unitOfWork.mode & ProfileMode) // Reset the profiler timer.
            startProfilerTimer(unitOfWork);
             // Run beginWork again.
            invokeGuardedCallback(null, beginWork, null, current9, unitOfWork, expirationTime);
            if (hasCaughtError()) {
                var replayError = clearCaughtError(); // `invokeGuardedCallback` sometimes sets an expando `_suppressLogging`.
                // Rethrow this error instead of the original one.
                throw replayError;
            } else // This branch is reachable if the render phase is impure.
            throw originalError;
        }
    };
    var didWarnAboutUpdateInRender = false;
    var didWarnAboutUpdateInRenderForAnotherComponent;
    didWarnAboutUpdateInRenderForAnotherComponent = new Set();
    function warnAboutRenderPhaseUpdatesInDEV(fiber) {
        if (isRendering && (executionContext & RenderContext) !== NoContext) switch(fiber.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || 'Unknown'; // Dedupe by the rendering component because it's the one that needs to be fixed.
                var dedupeKey = renderingComponentName;
                if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                    didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                    var setStateComponentName = getComponentName(fiber.type) || 'Unknown';
                    error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://fb.me/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                }
                break;
            case ClassComponent:
                if (!didWarnAboutUpdateInRender) {
                    error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                    didWarnAboutUpdateInRender = true;
                }
                break;
        }
    } // a 'shared' variable that changes when act() opens/closes in tests.
    var IsThisRendererActing = {
        current: false
    };
    function warnIfNotScopedWithMatchingAct(fiber) {
        if (IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) error("It looks like you're using the wrong act() around your test interactions.\nBe sure to use the matching version of act() corresponding to your renderer:\n\n// for react-dom:\nimport {act} from 'react-dom/test-utils';\n// ...\nact(() => ...);\n\n// for react-test-renderer:\nimport TestRenderer from 'react-test-renderer';\nconst {act} = TestRenderer;\n// ...\nact(() => ...);%s", getStackByFiberInDevAndProd(fiber));
    }
    function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
        if ((fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) error("An update to %s ran an effect, but was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://fb.me/react-wrap-tests-with-act%s", getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
    }
    function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
        if (executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://fb.me/react-wrap-tests-with-act%s", getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
    }
    var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV; // In tests, we want to enforce a mocked scheduler.
    var didWarnAboutUnmockedScheduler = false; // TODO Before we release concurrent mode, revisit this and decide whether a mocked
    // scheduler is the actual recommendation. The alternative could be a testing build,
    // a new lib, or whatever; we dunno just yet. This message is for early adopters
    // to get their tests right.
    function warnIfUnmockedScheduler(fiber) {
        if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === undefined) {
            if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
                didWarnAboutUnmockedScheduler = true;
                error("In Concurrent or Sync modes, the \"scheduler\" module needs to be mocked to guarantee consistent behaviour across tests and browsers. For example, with jest: \njest.mock('scheduler', () => require('scheduler/unstable_mock'));\n\nFor more info, visit https://fb.me/react-mock-scheduler");
            }
        }
    }
    function computeThreadID(root2, expirationTime) {
        // Interaction threads are unique per root and expiration time.
        return expirationTime * 1000 + root2.interactionThreadID;
    }
    function markSpawnedWork(expirationTime) {
        if (spawnedWorkDuringRender === null) spawnedWorkDuringRender = [
            expirationTime
        ];
        else spawnedWorkDuringRender.push(expirationTime);
    }
    function scheduleInteractions(root2, expirationTime, interactions) {
        if (interactions.size > 0) {
            var pendingInteractionMap = root2.pendingInteractionMap;
            var pendingInteractions = pendingInteractionMap.get(expirationTime);
            if (pendingInteractions != null) interactions.forEach(function(interaction) {
                if (!pendingInteractions.has(interaction)) // Update the pending async work count for previously unscheduled interaction.
                interaction.__count++;
                pendingInteractions.add(interaction);
            });
            else {
                pendingInteractionMap.set(expirationTime, new Set(interactions)); // Update the pending async work count for the current interactions.
                interactions.forEach(function(interaction) {
                    interaction.__count++;
                });
            }
            var subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null) {
                var threadID = computeThreadID(root2, expirationTime);
                subscriber.onWorkScheduled(interactions, threadID);
            }
        }
    }
    function schedulePendingInteractions(root2, expirationTime) {
        scheduleInteractions(root2, expirationTime, tracing.__interactionsRef.current);
    }
    function startWorkOnPendingInteractions(root2, expirationTime) {
        // we can accurately attribute time spent working on it, And so that cascading
        // work triggered during the render phase will be associated with it.
        var interactions = new Set();
        root2.pendingInteractionMap.forEach(function(scheduledInteractions, scheduledExpirationTime) {
            if (scheduledExpirationTime >= expirationTime) scheduledInteractions.forEach(function(interaction) {
                return interactions.add(interaction);
            });
        }); // Store the current set of interactions on the FiberRoot for a few reasons:
        // We can re-use it in hot functions like performConcurrentWorkOnRoot()
        // without having to recalculate it. We will also use it in commitWork() to
        // pass to any Profiler onRender() hooks. This also provides DevTools with a
        // way to access it when the onCommitRoot() hook is called.
        root2.memoizedInteractions = interactions;
        if (interactions.size > 0) {
            var subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null) {
                var threadID = computeThreadID(root2, expirationTime);
                try {
                    subscriber.onWorkStarted(interactions, threadID);
                } catch (error6) {
                    // If the subscriber throws, rethrow it in a separate task
                    scheduleCallback(ImmediatePriority, function() {
                        throw error6;
                    });
                }
            }
        }
    }
    function finishPendingInteractions(root2, committedExpirationTime) {
        var earliestRemainingTimeAfterCommit = root2.firstPendingTime;
        var subscriber;
        try {
            subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null && root2.memoizedInteractions.size > 0) {
                var threadID = computeThreadID(root2, committedExpirationTime);
                subscriber.onWorkStopped(root2.memoizedInteractions, threadID);
            }
        } catch (error6) {
            // If the subscriber throws, rethrow it in a separate task
            scheduleCallback(ImmediatePriority, function() {
                throw error6;
            });
        } finally{
            // Clear completed interactions from the pending Map.
            // Unless the render was suspended or cascading work was scheduled,
            // In which case– leave pending interactions until the subsequent render.
            var pendingInteractionMap = root2.pendingInteractionMap;
            pendingInteractionMap.forEach(function(scheduledInteractions, scheduledExpirationTime) {
                // Only decrement the pending interaction count if we're done.
                // If there's still work at the current priority,
                // That indicates that we are waiting for suspense data.
                if (scheduledExpirationTime > earliestRemainingTimeAfterCommit) {
                    pendingInteractionMap.delete(scheduledExpirationTime);
                    scheduledInteractions.forEach(function(interaction) {
                        interaction.__count--;
                        if (subscriber !== null && interaction.__count === 0) try {
                            subscriber.onInteractionScheduledWorkCompleted(interaction);
                        } catch (error6) {
                            // If the subscriber throws, rethrow it in a separate task
                            scheduleCallback(ImmediatePriority, function() {
                                throw error6;
                            });
                        }
                    });
                }
            });
        }
    }
    var onScheduleFiberRoot = null;
    var onCommitFiberRoot = null;
    var onCommitFiberUnmount = null;
    var hasLoggedError = false;
    var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';
    function injectInternals(internals) {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') // No DevTools
        return false;
        var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook.isDisabled) // This isn't a real property on the hook, but it can be set to opt out
        // of DevTools integration and associated warnings and logs.
        // https://github.com/facebook/react/issues/3877
        return true;
        if (!hook.supportsFiber) {
            error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://fb.me/react-devtools");
            return true;
        }
        try {
            var rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.
            // Only used by Fast Refresh
            if (typeof hook.onScheduleFiberRoot === 'function') onScheduleFiberRoot = function(root2, children) {
                try {
                    hook.onScheduleFiberRoot(rendererID, root2, children);
                } catch (err) {
                    if (!hasLoggedError) {
                        hasLoggedError = true;
                        error('React instrumentation encountered an error: %s', err);
                    }
                }
            };
            onCommitFiberRoot = function(root2, expirationTime) {
                try {
                    var didError = (root2.current.effectTag & DidCapture) === DidCapture;
                    if (enableProfilerTimer) {
                        var currentTime = getCurrentTime();
                        var priorityLevel = inferPriorityFromExpirationTime(currentTime, expirationTime);
                        hook.onCommitFiberRoot(rendererID, root2, priorityLevel, didError);
                    } else hook.onCommitFiberRoot(rendererID, root2, undefined, didError);
                } catch (err) {
                    if (!hasLoggedError) {
                        hasLoggedError = true;
                        error('React instrumentation encountered an error: %s', err);
                    }
                }
            };
            onCommitFiberUnmount = function(fiber) {
                try {
                    hook.onCommitFiberUnmount(rendererID, fiber);
                } catch (err) {
                    if (!hasLoggedError) {
                        hasLoggedError = true;
                        error('React instrumentation encountered an error: %s', err);
                    }
                }
            };
        } catch (err) {
            error('React instrumentation encountered an error: %s.', err);
        } // DevTools exists
        return true;
    }
    function onScheduleRoot(root2, children) {
        if (typeof onScheduleFiberRoot === 'function') onScheduleFiberRoot(root2, children);
    }
    function onCommitRoot(root2, expirationTime) {
        if (typeof onCommitFiberRoot === 'function') onCommitFiberRoot(root2, expirationTime);
    }
    function onCommitUnmount(fiber) {
        if (typeof onCommitFiberUnmount === 'function') onCommitFiberUnmount(fiber);
    }
    var hasBadMapPolyfill;
    hasBadMapPolyfill = false;
    try {
        var nonExtensibleObject = Object.preventExtensions({
        });
        var testMap = new Map([
            [
                nonExtensibleObject,
                null
            ]
        ]);
        var testSet = new Set([
            nonExtensibleObject
        ]); // This is necessary for Rollup to not consider these unused.
        // https://github.com/rollup/rollup/issues/1771
        // TODO: we can remove these if Rollup fixes the bug.
        testMap.set(0, 0);
        testSet.add(0);
    } catch (e) {
        // TODO: Consider warning about bad polyfills
        hasBadMapPolyfill = true;
    }
    var debugCounter = 1;
    function FiberNode(tag, pendingProps, key, mode) {
        // Instance
        this.tag = tag;
        this.key = key;
        this.elementType = null;
        this.type = null;
        this.stateNode = null; // Fiber
        this.return = null;
        this.child = null;
        this.sibling = null;
        this.index = 0;
        this.ref = null;
        this.pendingProps = pendingProps;
        this.memoizedProps = null;
        this.updateQueue = null;
        this.memoizedState = null;
        this.dependencies = null;
        this.mode = mode; // Effects
        this.effectTag = NoEffect;
        this.nextEffect = null;
        this.firstEffect = null;
        this.lastEffect = null;
        this.expirationTime = NoWork;
        this.childExpirationTime = NoWork;
        this.alternate = null;
        // Note: The following is done to avoid a v8 performance cliff.
        //
        // Initializing the fields below to smis and later updating them with
        // double values will cause Fibers to end up having separate shapes.
        // This behavior/bug has something to do with Object.preventExtension().
        // Fortunately this only impacts DEV builds.
        // Unfortunately it makes React unusably slow for some applications.
        // To work around this, initialize the fields below with doubles.
        //
        // Learn more about this here:
        // https://github.com/facebook/react/issues/14365
        // https://bugs.chromium.org/p/v8/issues/detail?id=8538
        this.actualDuration = Number.NaN;
        this.actualStartTime = Number.NaN;
        this.selfBaseDuration = Number.NaN;
        this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.
        // This won't trigger the performance cliff mentioned above,
        // and it simplifies other profiler code (including DevTools).
        this.actualDuration = 0;
        this.actualStartTime = -1;
        this.selfBaseDuration = 0;
        this.treeBaseDuration = 0;
        this._debugID = debugCounter++;
        this._debugIsCurrentlyTiming = false;
        this._debugSource = null;
        this._debugOwner = null;
        this._debugNeedsRemount = false;
        this._debugHookTypes = null;
        if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') Object.preventExtensions(this);
    } // This is a constructor function, rather than a POJO constructor, still
    // please ensure we do the following:
    // 1) Nobody should add any instance methods on this. Instance methods can be
    //    more difficult to predict when they get optimized and they are almost
    //    never inlined properly in static compilers.
    // 2) Nobody should rely on `instanceof Fiber` for type testing. We should
    //    always know when it is a fiber.
    // 3) We might want to experiment with using numeric keys since they are easier
    //    to optimize in a non-JIT environment.
    // 4) We can easily go from a constructor to a createFiber object literal if that
    //    is faster.
    // 5) It should be easy to port this to a C struct and keep a C implementation
    //    compatible.
    var createFiber = function(tag, pendingProps, key, mode) {
        // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
        return new FiberNode(tag, pendingProps, key, mode);
    };
    function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function isSimpleFunctionComponent(type) {
        return typeof type === 'function' && !shouldConstruct(type) && type.defaultProps === undefined;
    }
    function resolveLazyComponentTag(Component) {
        if (typeof Component === 'function') return shouldConstruct(Component) ? ClassComponent : FunctionComponent;
        else if (Component !== undefined && Component !== null) {
            var $$typeof = Component.$$typeof;
            if ($$typeof === REACT_FORWARD_REF_TYPE) return ForwardRef;
            if ($$typeof === REACT_MEMO_TYPE) return MemoComponent;
        }
        return IndeterminateComponent;
    } // This is used to create an alternate fiber to do work on.
    function createWorkInProgress(current9, pendingProps) {
        var workInProgress1 = current9.alternate;
        if (workInProgress1 === null) {
            // We use a double buffering pooling technique because we know that we'll
            // only ever need at most two versions of a tree. We pool the "other" unused
            // node that we're free to reuse. This is lazily created to avoid allocating
            // extra objects for things that are never updated. It also allow us to
            // reclaim the extra memory if needed.
            workInProgress1 = createFiber(current9.tag, pendingProps, current9.key, current9.mode);
            workInProgress1.elementType = current9.elementType;
            workInProgress1.type = current9.type;
            workInProgress1.stateNode = current9.stateNode;
            workInProgress1._debugID = current9._debugID;
            workInProgress1._debugSource = current9._debugSource;
            workInProgress1._debugOwner = current9._debugOwner;
            workInProgress1._debugHookTypes = current9._debugHookTypes;
            workInProgress1.alternate = current9;
            current9.alternate = workInProgress1;
        } else {
            workInProgress1.pendingProps = pendingProps; // We already have an alternate.
            // Reset the effect tag.
            workInProgress1.effectTag = NoEffect; // The effect list is no longer valid.
            workInProgress1.nextEffect = null;
            workInProgress1.firstEffect = null;
            workInProgress1.lastEffect = null;
            // We intentionally reset, rather than copy, actualDuration & actualStartTime.
            // This prevents time from endlessly accumulating in new commits.
            // This has the downside of resetting values for different priority renders,
            // But works for yielding (the common case) and should support resuming.
            workInProgress1.actualDuration = 0;
            workInProgress1.actualStartTime = -1;
        }
        workInProgress1.childExpirationTime = current9.childExpirationTime;
        workInProgress1.expirationTime = current9.expirationTime;
        workInProgress1.child = current9.child;
        workInProgress1.memoizedProps = current9.memoizedProps;
        workInProgress1.memoizedState = current9.memoizedState;
        workInProgress1.updateQueue = current9.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
        // it cannot be shared with the current fiber.
        var currentDependencies = current9.dependencies;
        workInProgress1.dependencies = currentDependencies === null ? null : {
            expirationTime: currentDependencies.expirationTime,
            firstContext: currentDependencies.firstContext,
            responders: currentDependencies.responders
        }; // These will be overridden during the parent's reconciliation
        workInProgress1.sibling = current9.sibling;
        workInProgress1.index = current9.index;
        workInProgress1.ref = current9.ref;
        workInProgress1.selfBaseDuration = current9.selfBaseDuration;
        workInProgress1.treeBaseDuration = current9.treeBaseDuration;
        workInProgress1._debugNeedsRemount = current9._debugNeedsRemount;
        switch(workInProgress1.tag){
            case IndeterminateComponent:
            case FunctionComponent:
            case SimpleMemoComponent:
                workInProgress1.type = resolveFunctionForHotReloading(current9.type);
                break;
            case ClassComponent:
                workInProgress1.type = resolveClassForHotReloading(current9.type);
                break;
            case ForwardRef:
                workInProgress1.type = resolveForwardRefForHotReloading(current9.type);
                break;
        }
        return workInProgress1;
    } // Used to reuse a Fiber for a second pass.
    function resetWorkInProgress(workInProgress1, renderExpirationTime1) {
        // This resets the Fiber to what createFiber or createWorkInProgress would
        // have set the values to before during the first pass. Ideally this wouldn't
        // be necessary but unfortunately many code paths reads from the workInProgress
        // when they should be reading from current and writing to workInProgress.
        // We assume pendingProps, index, key, ref, return are still untouched to
        // avoid doing another reconciliation.
        // Reset the effect tag but keep any Placement tags, since that's something
        // that child fiber is setting, not the reconciliation.
        workInProgress1.effectTag &= Placement; // The effect list is no longer valid.
        workInProgress1.nextEffect = null;
        workInProgress1.firstEffect = null;
        workInProgress1.lastEffect = null;
        var current9 = workInProgress1.alternate;
        if (current9 === null) {
            // Reset to createFiber's initial values.
            workInProgress1.childExpirationTime = NoWork;
            workInProgress1.expirationTime = renderExpirationTime1;
            workInProgress1.child = null;
            workInProgress1.memoizedProps = null;
            workInProgress1.memoizedState = null;
            workInProgress1.updateQueue = null;
            workInProgress1.dependencies = null;
            // Note: We don't reset the actualTime counts. It's useful to accumulate
            // actual time across multiple render passes.
            workInProgress1.selfBaseDuration = 0;
            workInProgress1.treeBaseDuration = 0;
        } else {
            // Reset to the cloned values that createWorkInProgress would've.
            workInProgress1.childExpirationTime = current9.childExpirationTime;
            workInProgress1.expirationTime = current9.expirationTime;
            workInProgress1.child = current9.child;
            workInProgress1.memoizedProps = current9.memoizedProps;
            workInProgress1.memoizedState = current9.memoizedState;
            workInProgress1.updateQueue = current9.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
            // it cannot be shared with the current fiber.
            var currentDependencies = current9.dependencies;
            workInProgress1.dependencies = currentDependencies === null ? null : {
                expirationTime: currentDependencies.expirationTime,
                firstContext: currentDependencies.firstContext,
                responders: currentDependencies.responders
            };
            // Note: We don't reset the actualTime counts. It's useful to accumulate
            // actual time across multiple render passes.
            workInProgress1.selfBaseDuration = current9.selfBaseDuration;
            workInProgress1.treeBaseDuration = current9.treeBaseDuration;
        }
        return workInProgress1;
    }
    function createHostRootFiber(tag) {
        var mode;
        if (tag === ConcurrentRoot) mode = ConcurrentMode | BlockingMode | StrictMode;
        else if (tag === BlockingRoot) mode = BlockingMode | StrictMode;
        else mode = NoMode;
        if (isDevToolsPresent) // Always collect profile timings when DevTools are present.
        // This enables DevTools to start capturing timing at any point–
        // Without some nodes in the tree having empty base times.
        mode |= ProfileMode;
        return createFiber(HostRoot, null, null, mode);
    }
    function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime) {
        var fiber;
        var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.
        var resolvedType = type;
        if (typeof type === 'function') {
            if (shouldConstruct(type)) {
                fiberTag = ClassComponent;
                resolvedType = resolveClassForHotReloading(resolvedType);
            } else resolvedType = resolveFunctionForHotReloading(resolvedType);
        } else if (typeof type === 'string') fiberTag = HostComponent;
        else getTag: switch(type){
            case REACT_FRAGMENT_TYPE:
                return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);
            case REACT_CONCURRENT_MODE_TYPE:
                fiberTag = Mode;
                mode |= ConcurrentMode | BlockingMode | StrictMode;
                break;
            case REACT_STRICT_MODE_TYPE:
                fiberTag = Mode;
                mode |= StrictMode;
                break;
            case REACT_PROFILER_TYPE:
                return createFiberFromProfiler(pendingProps, mode, expirationTime, key);
            case REACT_SUSPENSE_TYPE:
                return createFiberFromSuspense(pendingProps, mode, expirationTime, key);
            case REACT_SUSPENSE_LIST_TYPE:
                return createFiberFromSuspenseList(pendingProps, mode, expirationTime, key);
            default:
                if (typeof type === 'object' && type !== null) switch(type.$$typeof){
                    case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;
                    case REACT_CONTEXT_TYPE:
                        // This is a consumer
                        fiberTag = ContextConsumer;
                        break getTag;
                    case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef;
                        resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        break getTag;
                    case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                    case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                    case REACT_BLOCK_TYPE:
                        fiberTag = Block;
                        break getTag;
                }
                var info = '';
                if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                var ownerName = owner ? getComponentName(owner.type) : null;
                if (ownerName) info += '\n\nCheck the render method of `' + ownerName + '`.';
                throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info);
        }
        fiber = createFiber(fiberTag, pendingProps, key, mode);
        fiber.elementType = type;
        fiber.type = resolvedType;
        fiber.expirationTime = expirationTime;
        return fiber;
    }
    function createFiberFromElement(element, mode, expirationTime) {
        var owner = null;
        owner = element._owner;
        var type = element.type;
        var key = element.key;
        var pendingProps = element.props;
        var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime);
        fiber._debugSource = element._source;
        fiber._debugOwner = element._owner;
        return fiber;
    }
    function createFiberFromFragment(elements, mode, expirationTime, key) {
        var fiber = createFiber(Fragment, elements, key, mode);
        fiber.expirationTime = expirationTime;
        return fiber;
    }
    function createFiberFromProfiler(pendingProps, mode, expirationTime, key) {
        if (typeof pendingProps.id !== 'string' || typeof pendingProps.onRender !== 'function') error('Profiler must specify an "id" string and "onRender" function as props');
        var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode); // TODO: The Profiler fiber shouldn't have a type. It has a tag.
        fiber.elementType = REACT_PROFILER_TYPE;
        fiber.type = REACT_PROFILER_TYPE;
        fiber.expirationTime = expirationTime;
        return fiber;
    }
    function createFiberFromSuspense(pendingProps, mode, expirationTime, key) {
        var fiber = createFiber(SuspenseComponent, pendingProps, key, mode); // TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.
        // This needs to be fixed in getComponentName so that it relies on the tag
        // instead.
        fiber.type = REACT_SUSPENSE_TYPE;
        fiber.elementType = REACT_SUSPENSE_TYPE;
        fiber.expirationTime = expirationTime;
        return fiber;
    }
    function createFiberFromSuspenseList(pendingProps, mode, expirationTime, key) {
        var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
        // TODO: The SuspenseListComponent fiber shouldn't have a type. It has a tag.
        // This needs to be fixed in getComponentName so that it relies on the tag
        // instead.
        fiber.type = REACT_SUSPENSE_LIST_TYPE;
        fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
        fiber.expirationTime = expirationTime;
        return fiber;
    }
    function createFiberFromText(content, mode, expirationTime) {
        var fiber = createFiber(HostText, content, null, mode);
        fiber.expirationTime = expirationTime;
        return fiber;
    }
    function createFiberFromHostInstanceForDeletion() {
        var fiber = createFiber(HostComponent, null, null, NoMode); // TODO: These should not need a type.
        fiber.elementType = 'DELETED';
        fiber.type = 'DELETED';
        return fiber;
    }
    function createFiberFromPortal(portal, mode, expirationTime) {
        var pendingProps = portal.children !== null ? portal.children : [];
        var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
        fiber.expirationTime = expirationTime;
        fiber.stateNode = {
            containerInfo: portal.containerInfo,
            pendingChildren: null,
            // Used by persistent updates
            implementation: portal.implementation
        };
        return fiber;
    } // Used for stashing WIP properties to replay failed work in DEV.
    function assignFiberPropertiesInDEV(target, source) {
        if (target === null) // This Fiber's initial properties will always be overwritten.
        // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
        target = createFiber(IndeterminateComponent, null, null, NoMode);
         // This is intentionally written as a list of all properties.
        // We tried to use Object.assign() instead but this is called in
        // the hottest path, and Object.assign() was too slow:
        // https://github.com/facebook/react/issues/12502
        // This code is DEV-only so size is not a concern.
        target.tag = source.tag;
        target.key = source.key;
        target.elementType = source.elementType;
        target.type = source.type;
        target.stateNode = source.stateNode;
        target.return = source.return;
        target.child = source.child;
        target.sibling = source.sibling;
        target.index = source.index;
        target.ref = source.ref;
        target.pendingProps = source.pendingProps;
        target.memoizedProps = source.memoizedProps;
        target.updateQueue = source.updateQueue;
        target.memoizedState = source.memoizedState;
        target.dependencies = source.dependencies;
        target.mode = source.mode;
        target.effectTag = source.effectTag;
        target.nextEffect = source.nextEffect;
        target.firstEffect = source.firstEffect;
        target.lastEffect = source.lastEffect;
        target.expirationTime = source.expirationTime;
        target.childExpirationTime = source.childExpirationTime;
        target.alternate = source.alternate;
        target.actualDuration = source.actualDuration;
        target.actualStartTime = source.actualStartTime;
        target.selfBaseDuration = source.selfBaseDuration;
        target.treeBaseDuration = source.treeBaseDuration;
        target._debugID = source._debugID;
        target._debugSource = source._debugSource;
        target._debugOwner = source._debugOwner;
        target._debugIsCurrentlyTiming = source._debugIsCurrentlyTiming;
        target._debugNeedsRemount = source._debugNeedsRemount;
        target._debugHookTypes = source._debugHookTypes;
        return target;
    }
    function FiberRootNode(containerInfo, tag, hydrate) {
        this.tag = tag;
        this.current = null;
        this.containerInfo = containerInfo;
        this.pendingChildren = null;
        this.pingCache = null;
        this.finishedExpirationTime = NoWork;
        this.finishedWork = null;
        this.timeoutHandle = noTimeout;
        this.context = null;
        this.pendingContext = null;
        this.hydrate = hydrate;
        this.callbackNode = null;
        this.callbackPriority = NoPriority;
        this.firstPendingTime = NoWork;
        this.firstSuspendedTime = NoWork;
        this.lastSuspendedTime = NoWork;
        this.nextKnownPendingLevel = NoWork;
        this.lastPingedTime = NoWork;
        this.lastExpiredTime = NoWork;
        this.interactionThreadID = tracing.unstable_getThreadID();
        this.memoizedInteractions = new Set();
        this.pendingInteractionMap = new Map();
    }
    function createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks) {
        var root2 = new FiberRootNode(containerInfo, tag, hydrate);
        // stateNode is any.
        var uninitializedFiber = createHostRootFiber(tag);
        root2.current = uninitializedFiber;
        uninitializedFiber.stateNode = root2;
        initializeUpdateQueue(uninitializedFiber);
        return root2;
    }
    function isRootSuspendedAtTime(root2, expirationTime) {
        var firstSuspendedTime = root2.firstSuspendedTime;
        var lastSuspendedTime = root2.lastSuspendedTime;
        return firstSuspendedTime !== NoWork && firstSuspendedTime >= expirationTime && lastSuspendedTime <= expirationTime;
    }
    function markRootSuspendedAtTime(root2, expirationTime) {
        var firstSuspendedTime = root2.firstSuspendedTime;
        var lastSuspendedTime = root2.lastSuspendedTime;
        if (firstSuspendedTime < expirationTime) root2.firstSuspendedTime = expirationTime;
        if (lastSuspendedTime > expirationTime || firstSuspendedTime === NoWork) root2.lastSuspendedTime = expirationTime;
        if (expirationTime <= root2.lastPingedTime) root2.lastPingedTime = NoWork;
        if (expirationTime <= root2.lastExpiredTime) root2.lastExpiredTime = NoWork;
    }
    function markRootUpdatedAtTime(root2, expirationTime) {
        // Update the range of pending times
        var firstPendingTime = root2.firstPendingTime;
        if (expirationTime > firstPendingTime) root2.firstPendingTime = expirationTime;
         // Update the range of suspended times. Treat everything lower priority or
        // equal to this update as unsuspended.
        var firstSuspendedTime = root2.firstSuspendedTime;
        if (firstSuspendedTime !== NoWork) {
            if (expirationTime >= firstSuspendedTime) // The entire suspended range is now unsuspended.
            root2.firstSuspendedTime = root2.lastSuspendedTime = root2.nextKnownPendingLevel = NoWork;
            else if (expirationTime >= root2.lastSuspendedTime) root2.lastSuspendedTime = expirationTime + 1;
             // This is a pending level. Check if it's higher priority than the next
            // known pending level.
            if (expirationTime > root2.nextKnownPendingLevel) root2.nextKnownPendingLevel = expirationTime;
        }
    }
    function markRootFinishedAtTime(root2, finishedExpirationTime, remainingExpirationTime) {
        // Update the range of pending times
        root2.firstPendingTime = remainingExpirationTime; // Update the range of suspended times. Treat everything higher priority or
        // equal to this update as unsuspended.
        if (finishedExpirationTime <= root2.lastSuspendedTime) // The entire suspended range is now unsuspended.
        root2.firstSuspendedTime = root2.lastSuspendedTime = root2.nextKnownPendingLevel = NoWork;
        else if (finishedExpirationTime <= root2.firstSuspendedTime) // Part of the suspended range is now unsuspended. Narrow the range to
        // include everything between the unsuspended time (non-inclusive) and the
        // last suspended time.
        root2.firstSuspendedTime = finishedExpirationTime - 1;
        if (finishedExpirationTime <= root2.lastPingedTime) // Clear the pinged time
        root2.lastPingedTime = NoWork;
        if (finishedExpirationTime <= root2.lastExpiredTime) // Clear the expired time
        root2.lastExpiredTime = NoWork;
    }
    function markRootExpiredAtTime(root2, expirationTime) {
        var lastExpiredTime = root2.lastExpiredTime;
        if (lastExpiredTime === NoWork || lastExpiredTime > expirationTime) root2.lastExpiredTime = expirationTime;
    }
    var didWarnAboutNestedUpdates;
    var didWarnAboutFindNodeInStrictMode;
    didWarnAboutNestedUpdates = false;
    didWarnAboutFindNodeInStrictMode = {
    };
    function getContextForSubtree(parentComponent) {
        if (!parentComponent) return emptyContextObject;
        var fiber = get(parentComponent);
        var parentContext = findCurrentUnmaskedContext(fiber);
        if (fiber.tag === ClassComponent) {
            var Component = fiber.type;
            if (isContextProvider(Component)) return processChildContext(fiber, Component, parentContext);
        }
        return parentContext;
    }
    function findHostInstanceWithWarning(component, methodName) {
        var fiber = get(component);
        if (fiber === undefined) {
            if (typeof component.render === 'function') throw Error("Unable to find node on an unmounted component.");
            else throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
        }
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null) return null;
        if (hostFiber.mode & StrictMode) {
            var componentName = getComponentName(fiber.type) || 'Component';
            if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                didWarnAboutFindNodeInStrictMode[componentName] = true;
                if (fiber.mode & StrictMode) error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://fb.me/react-strict-mode-find-node%s", methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
                else error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://fb.me/react-strict-mode-find-node%s", methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
            }
        }
        return hostFiber.stateNode;
    }
    function createContainer(containerInfo, tag, hydrate, hydrationCallbacks) {
        return createFiberRoot(containerInfo, tag, hydrate);
    }
    function updateContainer(element, container, parentComponent, callback) {
        onScheduleRoot(container, element);
        var current$1 = container.current;
        var currentTime = requestCurrentTimeForUpdate();
        // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
        if ('undefined' !== typeof jest) {
            warnIfUnmockedScheduler(current$1);
            warnIfNotScopedWithMatchingAct(current$1);
        }
        var suspenseConfig = requestCurrentSuspenseConfig();
        var expirationTime = computeExpirationForFiber(currentTime, current$1, suspenseConfig);
        var context = getContextForSubtree(parentComponent);
        if (container.context === null) container.context = context;
        else container.pendingContext = context;
        if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
            didWarnAboutNestedUpdates = true;
            error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentName(current.type) || 'Unknown');
        }
        var update = createUpdate(expirationTime, suspenseConfig); // Caution: React DevTools currently depends on this property
        // being called "element".
        update.payload = {
            element: element
        };
        callback = callback === undefined ? null : callback;
        if (callback !== null) {
            if (typeof callback !== 'function') error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
            update.callback = callback;
        }
        enqueueUpdate(current$1, update);
        scheduleWork(current$1, expirationTime);
        return expirationTime;
    }
    function getPublicRootInstance(container) {
        var containerFiber = container.current;
        if (!containerFiber.child) return null;
        switch(containerFiber.child.tag){
            case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
            default:
                return containerFiber.child.stateNode;
        }
    }
    function markRetryTimeImpl(fiber, retryTime) {
        var suspenseState = fiber.memoizedState;
        if (suspenseState !== null && suspenseState.dehydrated !== null) {
            if (suspenseState.retryTime < retryTime) suspenseState.retryTime = retryTime;
        }
    } // Increases the priority of thennables when they resolve within this boundary.
    function markRetryTimeIfNotHydrated(fiber, retryTime) {
        markRetryTimeImpl(fiber, retryTime);
        var alternate = fiber.alternate;
        if (alternate) markRetryTimeImpl(alternate, retryTime);
    }
    function attemptUserBlockingHydration$1(fiber) {
        if (fiber.tag !== SuspenseComponent) // We ignore HostRoots here because we can't increase
        // their priority and they should not suspend on I/O,
        // since you have to wrap anything that might suspend in
        // Suspense.
        return;
        var expTime = computeInteractiveExpiration(requestCurrentTimeForUpdate());
        scheduleWork(fiber, expTime);
        markRetryTimeIfNotHydrated(fiber, expTime);
    }
    function attemptContinuousHydration$1(fiber) {
        if (fiber.tag !== SuspenseComponent) // We ignore HostRoots here because we can't increase
        // their priority and they should not suspend on I/O,
        // since you have to wrap anything that might suspend in
        // Suspense.
        return;
        scheduleWork(fiber, ContinuousHydration);
        markRetryTimeIfNotHydrated(fiber, ContinuousHydration);
    }
    function attemptHydrationAtCurrentPriority$1(fiber) {
        if (fiber.tag !== SuspenseComponent) // We ignore HostRoots here because we can't increase
        // their priority other than synchronously flush it.
        return;
        var currentTime = requestCurrentTimeForUpdate();
        var expTime = computeExpirationForFiber(currentTime, fiber, null);
        scheduleWork(fiber, expTime);
        markRetryTimeIfNotHydrated(fiber, expTime);
    }
    function findHostInstanceWithNoPortals(fiber) {
        var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
        if (hostFiber === null) return null;
        if (hostFiber.tag === FundamentalComponent) return hostFiber.stateNode.instance;
        return hostFiber.stateNode;
    }
    var shouldSuspendImpl = function(fiber) {
        return false;
    };
    function shouldSuspend(fiber) {
        return shouldSuspendImpl(fiber);
    }
    var overrideHookState = null;
    var overrideProps = null;
    var scheduleUpdate = null;
    var setSuspenseHandler = null;
    var copyWithSetImpl = function(obj, path, idx, value) {
        if (idx >= path.length) return value;
        var key = path[idx];
        var updated = Array.isArray(obj) ? obj.slice() : _assign({
        }, obj); // $FlowFixMe number or string is fine here
        updated[key] = copyWithSetImpl(obj[key], path, idx + 1, value);
        return updated;
    };
    var copyWithSet = function(obj, path, value) {
        return copyWithSetImpl(obj, path, 0, value);
    }; // Support DevTools editable values for useState and useReducer.
    overrideHookState = function(fiber, id, path, value) {
        // For now, the "id" of stateful hooks is just the stateful hook index.
        // This may change in the future with e.g. nested hooks.
        var currentHook1 = fiber.memoizedState;
        while(currentHook1 !== null && id > 0){
            currentHook1 = currentHook1.next;
            id--;
        }
        if (currentHook1 !== null) {
            var newState = copyWithSet(currentHook1.memoizedState, path, value);
            currentHook1.memoizedState = newState;
            currentHook1.baseState = newState; // We aren't actually adding an update to the queue,
            // because there is no update we can add for useReducer hooks that won't trigger an error.
            // (There's no appropriate action type for DevTools overrides.)
            // As a result though, React will see the scheduled update as a noop and bailout.
            // Shallow cloning props works as a workaround for now to bypass the bailout check.
            fiber.memoizedProps = _assign({
            }, fiber.memoizedProps);
            scheduleWork(fiber, Sync);
        }
    }; // Support DevTools props for function components, forwardRef, memo, host components, etc.
    overrideProps = function(fiber, path, value) {
        fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
        if (fiber.alternate) fiber.alternate.pendingProps = fiber.pendingProps;
        scheduleWork(fiber, Sync);
    };
    scheduleUpdate = function(fiber) {
        scheduleWork(fiber, Sync);
    };
    setSuspenseHandler = function(newShouldSuspendImpl) {
        shouldSuspendImpl = newShouldSuspendImpl;
    };
    function injectIntoDevTools(devToolsConfig) {
        var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
        var ReactCurrentDispatcher1 = ReactSharedInternals.ReactCurrentDispatcher;
        return injectInternals(_assign({
        }, devToolsConfig, {
            overrideHookState: overrideHookState,
            overrideProps: overrideProps,
            setSuspenseHandler: setSuspenseHandler,
            scheduleUpdate: scheduleUpdate,
            currentDispatcherRef: ReactCurrentDispatcher1,
            findHostInstanceByFiber: function(fiber) {
                var hostFiber = findCurrentHostFiber(fiber);
                if (hostFiber === null) return null;
                return hostFiber.stateNode;
            },
            findFiberByHostInstance: function(instance) {
                if (!findFiberByHostInstance) // Might not be implemented by the renderer.
                return null;
                return findFiberByHostInstance(instance);
            },
            // React Refresh
            findHostInstancesForRefresh: findHostInstancesForRefresh,
            scheduleRefresh: scheduleRefresh,
            scheduleRoot: scheduleRoot,
            setRefreshHandler: setRefreshHandler,
            // Enables DevTools to append owner stacks to error messages in DEV mode.
            getCurrentFiber: function() {
                return current;
            }
        }));
    }
    var IsSomeRendererActing$1 = ReactSharedInternals.IsSomeRendererActing;
    function ReactDOMRoot(container, options) {
        this._internalRoot = createRootImpl(container, ConcurrentRoot, options);
    }
    function ReactDOMBlockingRoot(container, tag, options) {
        this._internalRoot = createRootImpl(container, tag, options);
    }
    ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function(children) {
        var root2 = this._internalRoot;
        if (typeof arguments[1] === 'function') error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
        var container = root2.containerInfo;
        if (container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(root2.current);
            if (hostInstance) {
                if (hostInstance.parentNode !== container) error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
            }
        }
        updateContainer(children, root2, null, null);
    };
    ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function() {
        if (typeof arguments[0] === 'function') error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
        var root2 = this._internalRoot;
        var container = root2.containerInfo;
        updateContainer(null, root2, null, function() {
            unmarkContainerAsRoot(container);
        });
    };
    function createRootImpl(container, tag, options) {
        // Tag is either LegacyRoot or Concurrent Root
        var hydrate = options != null && options.hydrate === true;
        var hydrationCallbacks = options != null && options.hydrationOptions || null;
        var root2 = createContainer(container, tag, hydrate);
        markContainerAsRoot(root2.current, container);
        if (hydrate && tag !== LegacyRoot) {
            var doc = container.nodeType === DOCUMENT_NODE ? container : container.ownerDocument;
            eagerlyTrapReplayableEvents(container, doc);
        }
        return root2;
    }
    function createLegacyRoot(container, options) {
        return new ReactDOMBlockingRoot(container, LegacyRoot, options);
    }
    function isValidContainer(node) {
        return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
    }
    var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
    var topLevelUpdateWarnings;
    var warnedAboutHydrateAPI = false;
    topLevelUpdateWarnings = function(container) {
        if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);
            if (hostInstance) {
                if (hostInstance.parentNode !== container) error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
            }
        }
        var isRootRenderedBySomeReact = !!container._reactRootContainer;
        var rootEl = getReactRootElementInContainer(container);
        var hasNonRootReactChild = !!(rootEl && getInstanceFromNode$1(rootEl));
        if (hasNonRootReactChild && !isRootRenderedBySomeReact) error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
        if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
    };
    function getReactRootElementInContainer(container) {
        if (!container) return null;
        if (container.nodeType === DOCUMENT_NODE) return container.documentElement;
        else return container.firstChild;
    }
    function shouldHydrateDueToLegacyHeuristic(container) {
        var rootElement = getReactRootElementInContainer(container);
        return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
    }
    function legacyCreateRootFromDOMContainer(container, forceHydrate) {
        var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container); // First clear any existing content.
        if (!shouldHydrate) {
            var warned = false;
            var rootSibling;
            while(rootSibling = container.lastChild){
                if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
                    warned = true;
                    error("render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup.");
                }
                container.removeChild(rootSibling);
            }
        }
        if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
            warnedAboutHydrateAPI = true;
            warn1("render(): Calling ReactDOM.render() to hydrate server-rendered markup will stop working in React v17. Replace the ReactDOM.render() call with ReactDOM.hydrate() if you want React to attach to the server HTML.");
        }
        return createLegacyRoot(container, shouldHydrate ? {
            hydrate: true
        } : undefined);
    }
    function warnOnInvalidCallback$1(callback, callerName) {
        if (callback !== null && typeof callback !== 'function') error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
    }
    function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
        topLevelUpdateWarnings(container);
        warnOnInvalidCallback$1(callback === undefined ? null : callback, 'render');
        // member of intersection type." Whyyyyyy.
        var root2 = container._reactRootContainer;
        var fiberRoot;
        if (!root2) {
            // Initial mount
            root2 = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
            fiberRoot = root2._internalRoot;
            if (typeof callback === 'function') {
                var originalCallback = callback;
                callback = function() {
                    var instance = getPublicRootInstance(fiberRoot);
                    originalCallback.call(instance);
                };
            } // Initial mount should not be batched.
            unbatchedUpdates(function() {
                updateContainer(children, fiberRoot, parentComponent, callback);
            });
        } else {
            fiberRoot = root2._internalRoot;
            if (typeof callback === 'function') {
                var _originalCallback = callback;
                callback = function() {
                    var instance = getPublicRootInstance(fiberRoot);
                    _originalCallback.call(instance);
                };
            } // Update
            updateContainer(children, fiberRoot, parentComponent, callback);
        }
        return getPublicRootInstance(fiberRoot);
    }
    function findDOMNode(componentOrElement) {
        var owner = ReactCurrentOwner$3.current;
        if (owner !== null && owner.stateNode !== null) {
            var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
            if (!warnedAboutRefsInRender) error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(owner.type) || 'A component');
            owner.stateNode._warnedAboutRefsInRender = true;
        }
        if (componentOrElement == null) return null;
        if (componentOrElement.nodeType === ELEMENT_NODE) return componentOrElement;
        return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');
    }
    function hydrate(element, container, callback) {
        if (!isValidContainer(container)) throw Error("Target container is not a DOM element.");
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call createRoot(container, {hydrate: true}).render(element)?");
        return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
    }
    function render(element, container, callback) {
        if (!isValidContainer(container)) throw Error("Target container is not a DOM element.");
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.render(element)?");
        return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
    }
    function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        if (!isValidContainer(containerNode)) throw Error("Target container is not a DOM element.");
        if (!(parentComponent != null && has(parentComponent))) throw Error("parentComponent must be a valid React Component");
        return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
    }
    function unmountComponentAtNode(container) {
        if (!isValidContainer(container)) throw Error("unmountComponentAtNode(...): Target container is not a DOM element.");
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?");
        if (container._reactRootContainer) {
            var rootEl = getReactRootElementInContainer(container);
            var renderedByDifferentReact = rootEl && !getInstanceFromNode$1(rootEl);
            if (renderedByDifferentReact) error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
            unbatchedUpdates(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                    // $FlowFixMe This should probably use `delete container._reactRootContainer`
                    container._reactRootContainer = null;
                    unmarkContainerAsRoot(container);
                });
            }); // If you call unmountComponentAtNode twice in quick succession, you'll
            // get `true` twice. That's probably fine?
            return true;
        } else {
            var _rootEl = getReactRootElementInContainer(container);
            var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode$1(_rootEl)); // Check if the container itself is a React root node.
            var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;
            if (hasNonRootReactChild) error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
            return false;
        }
    }
    function createPortal(children, containerInfo, implementation) {
        var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        return {
            // This tag allow us to uniquely identify this as a React Portal
            $$typeof: REACT_PORTAL_TYPE,
            key: key == null ? null : '' + key,
            children: children,
            containerInfo: containerInfo,
            implementation: implementation
        };
    }
    var ReactVersion = '16.14.0';
    setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
    setAttemptContinuousHydration(attemptContinuousHydration$1);
    setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
    var didWarnAboutUnstableCreatePortal = false;
    if (typeof Map !== 'function' || Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");
    setRestoreImplementation(restoreControlledState$3);
    setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);
    function createPortal$1(children, container) {
        var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        if (!isValidContainer(container)) throw Error("Target container is not a DOM element.");
         // TODO: pass ReactDOM portal implementation as third argument
        // $FlowFixMe The Flow type is opaque but there's no way to actually create it.
        return createPortal(children, container, null, key);
    }
    function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
    }
    function unstable_createPortal(children, container) {
        var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        if (!didWarnAboutUnstableCreatePortal) {
            didWarnAboutUnstableCreatePortal = true;
            warn1("The ReactDOM.unstable_createPortal() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactDOM.createPortal() instead. It has the exact same API, but without the \"unstable_\" prefix.");
        }
        return createPortal$1(children, container, key);
    }
    var Internals = {
        // Keep in sync with ReactDOMUnstableNativeDependencies.js
        // ReactTestUtils.js, and ReactTestUtilsAct.js. This is an array for better minification.
        Events: [
            getInstanceFromNode$1,
            getNodeFromInstance$1,
            getFiberCurrentPropsFromNode$1,
            injectEventPluginsByName,
            eventNameDispatchConfigs,
            accumulateTwoPhaseDispatches,
            accumulateDirectDispatches,
            enqueueStateRestore,
            restoreStateIfNeeded,
            dispatchEvent,
            runEventsInBatch,
            flushPassiveEffects,
            IsThisRendererActing
        ]
    };
    var foundDevTools = injectIntoDevTools({
        findFiberByHostInstance: getClosestInstanceFromNode,
        bundleType: 1,
        version: ReactVersion,
        rendererPackageName: 'react-dom'
    });
    if (!foundDevTools && canUseDOM && window.top === window.self) // If we're in Chrome or Firefox, provide a download link if not installed.
    {
        if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
            var protocol = window.location.protocol; // Don't warn in exotic cases like chrome-extension://.
            if (/^(https?|file):$/.test(protocol)) // eslint-disable-next-line react-internal/no-production-logging
            console.info("%cDownload the React DevTools for a better development experience: https://fb.me/react-devtools" + (protocol === 'file:' ? "\nYou might need to use a local HTTP server (instead of file://): https://fb.me/react-devtools-faq" : ''), 'font-weight:bold');
        }
    }
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
    exports.createPortal = createPortal$1;
    exports.findDOMNode = findDOMNode;
    exports.flushSync = flushSync;
    exports.hydrate = hydrate;
    exports.render = render;
    exports.unmountComponentAtNode = unmountComponentAtNode;
    exports.unstable_batchedUpdates = batchedUpdates$1;
    exports.unstable_createPortal = unstable_createPortal;
    exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
    exports.version = ReactVersion;
})();

},{"react":"a6qBW","object-assign":"5kNPX","scheduler":"17f3U","prop-types/checkPropTypes":"15rgd","scheduler/tracing":"18Lad"}],"17f3U":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/scheduler.development.js');

},{"./cjs/scheduler.development.js":"94uxl"}],"94uxl":[function(require,module,exports) {
/** @license React v0.19.1
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    var enableSchedulerDebugging = false;
    var enableProfiling = true;
    var requestHostCallback;
    var requestHostTimeout;
    var cancelHostTimeout;
    var shouldYieldToHost;
    var requestPaint;
    if (// implementation using setTimeout.
    typeof window === 'undefined' || typeof MessageChannel !== 'function') {
        // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,
        // fallback to a naive implementation.
        var _callback = null;
        var _timeoutID = null;
        var _flushCallback = function() {
            if (_callback !== null) try {
                var currentTime = exports.unstable_now();
                var hasRemainingTime = true;
                _callback(hasRemainingTime, currentTime);
                _callback = null;
            } catch (e) {
                setTimeout(_flushCallback, 0);
                throw e;
            }
        };
        var initialTime = Date.now();
        exports.unstable_now = function() {
            return Date.now() - initialTime;
        };
        requestHostCallback = function(cb) {
            if (_callback !== null) // Protect against re-entrancy.
            setTimeout(requestHostCallback, 0, cb);
            else {
                _callback = cb;
                setTimeout(_flushCallback, 0);
            }
        };
        requestHostTimeout = function(cb, ms) {
            _timeoutID = setTimeout(cb, ms);
        };
        cancelHostTimeout = function() {
            clearTimeout(_timeoutID);
        };
        shouldYieldToHost = function() {
            return false;
        };
        requestPaint = exports.unstable_forceFrameRate = function() {
        };
    } else {
        // Capture local references to native APIs, in case a polyfill overrides them.
        var performance = window.performance;
        var _Date = window.Date;
        var _setTimeout = window.setTimeout;
        var _clearTimeout = window.clearTimeout;
        if (typeof console !== 'undefined') {
            // TODO: Scheduler no longer requires these methods to be polyfilled. But
            // maybe we want to continue warning if they don't exist, to preserve the
            // option to rely on it in the future?
            var requestAnimationFrame = window.requestAnimationFrame;
            var cancelAnimationFrame = window.cancelAnimationFrame; // TODO: Remove fb.me link
            if (typeof requestAnimationFrame !== 'function') // Using console['error'] to evade Babel and ESLint
            console['error']("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");
            if (typeof cancelAnimationFrame !== 'function') // Using console['error'] to evade Babel and ESLint
            console['error']("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");
        }
        if (typeof performance === 'object' && typeof performance.now === 'function') exports.unstable_now = function() {
            return performance.now();
        };
        else {
            var _initialTime = _Date.now();
            exports.unstable_now = function() {
                return _Date.now() - _initialTime;
            };
        }
        var isMessageLoopRunning = false;
        var scheduledHostCallback = null;
        var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main
        // thread, like user events. By default, it yields multiple times per frame.
        // It does not attempt to align with frame boundaries, since most tasks don't
        // need to be frame aligned; for those that do, use requestAnimationFrame.
        var yieldInterval = 5;
        var deadline = 0; // TODO: Make this configurable
        // `isInputPending` is not available. Since we have no way of knowing if
        // there's pending input, always yield at the end of the frame.
        shouldYieldToHost = function() {
            return exports.unstable_now() >= deadline;
        }; // Since we yield every frame regardless, `requestPaint` has no effect.
        requestPaint = function() {
        };
        exports.unstable_forceFrameRate = function(fps) {
            if (fps < 0 || fps > 125) {
                // Using console['error'] to evade Babel and ESLint
                console['error']("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported");
                return;
            }
            if (fps > 0) yieldInterval = Math.floor(1000 / fps);
            else // reset the framerate
            yieldInterval = 5;
        };
        var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
                var currentTime = exports.unstable_now(); // Yield after `yieldInterval` ms, regardless of where we are in the vsync
                // cycle. This means there's always time remaining at the beginning of
                // the message event.
                deadline = currentTime + yieldInterval;
                var hasTimeRemaining = true;
                try {
                    var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
                    if (!hasMoreWork) {
                        isMessageLoopRunning = false;
                        scheduledHostCallback = null;
                    } else // If there's more work, schedule the next message event at the end
                    // of the preceding one.
                    port.postMessage(null);
                } catch (error) {
                    // If a scheduler task throws, exit the current browser task so the
                    // error can be observed.
                    port.postMessage(null);
                    throw error;
                }
            } else isMessageLoopRunning = false;
             // Yielding to the browser will give it a chance to paint, so we can
        };
        var channel = new MessageChannel();
        var port = channel.port2;
        channel.port1.onmessage = performWorkUntilDeadline;
        requestHostCallback = function(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
                isMessageLoopRunning = true;
                port.postMessage(null);
            }
        };
        requestHostTimeout = function(callback, ms) {
            taskTimeoutID = _setTimeout(function() {
                callback(exports.unstable_now());
            }, ms);
        };
        cancelHostTimeout = function() {
            _clearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
        };
    }
    function push(heap, node) {
        var index = heap.length;
        heap.push(node);
        siftUp(heap, node, index);
    }
    function peek(heap) {
        var first = heap[0];
        return first === undefined ? null : first;
    }
    function pop(heap) {
        var first = heap[0];
        if (first !== undefined) {
            var last = heap.pop();
            if (last !== first) {
                heap[0] = last;
                siftDown(heap, last, 0);
            }
            return first;
        } else return null;
    }
    function siftUp(heap, node, i) {
        var index = i;
        while(true){
            var parentIndex = index - 1 >>> 1;
            var parent = heap[parentIndex];
            if (parent !== undefined && compare(parent, node) > 0) {
                // The parent is larger. Swap positions.
                heap[parentIndex] = node;
                heap[index] = parent;
                index = parentIndex;
            } else // The parent is smaller. Exit.
            return;
        }
    }
    function siftDown(heap, node, i) {
        var index = i;
        var length = heap.length;
        while(index < length){
            var leftIndex = (index + 1) * 2 - 1;
            var left = heap[leftIndex];
            var rightIndex = leftIndex + 1;
            var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.
            if (left !== undefined && compare(left, node) < 0) {
                if (right !== undefined && compare(right, left) < 0) {
                    heap[index] = right;
                    heap[rightIndex] = node;
                    index = rightIndex;
                } else {
                    heap[index] = left;
                    heap[leftIndex] = node;
                    index = leftIndex;
                }
            } else if (right !== undefined && compare(right, node) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
            } else // Neither child is smaller. Exit.
            return;
        }
    }
    function compare(a, b) {
        // Compare sort index first, then task id.
        var diff = a.sortIndex - b.sortIndex;
        return diff !== 0 ? diff : a.id - b.id;
    }
    // TODO: Use symbols?
    var NoPriority = 0;
    var ImmediatePriority = 1;
    var UserBlockingPriority = 2;
    var NormalPriority = 3;
    var LowPriority = 4;
    var IdlePriority = 5;
    var runIdCounter = 0;
    var mainThreadIdCounter = 0;
    var profilingStateSize = 4;
    var sharedProfilingBuffer = typeof SharedArrayBuffer === 'function' ? new SharedArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : typeof ArrayBuffer === 'function' ? new ArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : null// Don't crash the init path on IE9
    ;
    var profilingState = sharedProfilingBuffer !== null ? new Int32Array(sharedProfilingBuffer) : []; // We can't read this but it helps save bytes for null checks
    var PRIORITY = 0;
    var CURRENT_TASK_ID = 1;
    var CURRENT_RUN_ID = 2;
    var QUEUE_SIZE = 3;
    profilingState[PRIORITY] = NoPriority; // This is maintained with a counter, because the size of the priority queue
    // array might include canceled tasks.
    profilingState[QUEUE_SIZE] = 0;
    profilingState[CURRENT_TASK_ID] = 0;
    var INITIAL_EVENT_LOG_SIZE = 131072;
    var MAX_EVENT_LOG_SIZE = 524288; // Equivalent to 2 megabytes
    var eventLogSize = 0;
    var eventLogBuffer = null;
    var eventLog = null;
    var eventLogIndex = 0;
    var TaskStartEvent = 1;
    var TaskCompleteEvent = 2;
    var TaskErrorEvent = 3;
    var TaskCancelEvent = 4;
    var TaskRunEvent = 5;
    var TaskYieldEvent = 6;
    var SchedulerSuspendEvent = 7;
    var SchedulerResumeEvent = 8;
    function logEvent(entries) {
        if (eventLog !== null) {
            var offset = eventLogIndex;
            eventLogIndex += entries.length;
            if (eventLogIndex + 1 > eventLogSize) {
                eventLogSize *= 2;
                if (eventLogSize > MAX_EVENT_LOG_SIZE) {
                    // Using console['error'] to evade Babel and ESLint
                    console['error']("Scheduler Profiling: Event log exceeded maximum size. Don't forget to call `stopLoggingProfilingEvents()`.");
                    stopLoggingProfilingEvents();
                    return;
                }
                var newEventLog = new Int32Array(eventLogSize * 4);
                newEventLog.set(eventLog);
                eventLogBuffer = newEventLog.buffer;
                eventLog = newEventLog;
            }
            eventLog.set(entries, offset);
        }
    }
    function startLoggingProfilingEvents() {
        eventLogSize = INITIAL_EVENT_LOG_SIZE;
        eventLogBuffer = new ArrayBuffer(eventLogSize * 4);
        eventLog = new Int32Array(eventLogBuffer);
        eventLogIndex = 0;
    }
    function stopLoggingProfilingEvents() {
        var buffer = eventLogBuffer;
        eventLogSize = 0;
        eventLogBuffer = null;
        eventLog = null;
        eventLogIndex = 0;
        return buffer;
    }
    function markTaskStart(task, ms) {
        profilingState[QUEUE_SIZE]++;
        if (eventLog !== null) // performance.now returns a float, representing milliseconds. When the
        // event is logged, it's coerced to an int. Convert to microseconds to
        // maintain extra degrees of precision.
        logEvent([
            TaskStartEvent,
            ms * 1000,
            task.id,
            task.priorityLevel
        ]);
    }
    function markTaskCompleted(task, ms) {
        profilingState[PRIORITY] = NoPriority;
        profilingState[CURRENT_TASK_ID] = 0;
        profilingState[QUEUE_SIZE]--;
        if (eventLog !== null) logEvent([
            TaskCompleteEvent,
            ms * 1000,
            task.id
        ]);
    }
    function markTaskCanceled(task, ms) {
        profilingState[QUEUE_SIZE]--;
        if (eventLog !== null) logEvent([
            TaskCancelEvent,
            ms * 1000,
            task.id
        ]);
    }
    function markTaskErrored(task, ms) {
        profilingState[PRIORITY] = NoPriority;
        profilingState[CURRENT_TASK_ID] = 0;
        profilingState[QUEUE_SIZE]--;
        if (eventLog !== null) logEvent([
            TaskErrorEvent,
            ms * 1000,
            task.id
        ]);
    }
    function markTaskRun(task, ms) {
        runIdCounter++;
        profilingState[PRIORITY] = task.priorityLevel;
        profilingState[CURRENT_TASK_ID] = task.id;
        profilingState[CURRENT_RUN_ID] = runIdCounter;
        if (eventLog !== null) logEvent([
            TaskRunEvent,
            ms * 1000,
            task.id,
            runIdCounter
        ]);
    }
    function markTaskYield(task, ms) {
        profilingState[PRIORITY] = NoPriority;
        profilingState[CURRENT_TASK_ID] = 0;
        profilingState[CURRENT_RUN_ID] = 0;
        if (eventLog !== null) logEvent([
            TaskYieldEvent,
            ms * 1000,
            task.id,
            runIdCounter
        ]);
    }
    function markSchedulerSuspended(ms) {
        mainThreadIdCounter++;
        if (eventLog !== null) logEvent([
            SchedulerSuspendEvent,
            ms * 1000,
            mainThreadIdCounter
        ]);
    }
    function markSchedulerUnsuspended(ms) {
        if (eventLog !== null) logEvent([
            SchedulerResumeEvent,
            ms * 1000,
            mainThreadIdCounter
        ]);
    }
    /* eslint-disable no-var */ // Math.pow(2, 30) - 1
    // 0b111111111111111111111111111111
    var maxSigned31BitInt = 1073741823; // Times out immediately
    var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out
    var USER_BLOCKING_PRIORITY = 250;
    var NORMAL_PRIORITY_TIMEOUT = 5000;
    var LOW_PRIORITY_TIMEOUT = 10000; // Never times out
    var IDLE_PRIORITY = maxSigned31BitInt; // Tasks are stored on a min heap
    var taskQueue = [];
    var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.
    var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.
    var currentTask = null;
    var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.
    var isPerformingWork = false;
    var isHostCallbackScheduled = false;
    var isHostTimeoutScheduled = false;
    function advanceTimers(currentTime) {
        // Check for tasks that are no longer delayed and add them to the queue.
        var timer = peek(timerQueue);
        while(timer !== null){
            if (timer.callback === null) // Timer was cancelled.
            pop(timerQueue);
            else if (timer.startTime <= currentTime) {
                // Timer fired. Transfer to the task queue.
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
                markTaskStart(timer, currentTime);
                timer.isQueued = true;
            } else // Remaining timers are pending.
            return;
            timer = peek(timerQueue);
        }
    }
    function handleTimeout(currentTime) {
        isHostTimeoutScheduled = false;
        advanceTimers(currentTime);
        if (!isHostCallbackScheduled) {
            if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
            } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
        }
    }
    function flushWork(hasTimeRemaining, initialTime) {
        markSchedulerUnsuspended(initialTime);
        isHostCallbackScheduled = false;
        if (isHostTimeoutScheduled) {
            // We scheduled a timeout but it's no longer needed. Cancel it.
            isHostTimeoutScheduled = false;
            cancelHostTimeout();
        }
        isPerformingWork = true;
        var previousPriorityLevel = currentPriorityLevel;
        try {
            if (enableProfiling) try {
                return workLoop(hasTimeRemaining, initialTime);
            } catch (error) {
                if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                }
                throw error;
            }
            else // No catch in prod codepath.
            return workLoop(hasTimeRemaining, initialTime);
        } finally{
            currentTask = null;
            currentPriorityLevel = previousPriorityLevel;
            isPerformingWork = false;
            var _currentTime = exports.unstable_now();
            markSchedulerSuspended(_currentTime);
        }
    }
    function workLoop(hasTimeRemaining, initialTime) {
        var currentTime = initialTime;
        advanceTimers(currentTime);
        currentTask = peek(taskQueue);
        while(currentTask !== null && !enableSchedulerDebugging){
            if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) break;
            var callback = currentTask.callback;
            if (callback !== null) {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                markTaskRun(currentTask, currentTime);
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === 'function') {
                    currentTask.callback = continuationCallback;
                    markTaskYield(currentTask, currentTime);
                } else {
                    markTaskCompleted(currentTask, currentTime);
                    currentTask.isQueued = false;
                    if (currentTask === peek(taskQueue)) pop(taskQueue);
                }
                advanceTimers(currentTime);
            } else pop(taskQueue);
            currentTask = peek(taskQueue);
        } // Return whether there's additional work
        if (currentTask !== null) return true;
        else {
            var firstTimer = peek(timerQueue);
            if (firstTimer !== null) requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            return false;
        }
    }
    function unstable_runWithPriority(priorityLevel, eventHandler) {
        switch(priorityLevel){
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
            case LowPriority:
            case IdlePriority:
                break;
            default:
                priorityLevel = NormalPriority;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
            return eventHandler();
        } finally{
            currentPriorityLevel = previousPriorityLevel;
        }
    }
    function unstable_next(eventHandler) {
        var priorityLevel;
        switch(currentPriorityLevel){
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
                // Shift down to normal priority
                priorityLevel = NormalPriority;
                break;
            default:
                // Anything lower than normal priority should remain at the current level.
                priorityLevel = currentPriorityLevel;
                break;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
            return eventHandler();
        } finally{
            currentPriorityLevel = previousPriorityLevel;
        }
    }
    function unstable_wrapCallback(callback) {
        var parentPriorityLevel = currentPriorityLevel;
        return function() {
            // This is a fork of runWithPriority, inlined for performance.
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = parentPriorityLevel;
            try {
                return callback.apply(this, arguments);
            } finally{
                currentPriorityLevel = previousPriorityLevel;
            }
        };
    }
    function timeoutForPriorityLevel(priorityLevel) {
        switch(priorityLevel){
            case ImmediatePriority:
                return IMMEDIATE_PRIORITY_TIMEOUT;
            case UserBlockingPriority:
                return USER_BLOCKING_PRIORITY;
            case IdlePriority:
                return IDLE_PRIORITY;
            case LowPriority:
                return LOW_PRIORITY_TIMEOUT;
            case NormalPriority:
            default:
                return NORMAL_PRIORITY_TIMEOUT;
        }
    }
    function unstable_scheduleCallback(priorityLevel, callback, options) {
        var currentTime = exports.unstable_now();
        var startTime;
        var timeout;
        if (typeof options === 'object' && options !== null) {
            var delay = options.delay;
            if (typeof delay === 'number' && delay > 0) startTime = currentTime + delay;
            else startTime = currentTime;
            timeout = typeof options.timeout === 'number' ? options.timeout : timeoutForPriorityLevel(priorityLevel);
        } else {
            timeout = timeoutForPriorityLevel(priorityLevel);
            startTime = currentTime;
        }
        var expirationTime = startTime + timeout;
        var newTask = {
            id: taskIdCounter++,
            callback: callback,
            priorityLevel: priorityLevel,
            startTime: startTime,
            expirationTime: expirationTime,
            sortIndex: -1
        };
        newTask.isQueued = false;
        if (startTime > currentTime) {
            // This is a delayed task.
            newTask.sortIndex = startTime;
            push(timerQueue, newTask);
            if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                // All tasks are delayed, and this is the task with the earliest delay.
                if (isHostTimeoutScheduled) // Cancel an existing timeout.
                cancelHostTimeout();
                else isHostTimeoutScheduled = true;
                 // Schedule a timeout.
                requestHostTimeout(handleTimeout, startTime - currentTime);
            }
        } else {
            newTask.sortIndex = expirationTime;
            push(taskQueue, newTask);
            markTaskStart(newTask, currentTime);
            newTask.isQueued = true;
            // wait until the next time we yield.
            if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
            }
        }
        return newTask;
    }
    function unstable_pauseExecution() {
    }
    function unstable_continueExecution() {
        if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
        }
    }
    function unstable_getFirstCallbackNode() {
        return peek(taskQueue);
    }
    function unstable_cancelCallback(task) {
        if (task.isQueued) {
            var currentTime = exports.unstable_now();
            markTaskCanceled(task, currentTime);
            task.isQueued = false;
        }
        // remove from the queue because you can't remove arbitrary nodes from an
        // array based heap, only the first one.)
        task.callback = null;
    }
    function unstable_getCurrentPriorityLevel() {
        return currentPriorityLevel;
    }
    function unstable_shouldYield() {
        var currentTime = exports.unstable_now();
        advanceTimers(currentTime);
        var firstTask = peek(taskQueue);
        return firstTask !== currentTask && currentTask !== null && firstTask !== null && firstTask.callback !== null && firstTask.startTime <= currentTime && firstTask.expirationTime < currentTask.expirationTime || shouldYieldToHost();
    }
    var unstable_requestPaint = requestPaint;
    var unstable_Profiling = {
        startLoggingProfilingEvents: startLoggingProfilingEvents,
        stopLoggingProfilingEvents: stopLoggingProfilingEvents,
        sharedProfilingBuffer: sharedProfilingBuffer
    };
    exports.unstable_IdlePriority = IdlePriority;
    exports.unstable_ImmediatePriority = ImmediatePriority;
    exports.unstable_LowPriority = LowPriority;
    exports.unstable_NormalPriority = NormalPriority;
    exports.unstable_Profiling = unstable_Profiling;
    exports.unstable_UserBlockingPriority = UserBlockingPriority;
    exports.unstable_cancelCallback = unstable_cancelCallback;
    exports.unstable_continueExecution = unstable_continueExecution;
    exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
    exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
    exports.unstable_next = unstable_next;
    exports.unstable_pauseExecution = unstable_pauseExecution;
    exports.unstable_requestPaint = unstable_requestPaint;
    exports.unstable_runWithPriority = unstable_runWithPriority;
    exports.unstable_scheduleCallback = unstable_scheduleCallback;
    exports.unstable_shouldYield = unstable_shouldYield;
    exports.unstable_wrapCallback = unstable_wrapCallback;
})();

},{}],"15rgd":[function(require,module,exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
var printWarning = function() {
};
var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');
var loggedTypeFailures = {
};
var has = Function.call.bind(Object.prototype.hasOwnProperty);
printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') console.error(message);
    try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
    } catch (x) {
    }
};
/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */ function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
    for(var typeSpecName in typeSpecs)if (has(typeSpecs, typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
            // This is intentionally an invariant that gets caught. It's the same
            // behavior as without this statement except with a better message.
            if (typeof typeSpecs[typeSpecName] !== 'function') {
                var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.');
                err.name = 'Invariant Violation';
                throw err;
            }
            error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
            error = ex;
        }
        if (error && !(error instanceof Error)) printWarning((componentName || 'React class') + ': type specification of ' + location + ' `' + typeSpecName + '` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a ' + typeof error + '. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).');
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
            // Only monitor this failure once because there tends to be a lot of the
            // same error.
            loggedTypeFailures[error.message] = true;
            var stack = getStack ? getStack() : '';
            printWarning('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));
        }
    }
}
/**
 * Resets warning cache when testing.
 *
 * @private
 */ checkPropTypes.resetWarningCache = function() {
    loggedTypeFailures = {
    };
};
module.exports = checkPropTypes;

},{"./lib/ReactPropTypesSecret":"3LbZD"}],"3LbZD":[function(require,module,exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
module.exports = ReactPropTypesSecret;

},{}],"18Lad":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/scheduler-tracing.development.js');

},{"./cjs/scheduler-tracing.development.js":"5k08M"}],"5k08M":[function(require,module,exports) {
/** @license React v0.19.1
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    var DEFAULT_THREAD_ID = 0; // Counters used to generate unique IDs.
    var interactionIDCounter = 0;
    var threadIDCounter = 0; // Set of currently traced interactions.
    // Interactions "stack"–
    // Meaning that newly traced interactions are appended to the previously active set.
    // When an interaction goes out of scope, the previous set (if any) is restored.
    exports.__interactionsRef = null; // Listener(s) to notify when interactions begin and end.
    exports.__subscriberRef = null;
    exports.__interactionsRef = {
        current: new Set()
    };
    exports.__subscriberRef = {
        current: null
    };
    function unstable_clear(callback) {
        var prevInteractions = exports.__interactionsRef.current;
        exports.__interactionsRef.current = new Set();
        try {
            return callback();
        } finally{
            exports.__interactionsRef.current = prevInteractions;
        }
    }
    function unstable_getCurrent() {
        return exports.__interactionsRef.current;
    }
    function unstable_getThreadID() {
        return ++threadIDCounter;
    }
    function unstable_trace(name, timestamp, callback) {
        var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;
        var interaction = {
            __count: 1,
            id: interactionIDCounter++,
            name: name,
            timestamp: timestamp
        };
        var prevInteractions = exports.__interactionsRef.current; // Traced interactions should stack/accumulate.
        // To do that, clone the current interactions.
        // The previous set will be restored upon completion.
        var interactions = new Set(prevInteractions);
        interactions.add(interaction);
        exports.__interactionsRef.current = interactions;
        var subscriber = exports.__subscriberRef.current;
        var returnValue;
        try {
            if (subscriber !== null) subscriber.onInteractionTraced(interaction);
        } finally{
            try {
                if (subscriber !== null) subscriber.onWorkStarted(interactions, threadID);
            } finally{
                try {
                    returnValue = callback();
                } finally{
                    exports.__interactionsRef.current = prevInteractions;
                    try {
                        if (subscriber !== null) subscriber.onWorkStopped(interactions, threadID);
                    } finally{
                        interaction.__count--; // If no async work was scheduled for this interaction,
                        // Notify subscribers that it's completed.
                        if (subscriber !== null && interaction.__count === 0) subscriber.onInteractionScheduledWorkCompleted(interaction);
                    }
                }
            }
        }
        return returnValue;
    }
    function unstable_wrap(callback) {
        var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;
        var wrappedInteractions = exports.__interactionsRef.current;
        var subscriber = exports.__subscriberRef.current;
        if (subscriber !== null) subscriber.onWorkScheduled(wrappedInteractions, threadID);
         // Update the pending async work count for the current interactions.
        // Update after calling subscribers in case of error.
        wrappedInteractions.forEach(function(interaction) {
            interaction.__count++;
        });
        var hasRun = false;
        function wrapped() {
            var prevInteractions = exports.__interactionsRef.current;
            exports.__interactionsRef.current = wrappedInteractions;
            subscriber = exports.__subscriberRef.current;
            try {
                var returnValue;
                try {
                    if (subscriber !== null) subscriber.onWorkStarted(wrappedInteractions, threadID);
                } finally{
                    try {
                        returnValue = callback.apply(undefined, arguments);
                    } finally{
                        exports.__interactionsRef.current = prevInteractions;
                        if (subscriber !== null) subscriber.onWorkStopped(wrappedInteractions, threadID);
                    }
                }
                return returnValue;
            } finally{
                if (!hasRun) {
                    // We only expect a wrapped function to be executed once,
                    // But in the event that it's executed more than once–
                    // Only decrement the outstanding interaction counts once.
                    hasRun = true; // Update pending async counts for all wrapped interactions.
                    // If this was the last scheduled async work for any of them,
                    // Mark them as completed.
                    wrappedInteractions.forEach(function(interaction) {
                        interaction.__count--;
                        if (subscriber !== null && interaction.__count === 0) subscriber.onInteractionScheduledWorkCompleted(interaction);
                    });
                }
            }
        }
        wrapped.cancel = function cancel() {
            subscriber = exports.__subscriberRef.current;
            try {
                if (subscriber !== null) subscriber.onWorkCanceled(wrappedInteractions, threadID);
            } finally{
                // Update pending async counts for all wrapped interactions.
                // If this was the last scheduled async work for any of them,
                // Mark them as completed.
                wrappedInteractions.forEach(function(interaction) {
                    interaction.__count--;
                    if (subscriber && interaction.__count === 0) subscriber.onInteractionScheduledWorkCompleted(interaction);
                });
            }
        };
        return wrapped;
    }
    var subscribers = null;
    subscribers = new Set();
    function unstable_subscribe(subscriber) {
        subscribers.add(subscriber);
        if (subscribers.size === 1) exports.__subscriberRef.current = {
            onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
            onInteractionTraced: onInteractionTraced,
            onWorkCanceled: onWorkCanceled,
            onWorkScheduled: onWorkScheduled,
            onWorkStarted: onWorkStarted,
            onWorkStopped: onWorkStopped
        };
    }
    function unstable_unsubscribe(subscriber) {
        subscribers.delete(subscriber);
        if (subscribers.size === 0) exports.__subscriberRef.current = null;
    }
    function onInteractionTraced(interaction) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onInteractionTraced(interaction);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    function onInteractionScheduledWorkCompleted(interaction) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    function onWorkScheduled(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onWorkScheduled(interactions, threadID);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    function onWorkStarted(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onWorkStarted(interactions, threadID);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    function onWorkStopped(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onWorkStopped(interactions, threadID);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    function onWorkCanceled(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onWorkCanceled(interactions, threadID);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    exports.unstable_clear = unstable_clear;
    exports.unstable_getCurrent = unstable_getCurrent;
    exports.unstable_getThreadID = unstable_getThreadID;
    exports.unstable_subscribe = unstable_subscribe;
    exports.unstable_trace = unstable_trace;
    exports.unstable_unsubscribe = unstable_unsubscribe;
    exports.unstable_wrap = unstable_wrap;
})();

},{}],"36K0W":[function(require,module,exports) {
"use strict";
/*************************************************************************
 * Copyright 2020 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it. If you have received this file from a source other than Adobe,
 * then your use, modification, or distribution of it requires the prior
 * written permission of Adobe.
 **************************************************************************/ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, {
        enumerable: true,
        get: function() {
            return m[k];
        }
    });
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {
    };
    if (mod != null) for(var k in mod)if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.init = void 0;
/**
 * API used to integrate as solution web application with the unified shell of the Adobe Experience
 * Cloud.
 * @packageDocumentation
 * @preferred
 */ const Global_1 = __importStar(require("./src/Global"));
/**
 * Get the runtime object which contains all unified-shell APIs.
 *
 * ***Example:***
 *
 * ```typescript
 * import React from 'react';
 * import ReactDOM from 'react-dom';
 * import excApp from '@adobe/exc-app';
 *
 * export class MyComponent extends React.Component {
 *   constructor(props) {
 *     this.runtime = excApp();
 *   }
 * }
 * ```
 * @returns The runtime object.
 */ function runtime() {
    // Pass through first argument for backwards compatibility
    return Global_1.getImpl('default')(arguments[0]); // eslint-disable-line prefer-rest-params
}
exports.default = runtime;
/**
 * Initializes a solution web application by invoking the bootstrap callback
 * once the runtime is ready.
 * 1. if the module is already defined, start to bootstrap
 * 2. otherwise define the global callback that will be called when runtime is ready.
 *
 * ***Example:***
 *
 * ```typescript
 * import React from 'react';
 * import ReactDOM from 'react-dom';
 * import runtime, {init} from '@adobe/exc-app';
 *
 * init(() => {
 *   ReactDOM.render(<MainComponent runtime={runtime()} />, document.querySelector('#main'));
 * });
 * ```
 * @param bootstrap Callback used to bootstrap a solution. The runtime object is passed in as a
 * parameter to this callback.
 */ function init(bootstrap) {
    const callback = ()=>{
        bootstrap(runtime());
    };
    if (Global_1.default['exc-module-runtime']) callback();
    else Global_1.default.EXC_MR_READY = callback;
}
exports.init = init;

},{"./src/Global":"12X2r"}],"12X2r":[function(require,module,exports) {
"use strict";
/*************************************************************************
 * Copyright 2020 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it. If you have received this file from a source other than Adobe,
 * then your use, modification, or distribution of it requires the prior
 * written permission of Adobe.
 **************************************************************************/ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.connect = exports.getImpl = void 0;
/**
 * Gets the implementation for the module.
 * @ignore
 * @param moduleName The name of the module.
 * @returns The implementation.
 */ function getImpl(moduleName) {
    const emr = window['exc-module-runtime'];
    if (!emr) throw new Error('module-runtime APIs not available.');
    return emr[moduleName];
}
exports.getImpl = getImpl;
/**
 * Connects attributes of the specified API.
 * @ignore
 * @param apiName Name of the API.
 * @param attributes The attributes to connect.
 * @returns The API instance.
 */ function connect(apiName, attributes) {
    const api = {
    };
    attributes.forEach((feature)=>{
        const featureName = feature[0];
        if (feature[1]) api[featureName] = (...args)=>{
            return getImpl(apiName)[featureName](...args);
        };
        else Object.defineProperty(api, featureName, {
            get: ()=>{
                return getImpl(apiName)[featureName];
            },
            set: (value)=>{
                getImpl(apiName)[featureName] = value;
            }
        });
    });
    return api;
}
exports.connect = connect;
exports.default = window;

},{}],"3Rupi":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactSpectrum = require("@adobe/react-spectrum");
var _reactErrorBoundary = _interopRequireDefault(require("react-error-boundary"));
var _reactRouterDom = require("react-router-dom");
var _SideBar = _interopRequireDefault(require("./SideBar"));
var _WelcomeView = require("./WelcomeView");
var _CreateView = require("./CreateView");
var _ListView = require("./ListView");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function App(props) {
    var onError = // error handler on UI rendering failure
    function onError(e, componentStack) {
    };
    var fallbackComponent = function fallbackComponent(param) {
        var componentStack = param.componentStack, error = param.error;
        return(/*#__PURE__*/ React.createElement(_react.default.Fragment, {
            __source: {
                fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\App.js",
                lineNumber: 87
            },
            __self: this
        }, /*#__PURE__*/ React.createElement("h1", {
            style: {
                textAlign: 'center',
                marginTop: '20px'
            },
            __source: {
                fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\App.js",
                lineNumber: 88
            },
            __self: this
        }, "Something went wrong :("), /*#__PURE__*/ React.createElement("pre", {
            __source: {
                fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\App.js",
                lineNumber: 92
            },
            __self: this
        }, componentStack + '\n' + error.message)));
    };
    console.log('runtime object:', props.runtime);
    console.log('ims object:', props.ims); // use exc runtime event handlers
    // respond to configuration change events (e.g. user switches org)
    props.runtime.on('configuration', function(param) {
        var imsOrg = param.imsOrg, imsToken = param.imsToken, locale = param.locale;
        console.log('configuration change', {
            imsOrg: imsOrg,
            imsToken: imsToken,
            locale: locale
        });
    }); // respond to history change events
    props.runtime.on('history', function(param) {
        var type = param.type, path = param.path;
        console.log('history change', {
            type: type,
            path: path
        });
    });
    return(/*#__PURE__*/ React.createElement(_reactErrorBoundary.default, {
        onError: onError,
        FallbackComponent: fallbackComponent,
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\App.js",
            lineNumber: 52
        },
        __self: this
    }, /*#__PURE__*/ React.createElement(_reactRouterDom.HashRouter, {
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\App.js",
            lineNumber: 53
        },
        __self: this
    }, /*#__PURE__*/ React.createElement(_reactSpectrum.Provider, {
        theme: _reactSpectrum.defaultTheme,
        colorScheme: "light",
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\App.js",
            lineNumber: 54
        },
        __self: this
    }, /*#__PURE__*/ React.createElement(_reactSpectrum.Grid, {
        areas: [
            'sidebar content'
        ],
        columns: [
            '256px',
            '3fr'
        ],
        rows: [
            'auto'
        ],
        height: "100vh",
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\App.js",
            lineNumber: 55
        },
        __self: this
    }, /*#__PURE__*/ React.createElement(_reactSpectrum.View, {
        gridArea: "sidebar",
        backgroundColor: "gray-200",
        padding: "size-200",
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\App.js",
            lineNumber: 56
        },
        __self: this
    }, /*#__PURE__*/ React.createElement(_reactSpectrum.View, {
        position: "fixed",
        width: "226px",
        height: "100vh",
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\App.js",
            lineNumber: 57
        },
        __self: this
    }, /*#__PURE__*/ React.createElement(_SideBar.default, {
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\App.js",
            lineNumber: 58
        },
        __self: this
    }))), /*#__PURE__*/ React.createElement(_reactSpectrum.View, {
        gridArea: "content",
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\App.js",
            lineNumber: 61
        },
        __self: this
    }, /*#__PURE__*/ React.createElement(_reactRouterDom.Switch, {
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\App.js",
            lineNumber: 62
        },
        __self: this
    }, /*#__PURE__*/ React.createElement(_reactRouterDom.Route, {
        exact: true,
        path: "/",
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\App.js",
            lineNumber: 63
        },
        __self: this
    }, /*#__PURE__*/ React.createElement(_WelcomeView.WelcomeView, {
        ims: props.ims,
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\App.js",
            lineNumber: 64
        },
        __self: this
    })), /*#__PURE__*/ React.createElement(_reactRouterDom.Route, {
        path: "/create",
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\App.js",
            lineNumber: 66
        },
        __self: this
    }, /*#__PURE__*/ React.createElement(_CreateView.CreateView, {
        ims: props.ims,
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\App.js",
            lineNumber: 67
        },
        __self: this
    })), /*#__PURE__*/ React.createElement(_reactRouterDom.Route, {
        path: "/list",
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\App.js",
            lineNumber: 69
        },
        __self: this
    }, /*#__PURE__*/ React.createElement(_ListView.ListView, {
        ims: props.ims,
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\App.js",
            lineNumber: 70
        },
        __self: this
    }))))))))); // Methods
}
var _default = App;
exports.default = _default;

},{"react":"a6qBW","@adobe/react-spectrum":"3fLzW","react-error-boundary":"1mLoQ","react-router-dom":"CKZ3k","./SideBar":"pPBmc","./WelcomeView":"3II2D","./CreateView":"13SBc","./ListView":"50qMm"}],"3fLzW":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.SSRProvider = exports.useNumberFormatter = exports.useMessageFormatter = exports.useFilter = exports.useDateFormatter = exports.useCollator = exports.VisuallyHidden = exports.useTreeData = exports.useListData = exports.useAsyncList = exports.Section = exports.Item = exports.Well = exports.View = exports.Header = exports.Footer = exports.Content = exports.TooltipTrigger = exports.Tooltip = exports.lightTheme = exports.defaultTheme = exports.darkTheme = exports.TextField = exports.TextArea = exports.TabPanels = exports.TabList = exports.Tabs = exports.Text = exports.Keyboard = exports.Heading = exports.Switch = exports.StatusLight = exports.SearchField = exports.Slider = exports.RangeSlider = exports.RadioGroup = exports.Radio = exports.Provider = exports.ProgressCircle = exports.ProgressBar = exports.Picker = exports.NumberField = exports.Meter = exports.MenuTrigger = exports.Menu = exports.ListBox = exports.Link = exports.repeat = exports.minmax = exports.fitContent = exports.Grid = exports.Flex = exports.Image = exports.IllustratedMessage = exports.Icon = exports.Form = exports.Divider = exports.useDialogContainer = exports.DialogContainer = exports.DialogTrigger = exports.Dialog = exports.AlertDialog = exports.CheckboxGroup = exports.Checkbox = exports.ButtonGroup = exports.ToggleButton = exports.LogicButton = exports.Button = exports.ActionButton = exports.Breadcrumbs = exports.ActionGroup = void 0;
var _actiongroup = require("@react-spectrum/actiongroup");
exports.ActionGroup = _actiongroup.ActionGroup;
var _breadcrumbs = require("@react-spectrum/breadcrumbs");
exports.Breadcrumbs = _breadcrumbs.Breadcrumbs;
var _button = require("@react-spectrum/button");
exports.ActionButton = _button.ActionButton;
exports.Button = _button.Button;
exports.LogicButton = _button.LogicButton;
exports.ToggleButton = _button.ToggleButton;
var _buttongroup = require("@react-spectrum/buttongroup");
exports.ButtonGroup = _buttongroup.ButtonGroup;
var _checkbox = require("@react-spectrum/checkbox");
exports.Checkbox = _checkbox.Checkbox;
exports.CheckboxGroup = _checkbox.CheckboxGroup;
var _dialog = require("@react-spectrum/dialog");
exports.AlertDialog = _dialog.AlertDialog;
exports.Dialog = _dialog.Dialog;
exports.DialogTrigger = _dialog.DialogTrigger;
exports.DialogContainer = _dialog.DialogContainer;
exports.useDialogContainer = _dialog.useDialogContainer;
var _divider = require("@react-spectrum/divider");
exports.Divider = _divider.Divider;
var _form = require("@react-spectrum/form");
exports.Form = _form.Form;
var _icon = require("@react-spectrum/icon");
exports.Icon = _icon.Icon;
var _illustratedmessage = require("@react-spectrum/illustratedmessage");
exports.IllustratedMessage = _illustratedmessage.IllustratedMessage;
var _image = require("@react-spectrum/image");
exports.Image = _image.Image;
var _layout = require("@react-spectrum/layout");
exports.Flex = _layout.Flex;
exports.Grid = _layout.Grid;
exports.fitContent = _layout.fitContent;
exports.minmax = _layout.minmax;
exports.repeat = _layout.repeat;
var _link = require("@react-spectrum/link");
exports.Link = _link.Link;
var _listbox = require("@react-spectrum/listbox");
exports.ListBox = _listbox.ListBox;
var _menu = require("@react-spectrum/menu");
exports.Menu = _menu.Menu;
exports.MenuTrigger = _menu.MenuTrigger;
var _meter = require("@react-spectrum/meter");
exports.Meter = _meter.Meter;
var _numberfield = require("@react-spectrum/numberfield");
exports.NumberField = _numberfield.NumberField;
var _picker = require("@react-spectrum/picker");
exports.Picker = _picker.Picker;
var _progress = require("@react-spectrum/progress");
exports.ProgressBar = _progress.ProgressBar;
exports.ProgressCircle = _progress.ProgressCircle;
var _provider = require("@react-spectrum/provider");
exports.Provider = _provider.Provider;
var _radio = require("@react-spectrum/radio");
exports.Radio = _radio.Radio;
exports.RadioGroup = _radio.RadioGroup;
var _slider = require("@react-spectrum/slider");
exports.RangeSlider = _slider.RangeSlider;
exports.Slider = _slider.Slider;
var _searchfield = require("@react-spectrum/searchfield");
exports.SearchField = _searchfield.SearchField;
var _statuslight = require("@react-spectrum/statuslight");
exports.StatusLight = _statuslight.StatusLight;
var _switch = require("@react-spectrum/switch");
exports.Switch = _switch.Switch;
var _text = require("@react-spectrum/text");
exports.Heading = _text.Heading;
exports.Keyboard = _text.Keyboard;
exports.Text = _text.Text;
var _tabs = require("@react-spectrum/tabs");
exports.Tabs = _tabs.Tabs;
exports.TabList = _tabs.TabList;
exports.TabPanels = _tabs.TabPanels;
var _textfield = require("@react-spectrum/textfield");
exports.TextArea = _textfield.TextArea;
exports.TextField = _textfield.TextField;
var _themeDark = require("@react-spectrum/theme-dark");
exports.darkTheme = _themeDark.theme;
var _themeDefault = require("@react-spectrum/theme-default");
exports.defaultTheme = _themeDefault.theme;
var _themeLight = require("@react-spectrum/theme-light");
exports.lightTheme = _themeLight.theme;
var _tooltip = require("@react-spectrum/tooltip");
exports.Tooltip = _tooltip.Tooltip;
exports.TooltipTrigger = _tooltip.TooltipTrigger;
var _view = require("@react-spectrum/view");
exports.Content = _view.Content;
exports.Footer = _view.Footer;
exports.Header = _view.Header;
exports.View = _view.View;
var _well = require("@react-spectrum/well");
exports.Well = _well.Well;
var _collections = require("@react-stately/collections");
exports.Item = _collections.Item;
exports.Section = _collections.Section;
var _data = require("@react-stately/data");
exports.useAsyncList = _data.useAsyncList;
exports.useListData = _data.useListData;
exports.useTreeData = _data.useTreeData;
var _visuallyHidden = require("@react-aria/visually-hidden");
exports.VisuallyHidden = _visuallyHidden.VisuallyHidden;
var _i18n = require("@react-aria/i18n");
exports.useCollator = _i18n.useCollator;
exports.useDateFormatter = _i18n.useDateFormatter;
exports.useFilter = _i18n.useFilter;
exports.useMessageFormatter = _i18n.useMessageFormatter;
exports.useNumberFormatter = _i18n.useNumberFormatter;
var _ssr = require("@react-aria/ssr");
exports.SSRProvider = _ssr.SSRProvider;

},{"@react-spectrum/actiongroup":"6kFsi","@react-spectrum/breadcrumbs":"62q9H","@react-spectrum/button":"7zChe","@react-spectrum/buttongroup":"3AsKW","@react-spectrum/checkbox":"5gJlM","@react-spectrum/dialog":"4XQwM","@react-spectrum/divider":"5qXIL","@react-spectrum/form":"6qmvm","@react-spectrum/icon":"5ij4g","@react-spectrum/illustratedmessage":"5S9kZ","@react-spectrum/image":"5jpBd","@react-spectrum/layout":"5dHqK","@react-spectrum/link":"7Gluf","@react-spectrum/listbox":"2fPzl","@react-spectrum/menu":"6D0yE","@react-spectrum/meter":"4Hal1","@react-spectrum/numberfield":"4ZEYf","@react-spectrum/picker":"2BPJK","@react-spectrum/progress":"4593I","@react-spectrum/provider":"3Y6zE","@react-spectrum/radio":"1MQgW","@react-spectrum/slider":"6RHG7","@react-spectrum/searchfield":"1S1n0","@react-spectrum/statuslight":"2ZvH7","@react-spectrum/switch":"1IKmS","@react-spectrum/text":"ib5WK","@react-spectrum/tabs":"62B3U","@react-spectrum/textfield":"39Gqw","@react-spectrum/theme-dark":"4hlmb","@react-spectrum/theme-default":"1nkAa","@react-spectrum/theme-light":"4JkwG","@react-spectrum/tooltip":"7AZQ5","@react-spectrum/view":"UmtbT","@react-spectrum/well":"4PJ1Z","@react-stately/collections":"4IPbJ","@react-stately/data":"44YS8","@react-aria/visually-hidden":"AVm9K","@react-aria/i18n":"6xZcx","@react-aria/ssr":"Pnsqr"}],"6kFsi":[function(require,module,exports) {
var { useActionGroup , useActionGroupItem  } = require("@react-aria/actiongroup");
var { Tooltip , TooltipTrigger  } = require("@react-spectrum/tooltip");
var { Text: Text1  } = require("@react-spectrum/text");
var _react2 = require("react");
var _react = $parcel$interopDefault(_react2);
var { forwardRef , useCallback , useMemo , useRef , useState  } = _react2;
var { Provider , useProviderProps  } = require("@react-spectrum/provider");
var { PressResponder , useHover  } = require("@react-aria/interactions");
var _spectrumIconsWorkflowMore = $parcel$interopDefault(require("@spectrum-icons/workflow/More"));
var { useListState  } = require("@react-stately/list");
var { Item: _Item , Menu , MenuTrigger  } = require("@react-spectrum/menu");
var { filterDOMProps , mergeProps , useId , useLayoutEffect , useResizeObserver  } = require("@react-aria/utils");
var { classNames , SlotProvider , useDOMRef , useStyleProps , useValueEffect  } = require("@react-spectrum/utils");
var _spectrumIconsUiChevronDownMedium = $parcel$interopDefault(require("@spectrum-icons/ui/ChevronDownMedium"));
var { ActionButton  } = require("@react-spectrum/button");
var _babelRuntimeHelpersObjectWithoutPropertiesLoose = $parcel$interopDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
var { Item  } = require("@react-stately/collections");
exports.Item = Item;
require("./main.css");
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/button/vars.css
var $a9040831959d0ed42473e9713dd4b23$exports = {
};
$a9040831959d0ed42473e9713dd4b23$exports = {
    "spectrum-Button": "_spectrum-Button_7a745",
    "spectrum-ActionButton": "_spectrum-ActionButton_7a745",
    "spectrum-LogicButton": "_spectrum-LogicButton_7a745",
    "spectrum-FieldButton": "_spectrum-FieldButton_7a745",
    "spectrum-ClearButton": "_spectrum-ClearButton_7a745",
    "focus-ring": "_focus-ring_7a745",
    "spectrum-Icon": "_spectrum-Icon_7a745",
    "spectrum-ActionButton--emphasized": "_spectrum-ActionButton--emphasized_7a745",
    "spectrum-ActionButton--staticColor": "_spectrum-ActionButton--staticColor_7a745",
    "is-hovered": "_is-hovered_7a745",
    "spectrum-Button-label": "_spectrum-Button-label_7a745",
    "spectrum-ActionButton-label": "_spectrum-ActionButton-label_7a745",
    "spectrum-ActionButton-hold": "_spectrum-ActionButton-hold_7a745",
    "spectrum-ActionButton--quiet": "_spectrum-ActionButton--quiet_7a745",
    "is-disabled": "_is-disabled_7a745",
    "is-open": "_is-open_7a745",
    "spectrum-FieldButton--quiet": "_spectrum-FieldButton--quiet_7a745",
    "spectrum-ClearButton--overBackground": "_spectrum-ClearButton--overBackground_7a745",
    "spectrum-ClearButton--small": "_spectrum-ClearButton--small_7a745",
    "is-focused": "_is-focused_7a745",
    "is-active": "_is-active_7a745",
    "spectrum-Button--cta": "_spectrum-Button--cta_7a745",
    "spectrum-Button--primary": "_spectrum-Button--primary_7a745",
    "spectrum-Button--secondary": "_spectrum-Button--secondary_7a745",
    "spectrum-Button--warning": "_spectrum-Button--warning_7a745",
    "spectrum-Button--overBackground": "_spectrum-Button--overBackground_7a745",
    "spectrum-Button--quiet": "_spectrum-Button--quiet_7a745",
    "is-selected": "_is-selected_7a745",
    "spectrum-ActionButton--staticWhite": "_spectrum-ActionButton--staticWhite_7a745",
    "spectrum-ActionButton--staticBlack": "_spectrum-ActionButton--staticBlack_7a745",
    "spectrum-LogicButton--and": "_spectrum-LogicButton--and_7a745",
    "spectrum-LogicButton--or": "_spectrum-LogicButton--or_7a745",
    "is-placeholder": "_is-placeholder_7a745",
    "spectrum-FieldButton--invalid": "_spectrum-FieldButton--invalid_7a745"
};
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/actiongroup/vars.css
var $fca4dfdd23dc1cdb3a256953c$exports = {
};
$fca4dfdd23dc1cdb3a256953c$exports = {
    "flex-container": "_flex-container_97f54",
    "flex-gap": "_flex-gap_97f54",
    "spectrum-ActionGroup": "_spectrum-ActionGroup_97f54",
    "spectrum-ActionGroup-item": "_spectrum-ActionGroup-item_97f54",
    "spectrum-ActionGroup--vertical": "_spectrum-ActionGroup--vertical_97f54",
    "spectrum-ActionGroup--quiet": "_spectrum-ActionGroup--quiet_97f54",
    "spectrum-ActionGroup--justified": "_spectrum-ActionGroup--justified_97f54",
    "spectrum-ActionGroup--compact": "_spectrum-ActionGroup--compact_97f54",
    "is-selected": "_is-selected_97f54",
    "is-hovered": "_is-hovered_97f54",
    "spectrum-ActionGroup--overflowCollapse": "_spectrum-ActionGroup--overflowCollapse_97f54",
    "spectrum-ActionGroup-menu": "_spectrum-ActionGroup-menu_97f54",
    "spectrum-ActionGroup-menu-chevron": "_spectrum-ActionGroup-menu-chevron_97f54",
    "spectrum-ActionGroup-menu-contents": "_spectrum-ActionGroup-menu-contents_97f54",
    "spectrum-ActionGroup-item--iconOnly": "_spectrum-ActionGroup-item--iconOnly_97f54"
};
var $fca4dfdd23dc1cdb3a256953c$$interop$default = $parcel$interopDefault($fca4dfdd23dc1cdb3a256953c$exports);
function $d1ce1419524cab384aad70acd928619$var$ActionGroup(props, ref) {
    props = useProviderProps(props);
    let { isEmphasized , density , isJustified , isDisabled , orientation ='horizontal' , isQuiet , staticColor , overflowMode ='wrap' , onAction , buttonLabelBehavior , summaryIcon  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "isEmphasized",
        "density",
        "isJustified",
        "isDisabled",
        "orientation",
        "isQuiet",
        "staticColor",
        "overflowMode",
        "onAction",
        "buttonLabelBehavior",
        "summaryIcon"
    ]);
    let domRef = useDOMRef(ref);
    let wrapperRef = useRef(null);
    let state = useListState(_babelRuntimeHelpersExtends({
    }, props, {
        suppressTextValueWarning: true
    }));
    let { actionGroupProps  } = useActionGroup(props, state, domRef);
    let isVertical = orientation === 'vertical';
    let providerProps = {
        isEmphasized,
        isDisabled,
        isQuiet
    };
    let { styleProps  } = useStyleProps(props); // Only hide button text if every item contains more than just plain text (we assume an icon).
    let isIconCollapsible = useMemo(()=>[
            ...state.collection
        ].every((item)=>typeof item.rendered !== 'string'
        )
    , [
        state.collection
    ]);
    let [{ visibleItems , hideButtonText , isMeasuring  }, setVisibleItems] = useValueEffect({
        visibleItems: state.collection.size,
        hideButtonText: buttonLabelBehavior === 'hide' && isIconCollapsible,
        isMeasuring: false
    });
    let selectionMode = state.selectionManager.selectionMode;
    let updateOverflow = useCallback(()=>{
        if (overflowMode === 'wrap') return;
        if (orientation === 'vertical' && selectionMode !== 'none') // Collapsing vertical action groups with selection is currently unsupported by Spectrum.
        return;
        let computeVisibleItems = (visibleItems1)=>{
            let listItems = Array.from(domRef.current.children);
            let containerSize = orientation === 'horizontal' ? wrapperRef.current.offsetWidth : wrapperRef.current.offsetHeight;
            let isShowingMenu = visibleItems1 < state.collection.size;
            let calculatedSize = 0;
            let newVisibleItems = 0;
            if (isShowingMenu) calculatedSize += orientation === 'horizontal' ? $d1ce1419524cab384aad70acd928619$var$outerWidth(listItems.pop(), false, true) : $d1ce1419524cab384aad70acd928619$var$outerHeight(listItems.pop(), false, true);
            for (let [i, item] of listItems.entries()){
                calculatedSize += orientation === 'horizontal' ? $d1ce1419524cab384aad70acd928619$var$outerWidth(item, i === 0, i === listItems.length - 1) : $d1ce1419524cab384aad70acd928619$var$outerHeight(item, i === 0, i === listItems.length - 1);
                if (calculatedSize <= containerSize) newVisibleItems++;
                else break;
            } // If selection is enabled, and not all of the items fit, collapse all of them into a dropdown
            // immediately rather than having some visible and some not.
            if (selectionMode !== 'none' && newVisibleItems < state.collection.size) return 0;
            return newVisibleItems;
        };
        setVisibleItems(function*() {
            let hideButtonText1 = buttonLabelBehavior === 'hide' && isIconCollapsible; // Update to show all items.
            yield {
                visibleItems: state.collection.size,
                hideButtonText: hideButtonText1,
                isMeasuring: true
            }; // Measure, and update to show the items that fit.
            let newVisibleItems = computeVisibleItems(state.collection.size);
            let isMeasuring1 = newVisibleItems < state.collection.size && newVisibleItems > 0; // If not all of the buttons fit, and buttonLabelBehavior is 'collapse', then first try hiding
            // the button text and only showing icons. Only if that still doesn't fit collapse into a menu.
            if (newVisibleItems < state.collection.size && buttonLabelBehavior === 'collapse' && isIconCollapsible) {
                yield {
                    visibleItems: state.collection.size,
                    hideButtonText: true,
                    isMeasuring: true
                };
                newVisibleItems = computeVisibleItems(state.collection.size);
                isMeasuring1 = newVisibleItems < state.collection.size && newVisibleItems > 0;
                hideButtonText1 = true;
            }
            yield {
                visibleItems: newVisibleItems,
                hideButtonText: hideButtonText1,
                isMeasuring: isMeasuring1
            }; // If the number of items is less than the number of children,
            // then update again to ensure that the menu fits.
            if (isMeasuring1) yield {
                visibleItems: computeVisibleItems(newVisibleItems),
                hideButtonText: hideButtonText1,
                isMeasuring: false
            };
        });
    }, [
        domRef,
        state.collection,
        setVisibleItems,
        overflowMode,
        selectionMode,
        buttonLabelBehavior,
        isIconCollapsible,
        orientation
    ]); // Watch the parent element for size changes. Watching only the action group itself may not work
    // in all scenarios because it may not shrink when available space is reduced.
    let parentRef = useMemo(()=>({
            get current () {
                return wrapperRef.current.parentElement;
            }
        })
    , [
        wrapperRef
    ]);
    useResizeObserver({
        ref: overflowMode !== 'wrap' ? parentRef : null,
        onResize: updateOverflow
    });
    useLayoutEffect(updateOverflow, [
        updateOverflow,
        state.collection
    ]);
    let children = [
        ...state.collection
    ];
    let menuItem = null;
    let menuProps = {
    }; // If there are no visible items, don't apply any props to the action group container
    // and pass all aria labeling props through to the menu button.
    if (overflowMode === 'collapse' && visibleItems === 0) {
        menuProps = filterDOMProps(props, {
            labelable: true
        });
        actionGroupProps = {
        };
    }
    if (overflowMode === 'collapse' && visibleItems < state.collection.size) {
        let menuChildren = children.slice(visibleItems);
        children = children.slice(0, visibleItems);
        menuItem = /*#__PURE__*/ _react.createElement($d1ce1419524cab384aad70acd928619$var$ActionGroupMenu, _babelRuntimeHelpersExtends({
        }, menuProps, {
            items: menuChildren,
            onAction: onAction,
            isDisabled: isDisabled,
            isEmphasized: isEmphasized,
            staticColor: staticColor,
            state: state,
            summaryIcon: summaryIcon,
            hideButtonText: hideButtonText,
            isOnlyItem: visibleItems === 0,
            orientation: orientation
        }));
    }
    let style = _babelRuntimeHelpersExtends({
    }, styleProps.style, {
        // While measuring, take up as much space as possible.
        flexBasis: isMeasuring ? '100%' : undefined
    });
    return(/*#__PURE__*/ _react.createElement("div", _babelRuntimeHelpersExtends({
    }, styleProps, {
        style: style,
        className: classNames($fca4dfdd23dc1cdb3a256953c$$interop$default, 'flex-container', styleProps.className),
        ref: wrapperRef
    }), /*#__PURE__*/ _react.createElement("div", _babelRuntimeHelpersExtends({
    }, actionGroupProps, {
        ref: domRef,
        className: classNames($fca4dfdd23dc1cdb3a256953c$$interop$default, 'flex-gap', 'spectrum-ActionGroup', {
            'spectrum-ActionGroup--quiet': isQuiet,
            'spectrum-ActionGroup--vertical': isVertical,
            'spectrum-ActionGroup--compact': density === 'compact',
            'spectrum-ActionGroup--justified': isJustified && !isMeasuring,
            'spectrum-ActionGroup--overflowCollapse': overflowMode === 'collapse'
        }, otherProps.UNSAFE_className)
    }), /*#__PURE__*/ _react.createElement(Provider, providerProps, children.map((item)=>/*#__PURE__*/ _react.createElement($d1ce1419524cab384aad70acd928619$var$ActionGroupItem, {
            key: item.key,
            onAction: onAction,
            isDisabled: isDisabled,
            isEmphasized: isEmphasized,
            staticColor: staticColor,
            item: item,
            state: state,
            hideButtonText: hideButtonText,
            orientation: orientation
        })
    ), menuItem))));
}
/**
 * An ActionGroup is a grouping of ActionButtons that are related to one another.
 */ const ActionGroup = /*#__PURE__*/ forwardRef($d1ce1419524cab384aad70acd928619$var$ActionGroup);
exports.ActionGroup = ActionGroup;
var $a9040831959d0ed42473e9713dd4b23$$interop$default = $parcel$interopDefault($a9040831959d0ed42473e9713dd4b23$exports);
function $d1ce1419524cab384aad70acd928619$var$ActionGroupItem(_ref) {
    let { item , state , isDisabled , isEmphasized , staticColor , onAction , hideButtonText , orientation  } = _ref;
    let ref = useRef();
    let { buttonProps  } = useActionGroupItem({
        key: item.key
    }, state);
    isDisabled = isDisabled || state.disabledKeys.has(item.key);
    let isSelected = state.selectionManager.isSelected(item.key);
    let { hoverProps , isHovered  } = useHover({
        isDisabled
    });
    if (onAction && !isDisabled) buttonProps = mergeProps(buttonProps, {
        onPress: ()=>onAction(item.key)
    });
     // If button text is hidden, we need to show it as a tooltip instead, so
    // go find the text element in the DOM after rendering.
    let textId = useId();
    let [textContent, setTextContent] = useState('');
    useLayoutEffect(()=>{
        if (hideButtonText) {
            var _document$getElementB;
            setTextContent((_document$getElementB = document.getElementById(textId)) == null ? void 0 : _document$getElementB.textContent);
        }
    }, [
        hideButtonText,
        item.rendered,
        textId
    ]);
    let button = /*#__PURE__*/ // Use a PressResponder to send DOM props through.
    // ActionButton doesn't allow overriding the role by default.
    _react.createElement(PressResponder, mergeProps(buttonProps, hoverProps), /*#__PURE__*/ _react.createElement(SlotProvider, {
        slots: {
            text: {
                id: hideButtonText ? textId : null,
                isHidden: hideButtonText
            }
        }
    }, /*#__PURE__*/ _react.createElement(ActionButton, {
        ref: ref,
        UNSAFE_className: classNames($fca4dfdd23dc1cdb3a256953c$$interop$default, 'spectrum-ActionGroup-item', {
            'is-selected': isSelected,
            'is-hovered': isHovered,
            'spectrum-ActionGroup-item--iconOnly': hideButtonText
        }, classNames($a9040831959d0ed42473e9713dd4b23$$interop$default, {
            'spectrum-ActionButton--emphasized': isEmphasized,
            'is-selected': isSelected
        })),
        isDisabled: isDisabled,
        staticColor: staticColor,
        "aria-label": item['aria-label'],
        "aria-labelledby": item['aria-label'] == null && hideButtonText ? textId : undefined
    }, item.rendered)));
    if (hideButtonText && textContent) button = /*#__PURE__*/ _react.createElement(TooltipTrigger, {
        placement: orientation === 'vertical' ? 'end' : 'top'
    }, button, /*#__PURE__*/ _react.createElement(Tooltip, null, textContent));
    if (item.wrapper) button = item.wrapper(button);
    return button;
}
function $d1ce1419524cab384aad70acd928619$var$ActionGroupMenu(_ref2) {
    let { state , isDisabled , isEmphasized , staticColor , items , onAction , summaryIcon , hideButtonText , isOnlyItem , orientation  } = _ref2, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(_ref2, [
        "state",
        "isDisabled",
        "isEmphasized",
        "staticColor",
        "items",
        "onAction",
        "summaryIcon",
        "hideButtonText",
        "isOnlyItem",
        "orientation"
    ]);
    // Use the key of the first item within the menu as the key of the button.
    // The key must actually exist in the collection for focus to work correctly.
    let key = items[0].key;
    let { buttonProps  } = useActionGroupItem({
        key
    }, state); // The menu button shouldn't act like an actual action group item.
    delete buttonProps.onPress;
    delete buttonProps.role;
    let { hoverProps , isHovered  } = useHover({
        isDisabled
    }); // If no aria-label or aria-labelledby is given, provide a default one.
    let ariaLabel = otherProps['aria-label'] || (otherProps['aria-labelledby'] ? null : '…');
    let ariaLabelledby = otherProps['aria-labelledby'];
    let textId = useId();
    let id = useId(); // Summary icon only applies when selection is enabled.
    if (state.selectionManager.selectionMode === 'none') summaryIcon = null;
    let iconOnly = false; // If there is a selection, show the selected state on the menu button.
    let isSelected = state.selectionManager.selectionMode !== 'none' && !state.selectionManager.isEmpty; // If single selection and empty selection is not allowed, swap the contents of the button to the selected item (like a Picker).
    if (!summaryIcon && state.selectionManager.selectionMode === 'single' && state.selectionManager.disallowEmptySelection) {
        let selectedItem = state.collection.getItem(state.selectionManager.firstSelectedKey);
        if (selectedItem) {
            var _ariaLabelledby;
            summaryIcon = selectedItem.rendered;
            if (typeof summaryIcon === 'string') summaryIcon = /*#__PURE__*/ _react.createElement(Text1, null, summaryIcon);
            iconOnly = hideButtonText;
            ariaLabelledby = ((_ariaLabelledby = ariaLabelledby) != null ? _ariaLabelledby : id) + " " + textId;
        }
    }
    if (summaryIcon) // If there's a custom summary icon, also add a chevron.
    summaryIcon = /*#__PURE__*/ _react.createElement(_react.Fragment, null, /*#__PURE__*/ _react.createElement(_spectrumIconsUiChevronDownMedium, {
        UNSAFE_className: classNames($fca4dfdd23dc1cdb3a256953c$$interop$default, 'spectrum-ActionGroup-menu-chevron')
    }), /*#__PURE__*/ _react.createElement("span", {
        className: classNames($fca4dfdd23dc1cdb3a256953c$$interop$default, 'spectrum-ActionGroup-menu-contents', {
            'spectrum-ActionGroup-item--iconOnly': iconOnly
        })
    }, summaryIcon));
    return(/*#__PURE__*/ // Use a PressResponder to send DOM props through.
    _react.createElement(MenuTrigger, {
        align: isOnlyItem ? 'start' : 'end',
        direction: orientation === 'vertical' ? 'end' : 'bottom'
    }, /*#__PURE__*/ _react.createElement(SlotProvider, {
        slots: {
            text: {
                id: hideButtonText ? textId : null,
                isHidden: hideButtonText,
                UNSAFE_className: classNames($fca4dfdd23dc1cdb3a256953c$$interop$default, 'spectrum-ActionGroup-menu-text')
            }
        }
    }, /*#__PURE__*/ _react.createElement(PressResponder, mergeProps(buttonProps, hoverProps), /*#__PURE__*/ _react.createElement(ActionButton, _babelRuntimeHelpersExtends({
    }, otherProps, {
        id: id,
        "aria-label": ariaLabel,
        "aria-labelledby": ariaLabelledby,
        UNSAFE_className: classNames($fca4dfdd23dc1cdb3a256953c$$interop$default, 'spectrum-ActionGroup-item', 'spectrum-ActionGroup-menu', {
            'is-hovered': isHovered,
            'is-selected': isSelected
        }, classNames($a9040831959d0ed42473e9713dd4b23$$interop$default, {
            'is-selected': isSelected,
            'spectrum-ActionButton--emphasized': isEmphasized
        })),
        isDisabled: isDisabled,
        staticColor: staticColor
    }), summaryIcon || /*#__PURE__*/ _react.createElement(_spectrumIconsWorkflowMore, null)))), /*#__PURE__*/ _react.createElement(Menu, {
        items: items,
        selectionMode: state.selectionManager.selectionMode,
        selectedKeys: state.selectionManager.selectedKeys,
        disallowEmptySelection: state.selectionManager.disallowEmptySelection,
        onSelectionChange: (keys)=>state.selectionManager.setSelectedKeys(keys)
        ,
        onAction: onAction
    }, (node)=>/*#__PURE__*/ _react.createElement(_Item, {
            textValue: node.textValue
        }, node.rendered)
    )));
}
function $d1ce1419524cab384aad70acd928619$var$outerWidth(element, ignoreLeftMargin, ignoreRightMargin) {
    let style = window.getComputedStyle(element);
    return element.offsetWidth + (ignoreLeftMargin ? 0 : $d1ce1419524cab384aad70acd928619$var$toNumber(style.marginLeft)) + (ignoreRightMargin ? 0 : $d1ce1419524cab384aad70acd928619$var$toNumber(style.marginRight));
}
function $d1ce1419524cab384aad70acd928619$var$outerHeight(element, ignoreTopMargin, ignoreBottomMargin) {
    let style = window.getComputedStyle(element);
    return element.offsetHeight + (ignoreTopMargin ? 0 : $d1ce1419524cab384aad70acd928619$var$toNumber(style.marginTop)) + (ignoreBottomMargin ? 0 : $d1ce1419524cab384aad70acd928619$var$toNumber(style.marginBottom));
}
function $d1ce1419524cab384aad70acd928619$var$toNumber(value) {
    let parsed = parseInt(value, 10);
    return isNaN(parsed) ? 0 : parsed;
}

},{"@react-aria/actiongroup":"50Tqa","@react-spectrum/tooltip":"7AZQ5","@react-spectrum/text":"ib5WK","react":"a6qBW","@react-spectrum/provider":"3Y6zE","@react-aria/interactions":"3irYN","@spectrum-icons/workflow/More":"1fTgu","@react-stately/list":"6jXbK","@react-spectrum/menu":"6D0yE","@react-aria/utils":"d8qxy","@react-spectrum/utils":"7ch5A","@spectrum-icons/ui/ChevronDownMedium":"2d2IG","@react-spectrum/button":"7zChe","@babel/runtime/helpers/objectWithoutPropertiesLoose":"5byko","@babel/runtime/helpers/extends":"5xz6u","@react-stately/collections":"4IPbJ","./main.css":"669Dd"}],"50Tqa":[function(require,module,exports) {
var { useEffect , useRef  } = require("react");
var { useLocale  } = require("@react-aria/i18n");
var { filterDOMProps , mergeProps  } = require("@react-aria/utils");
var { createFocusManager  } = require("@react-aria/focus");
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
const $fe726d25076e66037c1148278675$var$BUTTON_GROUP_ROLES = {
    'none': 'toolbar',
    'single': 'radiogroup',
    'multiple': 'toolbar'
};
function useActionGroup(props, state, ref) {
    let { isDisabled , orientation ='horizontal'  } = props;
    let allKeys = [
        ...state.collection.getKeys()
    ];
    if (!allKeys.some((key)=>!state.disabledKeys.has(key)
    )) isDisabled = true;
    let { direction  } = useLocale();
    let focusManager = createFocusManager(ref);
    let flipDirection = direction === 'rtl' && orientation === 'horizontal';
    let onKeyDown = (e)=>{
        if (!e.currentTarget.contains(e.target)) return;
        switch(e.key){
            case 'ArrowRight':
            case 'ArrowDown':
                e.preventDefault();
                e.stopPropagation();
                if (e.key === 'ArrowRight' && flipDirection) focusManager.focusPrevious({
                    wrap: true
                });
                else focusManager.focusNext({
                    wrap: true
                });
                break;
            case 'ArrowLeft':
            case 'ArrowUp':
                e.preventDefault();
                e.stopPropagation();
                if (e.key === 'ArrowLeft' && flipDirection) focusManager.focusNext({
                    wrap: true
                });
                else focusManager.focusPrevious({
                    wrap: true
                });
                break;
        }
    };
    let role = $fe726d25076e66037c1148278675$var$BUTTON_GROUP_ROLES[state.selectionManager.selectionMode];
    return {
        actionGroupProps: _babelRuntimeHelpersExtends({
        }, filterDOMProps(props, {
            labelable: true
        }), {
            role,
            'aria-orientation': role === 'toolbar' ? orientation : null,
            'aria-disabled': isDisabled,
            onKeyDown
        })
    };
}
exports.useActionGroup = useActionGroup;
const $f62a7779a4b926c91f5485d05f434a$var$BUTTON_ROLES = {
    'none': null,
    'single': 'radio',
    'multiple': 'checkbox'
}; // eslint-disable-next-line @typescript-eslint/no-unused-vars
function useActionGroupItem(props, state, ref) {
    let selectionMode = state.selectionManager.selectionMode;
    let buttonProps = {
        role: $f62a7779a4b926c91f5485d05f434a$var$BUTTON_ROLES[selectionMode]
    };
    if (selectionMode !== 'none') {
        let isSelected = state.selectionManager.isSelected(props.key);
        buttonProps['aria-checked'] = isSelected;
    }
    let isFocused = props.key === state.selectionManager.focusedKey;
    let lastRender = useRef({
        isFocused,
        state
    });
    lastRender.current = {
        isFocused,
        state
    }; // If the focused item is removed from the DOM, reset the focused key to null.
    // eslint-disable-next-line arrow-body-style
    useEffect(()=>{
        return ()=>{
            if (lastRender.current.isFocused) lastRender.current.state.selectionManager.setFocusedKey(null);
        };
    }, []);
    return {
        buttonProps: mergeProps(buttonProps, {
            tabIndex: isFocused || state.selectionManager.focusedKey == null ? 0 : -1,
            onFocus () {
                state.selectionManager.setFocusedKey(props.key);
            },
            onPress () {
                state.selectionManager.select(props.key);
            }
        })
    };
}
exports.useActionGroupItem = useActionGroupItem;

},{"react":"a6qBW","@react-aria/i18n":"6xZcx","@react-aria/utils":"d8qxy","@react-aria/focus":"76fMY","@babel/runtime/helpers/extends":"5xz6u"}],"6xZcx":[function(require,module,exports) {
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
var { NumberFormatter  } = require("@internationalized/number");
var { MessageDictionary , MessageFormatter  } = require("@internationalized/message");
var { useIsSSR  } = require("@react-aria/ssr");
var _react2 = require("react");
var _react = $parcel$interopDefault(_react2);
var { useEffect , useState , useContext , useCallback , useMemo  } = _react2;
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // https://en.wikipedia.org/wiki/Right-to-left
const $dbb62b32f79d03a795a46f9fbec514c$var$RTL_SCRIPTS = new Set([
    'Arab',
    'Syrc',
    'Samr',
    'Mand',
    'Thaa',
    'Mend',
    'Nkoo',
    'Adlm',
    'Rohg',
    'Hebr'
]);
const $dbb62b32f79d03a795a46f9fbec514c$var$RTL_LANGS = new Set([
    'ae',
    'ar',
    'arc',
    'bcc',
    'bqi',
    'ckb',
    'dv',
    'fa',
    'glk',
    'he',
    'ku',
    'mzn',
    'nqo',
    'pnb',
    'ps',
    'sd',
    'ug',
    'ur',
    'yi'
]);
/**
 * Determines if a locale is read right to left using [Intl.Locale]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale}.
 */ function $dbb62b32f79d03a795a46f9fbec514c$export$isRTL(locale) {
    // If the Intl.Locale API is available, use it to get the script for the locale.
    // This is more accurate than guessing by language, since languages can be written in multiple scripts.
    // @ts-ignore
    if (Intl.Locale) {
        // @ts-ignore
        let script = new Intl.Locale(locale).maximize().script;
        return $dbb62b32f79d03a795a46f9fbec514c$var$RTL_SCRIPTS.has(script);
    } // If not, just guess by the language (first part of the locale)
    let lang = locale.split('-')[0];
    return $dbb62b32f79d03a795a46f9fbec514c$var$RTL_LANGS.has(lang);
}
/**
 * Gets the locale setting of the browser.
 */ function $c53c7d716f930bd5da78e9efb99e3e$export$getDefaultLocale() {
    // @ts-ignore
    let locale = typeof navigator !== 'undefined' && (navigator.language || navigator.userLanguage) || 'en-US';
    return {
        locale,
        direction: $dbb62b32f79d03a795a46f9fbec514c$export$isRTL(locale) ? 'rtl' : 'ltr'
    };
}
let $c53c7d716f930bd5da78e9efb99e3e$var$currentLocale = $c53c7d716f930bd5da78e9efb99e3e$export$getDefaultLocale();
let $c53c7d716f930bd5da78e9efb99e3e$var$listeners = new Set();
function $c53c7d716f930bd5da78e9efb99e3e$var$updateLocale() {
    $c53c7d716f930bd5da78e9efb99e3e$var$currentLocale = $c53c7d716f930bd5da78e9efb99e3e$export$getDefaultLocale();
    for (let listener of $c53c7d716f930bd5da78e9efb99e3e$var$listeners)listener($c53c7d716f930bd5da78e9efb99e3e$var$currentLocale);
}
/**
 * Returns the current browser/system language, and updates when it changes.
 */ function $c53c7d716f930bd5da78e9efb99e3e$export$useDefaultLocale() {
    let isSSR = useIsSSR();
    let [defaultLocale, setDefaultLocale] = useState($c53c7d716f930bd5da78e9efb99e3e$var$currentLocale);
    useEffect(()=>{
        if ($c53c7d716f930bd5da78e9efb99e3e$var$listeners.size === 0) window.addEventListener('languagechange', $c53c7d716f930bd5da78e9efb99e3e$var$updateLocale);
        $c53c7d716f930bd5da78e9efb99e3e$var$listeners.add(setDefaultLocale);
        return ()=>{
            $c53c7d716f930bd5da78e9efb99e3e$var$listeners.delete(setDefaultLocale);
            if ($c53c7d716f930bd5da78e9efb99e3e$var$listeners.size === 0) window.removeEventListener('languagechange', $c53c7d716f930bd5da78e9efb99e3e$var$updateLocale);
        };
    }, []); // We cannot determine the browser's language on the server, so default to
    // en-US. This will be updated after hydration on the client to the correct value.
    if (isSSR) return {
        locale: 'en-US',
        direction: 'ltr'
    };
    return defaultLocale;
}
const $aa95c2b730b505b265f124d9aec67193$var$I18nContext = /*#__PURE__*/ _react.createContext(null);
function I18nProvider(props) {
    let { locale , children  } = props;
    let defaultLocale = $c53c7d716f930bd5da78e9efb99e3e$export$useDefaultLocale();
    let value = locale ? {
        locale,
        direction: $dbb62b32f79d03a795a46f9fbec514c$export$isRTL(locale) ? 'rtl' : 'ltr'
    } : defaultLocale;
    return(/*#__PURE__*/ _react.createElement($aa95c2b730b505b265f124d9aec67193$var$I18nContext.Provider, {
        value: value
    }, children));
}
/**
 * Returns the current locale and layout direction.
 */ exports.I18nProvider = I18nProvider;
function useLocale() {
    let defaultLocale = $c53c7d716f930bd5da78e9efb99e3e$export$useDefaultLocale();
    let context = useContext($aa95c2b730b505b265f124d9aec67193$var$I18nContext);
    return context || defaultLocale;
}
exports.useLocale = useLocale;
const $a5aefbc9b72193c190dce301e0eb39$var$cache = new WeakMap();
function $a5aefbc9b72193c190dce301e0eb39$var$getCachedDictionary(strings) {
    let dictionary = $a5aefbc9b72193c190dce301e0eb39$var$cache.get(strings);
    if (!dictionary) {
        dictionary = new MessageDictionary(strings);
        $a5aefbc9b72193c190dce301e0eb39$var$cache.set(strings, dictionary);
    }
    return dictionary;
}
/**
 * Handles formatting ICU Message strings to create localized strings for the current locale.
 * Automatically updates when the locale changes, and handles caching of messages for performance.
 * @param strings - A mapping of languages to strings by key.
 */ function useMessageFormatter(strings) {
    let { locale  } = useLocale();
    let dictionary = useMemo(()=>$a5aefbc9b72193c190dce301e0eb39$var$getCachedDictionary(strings)
    , [
        strings
    ]);
    let formatter = useMemo(()=>new MessageFormatter(locale, dictionary)
    , [
        locale,
        dictionary
    ]);
    return useCallback((key, variables)=>formatter.format(key, variables)
    , [
        formatter
    ]);
}
exports.useMessageFormatter = useMessageFormatter;
let $bdeee39f835a1e28966186127db96579$var$formatterCache = new Map();
/**
 * Provides localized date formatting for the current locale. Automatically updates when the locale changes,
 * and handles caching of the date formatter for performance.
 * @param options - Formatting options.
 */ function useDateFormatter(options) {
    let { locale  } = useLocale();
    let cacheKey = locale + (options ? Object.entries(options).sort((a, b)=>a[0] < b[0] ? -1 : 1
    ).join() : '');
    if ($bdeee39f835a1e28966186127db96579$var$formatterCache.has(cacheKey)) return $bdeee39f835a1e28966186127db96579$var$formatterCache.get(cacheKey);
    let formatter = new Intl.DateTimeFormat(locale, options);
    $bdeee39f835a1e28966186127db96579$var$formatterCache.set(cacheKey, formatter);
    return formatter;
}
exports.useDateFormatter = useDateFormatter;
/**
 * Provides localized number formatting for the current locale. Automatically updates when the locale changes,
 * and handles caching of the number formatter for performance.
 * @param options - Formatting options.
 */ function useNumberFormatter(options) {
    if (options === void 0) options = {
    };
    let { locale  } = useLocale();
    return useMemo(()=>new NumberFormatter(locale, options)
    , [
        locale,
        options
    ]);
}
exports.useNumberFormatter = useNumberFormatter;
let $f2d7166fa8b4811bca7b68ebd673b$var$cache = new Map();
/**
 * Provides localized string collation for the current locale. Automatically updates when the locale changes,
 * and handles caching of the collator for performance.
 * @param options - Collator options.
 */ function useCollator(options) {
    let { locale  } = useLocale();
    let cacheKey = locale + (options ? Object.entries(options).sort((a, b)=>a[0] < b[0] ? -1 : 1
    ).join() : '');
    if ($f2d7166fa8b4811bca7b68ebd673b$var$cache.has(cacheKey)) return $f2d7166fa8b4811bca7b68ebd673b$var$cache.get(cacheKey);
    let formatter = new Intl.Collator(locale, options);
    $f2d7166fa8b4811bca7b68ebd673b$var$cache.set(cacheKey, formatter);
    return formatter;
}
exports.useCollator = useCollator;
/**
 * Provides localized string search functionality that is useful for filtering or matching items
 * in a list. Options can be provided to adjust the sensitivity to case, diacritics, and other parameters.
 */ function useFilter(options) {
    let collator = useCollator(_babelRuntimeHelpersExtends({
        usage: 'search'
    }, options)); // TODO(later): these methods don't currently support the ignorePunctuation option.
    return {
        startsWith (string, substring) {
            if (substring.length === 0) return true;
             // Normalize both strings so we can slice safely
            // TODO: take into account the ignorePunctuation option as well...
            string = string.normalize('NFC');
            substring = substring.normalize('NFC');
            return collator.compare(string.slice(0, substring.length), substring) === 0;
        },
        endsWith (string, substring) {
            if (substring.length === 0) return true;
            string = string.normalize('NFC');
            substring = substring.normalize('NFC');
            return collator.compare(string.slice(-substring.length), substring) === 0;
        },
        contains (string, substring) {
            if (substring.length === 0) return true;
            string = string.normalize('NFC');
            substring = substring.normalize('NFC');
            let scan = 0;
            let sliceLen = substring.length;
            for(; scan + sliceLen <= string.length; scan++){
                let slice = string.slice(scan, scan + sliceLen);
                if (collator.compare(substring, slice) === 0) return true;
            }
            return false;
        }
    };
}
exports.useFilter = useFilter;

},{"@babel/runtime/helpers/extends":"5xz6u","@internationalized/number":"3t69S","@internationalized/message":"7caPI","@react-aria/ssr":"Pnsqr","react":"a6qBW"}],"5xz6u":[function(require,module,exports) {
function _extends() {
    module.exports = _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    module.exports["default"] = module.exports, module.exports.__esModule = true;
    return _extends.apply(this, arguments);
}
module.exports = _extends;
module.exports["default"] = module.exports, module.exports.__esModule = true;

},{}],"3t69S":[function(require,module,exports) {
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ let $b6bf6c42eb93d35942f2d0c9c4a9aa06$var$formatterCache = new Map();
let $b6bf6c42eb93d35942f2d0c9c4a9aa06$var$supportsSignDisplay = false;
try {
    // @ts-ignore
    $b6bf6c42eb93d35942f2d0c9c4a9aa06$var$supportsSignDisplay = new Intl.NumberFormat('de-DE', {
        signDisplay: 'exceptZero'
    }).resolvedOptions().signDisplay === 'exceptZero'; // eslint-disable-next-line no-empty
} catch (e) {
}
let $b6bf6c42eb93d35942f2d0c9c4a9aa06$var$supportsUnit = false;
try {
    // @ts-ignore
    $b6bf6c42eb93d35942f2d0c9c4a9aa06$var$supportsUnit = new Intl.NumberFormat('de-DE', {
        style: 'unit',
        unit: 'degree'
    }).resolvedOptions().style === 'unit'; // eslint-disable-next-line no-empty
} catch (e) {
} // Polyfill for units since Safari doesn't support them yet. See https://bugs.webkit.org/show_bug.cgi?id=215438.
// Currently only polyfilling the unit degree in narrow format for ColorSlider in our supported locales.
// Values were determined by switching to each locale manually in Chrome.
const $b6bf6c42eb93d35942f2d0c9c4a9aa06$var$UNITS = {
    degree: {
        narrow: {
            default: '°',
            'ja-JP': ' 度',
            'zh-TW': '度',
            'sl-SI': ' °'
        }
    }
};
/**
 * A wrapper around Intl.NumberFormat providing additional options, polyfills, and caching for performance.
 */ class NumberFormatter {
    constructor(locale, options){
        if (options === void 0) options = {
        };
        this.numberFormatter = void 0;
        this.options = void 0;
        this.numberFormatter = $b6bf6c42eb93d35942f2d0c9c4a9aa06$var$getCachedNumberFormatter(locale, options);
        this.options = options;
    }
    format(value) {
        let res = '';
        if (!$b6bf6c42eb93d35942f2d0c9c4a9aa06$var$supportsSignDisplay && this.options.signDisplay != null) res = $b6bf6c42eb93d35942f2d0c9c4a9aa06$export$numberFormatSignDisplayPolyfill(this.numberFormatter, this.options.signDisplay, value);
        else res = this.numberFormatter.format(value);
        if (this.options.style === 'unit' && !$b6bf6c42eb93d35942f2d0c9c4a9aa06$var$supportsUnit) {
            var _UNITS$unit;
            let { unit , unitDisplay ='short' , locale: locale1  } = this.resolvedOptions();
            let values = (_UNITS$unit = $b6bf6c42eb93d35942f2d0c9c4a9aa06$var$UNITS[unit]) == null ? void 0 : _UNITS$unit[unitDisplay];
            res += values[locale1] || values.default;
        }
        return res;
    }
    formatToParts(value) {
        // TODO: implement signDisplay for formatToParts
        // @ts-ignore
        return this.numberFormatter.formatToParts(value);
    }
    resolvedOptions() {
        let options1 = this.numberFormatter.resolvedOptions();
        if (!$b6bf6c42eb93d35942f2d0c9c4a9aa06$var$supportsSignDisplay && this.options.signDisplay != null) options1 = _babelRuntimeHelpersExtends({
        }, options1, {
            signDisplay: this.options.signDisplay
        });
        if (!$b6bf6c42eb93d35942f2d0c9c4a9aa06$var$supportsUnit && this.options.style === 'unit') options1 = _babelRuntimeHelpersExtends({
        }, options1, {
            style: 'unit',
            unit: this.options.unit,
            unitDisplay: this.options.unitDisplay
        });
        return options1;
    }
}
exports.NumberFormatter = NumberFormatter;
function $b6bf6c42eb93d35942f2d0c9c4a9aa06$var$getCachedNumberFormatter(locale1, options1) {
    if (options1 === void 0) options1 = {
    };
    let { numberingSystem  } = options1;
    if (numberingSystem && locale1.indexOf('-u-nu-') === -1) locale1 = locale1 + "-u-nu-" + numberingSystem;
    if (options1.style === 'unit' && !$b6bf6c42eb93d35942f2d0c9c4a9aa06$var$supportsUnit) {
        var _UNITS$unit2;
        let { unit , unitDisplay ='short'  } = options1;
        if (!unit) throw new Error('unit option must be provided with style: "unit"');
        if (!((_UNITS$unit2 = $b6bf6c42eb93d35942f2d0c9c4a9aa06$var$UNITS[unit]) != null && _UNITS$unit2[unitDisplay])) throw new Error("Unsupported unit " + unit + " with unitDisplay = " + unitDisplay);
        options1 = _babelRuntimeHelpersExtends({
        }, options1, {
            style: 'decimal'
        });
    }
    let cacheKey = locale1 + (options1 ? Object.entries(options1).sort((a, b)=>a[0] < b[0] ? -1 : 1
    ).join() : '');
    if ($b6bf6c42eb93d35942f2d0c9c4a9aa06$var$formatterCache.has(cacheKey)) return $b6bf6c42eb93d35942f2d0c9c4a9aa06$var$formatterCache.get(cacheKey);
    let numberFormatter = new Intl.NumberFormat(locale1, options1);
    $b6bf6c42eb93d35942f2d0c9c4a9aa06$var$formatterCache.set(cacheKey, numberFormatter);
    return numberFormatter;
}
/** @private - exported for tests */ function $b6bf6c42eb93d35942f2d0c9c4a9aa06$export$numberFormatSignDisplayPolyfill(numberFormat, signDisplay, num) {
    if (signDisplay === 'auto') return numberFormat.format(num);
    else if (signDisplay === 'never') return numberFormat.format(Math.abs(num));
    else {
        let needsPositiveSign = false;
        if (signDisplay === 'always') needsPositiveSign = num > 0 || Object.is(num, 0);
        else if (signDisplay === 'exceptZero') {
            if (Object.is(num, -0.0) || Object.is(num, 0)) num = Math.abs(num);
            else needsPositiveSign = num > 0;
        }
        if (needsPositiveSign) {
            let negative = numberFormat.format(-num);
            let noSign = numberFormat.format(num); // ignore RTL/LTR marker character
            let minus = negative.replace(noSign, '').replace(/\u200e|\u061C/, '');
            if ([
                ...minus
            ].length !== 1) console.warn('@react-aria/i18n polyfill for NumberFormat signDisplay: Unsupported case');
            let positive = negative.replace(noSign, '!!!').replace(minus, '+').replace('!!!', noSign);
            return positive;
        } else return numberFormat.format(num);
    }
}
const $cbc296943be4217832cce78b76b49b59$var$CURRENCY_SIGN_REGEX = new RegExp('^.*\\(.*\\).*$');
const $cbc296943be4217832cce78b76b49b59$var$NUMBERING_SYSTEMS = [
    'latn',
    'arab',
    'hanidec'
];
/**
 * A NumberParser can be used perform locale aware parsing of numbers from Unicode strings,
 * as well as validation of partial user input. Automatically detects the numbering system
 * used in the input, and supports parsing decimals, percentages, currency values, and units
 * according to the locale.
 */ class NumberParser {
    constructor(locale1, options1){
        if (options1 === void 0) options1 = {
        };
        this.locale = void 0;
        this.options = void 0;
        this.locale = locale1;
        this.options = options1;
    }
    /**
   * Parses the given string to a number. Returns NaN if a valid number could not be parsed.
   */ parse(value) {
        return $cbc296943be4217832cce78b76b49b59$var$getNumberParserImpl(this.locale, this.options, value).parse(value);
    }
    /**
   * Returns whether the given string could potentially be a valid number. This should be used to
   * validate user input as the user types. If a `minValue` or `maxValue` is provided, the validity
   * of the minus/plus sign characters can be checked.
   */ isValidPartialNumber(value, minValue, maxValue) {
        return $cbc296943be4217832cce78b76b49b59$var$getNumberParserImpl(this.locale, this.options, value).isValidPartialNumber(value, minValue, maxValue);
    }
    /**
   * Returns a numbering system for which the given string is valid in the current locale.
   * If no numbering system could be detected, the default numbering system for the current
   * locale is returned.
   */ getNumberingSystem(value) {
        return $cbc296943be4217832cce78b76b49b59$var$getNumberParserImpl(this.locale, this.options, value).options.numberingSystem;
    }
}
exports.NumberParser = NumberParser;
const $cbc296943be4217832cce78b76b49b59$var$numberParserCache = new Map();
function $cbc296943be4217832cce78b76b49b59$var$getNumberParserImpl(locale2, options2, value) {
    // First try the default numbering system for the provided locale
    let defaultParser = $cbc296943be4217832cce78b76b49b59$var$getCachedNumberParser(locale2, options2); // If that doesn't match, and the locale doesn't include a hard coded numbering system,
    // try each of the other supported numbering systems until we find one that matches.
    if (!locale2.includes('-u-nu-') && !defaultParser.isValidPartialNumber(value)) {
        for (let numberingSystem of $cbc296943be4217832cce78b76b49b59$var$NUMBERING_SYSTEMS)if (numberingSystem !== defaultParser.options.numberingSystem) {
            let parser = $cbc296943be4217832cce78b76b49b59$var$getCachedNumberParser(locale2 + '-u-nu-' + numberingSystem, options2);
            if (parser.isValidPartialNumber(value)) return parser;
        }
    }
    return defaultParser;
}
function $cbc296943be4217832cce78b76b49b59$var$getCachedNumberParser(locale2, options2) {
    let cacheKey = locale2 + (options2 ? Object.entries(options2).sort((a, b)=>a[0] < b[0] ? -1 : 1
    ).join() : '');
    let parser = $cbc296943be4217832cce78b76b49b59$var$numberParserCache.get(cacheKey);
    if (!parser) {
        parser = new $cbc296943be4217832cce78b76b49b59$var$NumberParserImpl(locale2, options2);
        $cbc296943be4217832cce78b76b49b59$var$numberParserCache.set(cacheKey, parser);
    }
    return parser;
} // The actual number parser implementation. Instances of this class are cached
// based on the locale, options, and detected numbering system.
class $cbc296943be4217832cce78b76b49b59$var$NumberParserImpl {
    constructor(locale2, options2){
        if (options2 === void 0) options2 = {
        };
        this.formatter = void 0;
        this.options = void 0;
        this.symbols = void 0;
        this.formatter = new Intl.NumberFormat(locale2, options2);
        this.options = this.formatter.resolvedOptions();
        this.symbols = $cbc296943be4217832cce78b76b49b59$var$getSymbols(this.formatter, this.options, options2);
    }
    parse(value) {
        // to parse the number, we need to remove anything that isn't actually part of the number, for example we want '-10.40' not '-10.40 USD'
        let fullySanitizedValue = this.sanitize(value); // Remove group characters, and replace decimal points and numerals with ASCII values.
        fullySanitizedValue = $cbc296943be4217832cce78b76b49b59$var$replaceAll(fullySanitizedValue, this.symbols.group, '').replace(this.symbols.decimal, '.').replace(this.symbols.minusSign, '-').replace(this.symbols.numeral, this.symbols.index);
        let newValue = fullySanitizedValue ? +fullySanitizedValue : NaN;
        if (isNaN(newValue)) return NaN;
         // accounting will always be stripped to a positive number, so if it's accounting and has a () around everything, then we need to make it negative again
        if (this.options.currencySign === 'accounting' && $cbc296943be4217832cce78b76b49b59$var$CURRENCY_SIGN_REGEX.test(value)) newValue = -1 * newValue;
         // when reading the number, if it's a percent, then it should be interpreted as being divided by 100
        if (this.options.style === 'percent') {
            var _this$options$maximum;
            newValue /= 100; // after dividing to get the percent value, javascript may get .0210999999 instead of .0211, so fix the number of fraction digits
            newValue = +newValue.toFixed(((_this$options$maximum = this.options.maximumFractionDigits) != null ? _this$options$maximum : 0) + 2);
        }
        return newValue;
    }
    sanitize(value) {
        // Remove literals and whitespace, which are allowed anywhere in the string
        value = value.replace(this.symbols.literals, ''); // Replace the ASCII minus sign with the minus sign used in the current locale
        // so that both are allowed in case the user's keyboard doesn't have the locale's minus sign.
        value = value.replace('-', this.symbols.minusSign); // In arab numeral system, their decimal character is 1643, but most keyboards don't type that
        // instead they use the , (44) character or apparently the (1548) character.
        if (this.options.numberingSystem === 'arab') {
            value = value.replace(',', this.symbols.decimal);
            value = value.replace(String.fromCharCode(1548), this.symbols.decimal);
            value = $cbc296943be4217832cce78b76b49b59$var$replaceAll(value, '.', this.symbols.group);
        } // fr-FR group character is char code 8239, but that's not a key on the french keyboard,
        // so allow 'period' as a group char and replace it with a space
        if (this.options.locale === 'fr-FR') value = $cbc296943be4217832cce78b76b49b59$var$replaceAll(value, '.', String.fromCharCode(8239));
        return value;
    }
    isValidPartialNumber(value, minValue, maxValue) {
        if (minValue === void 0) minValue = -Infinity;
        if (maxValue === void 0) maxValue = Infinity;
        value = this.sanitize(value); // Remove minus or plus sign, which must be at the start of the string.
        if (value.startsWith(this.symbols.minusSign) && minValue < 0) value = value.slice(this.symbols.minusSign.length);
        else if (this.symbols.plusSign && value.startsWith(this.symbols.plusSign) && maxValue > 0) value = value.slice(this.symbols.plusSign.length);
         // Numbers cannot start with a group separator
        if (value.startsWith(this.symbols.group)) return false;
         // Remove numerals, groups, and decimals
        value = $cbc296943be4217832cce78b76b49b59$var$replaceAll(value, this.symbols.group, '').replace(this.symbols.numeral, '').replace(this.symbols.decimal, ''); // The number is valid if there are no remaining characters
        return value.length === 0;
    }
}
const $cbc296943be4217832cce78b76b49b59$var$nonLiteralParts = new Set([
    'decimal',
    'fraction',
    'integer',
    'minusSign',
    'plusSign',
    'group'
]);
function $cbc296943be4217832cce78b76b49b59$var$getSymbols(formatter, intlOptions, originalOptions) {
    var _allParts$find$value, _allParts$find, _posAllParts$find, _allParts$find2, _allParts$find3;
    // Note: some locale's don't add a group symbol until there is a ten thousands place
    let allParts = formatter.formatToParts(-10000.1);
    let posAllParts = formatter.formatToParts(10000.1);
    let singularParts = formatter.formatToParts(1);
    let minusSign = (_allParts$find$value = (_allParts$find = allParts.find((p)=>p.type === 'minusSign'
    )) == null ? void 0 : _allParts$find.value) != null ? _allParts$find$value : '-';
    let plusSign = (_posAllParts$find = posAllParts.find((p)=>p.type === 'plusSign'
    )) == null ? void 0 : _posAllParts$find.value; // Safari does not support the signDisplay option, but our number parser polyfills it.
    // If no plus sign was returned, but the original options contained signDisplay, default to the '+' character.
    // @ts-ignore
    if (!plusSign && ((originalOptions == null ? void 0 : originalOptions.signDisplay) === 'exceptZero' || (originalOptions == null ? void 0 : originalOptions.signDisplay) === 'always')) plusSign = '+';
    let decimal = (_allParts$find2 = allParts.find((p)=>p.type === 'decimal'
    )) == null ? void 0 : _allParts$find2.value;
    let group = (_allParts$find3 = allParts.find((p)=>p.type === 'group'
    )) == null ? void 0 : _allParts$find3.value; // this set is also for a regex, it's all literals that might be in the string we want to eventually parse that
    // don't contribute to the numerical value
    let pluralLiterals = allParts.filter((p)=>!$cbc296943be4217832cce78b76b49b59$var$nonLiteralParts.has(p.type)
    ).map((p)=>$cbc296943be4217832cce78b76b49b59$var$escapeRegex(p.value)
    );
    let singularLiterals = singularParts.filter((p)=>!$cbc296943be4217832cce78b76b49b59$var$nonLiteralParts.has(p.type)
    ).map((p)=>$cbc296943be4217832cce78b76b49b59$var$escapeRegex(p.value)
    );
    let sortedLiterals = [
        ...new Set([
            ...singularLiterals,
            ...pluralLiterals
        ])
    ].sort((a, b)=>b.length - a.length
    );
    let literals = new RegExp(sortedLiterals.join('|') + "|[\\p{White_Space}]", 'gu'); // These are for replacing non-latn characters with the latn equivalent
    let numerals = [
        ...new Intl.NumberFormat(intlOptions.locale, {
            useGrouping: false
        }).format(9876543210)
    ].reverse();
    let indexes = new Map(numerals.map((d, i)=>[
            d,
            i
        ]
    ));
    let numeral = new RegExp("[" + numerals.join('') + "]", 'g');
    let index = (d)=>String(indexes.get(d))
    ;
    return {
        minusSign,
        plusSign,
        decimal,
        group,
        literals,
        numeral,
        index
    };
}
function $cbc296943be4217832cce78b76b49b59$var$replaceAll(str, find, replace) {
    // @ts-ignore
    if (str.replaceAll) // @ts-ignore
    return str.replaceAll(find, replace);
    return str.split(find).join(replace);
}
function $cbc296943be4217832cce78b76b49b59$var$escapeRegex(string) {
    return string.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&');
}

},{"@babel/runtime/helpers/extends":"5xz6u"}],"7caPI":[function(require,module,exports) {
var _intlMessageformat = $parcel$interopDefault(require("intl-messageformat"));
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /**
 * Stores a mapping of localized strings. Can be used to find the
 * closest available string for a given locale.
 */ class MessageDictionary {
    constructor(messages, defaultLocale){
        if (defaultLocale === void 0) defaultLocale = 'en-US';
        this.messages = void 0;
        this.defaultLocale = void 0;
        // Clone messages so we don't modify the original object.
        this.messages = _babelRuntimeHelpersExtends({
        }, messages);
        this.defaultLocale = defaultLocale;
    }
    getStringForLocale(key, locale) {
        let strings = this.messages[locale];
        if (!strings) {
            strings = $defc888dbd27849217e7ac080e7d$var$getStringsForLocale(locale, this.messages, this.defaultLocale);
            this.messages[locale] = strings;
        }
        let string = strings[key];
        if (!string) throw new Error("Could not find intl message " + key + " in " + locale + " locale");
        return string;
    }
}
exports.MessageDictionary = MessageDictionary;
function $defc888dbd27849217e7ac080e7d$var$getStringsForLocale(locale, strings, defaultLocale1) {
    if (defaultLocale1 === void 0) defaultLocale1 = 'en-US';
    // If there is an exact match, use it.
    if (strings[locale]) return strings[locale];
     // Attempt to find the closest match by language.
    // For example, if the locale is fr-CA (French Canadian), but there is only
    // an fr-FR (France) set of strings, use that.
    // This could be replaced with Intl.LocaleMatcher once it is supported.
    // https://github.com/tc39/proposal-intl-localematcher
    let language = $defc888dbd27849217e7ac080e7d$var$getLanguage(locale);
    for(let key in strings){
        if (key.startsWith(language + '-')) return strings[key];
    } // Nothing close, use english.
    return strings[defaultLocale1];
}
function $defc888dbd27849217e7ac080e7d$var$getLanguage(locale) {
    // @ts-ignore
    if (Intl.Locale) // @ts-ignore
    return new Intl.Locale(locale).language;
    return locale.split('-')[0];
}
/**
 * Formats ICU Message strings to create localized strings from a MessageDictionary.
 */ class MessageFormatter {
    constructor(locale, messages1){
        this.locale = void 0;
        this.messages = void 0;
        this.cache = void 0;
        this.locale = locale;
        this.messages = messages1;
        this.cache = {
        };
    }
    format(key, variables) {
        let message = this.cache[key];
        if (!message) {
            let msg = this.messages.getStringForLocale(key, this.locale);
            if (!msg) throw new Error("Could not find intl message " + key + " in " + this.locale + " locale");
            message = new _intlMessageformat(msg, this.locale);
            this.cache[key] = message;
        }
        return message.format(variables);
    }
}
exports.MessageFormatter = MessageFormatter;

},{"intl-messageformat":"6zrSo","@babel/runtime/helpers/extends":"5xz6u"}],"6zrSo":[function(require,module,exports) {
"use strict";
/*
Copyright (c) 2014, Yahoo! Inc. All rights reserved.
Copyrights licensed under the New BSD License.
See the accompanying LICENSE file for terms.
*/ Object.defineProperty(exports, "__esModule", {
    value: true
});
var tslib_1 = require("tslib");
var core_1 = require("./src/core");
tslib_1.__exportStar(require("./src/formatters"), exports);
tslib_1.__exportStar(require("./src/core"), exports);
tslib_1.__exportStar(require("./src/error"), exports);
exports.default = core_1.IntlMessageFormat;

},{"tslib":"2jo9c","./src/core":"74JJk","./src/formatters":"1OJox","./src/error":"6V4W8"}],"2jo9c":[function(require,module,exports) {
var global = arguments[3];
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global global, define, System, Reflect, Promise */ var __extends;
var __assign;
var __rest;
var __decorate;
var __param;
var __metadata;
var __awaiter;
var __generator;
var __exportStar;
var __values;
var __read;
var __spread;
var __spreadArrays;
var __spreadArray;
var __await;
var __asyncGenerator;
var __asyncDelegator;
var __asyncValues;
var __makeTemplateObject;
var __importStar;
var __importDefault;
var __classPrivateFieldGet;
var __classPrivateFieldSet;
var __createBinding;
(function(factory) {
    var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {
    };
    if (typeof define === "function" && define.amd) define("tslib", [
        "exports"
    ], function(exports) {
        factory(createExporter(root, createExporter(exports)));
    });
    else if (typeof module === "object" && typeof module.exports === "object") factory(createExporter(root, createExporter(module.exports)));
    else factory(createExporter(root));
    function createExporter(exports, previous) {
        if (exports !== root) {
            if (typeof Object.create === "function") Object.defineProperty(exports, "__esModule", {
                value: true
            });
            else exports.__esModule = true;
        }
        return function(id, v) {
            return exports[id] = previous ? previous(id, v) : v;
        };
    }
})(function(exporter) {
    var extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    };
    __extends = function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    __rest = function(s, e) {
        var t = {
        };
        for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
        return t;
    };
    __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param = function(paramIndex, decorator) {
        return function(target, key) {
            decorator(target, key, paramIndex);
        };
    };
    __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    };
    __awaiter = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
            return value instanceof P ? value : new P(function(resolve) {
                resolve(value);
            });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
            function fulfilled(value) {
                try {
                    step(generator.next(value));
                } catch (e) {
                    reject(e);
                }
            }
            function rejected(value) {
                try {
                    step(generator["throw"](value));
                } catch (e) {
                    reject(e);
                }
            }
            function step(result) {
                result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    __generator = function(thisArg, body) {
        var _ = {
            label: 0,
            sent: function() {
                if (t[0] & 1) throw t[1];
                return t[1];
            },
            trys: [],
            ops: []
        }, f, y, t, g;
        function verb(n) {
            return function(v) {
                return step([
                    n,
                    v
                ]);
            };
        }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while(_)try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [
                    op[0] & 2,
                    t.value
                ];
                switch(op[0]){
                    case 0:
                    case 1:
                        t = op;
                        break;
                    case 4:
                        _.label++;
                        return {
                            value: op[1],
                            done: false
                        };
                    case 5:
                        _.label++;
                        y = op[1];
                        op = [
                            0
                        ];
                        continue;
                    case 7:
                        op = _.ops.pop();
                        _.trys.pop();
                        continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                            _ = 0;
                            continue;
                        }
                        if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                            _.label = op[1];
                            break;
                        }
                        if (op[0] === 6 && _.label < t[1]) {
                            _.label = t[1];
                            t = op;
                            break;
                        }
                        if (t && _.label < t[2]) {
                            _.label = t[2];
                            _.ops.push(op);
                            break;
                        }
                        if (t[2]) _.ops.pop();
                        _.trys.pop();
                        continue;
                }
                op = body.call(thisArg, _);
            } catch (e) {
                op = [
                    6,
                    e
                ];
                y = 0;
            } finally{
                f = t = 0;
            }
            if (op[0] & 5) throw op[1];
            return {
                value: op[0] ? op[1] : void 0,
                done: true
            };
        }
        return g = {
            next: verb(0),
            "throw": verb(1),
            "return": verb(2)
        }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
            return this;
        }), g;
    };
    __exportStar = function(m, o) {
        for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
    };
    __createBinding = Object.create ? function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, {
            enumerable: true,
            get: function() {
                return m[k];
            }
        });
    } : function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    };
    __values = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function() {
                if (o && i >= o.length) o = void 0;
                return {
                    value: o && o[i++],
                    done: !o
                };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while((n === void 0 || (n--) > 0) && !(r = i.next()).done)ar.push(r.value);
        } catch (error) {
            e = {
                error: error
            };
        } finally{
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            } finally{
                if (e) throw e.error;
            }
        }
        return ar;
    };
    /** @deprecated */ __spread = function() {
        for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
        return ar;
    };
    /** @deprecated */ __spreadArrays = function() {
        for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
        for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
        return r;
    };
    __spreadArray = function(to, from, pack) {
        if (pack || arguments.length === 2) for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
        return to.concat(ar || from);
    };
    __await = function(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    };
    __asyncGenerator = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        function verb(n) {
            if (g[n]) i[n] = function(v) {
                return new Promise(function(a, b) {
                    q.push([
                        n,
                        v,
                        a,
                        b
                    ]) > 1 || resume(n, v);
                });
            };
        }
        function resume(n, v) {
            try {
                step(g[n](v));
            } catch (e) {
                settle(q[0][3], e);
            }
        }
        function step(r) {
            r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
            resume("next", value);
        }
        function reject(value) {
            resume("throw", value);
        }
        function settle(f, v) {
            if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
        }
        return i = {
        }, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
            return this;
        }, i;
    };
    __asyncDelegator = function(o) {
        var i, p;
        function verb(n, f) {
            i[n] = o[n] ? function(v) {
                return (p = !p) ? {
                    value: __await(o[n](v)),
                    done: n === "return"
                } : f ? f(v) : v;
            } : f;
        }
        return i = {
        }, verb("next"), verb("throw", function(e) {
            throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
            return this;
        }, i;
    };
    __asyncValues = function(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        function verb(n) {
            i[n] = o[n] && function(v) {
                return new Promise(function(resolve, reject) {
                    v = o[n](v), settle(resolve, reject, v.done, v.value);
                });
            };
        }
        function settle(resolve, reject, d, v) {
            Promise.resolve(v).then(function(v1) {
                resolve({
                    value: v1,
                    done: d
                });
            }, reject);
        }
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {
        }, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
            return this;
        }, i);
    };
    __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
            value: raw
        });
        else cooked.raw = raw;
        return cooked;
    };
    var __setModuleDefault = Object.create ? function(o, v) {
        Object.defineProperty(o, "default", {
            enumerable: true,
            value: v
        });
    } : function(o, v) {
        o["default"] = v;
    };
    __importStar = function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {
        };
        if (mod != null) for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : {
            "default": mod
        };
    };
    __classPrivateFieldGet = function(receiver, state, kind, f) {
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    __classPrivateFieldSet = function(receiver, state, value, kind, f) {
        if (kind === "m") throw new TypeError("Private method is not writable");
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    exporter("__extends", __extends);
    exporter("__assign", __assign);
    exporter("__rest", __rest);
    exporter("__decorate", __decorate);
    exporter("__param", __param);
    exporter("__metadata", __metadata);
    exporter("__awaiter", __awaiter);
    exporter("__generator", __generator);
    exporter("__exportStar", __exportStar);
    exporter("__createBinding", __createBinding);
    exporter("__values", __values);
    exporter("__read", __read);
    exporter("__spread", __spread);
    exporter("__spreadArrays", __spreadArrays);
    exporter("__spreadArray", __spreadArray);
    exporter("__await", __await);
    exporter("__asyncGenerator", __asyncGenerator);
    exporter("__asyncDelegator", __asyncDelegator);
    exporter("__asyncValues", __asyncValues);
    exporter("__makeTemplateObject", __makeTemplateObject);
    exporter("__importStar", __importStar);
    exporter("__importDefault", __importDefault);
    exporter("__classPrivateFieldGet", __classPrivateFieldGet);
    exporter("__classPrivateFieldSet", __classPrivateFieldSet);
});

},{}],"74JJk":[function(require,module,exports) {
"use strict";
/*
Copyright (c) 2014, Yahoo! Inc. All rights reserved.
Copyrights licensed under the New BSD License.
See the accompanying LICENSE file for terms.
*/ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.IntlMessageFormat = void 0;
var tslib_1 = require("tslib");
var icu_messageformat_parser_1 = require("@formatjs/icu-messageformat-parser");
var fast_memoize_1 = tslib_1.__importStar(require("@formatjs/fast-memoize"));
var formatters_1 = require("./formatters");
// -- MessageFormat --------------------------------------------------------
function mergeConfig(c1, c2) {
    if (!c2) return c1;
    return tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({
    }, c1 || {
    }), c2 || {
    }), Object.keys(c1).reduce(function(all, k) {
        all[k] = tslib_1.__assign(tslib_1.__assign({
        }, c1[k]), c2[k] || {
        });
        return all;
    }, {
    }));
}
function mergeConfigs(defaultConfig, configs) {
    if (!configs) return defaultConfig;
    return Object.keys(defaultConfig).reduce(function(all, k) {
        all[k] = mergeConfig(defaultConfig[k], configs[k]);
        return all;
    }, tslib_1.__assign({
    }, defaultConfig));
}
function createFastMemoizeCache(store) {
    return {
        create: function() {
            return {
                has: function(key) {
                    return key in store;
                },
                get: function(key) {
                    return store[key];
                },
                set: function(key, value) {
                    store[key] = value;
                }
            };
        }
    };
}
function createDefaultFormatters(cache) {
    if (cache === void 0) cache = {
        number: {
        },
        dateTime: {
        },
        pluralRules: {
        }
    };
    return {
        getNumberFormat: fast_memoize_1.default(function() {
            var _a;
            var args = [];
            for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
            return new ((_a = Intl.NumberFormat).bind.apply(_a, tslib_1.__spreadArray([
                void 0
            ], args)))();
        }, {
            cache: createFastMemoizeCache(cache.number),
            strategy: fast_memoize_1.strategies.variadic
        }),
        getDateTimeFormat: fast_memoize_1.default(function() {
            var _a;
            var args = [];
            for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
            return new ((_a = Intl.DateTimeFormat).bind.apply(_a, tslib_1.__spreadArray([
                void 0
            ], args)))();
        }, {
            cache: createFastMemoizeCache(cache.dateTime),
            strategy: fast_memoize_1.strategies.variadic
        }),
        getPluralRules: fast_memoize_1.default(function() {
            var _a;
            var args = [];
            for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
            return new ((_a = Intl.PluralRules).bind.apply(_a, tslib_1.__spreadArray([
                void 0
            ], args)))();
        }, {
            cache: createFastMemoizeCache(cache.pluralRules),
            strategy: fast_memoize_1.strategies.variadic
        })
    };
}
var IntlMessageFormat = function() {
    function IntlMessageFormat1(message, locales, overrideFormats, opts) {
        var _this = this;
        if (locales === void 0) locales = IntlMessageFormat1.defaultLocale;
        this.formatterCache = {
            number: {
            },
            dateTime: {
            },
            pluralRules: {
            }
        };
        this.format = function(values) {
            var parts = _this.formatToParts(values);
            // Hot path for straight simple msg translations
            if (parts.length === 1) return parts[0].value;
            var result = parts.reduce(function(all, part) {
                if (!all.length || part.type !== formatters_1.PART_TYPE.literal || typeof all[all.length - 1] !== 'string') all.push(part.value);
                else all[all.length - 1] += part.value;
                return all;
            }, []);
            if (result.length <= 1) return result[0] || '';
            return result;
        };
        this.formatToParts = function(values) {
            return formatters_1.formatToParts(_this.ast, _this.locales, _this.formatters, _this.formats, values, undefined, _this.message);
        };
        this.resolvedOptions = function() {
            return {
                locale: Intl.NumberFormat.supportedLocalesOf(_this.locales)[0]
            };
        };
        this.getAst = function() {
            return _this.ast;
        };
        if (typeof message === 'string') {
            this.message = message;
            if (!IntlMessageFormat1.__parse) throw new TypeError('IntlMessageFormat.__parse must be set to process `message` of type `string`');
            // Parse string messages into an AST.
            this.ast = IntlMessageFormat1.__parse(message, {
                ignoreTag: opts === null || opts === void 0 ? void 0 : opts.ignoreTag
            });
        } else this.ast = message;
        if (!Array.isArray(this.ast)) throw new TypeError('A message must be provided as a String or AST.');
        // Creates a new object with the specified `formats` merged with the default
        // formats.
        this.formats = mergeConfigs(IntlMessageFormat1.formats, overrideFormats);
        // Defined first because it's used to build the format pattern.
        this.locales = locales;
        this.formatters = opts && opts.formatters || createDefaultFormatters(this.formatterCache);
    }
    Object.defineProperty(IntlMessageFormat1, "defaultLocale", {
        get: function() {
            if (!IntlMessageFormat1.memoizedDefaultLocale) IntlMessageFormat1.memoizedDefaultLocale = new Intl.NumberFormat().resolvedOptions().locale;
            return IntlMessageFormat1.memoizedDefaultLocale;
        },
        enumerable: false,
        configurable: true
    });
    IntlMessageFormat1.memoizedDefaultLocale = null;
    IntlMessageFormat1.__parse = icu_messageformat_parser_1.parse;
    // Default format options used as the prototype of the `formats` provided to the
    // constructor. These are used when constructing the internal Intl.NumberFormat
    // and Intl.DateTimeFormat instances.
    IntlMessageFormat1.formats = {
        number: {
            currency: {
                style: 'currency'
            },
            percent: {
                style: 'percent'
            }
        },
        date: {
            short: {
                month: 'numeric',
                day: 'numeric',
                year: '2-digit'
            },
            medium: {
                month: 'short',
                day: 'numeric',
                year: 'numeric'
            },
            long: {
                month: 'long',
                day: 'numeric',
                year: 'numeric'
            },
            full: {
                weekday: 'long',
                month: 'long',
                day: 'numeric',
                year: 'numeric'
            }
        },
        time: {
            short: {
                hour: 'numeric',
                minute: 'numeric'
            },
            medium: {
                hour: 'numeric',
                minute: 'numeric',
                second: 'numeric'
            },
            long: {
                hour: 'numeric',
                minute: 'numeric',
                second: 'numeric',
                timeZoneName: 'short'
            },
            full: {
                hour: 'numeric',
                minute: 'numeric',
                second: 'numeric',
                timeZoneName: 'short'
            }
        }
    };
    return IntlMessageFormat1;
}();
exports.IntlMessageFormat = IntlMessageFormat;

},{"tslib":"2jo9c","@formatjs/icu-messageformat-parser":"3YaYk","@formatjs/fast-memoize":"4RiEb","./formatters":"1OJox"}],"3YaYk":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.parse = void 0;
var tslib_1 = require("tslib");
var error_1 = require("./error");
var parser_1 = require("./parser");
var types_1 = require("./types");
function pruneLocation(els) {
    els.forEach(function(el) {
        delete el.location;
        if (types_1.isSelectElement(el) || types_1.isPluralElement(el)) for(var k in el.options){
            delete el.options[k].location;
            pruneLocation(el.options[k].value);
        }
        else if (types_1.isNumberElement(el) && types_1.isNumberSkeleton(el.style)) delete el.style.location;
        else if ((types_1.isDateElement(el) || types_1.isTimeElement(el)) && types_1.isDateTimeSkeleton(el.style)) delete el.style.location;
        else if (types_1.isTagElement(el)) pruneLocation(el.children);
    });
}
function parse(message, opts) {
    if (opts === void 0) opts = {
    };
    opts = tslib_1.__assign({
        shouldParseSkeletons: true,
        requiresOtherClause: true
    }, opts);
    var result = new parser_1.Parser(message, opts).parse();
    if (result.err) {
        var error = SyntaxError(error_1.ErrorKind[result.err.kind]);
        // @ts-expect-error Assign to error object
        error.location = result.err.location;
        // @ts-expect-error Assign to error object
        error.originalMessage = result.err.message;
        throw error;
    }
    if (!(opts === null || opts === void 0 ? void 0 : opts.captureLocation)) pruneLocation(result.val);
    return result.val;
}
exports.parse = parse;
tslib_1.__exportStar(require("./types"), exports);

},{"tslib":"2jo9c","./error":"5FuaL","./parser":"2MHwa","./types":"3VJx6"}],"5FuaL":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ErrorKind = void 0;
var ErrorKind;
(function(ErrorKind1) {
    /** Argument is unclosed (e.g. `{0`) */ ErrorKind1[ErrorKind1["EXPECT_ARGUMENT_CLOSING_BRACE"] = 1] = "EXPECT_ARGUMENT_CLOSING_BRACE";
    /** Argument is empty (e.g. `{}`). */ ErrorKind1[ErrorKind1["EMPTY_ARGUMENT"] = 2] = "EMPTY_ARGUMENT";
    /** Argument is malformed (e.g. `{foo!}``) */ ErrorKind1[ErrorKind1["MALFORMED_ARGUMENT"] = 3] = "MALFORMED_ARGUMENT";
    /** Expect an argument type (e.g. `{foo,}`) */ ErrorKind1[ErrorKind1["EXPECT_ARGUMENT_TYPE"] = 4] = "EXPECT_ARGUMENT_TYPE";
    /** Unsupported argument type (e.g. `{foo,foo}`) */ ErrorKind1[ErrorKind1["INVALID_ARGUMENT_TYPE"] = 5] = "INVALID_ARGUMENT_TYPE";
    /** Expect an argument style (e.g. `{foo, number, }`) */ ErrorKind1[ErrorKind1["EXPECT_ARGUMENT_STYLE"] = 6] = "EXPECT_ARGUMENT_STYLE";
    /** The number skeleton is invalid. */ ErrorKind1[ErrorKind1["INVALID_NUMBER_SKELETON"] = 7] = "INVALID_NUMBER_SKELETON";
    /** The date time skeleton is invalid. */ ErrorKind1[ErrorKind1["INVALID_DATE_TIME_SKELETON"] = 8] = "INVALID_DATE_TIME_SKELETON";
    /** Exepct a number skeleton following the `::` (e.g. `{foo, number, ::}`) */ ErrorKind1[ErrorKind1["EXPECT_NUMBER_SKELETON"] = 9] = "EXPECT_NUMBER_SKELETON";
    /** Exepct a date time skeleton following the `::` (e.g. `{foo, date, ::}`) */ ErrorKind1[ErrorKind1["EXPECT_DATE_TIME_SKELETON"] = 10] = "EXPECT_DATE_TIME_SKELETON";
    /** Unmatched apostrophes in the argument style (e.g. `{foo, number, 'test`) */ ErrorKind1[ErrorKind1["UNCLOSED_QUOTE_IN_ARGUMENT_STYLE"] = 11] = "UNCLOSED_QUOTE_IN_ARGUMENT_STYLE";
    /** Missing select argument options (e.g. `{foo, select}`) */ ErrorKind1[ErrorKind1["EXPECT_SELECT_ARGUMENT_OPTIONS"] = 12] = "EXPECT_SELECT_ARGUMENT_OPTIONS";
    /** Expecting an offset value in `plural` or `selectordinal` argument (e.g `{foo, plural, offset}`) */ ErrorKind1[ErrorKind1["EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE"] = 13] = "EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE";
    /** Offset value in `plural` or `selectordinal` is invalid (e.g. `{foo, plural, offset: x}`) */ ErrorKind1[ErrorKind1["INVALID_PLURAL_ARGUMENT_OFFSET_VALUE"] = 14] = "INVALID_PLURAL_ARGUMENT_OFFSET_VALUE";
    /** Expecting a selector in `select` argument (e.g `{foo, select}`) */ ErrorKind1[ErrorKind1["EXPECT_SELECT_ARGUMENT_SELECTOR"] = 15] = "EXPECT_SELECT_ARGUMENT_SELECTOR";
    /** Expecting a selector in `plural` or `selectordinal` argument (e.g `{foo, plural}`) */ ErrorKind1[ErrorKind1["EXPECT_PLURAL_ARGUMENT_SELECTOR"] = 16] = "EXPECT_PLURAL_ARGUMENT_SELECTOR";
    /** Expecting a message fragment after the `select` selector (e.g. `{foo, select, apple}`) */ ErrorKind1[ErrorKind1["EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT"] = 17] = "EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT";
    /**
     * Expecting a message fragment after the `plural` or `selectordinal` selector
     * (e.g. `{foo, plural, one}`)
     */ ErrorKind1[ErrorKind1["EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT"] = 18] = "EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT";
    /** Selector in `plural` or `selectordinal` is malformed (e.g. `{foo, plural, =x {#}}`) */ ErrorKind1[ErrorKind1["INVALID_PLURAL_ARGUMENT_SELECTOR"] = 19] = "INVALID_PLURAL_ARGUMENT_SELECTOR";
    /**
     * Duplicate selectors in `plural` or `selectordinal` argument.
     * (e.g. {foo, plural, one {#} one {#}})
     */ ErrorKind1[ErrorKind1["DUPLICATE_PLURAL_ARGUMENT_SELECTOR"] = 20] = "DUPLICATE_PLURAL_ARGUMENT_SELECTOR";
    /** Duplicate selectors in `select` argument.
     * (e.g. {foo, select, apple {apple} apple {apple}})
     */ ErrorKind1[ErrorKind1["DUPLICATE_SELECT_ARGUMENT_SELECTOR"] = 21] = "DUPLICATE_SELECT_ARGUMENT_SELECTOR";
    /** Plural or select argument option must have `other` clause. */ ErrorKind1[ErrorKind1["MISSING_OTHER_CLAUSE"] = 22] = "MISSING_OTHER_CLAUSE";
    /** The tag is malformed. (e.g. `<bold!>foo</bold!>) */ ErrorKind1[ErrorKind1["INVALID_TAG"] = 23] = "INVALID_TAG";
    /** The tag name is invalid. (e.g. `<123>foo</123>`) */ ErrorKind1[ErrorKind1["INVALID_TAG_NAME"] = 25] = "INVALID_TAG_NAME";
    /** The closing tag does not match the opening tag. (e.g. `<bold>foo</italic>`) */ ErrorKind1[ErrorKind1["UNMATCHED_CLOSING_TAG"] = 26] = "UNMATCHED_CLOSING_TAG";
    /** The opening tag has unmatched closing tag. (e.g. `<bold>foo`) */ ErrorKind1[ErrorKind1["UNCLOSED_TAG"] = 27] = "UNCLOSED_TAG";
})(ErrorKind = exports.ErrorKind || (exports.ErrorKind = {
}));

},{}],"2MHwa":[function(require,module,exports) {
"use strict";
var _a;
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Parser = void 0;
var tslib_1 = require("tslib");
var error_1 = require("./error");
var types_1 = require("./types");
var regex_generated_1 = require("./regex.generated");
var icu_skeleton_parser_1 = require("@formatjs/icu-skeleton-parser");
var SPACE_SEPARATOR_START_REGEX = new RegExp("^" + regex_generated_1.SPACE_SEPARATOR_REGEX.source + "*");
var SPACE_SEPARATOR_END_REGEX = new RegExp(regex_generated_1.SPACE_SEPARATOR_REGEX.source + "*$");
function createLocation(start, end) {
    return {
        start: start,
        end: end
    };
}
// #region Ponyfills
// Consolidate these variables up top for easier toggling during debugging
var hasNativeStartsWith = !!String.prototype.startsWith;
var hasNativeFromCodePoint = !!String.fromCodePoint;
var hasNativeFromEntries = !!Object.fromEntries;
var hasNativeCodePointAt = !!String.prototype.codePointAt;
var hasTrimStart = !!String.prototype.trimStart;
var hasTrimEnd = !!String.prototype.trimEnd;
var hasNativeIsSafeInteger = !!Number.isSafeInteger;
var isSafeInteger = hasNativeIsSafeInteger ? Number.isSafeInteger : function(n) {
    return typeof n === 'number' && isFinite(n) && Math.floor(n) === n && Math.abs(n) <= 9007199254740991;
};
// IE11 does not support y and u.
var REGEX_SUPPORTS_U_AND_Y = true;
try {
    var re = RE('([^\\p{White_Space}\\p{Pattern_Syntax}]*)', 'yu');
    /**
     * legacy Edge or Xbox One browser
     * Unicode flag support: supported
     * Pattern_Syntax support: not supported
     * See https://github.com/formatjs/formatjs/issues/2822
     */ REGEX_SUPPORTS_U_AND_Y = ((_a = re.exec('a')) === null || _a === void 0 ? void 0 : _a[0]) === 'a';
} catch (_) {
    REGEX_SUPPORTS_U_AND_Y = false;
}
var startsWith = hasNativeStartsWith ? function startsWith1(s, search, position) {
    return s.startsWith(search, position);
} : function startsWith2(s, search, position) {
    return s.slice(position, position + search.length) === search;
};
var fromCodePoint = hasNativeFromCodePoint ? String.fromCodePoint : function fromCodePoint1() {
    var codePoints = [];
    for(var _i = 0; _i < arguments.length; _i++)codePoints[_i] = arguments[_i];
    var elements = '';
    var length = codePoints.length;
    var i = 0;
    var code;
    while(length > i){
        code = codePoints[i++];
        if (code > 1114111) throw RangeError(code + ' is not a valid code point');
        elements += code < 65536 ? String.fromCharCode(code) : String.fromCharCode(((code -= 65536) >> 10) + 55296, code % 1024 + 56320);
    }
    return elements;
};
var fromEntries = // native
hasNativeFromEntries ? Object.fromEntries : function fromEntries1(entries) {
    var obj = {
    };
    for(var _i = 0, entries_1 = entries; _i < entries_1.length; _i++){
        var _a1 = entries_1[_i], k = _a1[0], v = _a1[1];
        obj[k] = v;
    }
    return obj;
};
var codePointAt = hasNativeCodePointAt ? function codePointAt1(s, index) {
    return s.codePointAt(index);
} : function codePointAt2(s, index) {
    var size = s.length;
    if (index < 0 || index >= size) return undefined;
    var first = s.charCodeAt(index);
    var second;
    return first < 55296 || first > 56319 || index + 1 === size || (second = s.charCodeAt(index + 1)) < 56320 || second > 57343 ? first : (first - 55296 << 10) + (second - 56320) + 65536;
};
var trimStart = hasTrimStart ? function trimStart1(s) {
    return s.trimStart();
} : function trimStart2(s) {
    return s.replace(SPACE_SEPARATOR_START_REGEX, '');
};
var trimEnd = hasTrimEnd ? function trimEnd1(s) {
    return s.trimEnd();
} : function trimEnd2(s) {
    return s.replace(SPACE_SEPARATOR_END_REGEX, '');
};
// Prevent minifier to translate new RegExp to literal form that might cause syntax error on IE11.
function RE(s, flag) {
    return new RegExp(s, flag);
}
// #endregion
var matchIdentifierAtIndex;
if (REGEX_SUPPORTS_U_AND_Y) {
    // Native
    var IDENTIFIER_PREFIX_RE_1 = RE('([^\\p{White_Space}\\p{Pattern_Syntax}]*)', 'yu');
    matchIdentifierAtIndex = function matchIdentifierAtIndex1(s, index) {
        var _a2;
        IDENTIFIER_PREFIX_RE_1.lastIndex = index;
        var match = IDENTIFIER_PREFIX_RE_1.exec(s);
        return (_a2 = match[1]) !== null && _a2 !== void 0 ? _a2 : '';
    };
} else // IE11
matchIdentifierAtIndex = function matchIdentifierAtIndex1(s, index) {
    var match = [];
    while(true){
        var c = codePointAt(s, index);
        if (c === undefined || _isWhiteSpace(c) || _isPatternSyntax(c)) break;
        match.push(c);
        index += c >= 65536 ? 2 : 1;
    }
    return fromCodePoint.apply(void 0, match);
};
var Parser = function() {
    function Parser1(message, options) {
        if (options === void 0) options = {
        };
        this.message = message;
        this.position = {
            offset: 0,
            line: 1,
            column: 1
        };
        this.ignoreTag = !!options.ignoreTag;
        this.requiresOtherClause = !!options.requiresOtherClause;
        this.shouldParseSkeletons = !!options.shouldParseSkeletons;
    }
    Parser1.prototype.parse = function() {
        if (this.offset() !== 0) throw Error('parser can only be used once');
        return this.parseMessage(0, '', false);
    };
    Parser1.prototype.parseMessage = function(nestingLevel, parentArgType, expectingCloseTag) {
        var elements = [];
        while(!this.isEOF()){
            var char = this.char();
            if (char === 123) {
                var result = this.parseArgument(nestingLevel, expectingCloseTag);
                if (result.err) return result;
                elements.push(result.val);
            } else if (char === 125 && nestingLevel > 0) break;
            else if (char === 35 && (parentArgType === 'plural' || parentArgType === 'selectordinal')) {
                var position = this.clonePosition();
                this.bump();
                elements.push({
                    type: types_1.TYPE.pound,
                    location: createLocation(position, this.clonePosition())
                });
            } else if (char === 60 && !this.ignoreTag && this.peek() === 47) {
                if (expectingCloseTag) break;
                else return this.error(error_1.ErrorKind.UNMATCHED_CLOSING_TAG, createLocation(this.clonePosition(), this.clonePosition()));
            } else if (char === 60 && !this.ignoreTag && _isAlpha(this.peek() || 0)) {
                var result = this.parseTag(nestingLevel, parentArgType);
                if (result.err) return result;
                elements.push(result.val);
            } else {
                var result = this.parseLiteral(nestingLevel, parentArgType);
                if (result.err) return result;
                elements.push(result.val);
            }
        }
        return {
            val: elements,
            err: null
        };
    };
    /**
     * A tag name must start with an ASCII lower/upper case letter. The grammar is based on the
     * [custom element name][] except that a dash is NOT always mandatory and uppercase letters
     * are accepted:
     *
     * ```
     * tag ::= "<" tagName (whitespace)* "/>" | "<" tagName (whitespace)* ">" message "</" tagName (whitespace)* ">"
     * tagName ::= [a-z] (PENChar)*
     * PENChar ::=
     *     "-" | "." | [0-9] | "_" | [a-z] | [A-Z] | #xB7 | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x37D] |
     *     [#x37F-#x1FFF] | [#x200C-#x200D] | [#x203F-#x2040] | [#x2070-#x218F] | [#x2C00-#x2FEF] |
     *     [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
     * ```
     *
     * [custom element name]: https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name
     * NOTE: We're a bit more lax here since HTML technically does not allow uppercase HTML element but we do
     * since other tag-based engines like React allow it
     */ Parser1.prototype.parseTag = function(nestingLevel, parentArgType) {
        var startPosition = this.clonePosition();
        this.bump(); // `<`
        var tagName = this.parseTagName();
        this.bumpSpace();
        if (this.bumpIf('/>')) // Self closing tag
        return {
            val: {
                type: types_1.TYPE.literal,
                value: "<" + tagName + "/>",
                location: createLocation(startPosition, this.clonePosition())
            },
            err: null
        };
        else if (this.bumpIf('>')) {
            var childrenResult = this.parseMessage(nestingLevel + 1, parentArgType, true);
            if (childrenResult.err) return childrenResult;
            var children = childrenResult.val;
            // Expecting a close tag
            var endTagStartPosition = this.clonePosition();
            if (this.bumpIf('</')) {
                if (this.isEOF() || !_isAlpha(this.char())) return this.error(error_1.ErrorKind.INVALID_TAG, createLocation(endTagStartPosition, this.clonePosition()));
                var closingTagNameStartPosition = this.clonePosition();
                var closingTagName = this.parseTagName();
                if (tagName !== closingTagName) return this.error(error_1.ErrorKind.UNMATCHED_CLOSING_TAG, createLocation(closingTagNameStartPosition, this.clonePosition()));
                this.bumpSpace();
                if (!this.bumpIf('>')) return this.error(error_1.ErrorKind.INVALID_TAG, createLocation(endTagStartPosition, this.clonePosition()));
                return {
                    val: {
                        type: types_1.TYPE.tag,
                        value: tagName,
                        children: children,
                        location: createLocation(startPosition, this.clonePosition())
                    },
                    err: null
                };
            } else return this.error(error_1.ErrorKind.UNCLOSED_TAG, createLocation(startPosition, this.clonePosition()));
        } else return this.error(error_1.ErrorKind.INVALID_TAG, createLocation(startPosition, this.clonePosition()));
    };
    /**
     * This method assumes that the caller has peeked ahead for the first tag character.
     */ Parser1.prototype.parseTagName = function() {
        var startOffset = this.offset();
        this.bump(); // the first tag name character
        while(!this.isEOF() && _isPotentialElementNameChar(this.char()))this.bump();
        return this.message.slice(startOffset, this.offset());
    };
    Parser1.prototype.parseLiteral = function(nestingLevel, parentArgType) {
        var start = this.clonePosition();
        var value = '';
        while(true){
            var parseQuoteResult = this.tryParseQuote(parentArgType);
            if (parseQuoteResult) {
                value += parseQuoteResult;
                continue;
            }
            var parseUnquotedResult = this.tryParseUnquoted(nestingLevel, parentArgType);
            if (parseUnquotedResult) {
                value += parseUnquotedResult;
                continue;
            }
            var parseLeftAngleResult = this.tryParseLeftAngleBracket();
            if (parseLeftAngleResult) {
                value += parseLeftAngleResult;
                continue;
            }
            break;
        }
        var location = createLocation(start, this.clonePosition());
        return {
            val: {
                type: types_1.TYPE.literal,
                value: value,
                location: location
            },
            err: null
        };
    };
    Parser1.prototype.tryParseLeftAngleBracket = function() {
        if (!this.isEOF() && this.char() === 60 && (this.ignoreTag || // If at the opening tag or closing tag position, bail.
        !_isAlphaOrSlash(this.peek() || 0))) {
            this.bump(); // `<`
            return '<';
        }
        return null;
    };
    /**
     * Starting with ICU 4.8, an ASCII apostrophe only starts quoted text if it immediately precedes
     * a character that requires quoting (that is, "only where needed"), and works the same in
     * nested messages as on the top level of the pattern. The new behavior is otherwise compatible.
     */ Parser1.prototype.tryParseQuote = function(parentArgType) {
        if (this.isEOF() || this.char() !== 39) return null;
        // Parse escaped char following the apostrophe, or early return if there is no escaped char.
        // Check if is valid escaped character
        switch(this.peek()){
            case 39:
                // double quote, should return as a single quote.
                this.bump();
                this.bump();
                return "'";
            // '{', '<', '>', '}'
            case 123:
            case 60:
            case 62:
            case 125:
                break;
            case 35:
                if (parentArgType === 'plural' || parentArgType === 'selectordinal') break;
                return null;
            default:
                return null;
        }
        this.bump(); // apostrophe
        var codePoints = [
            this.char()
        ]; // escaped char
        this.bump();
        // read chars until the optional closing apostrophe is found
        while(!this.isEOF()){
            var ch = this.char();
            if (ch === 39) {
                if (this.peek() === 39) {
                    codePoints.push(39);
                    // Bump one more time because we need to skip 2 characters.
                    this.bump();
                } else {
                    // Optional closing apostrophe.
                    this.bump();
                    break;
                }
            } else codePoints.push(ch);
            this.bump();
        }
        return fromCodePoint.apply(void 0, codePoints);
    };
    Parser1.prototype.tryParseUnquoted = function(nestingLevel, parentArgType) {
        if (this.isEOF()) return null;
        var ch = this.char();
        if (ch === 60 || ch === 123 || ch === 35 && (parentArgType === 'plural' || parentArgType === 'selectordinal') || ch === 125 && nestingLevel > 0) return null;
        else {
            this.bump();
            return fromCodePoint(ch);
        }
    };
    Parser1.prototype.parseArgument = function(nestingLevel, expectingCloseTag) {
        var openingBracePosition = this.clonePosition();
        this.bump(); // `{`
        this.bumpSpace();
        if (this.isEOF()) return this.error(error_1.ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
        if (this.char() === 125) {
            this.bump();
            return this.error(error_1.ErrorKind.EMPTY_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));
        }
        // argument name
        var value = this.parseIdentifierIfPossible().value;
        if (!value) return this.error(error_1.ErrorKind.MALFORMED_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));
        this.bumpSpace();
        if (this.isEOF()) return this.error(error_1.ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
        switch(this.char()){
            // Simple argument: `{name}`
            case 125:
                this.bump(); // `}`
                return {
                    val: {
                        type: types_1.TYPE.argument,
                        // value does not include the opening and closing braces.
                        value: value,
                        location: createLocation(openingBracePosition, this.clonePosition())
                    },
                    err: null
                };
            // Argument with options: `{name, format, ...}`
            case 44:
                this.bump(); // `,`
                this.bumpSpace();
                if (this.isEOF()) return this.error(error_1.ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
                return this.parseArgumentOptions(nestingLevel, expectingCloseTag, value, openingBracePosition);
            default:
                return this.error(error_1.ErrorKind.MALFORMED_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));
        }
    };
    /**
     * Advance the parser until the end of the identifier, if it is currently on
     * an identifier character. Return an empty string otherwise.
     */ Parser1.prototype.parseIdentifierIfPossible = function() {
        var startingPosition = this.clonePosition();
        var startOffset = this.offset();
        var value = matchIdentifierAtIndex(this.message, startOffset);
        var endOffset = startOffset + value.length;
        this.bumpTo(endOffset);
        var endPosition = this.clonePosition();
        var location = createLocation(startingPosition, endPosition);
        return {
            value: value,
            location: location
        };
    };
    Parser1.prototype.parseArgumentOptions = function(nestingLevel, expectingCloseTag, value, openingBracePosition) {
        var _a2;
        // Parse this range:
        // {name, type, style}
        //        ^---^
        var typeStartPosition = this.clonePosition();
        var argType = this.parseIdentifierIfPossible().value;
        var typeEndPosition = this.clonePosition();
        switch(argType){
            case '':
                // Expecting a style string number, date, time, plural, selectordinal, or select.
                return this.error(error_1.ErrorKind.EXPECT_ARGUMENT_TYPE, createLocation(typeStartPosition, typeEndPosition));
            case 'number':
            case 'date':
            case 'time':
                // Parse this range:
                // {name, number, style}
                //              ^-------^
                this.bumpSpace();
                var styleAndLocation = null;
                if (this.bumpIf(',')) {
                    this.bumpSpace();
                    var styleStartPosition = this.clonePosition();
                    var result = this.parseSimpleArgStyleIfPossible();
                    if (result.err) return result;
                    var style = trimEnd(result.val);
                    if (style.length === 0) return this.error(error_1.ErrorKind.EXPECT_ARGUMENT_STYLE, createLocation(this.clonePosition(), this.clonePosition()));
                    var styleLocation = createLocation(styleStartPosition, this.clonePosition());
                    styleAndLocation = {
                        style: style,
                        styleLocation: styleLocation
                    };
                }
                var argCloseResult = this.tryParseArgumentClose(openingBracePosition);
                if (argCloseResult.err) return argCloseResult;
                var location_1 = createLocation(openingBracePosition, this.clonePosition());
                // Extract style or skeleton
                if (styleAndLocation && startsWith(styleAndLocation === null || styleAndLocation === void 0 ? void 0 : styleAndLocation.style, '::', 0)) {
                    // Skeleton starts with `::`.
                    var skeleton = trimStart(styleAndLocation.style.slice(2));
                    if (argType === 'number') {
                        var result = this.parseNumberSkeletonFromString(skeleton, styleAndLocation.styleLocation);
                        if (result.err) return result;
                        return {
                            val: {
                                type: types_1.TYPE.number,
                                value: value,
                                location: location_1,
                                style: result.val
                            },
                            err: null
                        };
                    } else {
                        if (skeleton.length === 0) return this.error(error_1.ErrorKind.EXPECT_DATE_TIME_SKELETON, location_1);
                        var style = {
                            type: types_1.SKELETON_TYPE.dateTime,
                            pattern: skeleton,
                            location: styleAndLocation.styleLocation,
                            parsedOptions: this.shouldParseSkeletons ? icu_skeleton_parser_1.parseDateTimeSkeleton(skeleton) : {
                            }
                        };
                        var type = argType === 'date' ? types_1.TYPE.date : types_1.TYPE.time;
                        return {
                            val: {
                                type: type,
                                value: value,
                                location: location_1,
                                style: style
                            },
                            err: null
                        };
                    }
                }
                // Regular style or no style.
                return {
                    val: {
                        type: argType === 'number' ? types_1.TYPE.number : argType === 'date' ? types_1.TYPE.date : types_1.TYPE.time,
                        value: value,
                        location: location_1,
                        style: (_a2 = styleAndLocation === null || styleAndLocation === void 0 ? void 0 : styleAndLocation.style) !== null && _a2 !== void 0 ? _a2 : null
                    },
                    err: null
                };
            case 'plural':
            case 'selectordinal':
            case 'select':
                // Parse this range:
                // {name, plural, options}
                //              ^---------^
                var typeEndPosition_1 = this.clonePosition();
                this.bumpSpace();
                if (!this.bumpIf(',')) return this.error(error_1.ErrorKind.EXPECT_SELECT_ARGUMENT_OPTIONS, createLocation(typeEndPosition_1, tslib_1.__assign({
                }, typeEndPosition_1)));
                this.bumpSpace();
                // Parse offset:
                // {name, plural, offset:1, options}
                //                ^-----^
                //
                // or the first option:
                //
                // {name, plural, one {...} other {...}}
                //                ^--^
                var identifierAndLocation = this.parseIdentifierIfPossible();
                var pluralOffset = 0;
                if (argType !== 'select' && identifierAndLocation.value === 'offset') {
                    if (!this.bumpIf(':')) return this.error(error_1.ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE, createLocation(this.clonePosition(), this.clonePosition()));
                    this.bumpSpace();
                    var result = this.tryParseDecimalInteger(error_1.ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE, error_1.ErrorKind.INVALID_PLURAL_ARGUMENT_OFFSET_VALUE);
                    if (result.err) return result;
                    // Parse another identifier for option parsing
                    this.bumpSpace();
                    identifierAndLocation = this.parseIdentifierIfPossible();
                    pluralOffset = result.val;
                }
                var optionsResult = this.tryParsePluralOrSelectOptions(nestingLevel, argType, expectingCloseTag, identifierAndLocation);
                if (optionsResult.err) return optionsResult;
                var argCloseResult = this.tryParseArgumentClose(openingBracePosition);
                if (argCloseResult.err) return argCloseResult;
                var location_2 = createLocation(openingBracePosition, this.clonePosition());
                if (argType === 'select') return {
                    val: {
                        type: types_1.TYPE.select,
                        value: value,
                        options: fromEntries(optionsResult.val),
                        location: location_2
                    },
                    err: null
                };
                else return {
                    val: {
                        type: types_1.TYPE.plural,
                        value: value,
                        options: fromEntries(optionsResult.val),
                        offset: pluralOffset,
                        pluralType: argType === 'plural' ? 'cardinal' : 'ordinal',
                        location: location_2
                    },
                    err: null
                };
            default:
                return this.error(error_1.ErrorKind.INVALID_ARGUMENT_TYPE, createLocation(typeStartPosition, typeEndPosition));
        }
    };
    Parser1.prototype.tryParseArgumentClose = function(openingBracePosition) {
        // Parse: {value, number, ::currency/GBP }
        //
        if (this.isEOF() || this.char() !== 125) return this.error(error_1.ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
        this.bump(); // `}`
        return {
            val: true,
            err: null
        };
    };
    /**
     * See: https://github.com/unicode-org/icu/blob/af7ed1f6d2298013dc303628438ec4abe1f16479/icu4c/source/common/messagepattern.cpp#L659
     */ Parser1.prototype.parseSimpleArgStyleIfPossible = function() {
        var nestedBraces = 0;
        var startPosition = this.clonePosition();
        while(!this.isEOF()){
            var ch = this.char();
            switch(ch){
                case 39:
                    // Treat apostrophe as quoting but include it in the style part.
                    // Find the end of the quoted literal text.
                    this.bump();
                    var apostrophePosition = this.clonePosition();
                    if (!this.bumpUntil("'")) return this.error(error_1.ErrorKind.UNCLOSED_QUOTE_IN_ARGUMENT_STYLE, createLocation(apostrophePosition, this.clonePosition()));
                    this.bump();
                    break;
                case 123:
                    nestedBraces += 1;
                    this.bump();
                    break;
                case 125:
                    if (nestedBraces > 0) nestedBraces -= 1;
                    else return {
                        val: this.message.slice(startPosition.offset, this.offset()),
                        err: null
                    };
                    break;
                default:
                    this.bump();
                    break;
            }
        }
        return {
            val: this.message.slice(startPosition.offset, this.offset()),
            err: null
        };
    };
    Parser1.prototype.parseNumberSkeletonFromString = function(skeleton, location) {
        var tokens = [];
        try {
            tokens = icu_skeleton_parser_1.parseNumberSkeletonFromString(skeleton);
        } catch (e) {
            return this.error(error_1.ErrorKind.INVALID_NUMBER_SKELETON, location);
        }
        return {
            val: {
                type: types_1.SKELETON_TYPE.number,
                tokens: tokens,
                location: location,
                parsedOptions: this.shouldParseSkeletons ? icu_skeleton_parser_1.parseNumberSkeleton(tokens) : {
                }
            },
            err: null
        };
    };
    /**
     * @param nesting_level The current nesting level of messages.
     *     This can be positive when parsing message fragment in select or plural argument options.
     * @param parent_arg_type The parent argument's type.
     * @param parsed_first_identifier If provided, this is the first identifier-like selector of
     *     the argument. It is a by-product of a previous parsing attempt.
     * @param expecting_close_tag If true, this message is directly or indirectly nested inside
     *     between a pair of opening and closing tags. The nested message will not parse beyond
     *     the closing tag boundary.
     */ Parser1.prototype.tryParsePluralOrSelectOptions = function(nestingLevel, parentArgType, expectCloseTag, parsedFirstIdentifier) {
        var _a2;
        var hasOtherClause = false;
        var options = [];
        var parsedSelectors = new Set();
        var selector = parsedFirstIdentifier.value, selectorLocation = parsedFirstIdentifier.location;
        // Parse:
        // one {one apple}
        // ^--^
        while(true){
            if (selector.length === 0) {
                var startPosition = this.clonePosition();
                if (parentArgType !== 'select' && this.bumpIf('=')) {
                    // Try parse `={number}` selector
                    var result = this.tryParseDecimalInteger(error_1.ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR, error_1.ErrorKind.INVALID_PLURAL_ARGUMENT_SELECTOR);
                    if (result.err) return result;
                    selectorLocation = createLocation(startPosition, this.clonePosition());
                    selector = this.message.slice(startPosition.offset, this.offset());
                } else break;
            }
            // Duplicate selector clauses
            if (parsedSelectors.has(selector)) return this.error(parentArgType === 'select' ? error_1.ErrorKind.DUPLICATE_SELECT_ARGUMENT_SELECTOR : error_1.ErrorKind.DUPLICATE_PLURAL_ARGUMENT_SELECTOR, selectorLocation);
            if (selector === 'other') hasOtherClause = true;
            // Parse:
            // one {one apple}
            //     ^----------^
            this.bumpSpace();
            var openingBracePosition = this.clonePosition();
            if (!this.bumpIf('{')) return this.error(parentArgType === 'select' ? error_1.ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT : error_1.ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT, createLocation(this.clonePosition(), this.clonePosition()));
            var fragmentResult = this.parseMessage(nestingLevel + 1, parentArgType, expectCloseTag);
            if (fragmentResult.err) return fragmentResult;
            var argCloseResult = this.tryParseArgumentClose(openingBracePosition);
            if (argCloseResult.err) return argCloseResult;
            options.push([
                selector,
                {
                    value: fragmentResult.val,
                    location: createLocation(openingBracePosition, this.clonePosition())
                }, 
            ]);
            // Keep track of the existing selectors
            parsedSelectors.add(selector);
            // Prep next selector clause.
            this.bumpSpace();
            _a2 = this.parseIdentifierIfPossible(), selector = _a2.value, selectorLocation = _a2.location;
        }
        if (options.length === 0) return this.error(parentArgType === 'select' ? error_1.ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR : error_1.ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR, createLocation(this.clonePosition(), this.clonePosition()));
        if (this.requiresOtherClause && !hasOtherClause) return this.error(error_1.ErrorKind.MISSING_OTHER_CLAUSE, createLocation(this.clonePosition(), this.clonePosition()));
        return {
            val: options,
            err: null
        };
    };
    Parser1.prototype.tryParseDecimalInteger = function(expectNumberError, invalidNumberError) {
        var sign = 1;
        var startingPosition = this.clonePosition();
        if (this.bumpIf('+')) ;
        else if (this.bumpIf('-')) sign = -1;
        var hasDigits = false;
        var decimal = 0;
        while(!this.isEOF()){
            var ch = this.char();
            if (ch >= 48 && ch <= 57) {
                hasDigits = true;
                decimal = decimal * 10 + (ch - 48);
                this.bump();
            } else break;
        }
        var location = createLocation(startingPosition, this.clonePosition());
        if (!hasDigits) return this.error(expectNumberError, location);
        decimal *= sign;
        if (!isSafeInteger(decimal)) return this.error(invalidNumberError, location);
        return {
            val: decimal,
            err: null
        };
    };
    Parser1.prototype.offset = function() {
        return this.position.offset;
    };
    Parser1.prototype.isEOF = function() {
        return this.offset() === this.message.length;
    };
    Parser1.prototype.clonePosition = function() {
        // This is much faster than `Object.assign` or spread.
        return {
            offset: this.position.offset,
            line: this.position.line,
            column: this.position.column
        };
    };
    /**
     * Return the code point at the current position of the parser.
     * Throws if the index is out of bound.
     */ Parser1.prototype.char = function() {
        var offset = this.position.offset;
        if (offset >= this.message.length) throw Error('out of bound');
        var code = codePointAt(this.message, offset);
        if (code === undefined) throw Error("Offset " + offset + " is at invalid UTF-16 code unit boundary");
        return code;
    };
    Parser1.prototype.error = function(kind, location) {
        return {
            val: null,
            err: {
                kind: kind,
                message: this.message,
                location: location
            }
        };
    };
    /** Bump the parser to the next UTF-16 code unit. */ Parser1.prototype.bump = function() {
        if (this.isEOF()) return;
        var code = this.char();
        if (code === 10) {
            this.position.line += 1;
            this.position.column = 1;
            this.position.offset += 1;
        } else {
            this.position.column += 1;
            // 0 ~ 0x10000 -> unicode BMP, otherwise skip the surrogate pair.
            this.position.offset += code < 65536 ? 1 : 2;
        }
    };
    /**
     * If the substring starting at the current position of the parser has
     * the given prefix, then bump the parser to the character immediately
     * following the prefix and return true. Otherwise, don't bump the parser
     * and return false.
     */ Parser1.prototype.bumpIf = function(prefix) {
        if (startsWith(this.message, prefix, this.offset())) {
            for(var i = 0; i < prefix.length; i++)this.bump();
            return true;
        }
        return false;
    };
    /**
     * Bump the parser until the pattern character is found and return `true`.
     * Otherwise bump to the end of the file and return `false`.
     */ Parser1.prototype.bumpUntil = function(pattern) {
        var currentOffset = this.offset();
        var index = this.message.indexOf(pattern, currentOffset);
        if (index >= 0) {
            this.bumpTo(index);
            return true;
        } else {
            this.bumpTo(this.message.length);
            return false;
        }
    };
    /**
     * Bump the parser to the target offset.
     * If target offset is beyond the end of the input, bump the parser to the end of the input.
     */ Parser1.prototype.bumpTo = function(targetOffset) {
        if (this.offset() > targetOffset) throw Error("targetOffset " + targetOffset + " must be greater than or equal to the current offset " + this.offset());
        targetOffset = Math.min(targetOffset, this.message.length);
        while(true){
            var offset = this.offset();
            if (offset === targetOffset) break;
            if (offset > targetOffset) throw Error("targetOffset " + targetOffset + " is at invalid UTF-16 code unit boundary");
            this.bump();
            if (this.isEOF()) break;
        }
    };
    /** advance the parser through all whitespace to the next non-whitespace code unit. */ Parser1.prototype.bumpSpace = function() {
        while(!this.isEOF() && _isWhiteSpace(this.char()))this.bump();
    };
    /**
     * Peek at the *next* Unicode codepoint in the input without advancing the parser.
     * If the input has been exhausted, then this returns null.
     */ Parser1.prototype.peek = function() {
        if (this.isEOF()) return null;
        var code = this.char();
        var offset = this.offset();
        var nextCode = this.message.charCodeAt(offset + (code >= 65536 ? 2 : 1));
        return nextCode !== null && nextCode !== void 0 ? nextCode : null;
    };
    return Parser1;
}();
exports.Parser = Parser;
/**
 * This check if codepoint is alphabet (lower & uppercase)
 * @param codepoint
 * @returns
 */ function _isAlpha(codepoint) {
    return codepoint >= 97 && codepoint <= 122 || codepoint >= 65 && codepoint <= 90;
}
function _isAlphaOrSlash(codepoint) {
    return _isAlpha(codepoint) || codepoint === 47; /* '/' */ 
}
/** See `parseTag` function docs. */ function _isPotentialElementNameChar(c) {
    return c === 45 || c === 46 || c >= 48 && c <= 57 || c === 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90 || c == 183 || c >= 192 && c <= 214 || c >= 216 && c <= 246 || c >= 248 && c <= 893 || c >= 895 && c <= 8191 || c >= 8204 && c <= 8205 || c >= 8255 && c <= 8256 || c >= 8304 && c <= 8591 || c >= 11264 && c <= 12271 || c >= 12289 && c <= 55295 || c >= 63744 && c <= 64975 || c >= 65008 && c <= 65533 || c >= 65536 && c <= 983039;
}
/**
 * Code point equivalent of regex `\p{White_Space}`.
 * From: https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt
 */ function _isWhiteSpace(c) {
    return c >= 9 && c <= 13 || c === 32 || c === 133 || c >= 8206 && c <= 8207 || c === 8232 || c === 8233;
}
/**
 * Code point equivalent of regex `\p{Pattern_Syntax}`.
 * See https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt
 */ function _isPatternSyntax(c) {
    return c >= 33 && c <= 35 || c === 36 || c >= 37 && c <= 39 || c === 40 || c === 41 || c === 42 || c === 43 || c === 44 || c === 45 || c >= 46 && c <= 47 || c >= 58 && c <= 59 || c >= 60 && c <= 62 || c >= 63 && c <= 64 || c === 91 || c === 92 || c === 93 || c === 94 || c === 96 || c === 123 || c === 124 || c === 125 || c === 126 || c === 161 || c >= 162 && c <= 165 || c === 166 || c === 167 || c === 169 || c === 171 || c === 172 || c === 174 || c === 176 || c === 177 || c === 182 || c === 187 || c === 191 || c === 215 || c === 247 || c >= 8208 && c <= 8213 || c >= 8214 && c <= 8215 || c === 8216 || c === 8217 || c === 8218 || c >= 8219 && c <= 8220 || c === 8221 || c === 8222 || c === 8223 || c >= 8224 && c <= 8231 || c >= 8240 && c <= 8248 || c === 8249 || c === 8250 || c >= 8251 && c <= 8254 || c >= 8257 && c <= 8259 || c === 8260 || c === 8261 || c === 8262 || c >= 8263 && c <= 8273 || c === 8274 || c === 8275 || c >= 8277 && c <= 8286 || c >= 8592 && c <= 8596 || c >= 8597 && c <= 8601 || c >= 8602 && c <= 8603 || c >= 8604 && c <= 8607 || c === 8608 || c >= 8609 && c <= 8610 || c === 8611 || c >= 8612 && c <= 8613 || c === 8614 || c >= 8615 && c <= 8621 || c === 8622 || c >= 8623 && c <= 8653 || c >= 8654 && c <= 8655 || c >= 8656 && c <= 8657 || c === 8658 || c === 8659 || c === 8660 || c >= 8661 && c <= 8691 || c >= 8692 && c <= 8959 || c >= 8960 && c <= 8967 || c === 8968 || c === 8969 || c === 8970 || c === 8971 || c >= 8972 && c <= 8991 || c >= 8992 && c <= 8993 || c >= 8994 && c <= 9000 || c === 9001 || c === 9002 || c >= 9003 && c <= 9083 || c === 9084 || c >= 9085 && c <= 9114 || c >= 9115 && c <= 9139 || c >= 9140 && c <= 9179 || c >= 9180 && c <= 9185 || c >= 9186 && c <= 9254 || c >= 9255 && c <= 9279 || c >= 9280 && c <= 9290 || c >= 9291 && c <= 9311 || c >= 9472 && c <= 9654 || c === 9655 || c >= 9656 && c <= 9664 || c === 9665 || c >= 9666 && c <= 9719 || c >= 9720 && c <= 9727 || c >= 9728 && c <= 9838 || c === 9839 || c >= 9840 && c <= 10087 || c === 10088 || c === 10089 || c === 10090 || c === 10091 || c === 10092 || c === 10093 || c === 10094 || c === 10095 || c === 10096 || c === 10097 || c === 10098 || c === 10099 || c === 10100 || c === 10101 || c >= 10132 && c <= 10175 || c >= 10176 && c <= 10180 || c === 10181 || c === 10182 || c >= 10183 && c <= 10213 || c === 10214 || c === 10215 || c === 10216 || c === 10217 || c === 10218 || c === 10219 || c === 10220 || c === 10221 || c === 10222 || c === 10223 || c >= 10224 && c <= 10239 || c >= 10240 && c <= 10495 || c >= 10496 && c <= 10626 || c === 10627 || c === 10628 || c === 10629 || c === 10630 || c === 10631 || c === 10632 || c === 10633 || c === 10634 || c === 10635 || c === 10636 || c === 10637 || c === 10638 || c === 10639 || c === 10640 || c === 10641 || c === 10642 || c === 10643 || c === 10644 || c === 10645 || c === 10646 || c === 10647 || c === 10648 || c >= 10649 && c <= 10711 || c === 10712 || c === 10713 || c === 10714 || c === 10715 || c >= 10716 && c <= 10747 || c === 10748 || c === 10749 || c >= 10750 && c <= 11007 || c >= 11008 && c <= 11055 || c >= 11056 && c <= 11076 || c >= 11077 && c <= 11078 || c >= 11079 && c <= 11084 || c >= 11085 && c <= 11123 || c >= 11124 && c <= 11125 || c >= 11126 && c <= 11157 || c === 11158 || c >= 11159 && c <= 11263 || c >= 11776 && c <= 11777 || c === 11778 || c === 11779 || c === 11780 || c === 11781 || c >= 11782 && c <= 11784 || c === 11785 || c === 11786 || c === 11787 || c === 11788 || c === 11789 || c >= 11790 && c <= 11798 || c === 11799 || c >= 11800 && c <= 11801 || c === 11802 || c === 11803 || c === 11804 || c === 11805 || c >= 11806 && c <= 11807 || c === 11808 || c === 11809 || c === 11810 || c === 11811 || c === 11812 || c === 11813 || c === 11814 || c === 11815 || c === 11816 || c === 11817 || c >= 11818 && c <= 11822 || c === 11823 || c >= 11824 && c <= 11833 || c >= 11834 && c <= 11835 || c >= 11836 && c <= 11839 || c === 11840 || c === 11841 || c === 11842 || c >= 11843 && c <= 11855 || c >= 11856 && c <= 11857 || c === 11858 || c >= 11859 && c <= 11903 || c >= 12289 && c <= 12291 || c === 12296 || c === 12297 || c === 12298 || c === 12299 || c === 12300 || c === 12301 || c === 12302 || c === 12303 || c === 12304 || c === 12305 || c >= 12306 && c <= 12307 || c === 12308 || c === 12309 || c === 12310 || c === 12311 || c === 12312 || c === 12313 || c === 12314 || c === 12315 || c === 12316 || c === 12317 || c >= 12318 && c <= 12319 || c === 12320 || c === 12336 || c === 64830 || c === 64831 || c >= 65093 && c <= 65094;
}

},{"tslib":"2jo9c","./error":"5FuaL","./types":"3VJx6","./regex.generated":"dAMKF","@formatjs/icu-skeleton-parser":"2loXJ"}],"3VJx6":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.createNumberElement = exports.createLiteralElement = exports.isDateTimeSkeleton = exports.isNumberSkeleton = exports.isTagElement = exports.isPoundElement = exports.isPluralElement = exports.isSelectElement = exports.isTimeElement = exports.isDateElement = exports.isNumberElement = exports.isArgumentElement = exports.isLiteralElement = exports.SKELETON_TYPE = exports.TYPE = void 0;
var TYPE;
(function(TYPE1) {
    /**
     * Raw text
     */ TYPE1[TYPE1["literal"] = 0] = "literal";
    /**
     * Variable w/o any format, e.g `var` in `this is a {var}`
     */ TYPE1[TYPE1["argument"] = 1] = "argument";
    /**
     * Variable w/ number format
     */ TYPE1[TYPE1["number"] = 2] = "number";
    /**
     * Variable w/ date format
     */ TYPE1[TYPE1["date"] = 3] = "date";
    /**
     * Variable w/ time format
     */ TYPE1[TYPE1["time"] = 4] = "time";
    /**
     * Variable w/ select format
     */ TYPE1[TYPE1["select"] = 5] = "select";
    /**
     * Variable w/ plural format
     */ TYPE1[TYPE1["plural"] = 6] = "plural";
    /**
     * Only possible within plural argument.
     * This is the `#` symbol that will be substituted with the count.
     */ TYPE1[TYPE1["pound"] = 7] = "pound";
    /**
     * XML-like tag
     */ TYPE1[TYPE1["tag"] = 8] = "tag";
})(TYPE = exports.TYPE || (exports.TYPE = {
}));
var SKELETON_TYPE;
(function(SKELETON_TYPE1) {
    SKELETON_TYPE1[SKELETON_TYPE1["number"] = 0] = "number";
    SKELETON_TYPE1[SKELETON_TYPE1["dateTime"] = 1] = "dateTime";
})(SKELETON_TYPE = exports.SKELETON_TYPE || (exports.SKELETON_TYPE = {
}));
/**
 * Type Guards
 */ function isLiteralElement(el) {
    return el.type === TYPE.literal;
}
exports.isLiteralElement = isLiteralElement;
function isArgumentElement(el) {
    return el.type === TYPE.argument;
}
exports.isArgumentElement = isArgumentElement;
function isNumberElement(el) {
    return el.type === TYPE.number;
}
exports.isNumberElement = isNumberElement;
function isDateElement(el) {
    return el.type === TYPE.date;
}
exports.isDateElement = isDateElement;
function isTimeElement(el) {
    return el.type === TYPE.time;
}
exports.isTimeElement = isTimeElement;
function isSelectElement(el) {
    return el.type === TYPE.select;
}
exports.isSelectElement = isSelectElement;
function isPluralElement(el) {
    return el.type === TYPE.plural;
}
exports.isPluralElement = isPluralElement;
function isPoundElement(el) {
    return el.type === TYPE.pound;
}
exports.isPoundElement = isPoundElement;
function isTagElement(el) {
    return el.type === TYPE.tag;
}
exports.isTagElement = isTagElement;
function isNumberSkeleton(el) {
    return !!(el && typeof el === 'object' && el.type === SKELETON_TYPE.number);
}
exports.isNumberSkeleton = isNumberSkeleton;
function isDateTimeSkeleton(el) {
    return !!(el && typeof el === 'object' && el.type === SKELETON_TYPE.dateTime);
}
exports.isDateTimeSkeleton = isDateTimeSkeleton;
function createLiteralElement(value) {
    return {
        type: TYPE.literal,
        value: value
    };
}
exports.createLiteralElement = createLiteralElement;
function createNumberElement(value, style) {
    return {
        type: TYPE.number,
        value: value,
        style: style
    };
}
exports.createNumberElement = createNumberElement;

},{}],"dAMKF":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.WHITE_SPACE_REGEX = exports.SPACE_SEPARATOR_REGEX = void 0;
// @generated from regex-gen.ts
exports.SPACE_SEPARATOR_REGEX = /[ \xA0\u1680\u2000-\u200A\u202F\u205F\u3000]/;
exports.WHITE_SPACE_REGEX = /[\t-\r \x85\u200E\u200F\u2028\u2029]/;

},{}],"2loXJ":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var tslib_1 = require("tslib");
tslib_1.__exportStar(require("./date-time"), exports);
tslib_1.__exportStar(require("./number"), exports);

},{"tslib":"2jo9c","./date-time":"3vDvp","./number":"696n6"}],"3vDvp":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.parseDateTimeSkeleton = void 0;
/**
 * https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
 * Credit: https://github.com/caridy/intl-datetimeformat-pattern/blob/master/index.js
 * with some tweaks
 */ var DATE_TIME_REGEX = /(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;
/**
 * Parse Date time skeleton into Intl.DateTimeFormatOptions
 * Ref: https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
 * @public
 * @param skeleton skeleton string
 */ function parseDateTimeSkeleton(skeleton) {
    var result = {
    };
    skeleton.replace(DATE_TIME_REGEX, function(match) {
        var len = match.length;
        switch(match[0]){
            // Era
            case 'G':
                result.era = len === 4 ? 'long' : len === 5 ? 'narrow' : 'short';
                break;
            // Year
            case 'y':
                result.year = len === 2 ? '2-digit' : 'numeric';
                break;
            case 'Y':
            case 'u':
            case 'U':
            case 'r':
                throw new RangeError('`Y/u/U/r` (year) patterns are not supported, use `y` instead');
            // Quarter
            case 'q':
            case 'Q':
                throw new RangeError('`q/Q` (quarter) patterns are not supported');
            // Month
            case 'M':
            case 'L':
                result.month = [
                    'numeric',
                    '2-digit',
                    'short',
                    'long',
                    'narrow'
                ][len - 1];
                break;
            // Week
            case 'w':
            case 'W':
                throw new RangeError('`w/W` (week) patterns are not supported');
            case 'd':
                result.day = [
                    'numeric',
                    '2-digit'
                ][len - 1];
                break;
            case 'D':
            case 'F':
            case 'g':
                throw new RangeError('`D/F/g` (day) patterns are not supported, use `d` instead');
            // Weekday
            case 'E':
                result.weekday = len === 4 ? 'short' : len === 5 ? 'narrow' : 'short';
                break;
            case 'e':
                if (len < 4) throw new RangeError('`e..eee` (weekday) patterns are not supported');
                result.weekday = [
                    'short',
                    'long',
                    'narrow',
                    'short'
                ][len - 4];
                break;
            case 'c':
                if (len < 4) throw new RangeError('`c..ccc` (weekday) patterns are not supported');
                result.weekday = [
                    'short',
                    'long',
                    'narrow',
                    'short'
                ][len - 4];
                break;
            // Period
            case 'a':
                result.hour12 = true;
                break;
            case 'b':
            case 'B':
                throw new RangeError('`b/B` (period) patterns are not supported, use `a` instead');
            // Hour
            case 'h':
                result.hourCycle = 'h12';
                result.hour = [
                    'numeric',
                    '2-digit'
                ][len - 1];
                break;
            case 'H':
                result.hourCycle = 'h23';
                result.hour = [
                    'numeric',
                    '2-digit'
                ][len - 1];
                break;
            case 'K':
                result.hourCycle = 'h11';
                result.hour = [
                    'numeric',
                    '2-digit'
                ][len - 1];
                break;
            case 'k':
                result.hourCycle = 'h24';
                result.hour = [
                    'numeric',
                    '2-digit'
                ][len - 1];
                break;
            case 'j':
            case 'J':
            case 'C':
                throw new RangeError('`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead');
            // Minute
            case 'm':
                result.minute = [
                    'numeric',
                    '2-digit'
                ][len - 1];
                break;
            // Second
            case 's':
                result.second = [
                    'numeric',
                    '2-digit'
                ][len - 1];
                break;
            case 'S':
            case 'A':
                throw new RangeError('`S/A` (second) patterns are not supported, use `s` instead');
            // Zone
            case 'z':
                result.timeZoneName = len < 4 ? 'short' : 'long';
                break;
            case 'Z':
            case 'O':
            case 'v':
            case 'V':
            case 'X':
            case 'x':
                throw new RangeError('`Z/O/v/V/X/x` (timeZone) patterns are not supported, use `z` instead');
        }
        return '';
    });
    return result;
}
exports.parseDateTimeSkeleton = parseDateTimeSkeleton;

},{}],"696n6":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.parseNumberSkeleton = exports.parseNumberSkeletonFromString = void 0;
var tslib_1 = require("tslib");
var regex_generated_1 = require("./regex.generated");
function parseNumberSkeletonFromString(skeleton) {
    if (skeleton.length === 0) throw new Error('Number skeleton cannot be empty');
    // Parse the skeleton
    var stringTokens = skeleton.split(regex_generated_1.WHITE_SPACE_REGEX).filter(function(x) {
        return x.length > 0;
    });
    var tokens = [];
    for(var _i = 0, stringTokens_1 = stringTokens; _i < stringTokens_1.length; _i++){
        var stringToken = stringTokens_1[_i];
        var stemAndOptions = stringToken.split('/');
        if (stemAndOptions.length === 0) throw new Error('Invalid number skeleton');
        var stem = stemAndOptions[0], options = stemAndOptions.slice(1);
        for(var _a = 0, options_1 = options; _a < options_1.length; _a++){
            var option = options_1[_a];
            if (option.length === 0) throw new Error('Invalid number skeleton');
        }
        tokens.push({
            stem: stem,
            options: options
        });
    }
    return tokens;
}
exports.parseNumberSkeletonFromString = parseNumberSkeletonFromString;
function icuUnitToEcma(unit) {
    return unit.replace(/^(.*?)-/, '');
}
var FRACTION_PRECISION_REGEX = /^\.(?:(0+)(\*)?|(#+)|(0+)(#+))$/g;
var SIGNIFICANT_PRECISION_REGEX = /^(@+)?(\+|#+)?$/g;
var INTEGER_WIDTH_REGEX = /(\*)(0+)|(#+)(0+)|(0+)/g;
var CONCISE_INTEGER_WIDTH_REGEX = /^(0+)$/;
function parseSignificantPrecision(str) {
    var result = {
    };
    str.replace(SIGNIFICANT_PRECISION_REGEX, function(_, g1, g2) {
        // @@@ case
        if (typeof g2 !== 'string') {
            result.minimumSignificantDigits = g1.length;
            result.maximumSignificantDigits = g1.length;
        } else if (g2 === '+') result.minimumSignificantDigits = g1.length;
        else if (g1[0] === '#') result.maximumSignificantDigits = g1.length;
        else {
            result.minimumSignificantDigits = g1.length;
            result.maximumSignificantDigits = g1.length + (typeof g2 === 'string' ? g2.length : 0);
        }
        return '';
    });
    return result;
}
function parseSign(str) {
    switch(str){
        case 'sign-auto':
            return {
                signDisplay: 'auto'
            };
        case 'sign-accounting':
        case '()':
            return {
                currencySign: 'accounting'
            };
        case 'sign-always':
        case '+!':
            return {
                signDisplay: 'always'
            };
        case 'sign-accounting-always':
        case '()!':
            return {
                signDisplay: 'always',
                currencySign: 'accounting'
            };
        case 'sign-except-zero':
        case '+?':
            return {
                signDisplay: 'exceptZero'
            };
        case 'sign-accounting-except-zero':
        case '()?':
            return {
                signDisplay: 'exceptZero',
                currencySign: 'accounting'
            };
        case 'sign-never':
        case '+_':
            return {
                signDisplay: 'never'
            };
    }
}
function parseConciseScientificAndEngineeringStem(stem) {
    // Engineering
    var result;
    if (stem[0] === 'E' && stem[1] === 'E') {
        result = {
            notation: 'engineering'
        };
        stem = stem.slice(2);
    } else if (stem[0] === 'E') {
        result = {
            notation: 'scientific'
        };
        stem = stem.slice(1);
    }
    if (result) {
        var signDisplay = stem.slice(0, 2);
        if (signDisplay === '+!') {
            result.signDisplay = 'always';
            stem = stem.slice(2);
        } else if (signDisplay === '+?') {
            result.signDisplay = 'exceptZero';
            stem = stem.slice(2);
        }
        if (!CONCISE_INTEGER_WIDTH_REGEX.test(stem)) throw new Error('Malformed concise eng/scientific notation');
        result.minimumIntegerDigits = stem.length;
    }
    return result;
}
function parseNotationOptions(opt) {
    var result = {
    };
    var signOpts = parseSign(opt);
    if (signOpts) return signOpts;
    return result;
}
/**
 * https://github.com/unicode-org/icu/blob/master/docs/userguide/format_parse/numbers/skeletons.md#skeleton-stems-and-options
 */ function parseNumberSkeleton(tokens) {
    var result = {
    };
    for(var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++){
        var token = tokens_1[_i];
        switch(token.stem){
            case 'percent':
            case '%':
                result.style = 'percent';
                continue;
            case '%x100':
                result.style = 'percent';
                result.scale = 100;
                continue;
            case 'currency':
                result.style = 'currency';
                result.currency = token.options[0];
                continue;
            case 'group-off':
            case ',_':
                result.useGrouping = false;
                continue;
            case 'precision-integer':
            case '.':
                result.maximumFractionDigits = 0;
                continue;
            case 'measure-unit':
            case 'unit':
                result.style = 'unit';
                result.unit = icuUnitToEcma(token.options[0]);
                continue;
            case 'compact-short':
            case 'K':
                result.notation = 'compact';
                result.compactDisplay = 'short';
                continue;
            case 'compact-long':
            case 'KK':
                result.notation = 'compact';
                result.compactDisplay = 'long';
                continue;
            case 'scientific':
                result = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({
                }, result), {
                    notation: 'scientific'
                }), token.options.reduce(function(all, opt) {
                    return tslib_1.__assign(tslib_1.__assign({
                    }, all), parseNotationOptions(opt));
                }, {
                }));
                continue;
            case 'engineering':
                result = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({
                }, result), {
                    notation: 'engineering'
                }), token.options.reduce(function(all, opt) {
                    return tslib_1.__assign(tslib_1.__assign({
                    }, all), parseNotationOptions(opt));
                }, {
                }));
                continue;
            case 'notation-simple':
                result.notation = 'standard';
                continue;
            // https://github.com/unicode-org/icu/blob/master/icu4c/source/i18n/unicode/unumberformatter.h
            case 'unit-width-narrow':
                result.currencyDisplay = 'narrowSymbol';
                result.unitDisplay = 'narrow';
                continue;
            case 'unit-width-short':
                result.currencyDisplay = 'code';
                result.unitDisplay = 'short';
                continue;
            case 'unit-width-full-name':
                result.currencyDisplay = 'name';
                result.unitDisplay = 'long';
                continue;
            case 'unit-width-iso-code':
                result.currencyDisplay = 'symbol';
                continue;
            case 'scale':
                result.scale = parseFloat(token.options[0]);
                continue;
            // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#integer-width
            case 'integer-width':
                if (token.options.length > 1) throw new RangeError('integer-width stems only accept a single optional option');
                token.options[0].replace(INTEGER_WIDTH_REGEX, function(_, g1, g2, g3, g4, g5) {
                    if (g1) result.minimumIntegerDigits = g2.length;
                    else if (g3 && g4) throw new Error('We currently do not support maximum integer digits');
                    else if (g5) throw new Error('We currently do not support exact integer digits');
                    return '';
                });
                continue;
        }
        // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#integer-width
        if (CONCISE_INTEGER_WIDTH_REGEX.test(token.stem)) {
            result.minimumIntegerDigits = token.stem.length;
            continue;
        }
        if (FRACTION_PRECISION_REGEX.test(token.stem)) {
            // Precision
            // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#fraction-precision
            // precision-integer case
            if (token.options.length > 1) throw new RangeError('Fraction-precision stems only accept a single optional option');
            token.stem.replace(FRACTION_PRECISION_REGEX, function(_, g1, g2, g3, g4, g5) {
                // .000* case (before ICU67 it was .000+)
                if (g2 === '*') result.minimumFractionDigits = g1.length;
                else if (g3 && g3[0] === '#') result.maximumFractionDigits = g3.length;
                else if (g4 && g5) {
                    result.minimumFractionDigits = g4.length;
                    result.maximumFractionDigits = g4.length + g5.length;
                } else {
                    result.minimumFractionDigits = g1.length;
                    result.maximumFractionDigits = g1.length;
                }
                return '';
            });
            if (token.options.length) result = tslib_1.__assign(tslib_1.__assign({
            }, result), parseSignificantPrecision(token.options[0]));
            continue;
        }
        // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#significant-digits-precision
        if (SIGNIFICANT_PRECISION_REGEX.test(token.stem)) {
            result = tslib_1.__assign(tslib_1.__assign({
            }, result), parseSignificantPrecision(token.stem));
            continue;
        }
        var signOpts = parseSign(token.stem);
        if (signOpts) result = tslib_1.__assign(tslib_1.__assign({
        }, result), signOpts);
        var conciseScientificAndEngineeringOpts = parseConciseScientificAndEngineeringStem(token.stem);
        if (conciseScientificAndEngineeringOpts) result = tslib_1.__assign(tslib_1.__assign({
        }, result), conciseScientificAndEngineeringOpts);
    }
    return result;
}
exports.parseNumberSkeleton = parseNumberSkeleton;

},{"tslib":"2jo9c","./regex.generated":"2Lspe"}],"2Lspe":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.WHITE_SPACE_REGEX = void 0;
// @generated from regex-gen.ts
exports.WHITE_SPACE_REGEX = /[\t-\r \x85\u200E\u200F\u2028\u2029]/i;

},{}],"4RiEb":[function(require,module,exports) {
"use strict";
//
// Main
//
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.strategies = void 0;
function memoize(fn, options) {
    var cache = options && options.cache ? options.cache : cacheDefault;
    var serializer = options && options.serializer ? options.serializer : serializerDefault;
    var strategy = options && options.strategy ? options.strategy : strategyDefault;
    return strategy(fn, {
        cache: cache,
        serializer: serializer
    });
}
exports.default = memoize;
//
// Strategy
//
function isPrimitive(value) {
    return value == null || typeof value === 'number' || typeof value === 'boolean'; // || typeof value === "string" 'unsafe' primitive for our needs
}
function monadic(fn, cache, serializer, arg) {
    var cacheKey = isPrimitive(arg) ? arg : serializer(arg);
    var computedValue = cache.get(cacheKey);
    if (typeof computedValue === 'undefined') {
        computedValue = fn.call(this, arg);
        cache.set(cacheKey, computedValue);
    }
    return computedValue;
}
function variadic(fn, cache, serializer) {
    var args = Array.prototype.slice.call(arguments, 3);
    var cacheKey = serializer(args);
    var computedValue = cache.get(cacheKey);
    if (typeof computedValue === 'undefined') {
        computedValue = fn.apply(this, args);
        cache.set(cacheKey, computedValue);
    }
    return computedValue;
}
function assemble(fn, context, strategy, cache, serialize) {
    return strategy.bind(context, fn, cache, serialize);
}
function strategyDefault(fn, options) {
    var strategy = fn.length === 1 ? monadic : variadic;
    return assemble(fn, this, strategy, options.cache.create(), options.serializer);
}
function strategyVariadic(fn, options) {
    return assemble(fn, this, variadic, options.cache.create(), options.serializer);
}
function strategyMonadic(fn, options) {
    return assemble(fn, this, monadic, options.cache.create(), options.serializer);
}
//
// Serializer
//
var serializerDefault = function() {
    return JSON.stringify(arguments);
};
//
// Cache
//
function ObjectWithoutPrototypeCache() {
    this.cache = Object.create(null);
}
ObjectWithoutPrototypeCache.prototype.has = function(key) {
    return key in this.cache;
};
ObjectWithoutPrototypeCache.prototype.get = function(key) {
    return this.cache[key];
};
ObjectWithoutPrototypeCache.prototype.set = function(key, value) {
    this.cache[key] = value;
};
var cacheDefault = {
    create: function create() {
        // @ts-ignore
        return new ObjectWithoutPrototypeCache();
    }
};
exports.strategies = {
    variadic: strategyVariadic,
    monadic: strategyMonadic
};

},{}],"1OJox":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.formatToParts = exports.isFormatXMLElementFn = exports.PART_TYPE = void 0;
var icu_messageformat_parser_1 = require("@formatjs/icu-messageformat-parser");
var error_1 = require("./error");
var PART_TYPE;
(function(PART_TYPE1) {
    PART_TYPE1[PART_TYPE1["literal"] = 0] = "literal";
    PART_TYPE1[PART_TYPE1["object"] = 1] = "object";
})(PART_TYPE = exports.PART_TYPE || (exports.PART_TYPE = {
}));
function mergeLiteral(parts) {
    if (parts.length < 2) return parts;
    return parts.reduce(function(all, part) {
        var lastPart = all[all.length - 1];
        if (!lastPart || lastPart.type !== PART_TYPE.literal || part.type !== PART_TYPE.literal) all.push(part);
        else lastPart.value += part.value;
        return all;
    }, []);
}
function isFormatXMLElementFn(el) {
    return typeof el === 'function';
}
exports.isFormatXMLElementFn = isFormatXMLElementFn;
// TODO(skeleton): add skeleton support
function formatToParts(els, locales, formatters, formats, values, currentPluralValue, // For debugging
originalMessage) {
    // Hot path for straight simple msg translations
    if (els.length === 1 && icu_messageformat_parser_1.isLiteralElement(els[0])) return [
        {
            type: PART_TYPE.literal,
            value: els[0].value
        }, 
    ];
    var result = [];
    for(var _i = 0, els_1 = els; _i < els_1.length; _i++){
        var el = els_1[_i];
        // Exit early for string parts.
        if (icu_messageformat_parser_1.isLiteralElement(el)) {
            result.push({
                type: PART_TYPE.literal,
                value: el.value
            });
            continue;
        }
        // TODO: should this part be literal type?
        // Replace `#` in plural rules with the actual numeric value.
        if (icu_messageformat_parser_1.isPoundElement(el)) {
            if (typeof currentPluralValue === 'number') result.push({
                type: PART_TYPE.literal,
                value: formatters.getNumberFormat(locales).format(currentPluralValue)
            });
            continue;
        }
        var varName = el.value;
        // Enforce that all required values are provided by the caller.
        if (!(values && varName in values)) throw new error_1.MissingValueError(varName, originalMessage);
        var value = values[varName];
        if (icu_messageformat_parser_1.isArgumentElement(el)) {
            if (!value || typeof value === 'string' || typeof value === 'number') value = typeof value === 'string' || typeof value === 'number' ? String(value) : '';
            result.push({
                type: typeof value === 'string' ? PART_TYPE.literal : PART_TYPE.object,
                value: value
            });
            continue;
        }
        // Recursively format plural and select parts' option — which can be a
        // nested pattern structure. The choosing of the option to use is
        // abstracted-by and delegated-to the part helper object.
        if (icu_messageformat_parser_1.isDateElement(el)) {
            var style = typeof el.style === 'string' ? formats.date[el.style] : icu_messageformat_parser_1.isDateTimeSkeleton(el.style) ? el.style.parsedOptions : undefined;
            result.push({
                type: PART_TYPE.literal,
                value: formatters.getDateTimeFormat(locales, style).format(value)
            });
            continue;
        }
        if (icu_messageformat_parser_1.isTimeElement(el)) {
            var style = typeof el.style === 'string' ? formats.time[el.style] : icu_messageformat_parser_1.isDateTimeSkeleton(el.style) ? el.style.parsedOptions : undefined;
            result.push({
                type: PART_TYPE.literal,
                value: formatters.getDateTimeFormat(locales, style).format(value)
            });
            continue;
        }
        if (icu_messageformat_parser_1.isNumberElement(el)) {
            var style = typeof el.style === 'string' ? formats.number[el.style] : icu_messageformat_parser_1.isNumberSkeleton(el.style) ? el.style.parsedOptions : undefined;
            if (style && style.scale) value = value * (style.scale || 1);
            result.push({
                type: PART_TYPE.literal,
                value: formatters.getNumberFormat(locales, style).format(value)
            });
            continue;
        }
        if (icu_messageformat_parser_1.isTagElement(el)) {
            var children = el.children, value_1 = el.value;
            var formatFn = values[value_1];
            if (!isFormatXMLElementFn(formatFn)) throw new error_1.InvalidValueTypeError(value_1, 'function', originalMessage);
            var parts = formatToParts(children, locales, formatters, formats, values, currentPluralValue);
            var chunks = formatFn(parts.map(function(p) {
                return p.value;
            }));
            if (!Array.isArray(chunks)) chunks = [
                chunks
            ];
            result.push.apply(result, chunks.map(function(c) {
                return {
                    type: typeof c === 'string' ? PART_TYPE.literal : PART_TYPE.object,
                    value: c
                };
            }));
        }
        if (icu_messageformat_parser_1.isSelectElement(el)) {
            var opt = el.options[value] || el.options.other;
            if (!opt) throw new error_1.InvalidValueError(el.value, value, Object.keys(el.options), originalMessage);
            result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values));
            continue;
        }
        if (icu_messageformat_parser_1.isPluralElement(el)) {
            var opt = el.options["=" + value];
            if (!opt) {
                if (!Intl.PluralRules) throw new error_1.FormatError("Intl.PluralRules is not available in this environment.\nTry polyfilling it using \"@formatjs/intl-pluralrules\"\n", error_1.ErrorCode.MISSING_INTL_API, originalMessage);
                var rule = formatters.getPluralRules(locales, {
                    type: el.pluralType
                }).select(value - (el.offset || 0));
                opt = el.options[rule] || el.options.other;
            }
            if (!opt) throw new error_1.InvalidValueError(el.value, value, Object.keys(el.options), originalMessage);
            result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values, value - (el.offset || 0)));
            continue;
        }
    }
    return mergeLiteral(result);
}
exports.formatToParts = formatToParts;

},{"@formatjs/icu-messageformat-parser":"3YaYk","./error":"6V4W8"}],"6V4W8":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MissingValueError = exports.InvalidValueTypeError = exports.InvalidValueError = exports.FormatError = exports.ErrorCode = void 0;
var tslib_1 = require("tslib");
var ErrorCode;
(function(ErrorCode1) {
    // When we have a placeholder but no value to format
    ErrorCode1["MISSING_VALUE"] = "MISSING_VALUE";
    // When value supplied is invalid
    ErrorCode1["INVALID_VALUE"] = "INVALID_VALUE";
    // When we need specific Intl API but it's not available
    ErrorCode1["MISSING_INTL_API"] = "MISSING_INTL_API";
})(ErrorCode = exports.ErrorCode || (exports.ErrorCode = {
}));
var FormatError1 = function(_super) {
    tslib_1.__extends(FormatError2, _super);
    function FormatError2(msg, code, originalMessage) {
        var _this = _super.call(this, msg) || this;
        _this.code = code;
        _this.originalMessage = originalMessage;
        return _this;
    }
    FormatError2.prototype.toString = function() {
        return "[formatjs Error: " + this.code + "] " + this.message;
    };
    return FormatError2;
}(Error);
exports.FormatError = FormatError1;
var InvalidValueError1 = function(_super) {
    tslib_1.__extends(InvalidValueError2, _super);
    function InvalidValueError2(variableId, value, options, originalMessage) {
        return _super.call(this, "Invalid values for \"" + variableId + "\": \"" + value + "\". Options are \"" + Object.keys(options).join('", "') + "\"", ErrorCode.INVALID_VALUE, originalMessage) || this;
    }
    return InvalidValueError2;
}(FormatError1);
exports.InvalidValueError = InvalidValueError1;
var InvalidValueTypeError1 = function(_super) {
    tslib_1.__extends(InvalidValueTypeError2, _super);
    function InvalidValueTypeError2(value, type, originalMessage) {
        return _super.call(this, "Value for \"" + value + "\" must be of type " + type, ErrorCode.INVALID_VALUE, originalMessage) || this;
    }
    return InvalidValueTypeError2;
}(FormatError1);
exports.InvalidValueTypeError = InvalidValueTypeError1;
var MissingValueError1 = function(_super) {
    tslib_1.__extends(MissingValueError2, _super);
    function MissingValueError2(variableId, originalMessage) {
        return _super.call(this, "The intl string context variable \"" + variableId + "\" was not provided to the string \"" + originalMessage + "\"", ErrorCode.MISSING_VALUE, originalMessage) || this;
    }
    return MissingValueError2;
}(FormatError1);
exports.MissingValueError = MissingValueError1;

},{"tslib":"2jo9c"}],"Pnsqr":[function(require,module,exports) {
var _react2 = require("react");
var _react = $parcel$interopDefault(_react2);
var { useContext , useLayoutEffect , useMemo , useState  } = _react2;
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
// Default context value to use in case there is no SSRProvider. This is fine for
// client-only apps. In order to support multiple copies of React Aria potentially
// being on the page at once, the prefix is set to a random number. SSRProvider
// will reset this to zero for consistency between server and client, so in the
// SSR case multiple copies of React Aria is not supported.
const $e873f27652f6cc1e1ee5ebcb9b5e51$var$defaultContext = {
    prefix: Math.round(Math.random() * 10000000000),
    current: 0
};
const $e873f27652f6cc1e1ee5ebcb9b5e51$var$SSRContext = /*#__PURE__*/ _react.createContext($e873f27652f6cc1e1ee5ebcb9b5e51$var$defaultContext);
/**
 * When using SSR with React Aria, applications must be wrapped in an SSRProvider.
 * This ensures that auto generated ids are consistent between the client and server.
 */ function SSRProvider(props) {
    let cur = useContext($e873f27652f6cc1e1ee5ebcb9b5e51$var$SSRContext);
    let value = useMemo(()=>({
            // If this is the first SSRProvider, set to zero, otherwise increment.
            prefix: cur === $e873f27652f6cc1e1ee5ebcb9b5e51$var$defaultContext ? 0 : ++cur.prefix,
            current: 0
        })
    , [
        cur
    ]);
    return(/*#__PURE__*/ _react.createElement($e873f27652f6cc1e1ee5ebcb9b5e51$var$SSRContext.Provider, {
        value: value
    }, props.children));
}
exports.SSRProvider = SSRProvider;
let $e873f27652f6cc1e1ee5ebcb9b5e51$var$canUseDOM = Boolean(typeof window !== 'undefined' && window.document && window.document.createElement);
/** @private */ function useSSRSafeId(defaultId) {
    let ctx = useContext($e873f27652f6cc1e1ee5ebcb9b5e51$var$SSRContext); // If we are rendering in a non-DOM environment, and there's no SSRProvider,
    // provide a warning to hint to the developer to add one.
    if (ctx === $e873f27652f6cc1e1ee5ebcb9b5e51$var$defaultContext && !$e873f27652f6cc1e1ee5ebcb9b5e51$var$canUseDOM) console.warn('When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.');
    return useMemo(()=>defaultId || "react-aria-" + ctx.prefix + "-" + ++ctx.current
    , [
        defaultId
    ]);
}
/**
 * Returns whether the component is currently being server side rendered or
 * hydrated on the client. Can be used to delay browser-specific rendering
 * until after hydration.
 */ exports.useSSRSafeId = useSSRSafeId;
function useIsSSR() {
    let cur = useContext($e873f27652f6cc1e1ee5ebcb9b5e51$var$SSRContext);
    let isInSSRContext = cur !== $e873f27652f6cc1e1ee5ebcb9b5e51$var$defaultContext;
    let [isSSR, setIsSSR] = useState(isInSSRContext); // If on the client, and the component was initially server rendered,
    // then schedule a layout effect to update the component after hydration.
    if (typeof window !== 'undefined' && isInSSRContext) // This if statement technically breaks the rules of hooks, but is safe
    // because the condition never changes after mounting.
    // eslint-disable-next-line react-hooks/rules-of-hooks
    useLayoutEffect(()=>{
        setIsSSR(false);
    }, []);
    return isSSR;
}
exports.useIsSSR = useIsSSR;

},{"react":"a6qBW"}],"d8qxy":[function(require,module,exports) {
var { clamp , snapValueToStep  } = require("@react-stately/utils");
exports.snapValueToStep = snapValueToStep;
exports.clamp = clamp;
var _clsx = $parcel$interopDefault(require("clsx"));
var { useSSRSafeId  } = require("@react-aria/ssr");
var _react2 = require("react");
var _react = $parcel$interopDefault(_react2);
var { useEffect , useRef , useState , useCallback , useLayoutEffect: _useLayoutEffect  } = _react2;
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
// During SSR, React emits a warning when calling useLayoutEffect.
// Since neither useLayoutEffect nor useEffect run on the server,
// we can suppress this by replace it with a noop on the server.
const useLayoutEffect = typeof window !== 'undefined' ? _react.useLayoutEffect : ()=>{
};
exports.useLayoutEffect = useLayoutEffect;
let $f09fcd7f5f367fc80aacfeac62ed2$var$idsUpdaterMap = new Map();
/**
 * If a default is not provided, generate an id.
 * @param defaultId - Default component id.
 */ function useId(defaultId) {
    let isRendering = useRef(true);
    isRendering.current = true;
    let [value, setValue] = useState(defaultId);
    let nextId = useRef(null); // don't memo this, we want it new each render so that the Effects always run
    let updateValue = (val)=>{
        if (!isRendering.current) setValue(val);
        else nextId.current = val;
    };
    useLayoutEffect(()=>{
        isRendering.current = false;
    }, [
        updateValue
    ]);
    useEffect(()=>{
        let newId = nextId.current;
        if (newId) {
            setValue(newId);
            nextId.current = null;
        }
    }, [
        setValue,
        updateValue
    ]);
    let res = useSSRSafeId(value);
    $f09fcd7f5f367fc80aacfeac62ed2$var$idsUpdaterMap.set(res, updateValue);
    return res;
}
/**
 * Merges two ids.
 * Different ids will trigger a side-effect and re-render components hooked up with `useId`.
 */ exports.useId = useId;
function mergeIds(idA, idB) {
    if (idA === idB) return idA;
    let setIdA = $f09fcd7f5f367fc80aacfeac62ed2$var$idsUpdaterMap.get(idA);
    if (setIdA) {
        setIdA(idB);
        return idB;
    }
    let setIdB = $f09fcd7f5f367fc80aacfeac62ed2$var$idsUpdaterMap.get(idB);
    if (setIdB) {
        setIdB(idA);
        return idA;
    }
    return idB;
}
/**
 * Used to generate an id, and after render, check if that id is rendered so we know
 * if we can use it in places such as labelledby.
 */ exports.mergeIds = mergeIds;
function useSlotId() {
    let [id, setId] = useState(useId());
    useLayoutEffect(()=>{
        let setCurr = $f09fcd7f5f367fc80aacfeac62ed2$var$idsUpdaterMap.get(id);
        if (setCurr && !document.getElementById(id)) setId(null);
    }, [
        id
    ]);
    return id;
}
exports.useSlotId = useSlotId;
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /**
 * Calls all functions in the order they were chained with the same arguments.
 */ function chain() {
    for(var _len = arguments.length, callbacks = new Array(_len), _key = 0; _key < _len; _key++)callbacks[_key] = arguments[_key];
    return function() {
        for (let callback of callbacks)if (typeof callback === 'function') callback(...arguments);
    };
}
exports.chain = chain;
/**
 * Merges multiple props objects together. Event handlers are chained,
 * classNames are combined, and ids are deduplicated - different ids
 * will trigger a side-effect and re-render components hooked up with `useId`.
 * For all other props, the last prop object overrides all previous ones.
 * @param args - Multiple sets of props to merge together.
 */ function mergeProps() {
    let result = {
    };
    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
    for (let props of args){
        for(let key in result){
            // Chain events
            if (/^on[A-Z]/.test(key) && typeof result[key] === 'function' && typeof props[key] === 'function') result[key] = chain(result[key], props[key]); // Merge classnames, sometimes classNames are empty string which eval to false, so we just need to do a type check
            else if (key === 'className' && typeof result.className === 'string' && typeof props.className === 'string') result[key] = _clsx(result.className, props.className);
            else if (key === 'UNSAFE_className' && typeof result.UNSAFE_className === 'string' && typeof props.UNSAFE_className === 'string') result[key] = _clsx(result.UNSAFE_className, props.UNSAFE_className);
            else if (key === 'id' && result.id && props.id) result.id = mergeIds(result.id, props.id); // Override others
            else result[key] = props[key] !== undefined ? props[key] : result[key];
        } // Add props from b that are not in a
        for(let key1 in props)if (result[key1] === undefined) result[key1] = props[key1];
    }
    return result;
}
exports.mergeProps = mergeProps;
const $a736ffc3e05a0bfc1508098ba395b41$var$DOMPropNames = new Set([
    'id'
]);
const $a736ffc3e05a0bfc1508098ba395b41$var$labelablePropNames = new Set([
    'aria-label',
    'aria-labelledby',
    'aria-describedby',
    'aria-details'
]);
const $a736ffc3e05a0bfc1508098ba395b41$var$propRe = /^(data-.*)$/;
/**
 * Filters out all props that aren't valid DOM props or defined via override prop obj.
 * @param props - The component props to be filtered.
 * @param opts - Props to override.
 */ function filterDOMProps(props, opts) {
    if (opts === void 0) opts = {
    };
    let { labelable , propNames  } = opts;
    let filteredProps = {
    };
    for(const prop in props)if (Object.prototype.hasOwnProperty.call(props, prop) && ($a736ffc3e05a0bfc1508098ba395b41$var$DOMPropNames.has(prop) || labelable && $a736ffc3e05a0bfc1508098ba395b41$var$labelablePropNames.has(prop) || propNames != null && propNames.has(prop) || $a736ffc3e05a0bfc1508098ba395b41$var$propRe.test(prop))) filteredProps[prop] = props[prop];
    return filteredProps;
}
exports.filterDOMProps = filterDOMProps;
// Currently necessary for Safari and old Edge:
// https://caniuse.com/#feat=mdn-api_htmlelement_focus_preventscroll_option
// See https://bugs.webkit.org/show_bug.cgi?id=178583
//
// Original licensing for the following methods can be found in the
// NOTICE file in the root directory of this source tree.
// See https://github.com/calvellido/focus-options-polyfill
function focusWithoutScrolling(element) {
    if ($d2a175ba498dd7834499f256dfb330bc$var$supportsPreventScroll()) element.focus({
        preventScroll: true
    });
    else {
        let scrollableElements = $d2a175ba498dd7834499f256dfb330bc$var$getScrollableElements(element);
        element.focus();
        $d2a175ba498dd7834499f256dfb330bc$var$restoreScrollPosition(scrollableElements);
    }
}
exports.focusWithoutScrolling = focusWithoutScrolling;
let $d2a175ba498dd7834499f256dfb330bc$var$supportsPreventScrollCached = null;
function $d2a175ba498dd7834499f256dfb330bc$var$supportsPreventScroll() {
    if ($d2a175ba498dd7834499f256dfb330bc$var$supportsPreventScrollCached == null) {
        $d2a175ba498dd7834499f256dfb330bc$var$supportsPreventScrollCached = false;
        try {
            var focusElem = document.createElement('div');
            focusElem.focus({
                get preventScroll () {
                    $d2a175ba498dd7834499f256dfb330bc$var$supportsPreventScrollCached = true;
                    return true;
                }
            });
        } catch (e) {
        }
    }
    return $d2a175ba498dd7834499f256dfb330bc$var$supportsPreventScrollCached;
}
function $d2a175ba498dd7834499f256dfb330bc$var$getScrollableElements(element) {
    var parent = element.parentNode;
    var scrollableElements = [];
    var rootScrollingElement = document.scrollingElement || document.documentElement;
    while(parent instanceof HTMLElement && parent !== rootScrollingElement){
        if (parent.offsetHeight < parent.scrollHeight || parent.offsetWidth < parent.scrollWidth) scrollableElements.push({
            element: parent,
            scrollTop: parent.scrollTop,
            scrollLeft: parent.scrollLeft
        });
        parent = parent.parentNode;
    }
    if (rootScrollingElement instanceof HTMLElement) scrollableElements.push({
        element: rootScrollingElement,
        scrollTop: rootScrollingElement.scrollTop,
        scrollLeft: rootScrollingElement.scrollLeft
    });
    return scrollableElements;
}
function $d2a175ba498dd7834499f256dfb330bc$var$restoreScrollPosition(scrollableElements) {
    for (let { element , scrollTop , scrollLeft  } of scrollableElements){
        element.scrollTop = scrollTop;
        element.scrollLeft = scrollLeft;
    }
}
function getOffset(element, reverse, orientation) {
    if (orientation === void 0) orientation = 'horizontal';
    let rect = element.getBoundingClientRect();
    if (reverse) return orientation === 'horizontal' ? rect.right : rect.bottom;
    return orientation === 'horizontal' ? rect.left : rect.top;
}
exports.getOffset = getOffset;
// mapped to a set of CSS properties that are transitioning for that element.
// This is necessary rather than a simple count of transitions because of browser
// bugs, e.g. Chrome sometimes fires both transitionend and transitioncancel rather
// than one or the other. So we need to track what's actually transitioning so that
// we can ignore these duplicate events.
let $a39a8553a97349a69bcc0255658c67ab$var$transitionsByElement = new Map(); // A list of callbacks to call once there are no transitioning elements.
let $a39a8553a97349a69bcc0255658c67ab$var$transitionCallbacks = new Set();
function $a39a8553a97349a69bcc0255658c67ab$var$setupGlobalEvents() {
    if (typeof window === 'undefined') return;
    let onTransitionStart = (e)=>{
        // Add the transitioning property to the list for this element.
        let transitions = $a39a8553a97349a69bcc0255658c67ab$var$transitionsByElement.get(e.target);
        if (!transitions) {
            transitions = new Set();
            $a39a8553a97349a69bcc0255658c67ab$var$transitionsByElement.set(e.target, transitions); // The transitioncancel event must be registered on the element itself, rather than as a global
            // event. This enables us to handle when the node is deleted from the document while it is transitioning.
            // In that case, the cancel event would have nowhere to bubble to so we need to handle it directly.
            e.target.addEventListener('transitioncancel', onTransitionEnd);
        }
        transitions.add(e.propertyName);
    };
    let onTransitionEnd = (e)=>{
        // Remove property from list of transitioning properties.
        let properties = $a39a8553a97349a69bcc0255658c67ab$var$transitionsByElement.get(e.target);
        if (!properties) return;
        properties.delete(e.propertyName); // If empty, remove transitioncancel event, and remove the element from the list of transitioning elements.
        if (properties.size === 0) {
            e.target.removeEventListener('transitioncancel', onTransitionEnd);
            $a39a8553a97349a69bcc0255658c67ab$var$transitionsByElement.delete(e.target);
        } // If no transitioning elements, call all of the queued callbacks.
        if ($a39a8553a97349a69bcc0255658c67ab$var$transitionsByElement.size === 0) {
            for (let cb of $a39a8553a97349a69bcc0255658c67ab$var$transitionCallbacks)cb();
            $a39a8553a97349a69bcc0255658c67ab$var$transitionCallbacks.clear();
        }
    };
    document.body.addEventListener('transitionrun', onTransitionStart);
    document.body.addEventListener('transitionend', onTransitionEnd);
}
if (typeof document !== 'undefined') {
    if (document.readyState !== 'loading') $a39a8553a97349a69bcc0255658c67ab$var$setupGlobalEvents();
    else document.addEventListener('DOMContentLoaded', $a39a8553a97349a69bcc0255658c67ab$var$setupGlobalEvents);
}
function runAfterTransition(fn) {
    // Wait one frame to see if an animation starts, e.g. a transition on mount.
    requestAnimationFrame(()=>{
        // If no transitions are running, call the function immediately.
        // Otherwise, add it to a list of callbacks to run at the end of the animation.
        if ($a39a8553a97349a69bcc0255658c67ab$var$transitionsByElement.size === 0) fn();
        else $a39a8553a97349a69bcc0255658c67ab$var$transitionCallbacks.add(fn);
    });
}
exports.runAfterTransition = runAfterTransition;
// Keep track of elements that we are currently handling dragging for via useDrag1D.
// If there's an ancestor and a descendant both using useDrag1D(), and the user starts
// dragging the descendant, we don't want useDrag1D events to fire for the ancestor.
const $f9e3d2838685addd749dc9b533488cd5$var$draggingElements = []; // created for splitview, this should be reusable for things like sliders/dials
// It also handles keyboard events on the target allowing for increment/decrement by a given stepsize as well as minifying/maximizing and toggling between minified and previous size
// It can also take a 'reverse' param to say if we should measure from the right/bottom instead of the top/left
// It can also handle either a vertical or horizontal movement, but not both at the same time
function useDrag1D(props) {
    console.warn('useDrag1D is deprecated, please use `useMove` instead https://react-spectrum.adobe.com/react-aria/useMove.html');
    let { containerRef , reverse , orientation , onHover , onDrag , onPositionChange , onIncrement , onDecrement , onIncrementToMax , onDecrementToMin , onCollapseToggle  } = props;
    let getPosition = (e)=>orientation === 'horizontal' ? e.clientX : e.clientY
    ;
    let getNextOffset = (e)=>{
        let containerOffset = getOffset(containerRef.current, reverse, orientation);
        let mouseOffset = getPosition(e);
        let nextOffset = reverse ? containerOffset - mouseOffset : mouseOffset - containerOffset;
        return nextOffset;
    };
    let dragging = useRef(false);
    let prevPosition = useRef(0); // Keep track of the current handlers in a ref so that the events can access them.
    let handlers = useRef({
        onPositionChange,
        onDrag
    });
    handlers.current.onDrag = onDrag;
    handlers.current.onPositionChange = onPositionChange;
    let onMouseDragged = (e)=>{
        e.preventDefault();
        let nextOffset = getNextOffset(e);
        if (!dragging.current) {
            dragging.current = true;
            if (handlers.current.onDrag) handlers.current.onDrag(true);
            if (handlers.current.onPositionChange) handlers.current.onPositionChange(nextOffset);
        }
        if (prevPosition.current === nextOffset) return;
        prevPosition.current = nextOffset;
        if (onPositionChange) onPositionChange(nextOffset);
    };
    let onMouseUp = (e)=>{
        const target = e.target;
        dragging.current = false;
        let nextOffset = getNextOffset(e);
        if (handlers.current.onDrag) handlers.current.onDrag(false);
        if (handlers.current.onPositionChange) handlers.current.onPositionChange(nextOffset);
        $f9e3d2838685addd749dc9b533488cd5$var$draggingElements.splice($f9e3d2838685addd749dc9b533488cd5$var$draggingElements.indexOf(target), 1);
        window.removeEventListener('mouseup', onMouseUp, false);
        window.removeEventListener('mousemove', onMouseDragged, false);
    };
    let onMouseDown = (e)=>{
        const target = e.currentTarget; // If we're already handling dragging on a descendant with useDrag1D, then
        // we don't want to handle the drag motion on this target as well.
        if ($f9e3d2838685addd749dc9b533488cd5$var$draggingElements.some((elt)=>target.contains(elt)
        )) return;
        $f9e3d2838685addd749dc9b533488cd5$var$draggingElements.push(target);
        window.addEventListener('mousemove', onMouseDragged, false);
        window.addEventListener('mouseup', onMouseUp, false);
    };
    let onMouseEnter = ()=>{
        if (onHover) onHover(true);
    };
    let onMouseOut = ()=>{
        if (onHover) onHover(false);
    };
    let onKeyDown = (e)=>{
        switch(e.key){
            case 'Left':
            case 'ArrowLeft':
                if (orientation === 'horizontal') {
                    e.preventDefault();
                    if (onDecrement && !reverse) onDecrement();
                    else if (onIncrement && reverse) onIncrement();
                }
                break;
            case 'Up':
            case 'ArrowUp':
                if (orientation === 'vertical') {
                    e.preventDefault();
                    if (onDecrement && !reverse) onDecrement();
                    else if (onIncrement && reverse) onIncrement();
                }
                break;
            case 'Right':
            case 'ArrowRight':
                if (orientation === 'horizontal') {
                    e.preventDefault();
                    if (onIncrement && !reverse) onIncrement();
                    else if (onDecrement && reverse) onDecrement();
                }
                break;
            case 'Down':
            case 'ArrowDown':
                if (orientation === 'vertical') {
                    e.preventDefault();
                    if (onIncrement && !reverse) onIncrement();
                    else if (onDecrement && reverse) onDecrement();
                }
                break;
            case 'Home':
                e.preventDefault();
                if (onDecrementToMin) onDecrementToMin();
                break;
            case 'End':
                e.preventDefault();
                if (onIncrementToMax) onIncrementToMax();
                break;
            case 'Enter':
                e.preventDefault();
                if (onCollapseToggle) onCollapseToggle();
                break;
        }
    };
    return {
        onMouseDown,
        onMouseEnter,
        onMouseOut,
        onKeyDown
    };
}
exports.useDrag1D = useDrag1D;
function useGlobalListeners() {
    let globalListeners = useRef(new Map());
    let addGlobalListener = useCallback((eventTarget, type, listener, options)=>{
        globalListeners.current.set(listener, {
            type,
            eventTarget,
            options
        });
        eventTarget.addEventListener(type, listener, options);
    }, []);
    let removeGlobalListener = useCallback((eventTarget, type, listener, options)=>{
        eventTarget.removeEventListener(type, listener, options);
        globalListeners.current.delete(listener);
    }, []);
    let removeAllGlobalListeners = useCallback(()=>{
        globalListeners.current.forEach((value, key)=>{
            removeGlobalListener(value.eventTarget, value.type, key, value.options);
        });
    }, [
        removeGlobalListener
    ]); // eslint-disable-next-line arrow-body-style
    useEffect(()=>{
        return removeAllGlobalListeners;
    }, [
        removeAllGlobalListeners
    ]);
    return {
        addGlobalListener,
        removeGlobalListener,
        removeAllGlobalListeners
    };
}
exports.useGlobalListeners = useGlobalListeners;
/**
 * Merges aria-label and aria-labelledby into aria-labelledby when both exist.
 * @param props - Aria label props.
 * @param defaultLabel - Default value for aria-label when not present.
 */ function useLabels(props, defaultLabel) {
    let { id , 'aria-label': label , 'aria-labelledby': labelledBy  } = props; // If there is both an aria-label and aria-labelledby,
    // combine them by pointing to the element itself.
    id = useId(id);
    if (labelledBy && label) {
        let ids = new Set([
            ...labelledBy.trim().split(/\s+/),
            id
        ]);
        labelledBy = [
            ...ids
        ].join(' ');
    } else if (labelledBy) labelledBy = labelledBy.trim().split(/\s+/).join(' ');
     // If no labels are provided, use the default
    if (!label && !labelledBy && defaultLabel) label = defaultLabel;
    return {
        id,
        'aria-label': label,
        'aria-labelledby': labelledBy
    };
}
exports.useLabels = useLabels;
// Like useEffect, but only called for updates after the initial render.
function useUpdateEffect(effect, dependencies) {
    const isInitialMount = useRef(true);
    useEffect(()=>{
        if (isInitialMount.current) isInitialMount.current = false;
        else effect();
         // eslint-disable-next-line react-hooks/exhaustive-deps
    }, dependencies);
}
exports.useUpdateEffect = useUpdateEffect;
function $f58f1969071f2661185e38312efabfc$var$hasResizeObserver() {
    return typeof window.ResizeObserver !== 'undefined';
}
function useResizeObserver(options) {
    const { ref , onResize  } = options;
    useEffect(()=>{
        let element = ref == null ? void 0 : ref.current;
        if (!element) return;
        if (!$f58f1969071f2661185e38312efabfc$var$hasResizeObserver()) {
            window.addEventListener('resize', onResize, false);
            return ()=>{
                window.removeEventListener('resize', onResize, false);
            };
        } else {
            const resizeObserverInstance = new window.ResizeObserver((entries)=>{
                if (!entries.length) return;
                onResize();
            });
            resizeObserverInstance.observe(element);
            return ()=>{
                if (element) resizeObserverInstance.unobserve(element);
            };
        }
    }, [
        onResize,
        ref
    ]);
}
exports.useResizeObserver = useResizeObserver;
// Syncs ref from context with ref passed to hook
function useSyncRef(context, ref) {
    useLayoutEffect(()=>{
        if (context && context.ref && ref) {
            context.ref.current = ref.current;
            return ()=>{
                context.ref.current = null;
            };
        }
    }, [
        context,
        ref
    ]);
}
exports.useSyncRef = useSyncRef;
function getScrollParent(node) {
    while(node && !$e9be933e81f272fbb0513fcc706c7$var$isScrollable(node))node = node.parentElement;
    return node || document.scrollingElement || document.documentElement;
}
exports.getScrollParent = getScrollParent;
function $e9be933e81f272fbb0513fcc706c7$var$isScrollable(node) {
    let style = window.getComputedStyle(node);
    return /(auto|scroll)/.test(style.overflow + style.overflowX + style.overflowY);
}
// @ts-ignore
let $f1a92c0e19f2e1ad09851454bf93009$var$visualViewport = typeof window !== 'undefined' && window.visualViewport;
function useViewportSize() {
    let [size, setSize] = useState(()=>$f1a92c0e19f2e1ad09851454bf93009$var$getViewportSize()
    );
    useEffect(()=>{
        // Use visualViewport api to track available height even on iOS virtual keyboard opening
        let onResize = ()=>{
            setSize((size1)=>{
                let newSize = $f1a92c0e19f2e1ad09851454bf93009$var$getViewportSize();
                if (newSize.width === size1.width && newSize.height === size1.height) return size1;
                return newSize;
            });
        };
        if (!$f1a92c0e19f2e1ad09851454bf93009$var$visualViewport) window.addEventListener('resize', onResize);
        else $f1a92c0e19f2e1ad09851454bf93009$var$visualViewport.addEventListener('resize', onResize);
        return ()=>{
            if (!$f1a92c0e19f2e1ad09851454bf93009$var$visualViewport) window.removeEventListener('resize', onResize);
            else $f1a92c0e19f2e1ad09851454bf93009$var$visualViewport.removeEventListener('resize', onResize);
        };
    }, []);
    return size;
}
exports.useViewportSize = useViewportSize;
function $f1a92c0e19f2e1ad09851454bf93009$var$getViewportSize() {
    return {
        width: ($f1a92c0e19f2e1ad09851454bf93009$var$visualViewport == null ? void 0 : $f1a92c0e19f2e1ad09851454bf93009$var$visualViewport.width) || window.innerWidth,
        height: ($f1a92c0e19f2e1ad09851454bf93009$var$visualViewport == null ? void 0 : $f1a92c0e19f2e1ad09851454bf93009$var$visualViewport.height) || window.innerHeight
    };
}
let $bd5928122fc632cc7302c36df9f$var$descriptionId = 0;
const $bd5928122fc632cc7302c36df9f$var$descriptionNodes = new Map();
function useDescription(description) {
    let [id, setId] = useState(null);
    _useLayoutEffect(()=>{
        if (!description) return;
        let desc = $bd5928122fc632cc7302c36df9f$var$descriptionNodes.get(description);
        if (!desc) {
            let id1 = "react-aria-description-" + $bd5928122fc632cc7302c36df9f$var$descriptionId++;
            setId(id1);
            let node = document.createElement('div');
            node.id = id1;
            node.style.display = 'none';
            node.textContent = description;
            document.body.appendChild(node);
            desc = {
                refCount: 0,
                element: node
            };
            $bd5928122fc632cc7302c36df9f$var$descriptionNodes.set(description, desc);
        } else setId(desc.element.id);
        desc.refCount++;
        return ()=>{
            if ((--desc.refCount) === 0) {
                desc.element.remove();
                $bd5928122fc632cc7302c36df9f$var$descriptionNodes.delete(description);
            }
        };
    }, [
        description
    ]);
    return {
        'aria-describedby': description ? id : undefined
    };
}
exports.useDescription = useDescription;
function $ffc9ede5fda79bf280c1bec834e32f$var$testUserAgent(re) {
    return typeof window !== 'undefined' && window.navigator != null ? re.test(window.navigator.userAgent) : false;
}
function $ffc9ede5fda79bf280c1bec834e32f$var$testPlatform(re) {
    return typeof window !== 'undefined' && window.navigator != null ? re.test(window.navigator.platform) : false;
}
function isMac() {
    return $ffc9ede5fda79bf280c1bec834e32f$var$testPlatform(/^Mac/);
}
exports.isMac = isMac;
function isIPhone() {
    return $ffc9ede5fda79bf280c1bec834e32f$var$testPlatform(/^iPhone/);
}
exports.isIPhone = isIPhone;
function isIPad() {
    return $ffc9ede5fda79bf280c1bec834e32f$var$testPlatform(/^iPad/) || isMac() && navigator.maxTouchPoints > 1;
}
exports.isIPad = isIPad;
function isIOS() {
    return isIPhone() || isIPad();
}
exports.isIOS = isIOS;
function isAppleDevice() {
    return isMac() || isIOS();
}
exports.isAppleDevice = isAppleDevice;
function isWebKit() {
    return $ffc9ede5fda79bf280c1bec834e32f$var$testUserAgent(/AppleWebKit/) && !isChrome();
}
exports.isWebKit = isWebKit;
function isChrome() {
    return $ffc9ede5fda79bf280c1bec834e32f$var$testUserAgent(/Chrome/);
}
exports.isChrome = isChrome;
function isAndroid() {
    return $ffc9ede5fda79bf280c1bec834e32f$var$testUserAgent(/Android/);
}
exports.isAndroid = isAndroid;

},{"@react-stately/utils":"7ILZk","clsx":"54v82","@react-aria/ssr":"Pnsqr","react":"a6qBW"}],"7ILZk":[function(require,module,exports) {
var { useCallback , useRef , useState  } = require("react");
function useControlledState(value, defaultValue, onChange) {
    let [stateValue, setStateValue] = useState(value || defaultValue);
    let ref = useRef(value !== undefined);
    let wasControlled = ref.current;
    let isControlled = value !== undefined; // Internal state reference for useCallback
    let stateRef = useRef(stateValue);
    if (wasControlled !== isControlled) console.warn("WARN: A component changed from " + (wasControlled ? 'controlled' : 'uncontrolled') + " to " + (isControlled ? 'controlled' : 'uncontrolled') + ".");
    ref.current = isControlled;
    let setValue = useCallback(function(value1) {
        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
        let onChangeCaller = function onChangeCaller1(value2) {
            if (onChange) {
                if (!Object.is(stateRef.current, value2)) {
                    for(var _len2 = arguments.length, onChangeArgs = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)onChangeArgs[_key2 - 1] = arguments[_key2];
                    onChange(value2, ...onChangeArgs);
                }
            }
            if (!isControlled) stateRef.current = value2;
        };
        if (typeof value1 === 'function') {
            // this supports functional updates https://reactjs.org/docs/hooks-reference.html#functional-updates
            // when someone using useControlledState calls setControlledState(myFunc)
            // this will call our useState setState with a function as well which invokes myFunc and calls onChange with the value from myFunc
            // if we're in an uncontrolled state, then we also return the value of myFunc which to setState looks as though it was just called with myFunc from the beginning
            // otherwise we just return the controlled value, which won't cause a rerender because React knows to bail out when the value is the same
            let updateFunction = function updateFunction1(oldValue) {
                for(var _len3 = arguments.length, functionArgs = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++)functionArgs[_key3 - 1] = arguments[_key3];
                let interceptedValue = value1(isControlled ? stateRef.current : oldValue, ...functionArgs);
                onChangeCaller(interceptedValue, ...args);
                if (!isControlled) return interceptedValue;
                return oldValue;
            };
            setStateValue(updateFunction);
        } else {
            if (!isControlled) setStateValue(value1);
            onChangeCaller(value1, ...args);
        }
    }, [
        isControlled,
        onChange
    ]); // If a controlled component's value prop changes, we need to update stateRef
    if (isControlled) stateRef.current = value;
    else value = stateValue;
    return [
        value,
        setValue
    ];
}
exports.useControlledState = useControlledState;
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /**
 * Takes a value and forces it to the closest min/max if it's outside. Also forces it to the closest valid step.
 */ function clamp(value, min, max) {
    if (min === void 0) min = -Infinity;
    if (max === void 0) max = Infinity;
    let newValue = Math.min(Math.max(value, min), max);
    return newValue;
}
exports.clamp = clamp;
function snapValueToStep(value, min, max, step) {
    let remainder = (value - (isNaN(min) ? 0 : min)) % step;
    let snappedValue = Math.abs(remainder) * 2 >= step ? value + Math.sign(remainder) * (step - Math.abs(remainder)) : value - remainder;
    if (!isNaN(min)) {
        if (snappedValue < min) snappedValue = min;
        else if (!isNaN(max) && snappedValue > max) snappedValue = min + Math.floor((max - min) / step) * step;
    } else if (!isNaN(max) && snappedValue > max) snappedValue = Math.floor(max / step) * step;
     // correct floating point behavior by rounding to step precision
    let string = step.toString();
    let index = string.indexOf('.');
    let precision = index >= 0 ? string.length - index : 0;
    if (precision > 0) {
        let pow = Math.pow(10, precision);
        snappedValue = Math.round(snappedValue * pow) / pow;
    }
    return snappedValue;
}
exports.snapValueToStep = snapValueToStep;

},{"react":"a6qBW"}],"54v82":[function(require,module,exports) {
function toVal(mix) {
    var k, y, str = '';
    if (typeof mix === 'string' || typeof mix === 'number') str += mix;
    else if (typeof mix === 'object') {
        if (Array.isArray(mix)) for(k = 0; k < mix.length; k++){
            if (mix[k]) {
                if (y = toVal(mix[k])) {
                    str && (str += ' ');
                    str += y;
                }
            }
        }
        else {
            for(k in mix)if (mix[k]) {
                str && (str += ' ');
                str += k;
            }
        }
    }
    return str;
}
module.exports = function() {
    var i = 0, tmp, x, str = '';
    while(i < arguments.length){
        if (tmp = arguments[i++]) {
            if (x = toVal(tmp)) {
                str && (str += ' ');
                str += x;
            }
        }
    }
    return str;
};

},{}],"76fMY":[function(require,module,exports) {
var _babelRuntimeHelpersObjectWithoutPropertiesLoose = $parcel$interopDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _clsx = $parcel$interopDefault(require("clsx"));
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
var _react2 = require("react");
var _react = $parcel$interopDefault(_react2);
var { useContext , useEffect , useRef , useState  } = _react2;
var { getInteractionModality , isFocusVisible: _isFocusVisible , useFocus , useFocusVisibleListener , useFocusWithin , useKeyboard  } = require("@react-aria/interactions");
var { focusWithoutScrolling , runAfterTransition , useLayoutEffect , mergeProps , useSyncRef  } = require("@react-aria/utils");
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
/**
 * A utility function that focuses an element while avoiding undesired side effects such
 * as page scrolling and screen reader issues with CSS transitions.
 */ function focusSafely(element) {
    // If the user is interacting with a virtual cursor, e.g. screen reader, then
    // wait until after any animated transitions that are currently occurring on
    // the page before shifting focus. This avoids issues with VoiceOver on iOS
    // causing the page to scroll when moving focus if the element is transitioning
    // from off the screen.
    if (getInteractionModality() === 'virtual') {
        let lastFocusedElement = document.activeElement;
        runAfterTransition(()=>{
            // If focus did not move and the element is still in the document, focus it.
            if (document.activeElement === lastFocusedElement && document.contains(element)) focusWithoutScrolling(element);
        });
    } else focusWithoutScrolling(element);
}
exports.focusSafely = focusSafely;
/*
 * Copyright 2021 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ function $f5b8109741a107bfe8bf4093e29$var$isStyleVisible(element) {
    if (!(element instanceof HTMLElement) && !(element instanceof SVGElement)) return false;
    let { display , visibility  } = element.style;
    let isVisible = display !== 'none' && visibility !== 'hidden' && visibility !== 'collapse';
    if (isVisible) {
        const { getComputedStyle  } = element.ownerDocument.defaultView;
        let { display: computedDisplay , visibility: computedVisibility  } = getComputedStyle(element);
        isVisible = computedDisplay !== 'none' && computedVisibility !== 'hidden' && computedVisibility !== 'collapse';
    }
    return isVisible;
}
function $f5b8109741a107bfe8bf4093e29$var$isAttributeVisible(element, childElement) {
    return !element.hasAttribute('hidden') && (element.nodeName === 'DETAILS' && childElement && childElement.nodeName !== 'SUMMARY' ? element.hasAttribute('open') : true);
}
/**
 * Adapted from https://github.com/testing-library/jest-dom and 
 * https://github.com/vuejs/vue-test-utils-next/.
 * Licensed under the MIT License.
 * @param element - Element to evaluate for display or visibility.
 */ function $f5b8109741a107bfe8bf4093e29$export$isElementVisible(element, childElement) {
    return element.nodeName !== '#comment' && $f5b8109741a107bfe8bf4093e29$var$isStyleVisible(element) && $f5b8109741a107bfe8bf4093e29$var$isAttributeVisible(element, childElement) && (!element.parentElement || $f5b8109741a107bfe8bf4093e29$export$isElementVisible(element.parentElement, element));
}
const $bdceb2956edbee43435a9382ef97283f$var$FocusContext = /*#__PURE__*/ _react.createContext(null);
let $bdceb2956edbee43435a9382ef97283f$var$activeScope = null;
let $bdceb2956edbee43435a9382ef97283f$var$scopes = new Set(); // This is a hacky DOM-based implementation of a FocusScope until this RFC lands in React:
// https://github.com/reactjs/rfcs/pull/109
// For now, it relies on the DOM tree order rather than the React tree order, and is probably
// less optimized for performance.
/**
 * A FocusScope manages focus for its descendants. It supports containing focus inside
 * the scope, restoring focus to the previously focused element on unmount, and auto
 * focusing children on mount. It also acts as a container for a programmatic focus
 * management interface that can be used to move focus forward and back in response
 * to user events.
 */ function FocusScope(props) {
    let { children , contain , restoreFocus , autoFocus  } = props;
    let startRef = useRef();
    let endRef = useRef();
    let scopeRef = useRef([]);
    useLayoutEffect(()=>{
        // Find all rendered nodes between the sentinels and add them to the scope.
        let node = startRef.current.nextSibling;
        let nodes = [];
        while(node && node !== endRef.current){
            nodes.push(node);
            node = node.nextSibling;
        }
        scopeRef.current = nodes;
        $bdceb2956edbee43435a9382ef97283f$var$scopes.add(scopeRef);
        return ()=>{
            $bdceb2956edbee43435a9382ef97283f$var$scopes.delete(scopeRef);
        };
    }, [
        children
    ]);
    $bdceb2956edbee43435a9382ef97283f$var$useFocusContainment(scopeRef, contain);
    $bdceb2956edbee43435a9382ef97283f$var$useRestoreFocus(scopeRef, restoreFocus, contain);
    $bdceb2956edbee43435a9382ef97283f$var$useAutoFocus(scopeRef, autoFocus);
    let focusManager = $bdceb2956edbee43435a9382ef97283f$var$createFocusManagerForScope(scopeRef);
    return(/*#__PURE__*/ _react.createElement($bdceb2956edbee43435a9382ef97283f$var$FocusContext.Provider, {
        value: focusManager
    }, /*#__PURE__*/ _react.createElement("span", {
        hidden: true,
        ref: startRef
    }), children, /*#__PURE__*/ _react.createElement("span", {
        hidden: true,
        ref: endRef
    })));
}
/**
 * Returns a FocusManager interface for the parent FocusScope.
 * A FocusManager can be used to programmatically move focus within
 * a FocusScope, e.g. in response to user events like keyboard navigation.
 */ exports.FocusScope = FocusScope;
function useFocusManager() {
    return useContext($bdceb2956edbee43435a9382ef97283f$var$FocusContext);
}
exports.useFocusManager = useFocusManager;
function $bdceb2956edbee43435a9382ef97283f$var$createFocusManagerForScope(scopeRef) {
    return {
        focusNext (opts) {
            if (opts === void 0) opts = {
            };
            let scope = scopeRef.current;
            let { from , tabbable , wrap  } = opts;
            let node = from || document.activeElement;
            let sentinel = scope[0].previousElementSibling;
            let walker = getFocusableTreeWalker($bdceb2956edbee43435a9382ef97283f$var$getScopeRoot(scope), {
                tabbable
            }, scope);
            walker.currentNode = $bdceb2956edbee43435a9382ef97283f$var$isElementInScope(node, scope) ? node : sentinel;
            let nextNode = walker.nextNode();
            if (!nextNode && wrap) {
                walker.currentNode = sentinel;
                nextNode = walker.nextNode();
            }
            if (nextNode) $bdceb2956edbee43435a9382ef97283f$var$focusElement(nextNode, true);
            return nextNode;
        },
        focusPrevious (opts) {
            if (opts === void 0) opts = {
            };
            let scope = scopeRef.current;
            let { from , tabbable , wrap  } = opts;
            let node = from || document.activeElement;
            let sentinel = scope[scope.length - 1].nextElementSibling;
            let walker = getFocusableTreeWalker($bdceb2956edbee43435a9382ef97283f$var$getScopeRoot(scope), {
                tabbable
            }, scope);
            walker.currentNode = $bdceb2956edbee43435a9382ef97283f$var$isElementInScope(node, scope) ? node : sentinel;
            let previousNode = walker.previousNode();
            if (!previousNode && wrap) {
                walker.currentNode = sentinel;
                previousNode = walker.previousNode();
            }
            if (previousNode) $bdceb2956edbee43435a9382ef97283f$var$focusElement(previousNode, true);
            return previousNode;
        }
    };
}
const $bdceb2956edbee43435a9382ef97283f$var$focusableElements = [
    'input:not([disabled]):not([type=hidden])',
    'select:not([disabled])',
    'textarea:not([disabled])',
    'button:not([disabled])',
    'a[href]',
    'area[href]',
    'summary',
    'iframe',
    'object',
    'embed',
    'audio[controls]',
    'video[controls]',
    '[contenteditable]'
];
const $bdceb2956edbee43435a9382ef97283f$var$FOCUSABLE_ELEMENT_SELECTOR = $bdceb2956edbee43435a9382ef97283f$var$focusableElements.join(':not([hidden]),') + ',[tabindex]:not([disabled]):not([hidden])';
$bdceb2956edbee43435a9382ef97283f$var$focusableElements.push('[tabindex]:not([tabindex="-1"]):not([disabled])');
const $bdceb2956edbee43435a9382ef97283f$var$TABBABLE_ELEMENT_SELECTOR = $bdceb2956edbee43435a9382ef97283f$var$focusableElements.join(':not([hidden]):not([tabindex="-1"]),');
function $bdceb2956edbee43435a9382ef97283f$var$getScopeRoot(scope) {
    return scope[0].parentElement;
}
function $bdceb2956edbee43435a9382ef97283f$var$useFocusContainment(scopeRef, contain) {
    let focusedNode = useRef();
    let raf = useRef(null);
    useEffect(()=>{
        let scope = scopeRef.current;
        if (!contain) return;
         // Handle the Tab key to contain focus within the scope
        let onKeyDown = (e)=>{
            if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey) return;
            let focusedElement = document.activeElement;
            if (!$bdceb2956edbee43435a9382ef97283f$var$isElementInScope(focusedElement, scope)) return;
            let walker = getFocusableTreeWalker($bdceb2956edbee43435a9382ef97283f$var$getScopeRoot(scope), {
                tabbable: true
            }, scope);
            walker.currentNode = focusedElement;
            let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
            if (!nextElement) {
                walker.currentNode = e.shiftKey ? scope[scope.length - 1].nextElementSibling : scope[0].previousElementSibling;
                nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
            }
            e.preventDefault();
            if (nextElement) $bdceb2956edbee43435a9382ef97283f$var$focusElement(nextElement, true);
        };
        let onFocus = (e)=>{
            // If a focus event occurs outside the active scope (e.g. user tabs from browser location bar),
            // restore focus to the previously focused node or the first tabbable element in the active scope.
            let isInAnyScope = $bdceb2956edbee43435a9382ef97283f$var$isElementInAnyScope(e.target, $bdceb2956edbee43435a9382ef97283f$var$scopes);
            if (!isInAnyScope) {
                if (focusedNode.current) focusedNode.current.focus();
                else if ($bdceb2956edbee43435a9382ef97283f$var$activeScope) $bdceb2956edbee43435a9382ef97283f$var$focusFirstInScope($bdceb2956edbee43435a9382ef97283f$var$activeScope.current);
            } else {
                $bdceb2956edbee43435a9382ef97283f$var$activeScope = scopeRef;
                focusedNode.current = e.target;
            }
        };
        let onBlur = (e)=>{
            // Firefox doesn't shift focus back to the Dialog properly without this
            raf.current = requestAnimationFrame(()=>{
                // Use document.activeElement instead of e.relatedTarget so we can tell if user clicked into iframe
                let isInAnyScope = $bdceb2956edbee43435a9382ef97283f$var$isElementInAnyScope(document.activeElement, $bdceb2956edbee43435a9382ef97283f$var$scopes);
                if (!isInAnyScope) {
                    $bdceb2956edbee43435a9382ef97283f$var$activeScope = scopeRef;
                    focusedNode.current = e.target;
                    focusedNode.current.focus();
                }
            });
        };
        document.addEventListener('keydown', onKeyDown, false);
        document.addEventListener('focusin', onFocus, false);
        scope.forEach((element)=>element.addEventListener('focusin', onFocus, false)
        );
        scope.forEach((element)=>element.addEventListener('focusout', onBlur, false)
        );
        return ()=>{
            document.removeEventListener('keydown', onKeyDown, false);
            document.removeEventListener('focusin', onFocus, false);
            scope.forEach((element)=>element.removeEventListener('focusin', onFocus, false)
            );
            scope.forEach((element)=>element.removeEventListener('focusout', onBlur, false)
            );
        };
    }, [
        scopeRef,
        contain
    ]); // eslint-disable-next-line arrow-body-style
    useEffect(()=>{
        return ()=>cancelAnimationFrame(raf.current)
        ;
    }, [
        raf
    ]);
}
function $bdceb2956edbee43435a9382ef97283f$var$isElementInAnyScope(element, scopes) {
    for (let scope of scopes.values()){
        if ($bdceb2956edbee43435a9382ef97283f$var$isElementInScope(element, scope.current)) return true;
    }
    return false;
}
function $bdceb2956edbee43435a9382ef97283f$var$isElementInScope(element, scope) {
    return scope.some((node)=>node.contains(element)
    );
}
function $bdceb2956edbee43435a9382ef97283f$var$focusElement(element, scroll) {
    if (scroll === void 0) scroll = false;
    if (element != null && !scroll) try {
        focusSafely(element);
    } catch (err) {
    }
    else if (element != null) try {
        element.focus();
    } catch (err) {
    }
}
function $bdceb2956edbee43435a9382ef97283f$var$focusFirstInScope(scope) {
    let sentinel = scope[0].previousElementSibling;
    let walker = getFocusableTreeWalker($bdceb2956edbee43435a9382ef97283f$var$getScopeRoot(scope), {
        tabbable: true
    }, scope);
    walker.currentNode = sentinel;
    $bdceb2956edbee43435a9382ef97283f$var$focusElement(walker.nextNode());
}
function $bdceb2956edbee43435a9382ef97283f$var$useAutoFocus(scopeRef, autoFocus) {
    useEffect(()=>{
        if (autoFocus) {
            $bdceb2956edbee43435a9382ef97283f$var$activeScope = scopeRef;
            if (!$bdceb2956edbee43435a9382ef97283f$var$isElementInScope(document.activeElement, $bdceb2956edbee43435a9382ef97283f$var$activeScope.current)) $bdceb2956edbee43435a9382ef97283f$var$focusFirstInScope(scopeRef.current);
        }
    }, [
        scopeRef,
        autoFocus
    ]);
}
function $bdceb2956edbee43435a9382ef97283f$var$useRestoreFocus(scopeRef, restoreFocus, contain) {
    // useLayoutEffect instead of useEffect so the active element is saved synchronously instead of asynchronously.
    useLayoutEffect(()=>{
        let scope = scopeRef.current;
        let nodeToRestore = document.activeElement; // Handle the Tab key so that tabbing out of the scope goes to the next element
        // after the node that had focus when the scope mounted. This is important when
        // using portals for overlays, so that focus goes to the expected element when
        // tabbing out of the overlay.
        let onKeyDown = (e)=>{
            if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey) return;
            let focusedElement = document.activeElement;
            if (!$bdceb2956edbee43435a9382ef97283f$var$isElementInScope(focusedElement, scope)) return;
             // Create a DOM tree walker that matches all tabbable elements
            let walker = getFocusableTreeWalker(document.body, {
                tabbable: true
            }); // Find the next tabbable element after the currently focused element
            walker.currentNode = focusedElement;
            let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
            if (!document.body.contains(nodeToRestore) || nodeToRestore === document.body) nodeToRestore = null;
             // If there is no next element, or it is outside the current scope, move focus to the
            // next element after the node to restore to instead.
            if ((!nextElement || !$bdceb2956edbee43435a9382ef97283f$var$isElementInScope(nextElement, scope)) && nodeToRestore) {
                walker.currentNode = nodeToRestore; // Skip over elements within the scope, in case the scope immediately follows the node to restore.
                do nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
                while ($bdceb2956edbee43435a9382ef97283f$var$isElementInScope(nextElement, scope))
                e.preventDefault();
                e.stopPropagation();
                if (nextElement) $bdceb2956edbee43435a9382ef97283f$var$focusElement(nextElement, true);
                else // If there is no next element, blur the focused element to move focus to the body.
                focusedElement.blur();
            }
        };
        if (!contain) document.addEventListener('keydown', onKeyDown, true);
        return ()=>{
            if (!contain) document.removeEventListener('keydown', onKeyDown, true);
            if (restoreFocus && nodeToRestore && $bdceb2956edbee43435a9382ef97283f$var$isElementInScope(document.activeElement, scope)) requestAnimationFrame(()=>{
                if (document.body.contains(nodeToRestore)) $bdceb2956edbee43435a9382ef97283f$var$focusElement(nodeToRestore);
            });
        };
    }, [
        scopeRef,
        restoreFocus,
        contain
    ]);
}
/**
 * Create a [TreeWalker]{@link https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker}
 * that matches all focusable/tabbable elements.
 */ function getFocusableTreeWalker(root, opts, scope) {
    let selector = opts != null && opts.tabbable ? $bdceb2956edbee43435a9382ef97283f$var$TABBABLE_ELEMENT_SELECTOR : $bdceb2956edbee43435a9382ef97283f$var$FOCUSABLE_ELEMENT_SELECTOR;
    let walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT, {
        acceptNode (node) {
            var _opts$from;
            // Skip nodes inside the starting node.
            if (opts != null && (_opts$from = opts.from) != null && _opts$from.contains(node)) return NodeFilter.FILTER_REJECT;
            if (node.matches(selector) && $f5b8109741a107bfe8bf4093e29$export$isElementVisible(node) && (!scope || $bdceb2956edbee43435a9382ef97283f$var$isElementInScope(node, scope))) return NodeFilter.FILTER_ACCEPT;
            return NodeFilter.FILTER_SKIP;
        }
    });
    if (opts != null && opts.from) walker.currentNode = opts.from;
    return walker;
}
/**
 * Creates a FocusManager object that can be used to move focus within an element.
 */ exports.getFocusableTreeWalker = getFocusableTreeWalker;
function createFocusManager(ref) {
    return {
        focusNext (opts) {
            if (opts === void 0) opts = {
            };
            let root = ref.current;
            let { from , tabbable , wrap  } = opts;
            let node = from || document.activeElement;
            let walker = getFocusableTreeWalker(root, {
                tabbable
            });
            if (root.contains(node)) walker.currentNode = node;
            let nextNode = walker.nextNode();
            if (!nextNode && wrap) {
                walker.currentNode = root;
                nextNode = walker.nextNode();
            }
            if (nextNode) $bdceb2956edbee43435a9382ef97283f$var$focusElement(nextNode, true);
            return nextNode;
        },
        focusPrevious (opts) {
            if (opts === void 0) opts = {
            };
            let root = ref.current;
            let { from , tabbable , wrap  } = opts;
            let node = from || document.activeElement;
            let walker = getFocusableTreeWalker(root, {
                tabbable
            });
            if (root.contains(node)) walker.currentNode = node;
            else {
                let next = $bdceb2956edbee43435a9382ef97283f$var$last(walker);
                if (next) $bdceb2956edbee43435a9382ef97283f$var$focusElement(next, true);
                return next;
            }
            let previousNode = walker.previousNode();
            if (!previousNode && wrap) {
                walker.currentNode = root;
                previousNode = $bdceb2956edbee43435a9382ef97283f$var$last(walker);
            }
            if (previousNode) $bdceb2956edbee43435a9382ef97283f$var$focusElement(previousNode, true);
            return previousNode;
        }
    };
}
exports.createFocusManager = createFocusManager;
function $bdceb2956edbee43435a9382ef97283f$var$last(walker) {
    let next;
    let last;
    do {
        last = walker.lastChild();
        if (last) next = last;
    }while (last)
    return next;
}
/**
 * Determines whether a focus ring should be shown to indicate keyboard focus.
 * Focus rings are visible only when the user is interacting with a keyboard,
 * not with a mouse, touch, or other input methods.
 */ function useFocusRing(props) {
    if (props === void 0) props = {
    };
    let { autoFocus =false , isTextInput , within  } = props;
    let state = useRef({
        isFocused: false,
        isFocusVisible: autoFocus || _isFocusVisible()
    }).current;
    let [isFocusVisibleState, setFocusVisible] = useState(()=>state.isFocused && state.isFocusVisible
    );
    let updateState = ()=>setFocusVisible(state.isFocused && state.isFocusVisible)
    ;
    let onFocusChange = (isFocused)=>{
        state.isFocused = isFocused;
        updateState();
    };
    useFocusVisibleListener((isFocusVisible)=>{
        state.isFocusVisible = isFocusVisible;
        updateState();
    }, [], {
        isTextInput
    });
    let { focusProps  } = useFocus({
        isDisabled: within,
        onFocusChange
    });
    let { focusWithinProps  } = useFocusWithin({
        isDisabled: !within,
        onFocusWithinChange: onFocusChange
    });
    return {
        isFocused: state.isFocused,
        isFocusVisible: state.isFocused && isFocusVisibleState,
        focusProps: within ? focusWithinProps : focusProps
    };
}
exports.useFocusRing = useFocusRing;
/**
 * A utility component that applies a CSS class when an element has keyboard focus.
 * Focus rings are visible only when the user is interacting with a keyboard,
 * not with a mouse, touch, or other input methods.
 */ function FocusRing(props) {
    let { children , focusClass , focusRingClass  } = props;
    let { isFocused , isFocusVisible , focusProps  } = useFocusRing(props);
    let child = _react.Children.only(children);
    return(/*#__PURE__*/ _react.cloneElement(child, mergeProps(child.props, _babelRuntimeHelpersExtends({
    }, focusProps, {
        className: _clsx({
            [focusClass || '']: isFocused,
            [focusRingClass || '']: isFocusVisible
        })
    }))));
}
exports.FocusRing = FocusRing;
let $f284cbc8bcdf616ffabe3d006e2c9db$var$FocusableContext = /*#__PURE__*/ _react.createContext(null);
function $f284cbc8bcdf616ffabe3d006e2c9db$var$useFocusableContext(ref) {
    let context = useContext($f284cbc8bcdf616ffabe3d006e2c9db$var$FocusableContext) || {
    };
    useSyncRef(context, ref);
    return context;
}
/**
 * Provides DOM props to the nearest focusable child.
 */ function $f284cbc8bcdf616ffabe3d006e2c9db$var$FocusableProvider(props, ref) {
    let { children  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "children"
    ]);
    let context = _babelRuntimeHelpersExtends({
    }, otherProps, {
        ref
    });
    return(/*#__PURE__*/ _react.createElement($f284cbc8bcdf616ffabe3d006e2c9db$var$FocusableContext.Provider, {
        value: context
    }, children));
}
let FocusableProvider = /*#__PURE__*/ _react.forwardRef($f284cbc8bcdf616ffabe3d006e2c9db$var$FocusableProvider);
exports.FocusableProvider = FocusableProvider;
/**
 * Used to make an element focusable and capable of auto focus.
 */ function useFocusable(props, domRef) {
    let { focusProps  } = useFocus(props);
    let { keyboardProps  } = useKeyboard(props);
    let interactions = mergeProps(focusProps, keyboardProps);
    let domProps = $f284cbc8bcdf616ffabe3d006e2c9db$var$useFocusableContext(domRef);
    let interactionProps = props.isDisabled ? {
    } : domProps;
    useEffect(()=>{
        if (props.autoFocus && domRef.current) domRef.current.focus();
    }, [
        props.autoFocus,
        domRef
    ]);
    return {
        focusableProps: mergeProps(_babelRuntimeHelpersExtends({
        }, interactions, {
            tabIndex: props.excludeFromTabOrder && !props.isDisabled ? -1 : undefined
        }), interactionProps)
    };
}
exports.useFocusable = useFocusable;

},{"@babel/runtime/helpers/objectWithoutPropertiesLoose":"5byko","clsx":"54v82","@babel/runtime/helpers/extends":"5xz6u","react":"a6qBW","@react-aria/interactions":"3irYN","@react-aria/utils":"d8qxy"}],"5byko":[function(require,module,exports) {
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
module.exports = _objectWithoutPropertiesLoose;
module.exports["default"] = module.exports, module.exports.__esModule = true;

},{}],"3irYN":[function(require,module,exports) {
var _react2 = require("react");
var _react = $parcel$interopDefault(_react2);
var { useContext , useEffect , useMemo , useRef , useState , useCallback  } = _react2;
var { mergeProps , runAfterTransition , focusWithoutScrolling , useGlobalListeners , useSyncRef , isMac  } = require("@react-aria/utils");
var _babelRuntimeHelpersObjectWithoutPropertiesLoose = $parcel$interopDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
let $ce801cc8e3ff24b95c928e0152c7b7f2$var$state = 'default';
let $ce801cc8e3ff24b95c928e0152c7b7f2$var$savedUserSelect = '';
function $ce801cc8e3ff24b95c928e0152c7b7f2$export$disableTextSelection() {
    if ($ce801cc8e3ff24b95c928e0152c7b7f2$var$state === 'default') {
        $ce801cc8e3ff24b95c928e0152c7b7f2$var$savedUserSelect = document.documentElement.style.webkitUserSelect;
        document.documentElement.style.webkitUserSelect = 'none';
    }
    $ce801cc8e3ff24b95c928e0152c7b7f2$var$state = 'disabled';
}
function $ce801cc8e3ff24b95c928e0152c7b7f2$export$restoreTextSelection() {
    // If the state is already default, there's nothing to do.
    // If it is restoring, then there's no need to queue a second restore.
    if ($ce801cc8e3ff24b95c928e0152c7b7f2$var$state !== 'disabled') return;
    $ce801cc8e3ff24b95c928e0152c7b7f2$var$state = 'restoring'; // There appears to be a delay on iOS where selection still might occur
    // after pointer up, so wait a bit before removing user-select.
    setTimeout(()=>{
        // Wait for any CSS transitions to complete so we don't recompute style
        // for the whole page in the middle of the animation and cause jank.
        runAfterTransition(()=>{
            // Avoid race conditions
            if ($ce801cc8e3ff24b95c928e0152c7b7f2$var$state === 'restoring') {
                if (document.documentElement.style.webkitUserSelect === 'none') document.documentElement.style.webkitUserSelect = $ce801cc8e3ff24b95c928e0152c7b7f2$var$savedUserSelect || '';
                $ce801cc8e3ff24b95c928e0152c7b7f2$var$savedUserSelect = '';
                $ce801cc8e3ff24b95c928e0152c7b7f2$var$state = 'default';
            }
        });
    }, 300);
}
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // Original licensing for the following method can be found in the
// NOTICE file in the root directory of this source tree.
// See https://github.com/facebook/react/blob/3c713d513195a53788b3f8bb4b70279d68b15bcc/packages/react-interactions/events/src/dom/shared/index.js#L74-L87
// Keyboards, Assistive Technologies, and element.click() all produce a "virtual"
// click event. This is a method of inferring such clicks. Every browser except
// IE 11 only sets a zero value of "detail" for click events that are "virtual".
// However, IE 11 uses a zero value for all click events. For IE 11 we rely on
// the quirk that it produces click events that are of type PointerEvent, and
// where only the "virtual" click lacks a pointerType field.
function $eda9c464f45e6c61a293990c493$export$isVirtualClick(event) {
    // JAWS/NVDA with Firefox.
    if (event.mozInputSource === 0 && event.isTrusted) return true;
    return event.detail === 0 && !event.pointerType;
}
const $c6b6d42ec461c27a6a09002bf49a250e$export$PressResponderContext = /*#__PURE__*/ _react.createContext(null);
$c6b6d42ec461c27a6a09002bf49a250e$export$PressResponderContext.displayName = 'PressResponderContext';
function $ed8d760564e19d8c7d03a6a4$var$usePressResponderContext(props) {
    // Consume context from <PressResponder> and merge with props.
    let context = useContext($c6b6d42ec461c27a6a09002bf49a250e$export$PressResponderContext);
    if (context) {
        let { register  } = context, contextProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(context, [
            "register"
        ]);
        props = mergeProps(contextProps, props);
        register();
    }
    useSyncRef(context, props.ref);
    return props;
}
/**
 * Handles press interactions across mouse, touch, keyboard, and screen readers.
 * It normalizes behavior across browsers and platforms, and handles many nuances
 * of dealing with pointer and keyboard events.
 */ function usePress(props) {
    let _usePressResponderCon = $ed8d760564e19d8c7d03a6a4$var$usePressResponderContext(props), { onPress , onPressChange , onPressStart , onPressEnd , onPressUp , isDisabled , isPressed: isPressedProp , preventFocusOnPress  } = _usePressResponderCon, domProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(_usePressResponderCon, [
        "onPress",
        "onPressChange",
        "onPressStart",
        "onPressEnd",
        "onPressUp",
        "isDisabled",
        "isPressed",
        "preventFocusOnPress",
        "ref"
    ]);
    let propsRef = useRef(null);
    propsRef.current = {
        onPress,
        onPressChange,
        onPressStart,
        onPressEnd,
        onPressUp,
        isDisabled
    };
    let [isPressed, setPressed] = useState(false);
    let ref = useRef({
        isPressed: false,
        ignoreEmulatedMouseEvents: false,
        ignoreClickAfterPress: false,
        didFirePressStart: false,
        activePointerId: null,
        target: null,
        isOverTarget: false,
        pointerType: null
    });
    let { addGlobalListener , removeAllGlobalListeners  } = useGlobalListeners();
    let pressProps = useMemo(()=>{
        let state = ref.current;
        let triggerPressStart = (originalEvent, pointerType)=>{
            let { onPressStart: onPressStart1 , onPressChange: onPressChange1 , isDisabled: isDisabled1  } = propsRef.current;
            if (isDisabled1 || state.didFirePressStart) return;
            if (onPressStart1) onPressStart1({
                type: 'pressstart',
                pointerType,
                target: originalEvent.currentTarget,
                shiftKey: originalEvent.shiftKey,
                metaKey: originalEvent.metaKey,
                ctrlKey: originalEvent.ctrlKey
            });
            if (onPressChange1) onPressChange1(true);
            state.didFirePressStart = true;
            setPressed(true);
        };
        let triggerPressEnd = function triggerPressEnd1(originalEvent, pointerType, wasPressed) {
            if (wasPressed === void 0) wasPressed = true;
            let { onPressEnd: onPressEnd1 , onPressChange: onPressChange1 , onPress: onPress1 , isDisabled: isDisabled1  } = propsRef.current;
            if (!state.didFirePressStart) return;
            state.ignoreClickAfterPress = true;
            state.didFirePressStart = false;
            if (onPressEnd1) onPressEnd1({
                type: 'pressend',
                pointerType,
                target: originalEvent.currentTarget,
                shiftKey: originalEvent.shiftKey,
                metaKey: originalEvent.metaKey,
                ctrlKey: originalEvent.ctrlKey
            });
            if (onPressChange1) onPressChange1(false);
            setPressed(false);
            if (onPress1 && wasPressed && !isDisabled1) onPress1({
                type: 'press',
                pointerType,
                target: originalEvent.currentTarget,
                shiftKey: originalEvent.shiftKey,
                metaKey: originalEvent.metaKey,
                ctrlKey: originalEvent.ctrlKey
            });
        };
        let triggerPressUp = (originalEvent, pointerType)=>{
            let { onPressUp: onPressUp1 , isDisabled: isDisabled1  } = propsRef.current;
            if (isDisabled1) return;
            if (onPressUp1) onPressUp1({
                type: 'pressup',
                pointerType,
                target: originalEvent.currentTarget,
                shiftKey: originalEvent.shiftKey,
                metaKey: originalEvent.metaKey,
                ctrlKey: originalEvent.ctrlKey
            });
        };
        let cancel = (e)=>{
            if (state.isPressed) {
                if (state.isOverTarget) triggerPressEnd($ed8d760564e19d8c7d03a6a4$var$createEvent(state.target, e), state.pointerType, false);
                state.isPressed = false;
                state.isOverTarget = false;
                state.activePointerId = null;
                state.pointerType = null;
                removeAllGlobalListeners();
                $ce801cc8e3ff24b95c928e0152c7b7f2$export$restoreTextSelection();
            }
        };
        let pressProps1 = {
            onKeyDown (e) {
                if ($ed8d760564e19d8c7d03a6a4$var$isValidKeyboardEvent(e.nativeEvent) && e.currentTarget.contains(e.target)) {
                    e.preventDefault();
                    e.stopPropagation(); // If the event is repeating, it may have started on a different element
                    // after which focus moved to the current element. Ignore these events and
                    // only handle the first key down event.
                    if (!state.isPressed && !e.repeat) {
                        state.target = e.currentTarget;
                        state.isPressed = true;
                        triggerPressStart(e, 'keyboard'); // Focus may move before the key up event, so register the event on the document
                        // instead of the same element where the key down event occurred.
                        addGlobalListener(document, 'keyup', onKeyUp, false);
                    }
                }
            },
            onKeyUp (e) {
                if ($ed8d760564e19d8c7d03a6a4$var$isValidKeyboardEvent(e.nativeEvent) && !e.repeat && e.currentTarget.contains(e.target)) triggerPressUp($ed8d760564e19d8c7d03a6a4$var$createEvent(state.target, e), 'keyboard');
            },
            onClick (e) {
                if (e && !e.currentTarget.contains(e.target)) return;
                if (e && e.button === 0) {
                    e.stopPropagation();
                    if (isDisabled) e.preventDefault();
                     // If triggered from a screen reader or by using element.click(),
                    // trigger as if it were a keyboard click.
                    if (!state.ignoreClickAfterPress && !state.ignoreEmulatedMouseEvents && $eda9c464f45e6c61a293990c493$export$isVirtualClick(e.nativeEvent)) {
                        // Ensure the element receives focus (VoiceOver on iOS does not do this)
                        if (!isDisabled && !preventFocusOnPress) focusWithoutScrolling(e.currentTarget);
                        triggerPressStart(e, 'virtual');
                        triggerPressUp(e, 'virtual');
                        triggerPressEnd(e, 'virtual');
                    }
                    state.ignoreEmulatedMouseEvents = false;
                    state.ignoreClickAfterPress = false;
                }
            }
        };
        let onKeyUp = (e)=>{
            if (state.isPressed && $ed8d760564e19d8c7d03a6a4$var$isValidKeyboardEvent(e)) {
                e.preventDefault();
                e.stopPropagation();
                state.isPressed = false;
                triggerPressEnd($ed8d760564e19d8c7d03a6a4$var$createEvent(state.target, e), 'keyboard', e.target === state.target);
                removeAllGlobalListeners(); // If the target is a link, trigger the click method to open the URL,
                // but defer triggering pressEnd until onClick event handler.
                if (e.target === state.target && $ed8d760564e19d8c7d03a6a4$var$isHTMLAnchorLink(state.target) || state.target.getAttribute('role') === 'link') state.target.click();
            }
        };
        if (typeof PointerEvent !== 'undefined') {
            pressProps1.onPointerDown = (e)=>{
                // Only handle left clicks, and ignore events that bubbled through portals.
                if (e.button !== 0 || !e.currentTarget.contains(e.target)) return;
                 // Due to browser inconsistencies, especially on mobile browsers, we prevent
                // default on pointer down and handle focusing the pressable element ourselves.
                if ($ed8d760564e19d8c7d03a6a4$var$shouldPreventDefault(e.target)) e.preventDefault();
                 // iOS safari fires pointer events from VoiceOver (but only when outside an iframe...)
                // https://bugs.webkit.org/show_bug.cgi?id=222627
                state.pointerType = $ed8d760564e19d8c7d03a6a4$var$isVirtualPointerEvent(e.nativeEvent) ? 'virtual' : e.pointerType;
                e.stopPropagation();
                if (!state.isPressed) {
                    state.isPressed = true;
                    state.isOverTarget = true;
                    state.activePointerId = e.pointerId;
                    state.target = e.currentTarget;
                    if (!isDisabled && !preventFocusOnPress) focusWithoutScrolling(e.currentTarget);
                    $ce801cc8e3ff24b95c928e0152c7b7f2$export$disableTextSelection();
                    triggerPressStart(e, state.pointerType);
                    addGlobalListener(document, 'pointermove', onPointerMove, false);
                    addGlobalListener(document, 'pointerup', onPointerUp, false);
                    addGlobalListener(document, 'pointercancel', onPointerCancel, false);
                }
            };
            pressProps1.onMouseDown = (e)=>{
                if (!e.currentTarget.contains(e.target)) return;
                if (e.button === 0) {
                    // Chrome and Firefox on touch Windows devices require mouse down events
                    // to be canceled in addition to pointer events, or an extra asynchronous
                    // focus event will be fired.
                    if ($ed8d760564e19d8c7d03a6a4$var$shouldPreventDefault(e.target)) e.preventDefault();
                    e.stopPropagation();
                }
            };
            pressProps1.onPointerUp = (e)=>{
                if (!e.currentTarget.contains(e.target)) return;
                 // Only handle left clicks
                // Safari on iOS sometimes fires pointerup events, even
                // when the touch isn't over the target, so double check.
                if (e.button === 0 && $ed8d760564e19d8c7d03a6a4$var$isOverTarget(e, e.currentTarget)) triggerPressUp(e, state.pointerType);
            }; // Safari on iOS < 13.2 does not implement pointerenter/pointerleave events correctly.
            // Use pointer move events instead to implement our own hit testing.
            // See https://bugs.webkit.org/show_bug.cgi?id=199803
            let onPointerMove = (e)=>{
                if (e.pointerId !== state.activePointerId) return;
                if ($ed8d760564e19d8c7d03a6a4$var$isOverTarget(e, state.target)) {
                    if (!state.isOverTarget) {
                        state.isOverTarget = true;
                        triggerPressStart($ed8d760564e19d8c7d03a6a4$var$createEvent(state.target, e), state.pointerType);
                    }
                } else if (state.isOverTarget) {
                    state.isOverTarget = false;
                    triggerPressEnd($ed8d760564e19d8c7d03a6a4$var$createEvent(state.target, e), state.pointerType, false);
                }
            };
            let onPointerUp = (e)=>{
                if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0) {
                    if ($ed8d760564e19d8c7d03a6a4$var$isOverTarget(e, state.target)) triggerPressEnd($ed8d760564e19d8c7d03a6a4$var$createEvent(state.target, e), state.pointerType);
                    else if (state.isOverTarget) triggerPressEnd($ed8d760564e19d8c7d03a6a4$var$createEvent(state.target, e), state.pointerType, false);
                    state.isPressed = false;
                    state.isOverTarget = false;
                    state.activePointerId = null;
                    state.pointerType = null;
                    removeAllGlobalListeners();
                    $ce801cc8e3ff24b95c928e0152c7b7f2$export$restoreTextSelection();
                }
            };
            let onPointerCancel = (e)=>{
                cancel(e);
            };
            pressProps1.onDragStart = (e)=>{
                if (!e.currentTarget.contains(e.target)) return;
                 // Safari does not call onPointerCancel when a drag starts, whereas Chrome and Firefox do.
                cancel(e);
            };
        } else {
            pressProps1.onMouseDown = (e)=>{
                // Only handle left clicks
                if (e.button !== 0 || !e.currentTarget.contains(e.target)) return;
                 // Due to browser inconsistencies, especially on mobile browsers, we prevent
                // default on mouse down and handle focusing the pressable element ourselves.
                if ($ed8d760564e19d8c7d03a6a4$var$shouldPreventDefault(e.target)) e.preventDefault();
                e.stopPropagation();
                if (state.ignoreEmulatedMouseEvents) return;
                state.isPressed = true;
                state.isOverTarget = true;
                state.target = e.currentTarget;
                state.pointerType = $eda9c464f45e6c61a293990c493$export$isVirtualClick(e.nativeEvent) ? 'virtual' : 'mouse';
                if (!isDisabled && !preventFocusOnPress) focusWithoutScrolling(e.currentTarget);
                triggerPressStart(e, state.pointerType);
                addGlobalListener(document, 'mouseup', onMouseUp, false);
            };
            pressProps1.onMouseEnter = (e)=>{
                if (!e.currentTarget.contains(e.target)) return;
                e.stopPropagation();
                if (state.isPressed && !state.ignoreEmulatedMouseEvents) {
                    state.isOverTarget = true;
                    triggerPressStart(e, state.pointerType);
                }
            };
            pressProps1.onMouseLeave = (e)=>{
                if (!e.currentTarget.contains(e.target)) return;
                e.stopPropagation();
                if (state.isPressed && !state.ignoreEmulatedMouseEvents) {
                    state.isOverTarget = false;
                    triggerPressEnd(e, state.pointerType, false);
                }
            };
            pressProps1.onMouseUp = (e)=>{
                if (!e.currentTarget.contains(e.target)) return;
                if (!state.ignoreEmulatedMouseEvents && e.button === 0) triggerPressUp(e, state.pointerType);
            };
            let onMouseUp = (e)=>{
                // Only handle left clicks
                if (e.button !== 0) return;
                state.isPressed = false;
                removeAllGlobalListeners();
                if (state.ignoreEmulatedMouseEvents) {
                    state.ignoreEmulatedMouseEvents = false;
                    return;
                }
                if ($ed8d760564e19d8c7d03a6a4$var$isOverTarget(e, state.target)) triggerPressEnd($ed8d760564e19d8c7d03a6a4$var$createEvent(state.target, e), state.pointerType);
                else if (state.isOverTarget) triggerPressEnd($ed8d760564e19d8c7d03a6a4$var$createEvent(state.target, e), state.pointerType, false);
                state.isOverTarget = false;
            };
            pressProps1.onTouchStart = (e)=>{
                if (!e.currentTarget.contains(e.target)) return;
                e.stopPropagation();
                let touch = $ed8d760564e19d8c7d03a6a4$var$getTouchFromEvent(e.nativeEvent);
                if (!touch) return;
                state.activePointerId = touch.identifier;
                state.ignoreEmulatedMouseEvents = true;
                state.isOverTarget = true;
                state.isPressed = true;
                state.target = e.currentTarget;
                state.pointerType = 'touch'; // Due to browser inconsistencies, especially on mobile browsers, we prevent default
                // on the emulated mouse event and handle focusing the pressable element ourselves.
                if (!isDisabled && !preventFocusOnPress) focusWithoutScrolling(e.currentTarget);
                $ce801cc8e3ff24b95c928e0152c7b7f2$export$disableTextSelection();
                triggerPressStart(e, state.pointerType);
                addGlobalListener(window, 'scroll', onScroll, true);
            };
            pressProps1.onTouchMove = (e)=>{
                if (!e.currentTarget.contains(e.target)) return;
                e.stopPropagation();
                if (!state.isPressed) return;
                let touch = $ed8d760564e19d8c7d03a6a4$var$getTouchById(e.nativeEvent, state.activePointerId);
                if (touch && $ed8d760564e19d8c7d03a6a4$var$isOverTarget(touch, e.currentTarget)) {
                    if (!state.isOverTarget) {
                        state.isOverTarget = true;
                        triggerPressStart(e, state.pointerType);
                    }
                } else if (state.isOverTarget) {
                    state.isOverTarget = false;
                    triggerPressEnd(e, state.pointerType, false);
                }
            };
            pressProps1.onTouchEnd = (e)=>{
                if (!e.currentTarget.contains(e.target)) return;
                e.stopPropagation();
                if (!state.isPressed) return;
                let touch = $ed8d760564e19d8c7d03a6a4$var$getTouchById(e.nativeEvent, state.activePointerId);
                if (touch && $ed8d760564e19d8c7d03a6a4$var$isOverTarget(touch, e.currentTarget)) {
                    triggerPressUp(e, state.pointerType);
                    triggerPressEnd(e, state.pointerType);
                } else if (state.isOverTarget) triggerPressEnd(e, state.pointerType, false);
                state.isPressed = false;
                state.activePointerId = null;
                state.isOverTarget = false;
                state.ignoreEmulatedMouseEvents = true;
                $ce801cc8e3ff24b95c928e0152c7b7f2$export$restoreTextSelection();
                removeAllGlobalListeners();
            };
            pressProps1.onTouchCancel = (e)=>{
                if (!e.currentTarget.contains(e.target)) return;
                e.stopPropagation();
                if (state.isPressed) cancel(e);
            };
            let onScroll = (e)=>{
                if (state.isPressed && e.target.contains(state.target)) cancel({
                    currentTarget: state.target,
                    shiftKey: false,
                    ctrlKey: false,
                    metaKey: false
                });
            };
            pressProps1.onDragStart = (e)=>{
                if (!e.currentTarget.contains(e.target)) return;
                cancel(e);
            };
        }
        return pressProps1;
    }, [
        addGlobalListener,
        isDisabled,
        preventFocusOnPress,
        removeAllGlobalListeners
    ]); // Remove user-select: none in case component unmounts immediately after pressStart
    // eslint-disable-next-line arrow-body-style
    useEffect(()=>{
        return ()=>$ce801cc8e3ff24b95c928e0152c7b7f2$export$restoreTextSelection()
        ;
    }, []);
    return {
        isPressed: isPressedProp || isPressed,
        pressProps: mergeProps(domProps, pressProps)
    };
}
exports.usePress = usePress;
function $ed8d760564e19d8c7d03a6a4$var$isHTMLAnchorLink(target) {
    return target.tagName === 'A' && target.hasAttribute('href');
}
function $ed8d760564e19d8c7d03a6a4$var$isValidKeyboardEvent(event) {
    const { key , target  } = event;
    const element = target;
    const { tagName , isContentEditable  } = element;
    const role = element.getAttribute('role'); // Accessibility for keyboards. Space and Enter only.
    // "Spacebar" is for IE 11
    return (key === 'Enter' || key === ' ' || key === 'Spacebar') && tagName !== 'INPUT' && tagName !== 'TEXTAREA' && isContentEditable !== true && // unless it also has role='button' and was triggered using Space.
    (!$ed8d760564e19d8c7d03a6a4$var$isHTMLAnchorLink(element) || role === 'button' && key !== 'Enter') && !(role === 'link' && key !== 'Enter');
}
function $ed8d760564e19d8c7d03a6a4$var$getTouchFromEvent(event) {
    const { targetTouches  } = event;
    if (targetTouches.length > 0) return targetTouches[0];
    return null;
}
function $ed8d760564e19d8c7d03a6a4$var$getTouchById(event, pointerId) {
    const changedTouches = event.changedTouches;
    for(let i = 0; i < changedTouches.length; i++){
        const touch = changedTouches[i];
        if (touch.identifier === pointerId) return touch;
    }
    return null;
}
function $ed8d760564e19d8c7d03a6a4$var$createEvent(target, e) {
    return {
        currentTarget: target,
        shiftKey: e.shiftKey,
        ctrlKey: e.ctrlKey,
        metaKey: e.metaKey
    };
}
function $ed8d760564e19d8c7d03a6a4$var$getPointClientRect(point) {
    let offsetX = point.width / 2 || point.radiusX || 0;
    let offsetY = point.height / 2 || point.radiusY || 0;
    return {
        top: point.clientY - offsetY,
        right: point.clientX + offsetX,
        bottom: point.clientY + offsetY,
        left: point.clientX - offsetX
    };
}
function $ed8d760564e19d8c7d03a6a4$var$areRectanglesOverlapping(a, b) {
    // check if they cannot overlap on x axis
    if (a.left > b.right || b.left > a.right) return false;
     // check if they cannot overlap on y axis
    if (a.top > b.bottom || b.top > a.bottom) return false;
    return true;
}
function $ed8d760564e19d8c7d03a6a4$var$isOverTarget(point, target) {
    let rect = target.getBoundingClientRect();
    let pointRect = $ed8d760564e19d8c7d03a6a4$var$getPointClientRect(point);
    return $ed8d760564e19d8c7d03a6a4$var$areRectanglesOverlapping(rect, pointRect);
}
function $ed8d760564e19d8c7d03a6a4$var$shouldPreventDefault(target) {
    // We cannot prevent default if the target is inside a draggable element.
    return !target.closest('[draggable="true"]');
}
function $ed8d760564e19d8c7d03a6a4$var$isVirtualPointerEvent(event) {
    // If the pointer size is zero, then we assume it's from a screen reader.
    return event.width === 0 && event.height === 0;
}
const Pressable = /*#__PURE__*/ _react.forwardRef((_ref, ref)=>{
    var _ref2;
    let { children  } = _ref, props = _babelRuntimeHelpersObjectWithoutPropertiesLoose(_ref, [
        "children"
    ]);
    let newRef = useRef();
    ref = (_ref2 = ref) != null ? _ref2 : newRef;
    let { pressProps  } = usePress(_babelRuntimeHelpersExtends({
    }, props, {
        ref
    }));
    let child = _react.Children.only(children);
    return(/*#__PURE__*/ _react.cloneElement(child, _babelRuntimeHelpersExtends({
        ref
    }, mergeProps(child.props, pressProps))));
});
exports.Pressable = Pressable;
const PressResponder = /*#__PURE__*/ _react.forwardRef((_ref, ref)=>{
    let { children  } = _ref, props = _babelRuntimeHelpersObjectWithoutPropertiesLoose(_ref, [
        "children"
    ]);
    let isRegistered = useRef(false);
    let prevContext = useContext($c6b6d42ec461c27a6a09002bf49a250e$export$PressResponderContext);
    let context = mergeProps(prevContext || {
    }, _babelRuntimeHelpersExtends({
    }, props, {
        ref: ref || (prevContext == null ? void 0 : prevContext.ref),
        register () {
            isRegistered.current = true;
            if (prevContext) prevContext.register();
        }
    }));
    useSyncRef(prevContext, ref);
    useEffect(()=>{
        if (!isRegistered.current) console.warn("A PressResponder was rendered without a pressable child. Either call the usePress hook, or wrap your DOM node with <Pressable> component.");
    }, []);
    return(/*#__PURE__*/ _react.createElement($c6b6d42ec461c27a6a09002bf49a250e$export$PressResponderContext.Provider, {
        value: context
    }, children));
});
exports.PressResponder = PressResponder;
// NOTICE file in the root directory of this source tree.
// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions
/**
 * Handles focus events for the immediate target.
 * Focus events on child elements will be ignored.
 */ function useFocus(props) {
    if (props.isDisabled) return {
        focusProps: {
        }
    };
    let onFocus, onBlur;
    if (props.onFocus || props.onFocusChange) onFocus = (e)=>{
        if (e.target === e.currentTarget) {
            if (props.onFocus) props.onFocus(e);
            if (props.onFocusChange) props.onFocusChange(true);
        }
    };
    if (props.onBlur || props.onFocusChange) onBlur = (e)=>{
        if (e.target === e.currentTarget) {
            if (props.onBlur) props.onBlur(e);
            if (props.onFocusChange) props.onFocusChange(false);
        }
    };
    return {
        focusProps: {
            onFocus,
            onBlur
        }
    };
}
exports.useFocus = useFocus;
let $b83372066b2b4e1d9257843b2455c$var$currentModality = null;
let $b83372066b2b4e1d9257843b2455c$var$changeHandlers = new Set();
let $b83372066b2b4e1d9257843b2455c$var$hasSetupGlobalListeners = false;
let $b83372066b2b4e1d9257843b2455c$var$hasEventBeforeFocus = false;
let $b83372066b2b4e1d9257843b2455c$var$hasBlurredWindowRecently = false; // Only Tab or Esc keys will make focus visible on text input elements
const $b83372066b2b4e1d9257843b2455c$var$FOCUS_VISIBLE_INPUT_KEYS = {
    Tab: true,
    Escape: true
};
function $b83372066b2b4e1d9257843b2455c$var$triggerChangeHandlers(modality, e) {
    for (let handler of $b83372066b2b4e1d9257843b2455c$var$changeHandlers)handler(modality, e);
}
/**
 * Helper function to determine if a KeyboardEvent is unmodified and could make keyboard focus styles visible.
 */ function $b83372066b2b4e1d9257843b2455c$var$isValidKey(e) {
    // Control and Shift keys trigger when navigating back to the tab with keyboard.
    return !(e.metaKey || !isMac() && e.altKey || e.ctrlKey || e.type === 'keyup' && (e.key === 'Control' || e.key === 'Shift'));
}
function $b83372066b2b4e1d9257843b2455c$var$handleKeyboardEvent(e) {
    $b83372066b2b4e1d9257843b2455c$var$hasEventBeforeFocus = true;
    if ($b83372066b2b4e1d9257843b2455c$var$isValidKey(e)) {
        $b83372066b2b4e1d9257843b2455c$var$currentModality = 'keyboard';
        $b83372066b2b4e1d9257843b2455c$var$triggerChangeHandlers('keyboard', e);
    }
}
function $b83372066b2b4e1d9257843b2455c$var$handlePointerEvent(e) {
    $b83372066b2b4e1d9257843b2455c$var$currentModality = 'pointer';
    if (e.type === 'mousedown' || e.type === 'pointerdown') {
        $b83372066b2b4e1d9257843b2455c$var$hasEventBeforeFocus = true;
        $b83372066b2b4e1d9257843b2455c$var$triggerChangeHandlers('pointer', e);
    }
}
function $b83372066b2b4e1d9257843b2455c$var$handleClickEvent(e) {
    if ($eda9c464f45e6c61a293990c493$export$isVirtualClick(e)) {
        $b83372066b2b4e1d9257843b2455c$var$hasEventBeforeFocus = true;
        $b83372066b2b4e1d9257843b2455c$var$currentModality = 'virtual';
    }
}
function $b83372066b2b4e1d9257843b2455c$var$handleFocusEvent(e) {
    // Firefox fires two extra focus events when the user first clicks into an iframe:
    // first on the window, then on the document. We ignore these events so they don't
    // cause keyboard focus rings to appear.
    if (e.target === window || e.target === document) return;
     // If a focus event occurs without a preceding keyboard or pointer event, switch to virtual modality.
    // This occurs, for example, when navigating a form with the next/previous buttons on iOS.
    if (!$b83372066b2b4e1d9257843b2455c$var$hasEventBeforeFocus && !$b83372066b2b4e1d9257843b2455c$var$hasBlurredWindowRecently) {
        $b83372066b2b4e1d9257843b2455c$var$currentModality = 'virtual';
        $b83372066b2b4e1d9257843b2455c$var$triggerChangeHandlers('virtual', e);
    }
    $b83372066b2b4e1d9257843b2455c$var$hasEventBeforeFocus = false;
    $b83372066b2b4e1d9257843b2455c$var$hasBlurredWindowRecently = false;
}
function $b83372066b2b4e1d9257843b2455c$var$handleWindowBlur() {
    // When the window is blurred, reset state. This is necessary when tabbing out of the window,
    // for example, since a subsequent focus event won't be fired.
    $b83372066b2b4e1d9257843b2455c$var$hasEventBeforeFocus = false;
    $b83372066b2b4e1d9257843b2455c$var$hasBlurredWindowRecently = true;
}
/**
 * Setup global event listeners to control when keyboard focus style should be visible.
 */ function $b83372066b2b4e1d9257843b2455c$var$setupGlobalFocusEvents() {
    if (typeof window === 'undefined' || $b83372066b2b4e1d9257843b2455c$var$hasSetupGlobalListeners) return;
     // Programmatic focus() calls shouldn't affect the current input modality.
    // However, we need to detect other cases when a focus event occurs without
    // a preceding user event (e.g. screen reader focus). Overriding the focus
    // method on HTMLElement.prototype is a bit hacky, but works.
    let focus = HTMLElement.prototype.focus;
    HTMLElement.prototype.focus = function() {
        $b83372066b2b4e1d9257843b2455c$var$hasEventBeforeFocus = true;
        focus.apply(this, arguments);
    };
    document.addEventListener('keydown', $b83372066b2b4e1d9257843b2455c$var$handleKeyboardEvent, true);
    document.addEventListener('keyup', $b83372066b2b4e1d9257843b2455c$var$handleKeyboardEvent, true);
    document.addEventListener('click', $b83372066b2b4e1d9257843b2455c$var$handleClickEvent, true); // Register focus events on the window so they are sure to happen
    // before React's event listeners (registered on the document).
    window.addEventListener('focus', $b83372066b2b4e1d9257843b2455c$var$handleFocusEvent, true);
    window.addEventListener('blur', $b83372066b2b4e1d9257843b2455c$var$handleWindowBlur, false);
    if (typeof PointerEvent !== 'undefined') {
        document.addEventListener('pointerdown', $b83372066b2b4e1d9257843b2455c$var$handlePointerEvent, true);
        document.addEventListener('pointermove', $b83372066b2b4e1d9257843b2455c$var$handlePointerEvent, true);
        document.addEventListener('pointerup', $b83372066b2b4e1d9257843b2455c$var$handlePointerEvent, true);
    } else {
        document.addEventListener('mousedown', $b83372066b2b4e1d9257843b2455c$var$handlePointerEvent, true);
        document.addEventListener('mousemove', $b83372066b2b4e1d9257843b2455c$var$handlePointerEvent, true);
        document.addEventListener('mouseup', $b83372066b2b4e1d9257843b2455c$var$handlePointerEvent, true);
    }
    $b83372066b2b4e1d9257843b2455c$var$hasSetupGlobalListeners = true;
}
if (typeof document !== 'undefined') {
    if (document.readyState !== 'loading') $b83372066b2b4e1d9257843b2455c$var$setupGlobalFocusEvents();
    else document.addEventListener('DOMContentLoaded', $b83372066b2b4e1d9257843b2455c$var$setupGlobalFocusEvents);
}
/**
 * If true, keyboard focus is visible.
 */ function isFocusVisible() {
    return $b83372066b2b4e1d9257843b2455c$var$currentModality !== 'pointer';
}
exports.isFocusVisible = isFocusVisible;
function getInteractionModality() {
    return $b83372066b2b4e1d9257843b2455c$var$currentModality;
}
exports.getInteractionModality = getInteractionModality;
function setInteractionModality(modality) {
    $b83372066b2b4e1d9257843b2455c$var$currentModality = modality;
    $b83372066b2b4e1d9257843b2455c$var$triggerChangeHandlers(modality, null);
}
/**
 * Keeps state of the current modality.
 */ exports.setInteractionModality = setInteractionModality;
function useInteractionModality() {
    $b83372066b2b4e1d9257843b2455c$var$setupGlobalFocusEvents();
    let [modality, setModality] = useState($b83372066b2b4e1d9257843b2455c$var$currentModality);
    useEffect(()=>{
        let handler = ()=>{
            setModality($b83372066b2b4e1d9257843b2455c$var$currentModality);
        };
        $b83372066b2b4e1d9257843b2455c$var$changeHandlers.add(handler);
        return ()=>{
            $b83372066b2b4e1d9257843b2455c$var$changeHandlers.delete(handler);
        };
    }, []);
    return modality;
}
/**
 * If this is attached to text input component, return if the event is a focus event (Tab/Escape keys pressed) so that
 * focus visible style can be properly set.
 */ exports.useInteractionModality = useInteractionModality;
function $b83372066b2b4e1d9257843b2455c$var$isKeyboardFocusEvent(isTextInput, modality, e) {
    return !(isTextInput && modality === 'keyboard' && e instanceof KeyboardEvent && !$b83372066b2b4e1d9257843b2455c$var$FOCUS_VISIBLE_INPUT_KEYS[e.key]);
}
/**
 * Manages focus visible state for the page, and subscribes individual components for updates.
 */ function useFocusVisible(props) {
    if (props === void 0) props = {
    };
    let { isTextInput , autoFocus  } = props;
    let [isFocusVisibleState, setFocusVisible] = useState(autoFocus || isFocusVisible());
    useFocusVisibleListener((isFocusVisible1)=>{
        setFocusVisible(isFocusVisible1);
    }, [
        isTextInput
    ], {
        isTextInput
    });
    return {
        isFocusVisible: isFocusVisibleState
    };
}
/**
 * Listens for trigger change and reports if focus is visible (i.e., modality is not pointer).
 */ exports.useFocusVisible = useFocusVisible;
function useFocusVisibleListener(fn, deps, opts) {
    $b83372066b2b4e1d9257843b2455c$var$setupGlobalFocusEvents();
    useEffect(()=>{
        let handler = (modality, e)=>{
            if (!$b83372066b2b4e1d9257843b2455c$var$isKeyboardFocusEvent(opts == null ? void 0 : opts.isTextInput, modality, e)) return;
            fn(isFocusVisible());
        };
        $b83372066b2b4e1d9257843b2455c$var$changeHandlers.add(handler);
        return ()=>$b83372066b2b4e1d9257843b2455c$var$changeHandlers.delete(handler)
        ;
    }, deps);
}
exports.useFocusVisibleListener = useFocusVisibleListener;
/**
 * Handles focus events for the target and its descendants.
 */ function useFocusWithin(props) {
    let state = useRef({
        isFocusWithin: false
    }).current;
    if (props.isDisabled) return {
        focusWithinProps: {
        }
    };
    let onFocus = (e)=>{
        if (!state.isFocusWithin) {
            if (props.onFocusWithin) props.onFocusWithin(e);
            if (props.onFocusWithinChange) props.onFocusWithinChange(true);
            state.isFocusWithin = true;
        }
    };
    let onBlur = (e)=>{
        // We don't want to trigger onBlurWithin and then immediately onFocusWithin again
        // when moving focus inside the element. Only trigger if the currentTarget doesn't
        // include the relatedTarget (where focus is moving).
        if (state.isFocusWithin && !e.currentTarget.contains(e.relatedTarget)) {
            if (props.onBlurWithin) props.onBlurWithin(e);
            if (props.onFocusWithinChange) props.onFocusWithinChange(false);
            state.isFocusWithin = false;
        }
    };
    return {
        focusWithinProps: {
            onFocus: onFocus,
            onBlur: onBlur
        }
    };
}
exports.useFocusWithin = useFocusWithin;
// iOS fires onPointerEnter twice: once with pointerType="touch" and again with pointerType="mouse".
// We want to ignore these emulated events so they do not trigger hover behavior.
// See https://bugs.webkit.org/show_bug.cgi?id=214609.
let $c4bc39b19aed2151a14d70718d3e34b1$var$globalIgnoreEmulatedMouseEvents = false;
let $c4bc39b19aed2151a14d70718d3e34b1$var$hoverCount = 0;
function $c4bc39b19aed2151a14d70718d3e34b1$var$setGlobalIgnoreEmulatedMouseEvents() {
    $c4bc39b19aed2151a14d70718d3e34b1$var$globalIgnoreEmulatedMouseEvents = true; // Clear globalIgnoreEmulatedMouseEvents after a short timeout. iOS fires onPointerEnter
    // with pointerType="mouse" immediately after onPointerUp and before onFocus. On other
    // devices that don't have this quirk, we don't want to ignore a mouse hover sometime in
    // the distant future because a user previously touched the element.
    setTimeout(()=>{
        $c4bc39b19aed2151a14d70718d3e34b1$var$globalIgnoreEmulatedMouseEvents = false;
    }, 50);
}
function $c4bc39b19aed2151a14d70718d3e34b1$var$handleGlobalPointerEvent(e) {
    if (e.pointerType === 'touch') $c4bc39b19aed2151a14d70718d3e34b1$var$setGlobalIgnoreEmulatedMouseEvents();
}
function $c4bc39b19aed2151a14d70718d3e34b1$var$setupGlobalTouchEvents() {
    if (typeof document === 'undefined') return;
    if (typeof PointerEvent !== 'undefined') document.addEventListener('pointerup', $c4bc39b19aed2151a14d70718d3e34b1$var$handleGlobalPointerEvent);
    else document.addEventListener('touchend', $c4bc39b19aed2151a14d70718d3e34b1$var$setGlobalIgnoreEmulatedMouseEvents);
    $c4bc39b19aed2151a14d70718d3e34b1$var$hoverCount++;
    return ()=>{
        $c4bc39b19aed2151a14d70718d3e34b1$var$hoverCount--;
        if ($c4bc39b19aed2151a14d70718d3e34b1$var$hoverCount > 0) return;
        if (typeof PointerEvent !== 'undefined') document.removeEventListener('pointerup', $c4bc39b19aed2151a14d70718d3e34b1$var$handleGlobalPointerEvent);
        else document.removeEventListener('touchend', $c4bc39b19aed2151a14d70718d3e34b1$var$setGlobalIgnoreEmulatedMouseEvents);
    };
}
/**
 * Handles pointer hover interactions for an element. Normalizes behavior
 * across browsers and platforms, and ignores emulated mouse events on touch devices.
 */ function useHover(props) {
    let { onHoverStart , onHoverChange , onHoverEnd , isDisabled  } = props;
    let [isHovered, setHovered] = useState(false);
    let state = useRef({
        isHovered: false,
        ignoreEmulatedMouseEvents: false,
        pointerType: '',
        target: null
    }).current;
    useEffect($c4bc39b19aed2151a14d70718d3e34b1$var$setupGlobalTouchEvents, []);
    let { hoverProps , triggerHoverEnd  } = useMemo(()=>{
        let triggerHoverStart = (event, pointerType)=>{
            state.pointerType = pointerType;
            if (isDisabled || pointerType === 'touch' || state.isHovered || !event.currentTarget.contains(event.target)) return;
            state.isHovered = true;
            let target = event.target;
            state.target = target;
            if (onHoverStart) onHoverStart({
                type: 'hoverstart',
                target,
                pointerType
            });
            if (onHoverChange) onHoverChange(true);
            setHovered(true);
        };
        let triggerHoverEnd1 = (event, pointerType)=>{
            state.pointerType = '';
            state.target = null;
            if (pointerType === 'touch' || !state.isHovered) return;
            state.isHovered = false;
            let target = event.target;
            if (onHoverEnd) onHoverEnd({
                type: 'hoverend',
                target,
                pointerType
            });
            if (onHoverChange) onHoverChange(false);
            setHovered(false);
        };
        let hoverProps1 = {
        };
        if (typeof PointerEvent !== 'undefined') {
            hoverProps1.onPointerEnter = (e)=>{
                if ($c4bc39b19aed2151a14d70718d3e34b1$var$globalIgnoreEmulatedMouseEvents && e.pointerType === 'mouse') return;
                triggerHoverStart(e, e.pointerType);
            };
            hoverProps1.onPointerLeave = (e)=>{
                if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd1(e, e.pointerType);
            };
        } else {
            hoverProps1.onTouchStart = ()=>{
                state.ignoreEmulatedMouseEvents = true;
            };
            hoverProps1.onMouseEnter = (e)=>{
                if (!state.ignoreEmulatedMouseEvents && !$c4bc39b19aed2151a14d70718d3e34b1$var$globalIgnoreEmulatedMouseEvents) triggerHoverStart(e, 'mouse');
                state.ignoreEmulatedMouseEvents = false;
            };
            hoverProps1.onMouseLeave = (e)=>{
                if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd1(e, 'mouse');
            };
        }
        return {
            hoverProps: hoverProps1,
            triggerHoverEnd: triggerHoverEnd1
        };
    }, [
        onHoverStart,
        onHoverChange,
        onHoverEnd,
        isDisabled,
        state
    ]);
    useEffect(()=>{
        // Call the triggerHoverEnd as soon as isDisabled changes to true
        // Safe to call triggerHoverEnd, it will early return if we aren't currently hovering
        if (isDisabled) triggerHoverEnd({
            target: state.target
        }, state.pointerType);
    }, [
        isDisabled
    ]);
    return {
        hoverProps,
        isHovered
    };
}
exports.useHover = useHover;
/**
 * Example, used in components like Dialogs and Popovers so they can close
 * when a user clicks outside them.
 */ function useInteractOutside(props) {
    let { ref , onInteractOutside , isDisabled , onInteractOutsideStart  } = props;
    let stateRef = useRef({
        isPointerDown: false,
        ignoreEmulatedMouseEvents: false
    });
    let state = stateRef.current;
    useEffect(()=>{
        let onPointerDown = (e)=>{
            if (isDisabled) return;
            if ($f07e167670fb16f6a9d7f8a0eda7e156$var$isValidEvent(e, ref) && onInteractOutside) {
                if (onInteractOutsideStart) onInteractOutsideStart(e);
                state.isPointerDown = true;
            }
        }; // Use pointer events if available. Otherwise, fall back to mouse and touch events.
        if (typeof PointerEvent !== 'undefined') {
            let onPointerUp = (e)=>{
                if (isDisabled) return;
                if (state.isPointerDown && onInteractOutside && $f07e167670fb16f6a9d7f8a0eda7e156$var$isValidEvent(e, ref)) {
                    state.isPointerDown = false;
                    onInteractOutside(e);
                }
            }; // changing these to capture phase fixed combobox
            document.addEventListener('pointerdown', onPointerDown, true);
            document.addEventListener('pointerup', onPointerUp, true);
            return ()=>{
                document.removeEventListener('pointerdown', onPointerDown, true);
                document.removeEventListener('pointerup', onPointerUp, true);
            };
        } else {
            let onMouseUp = (e)=>{
                if (isDisabled) return;
                if (state.ignoreEmulatedMouseEvents) state.ignoreEmulatedMouseEvents = false;
                else if (state.isPointerDown && onInteractOutside && $f07e167670fb16f6a9d7f8a0eda7e156$var$isValidEvent(e, ref)) {
                    state.isPointerDown = false;
                    onInteractOutside(e);
                }
            };
            let onTouchEnd = (e)=>{
                if (isDisabled) return;
                state.ignoreEmulatedMouseEvents = true;
                if (onInteractOutside && state.isPointerDown && $f07e167670fb16f6a9d7f8a0eda7e156$var$isValidEvent(e, ref)) {
                    state.isPointerDown = false;
                    onInteractOutside(e);
                }
            };
            document.addEventListener('mousedown', onPointerDown, true);
            document.addEventListener('mouseup', onMouseUp, true);
            document.addEventListener('touchstart', onPointerDown, true);
            document.addEventListener('touchend', onTouchEnd, true);
            return ()=>{
                document.removeEventListener('mousedown', onPointerDown, true);
                document.removeEventListener('mouseup', onMouseUp, true);
                document.removeEventListener('touchstart', onPointerDown, true);
                document.removeEventListener('touchend', onTouchEnd, true);
            };
        }
    }, [
        onInteractOutside,
        ref,
        state.ignoreEmulatedMouseEvents,
        state.isPointerDown,
        isDisabled
    ]);
}
exports.useInteractOutside = useInteractOutside;
function $f07e167670fb16f6a9d7f8a0eda7e156$var$isValidEvent(event, ref) {
    if (event.button > 0) return false;
     // if the event target is no longer in the document
    if (event.target) {
        const ownerDocument = event.target.ownerDocument;
        if (!ownerDocument || !ownerDocument.documentElement.contains(event.target)) return false;
    }
    return ref.current && !ref.current.contains(event.target);
}
/**
 * This function wraps a React event handler to make stopPropagation the default, and support continuePropagation instead.
 */ function $df2a10e65550e0fb9bbbe4a76eee490$export$createEventHandler(handler) {
    if (!handler) return;
    let shouldStopPropagation = true;
    return (e)=>{
        let event = _babelRuntimeHelpersExtends({
        }, e, {
            preventDefault () {
                e.preventDefault();
            },
            isDefaultPrevented () {
                return e.isDefaultPrevented();
            },
            stopPropagation () {
                console.error('stopPropagation is now the default behavior for events in React Spectrum. You can use continuePropagation() to revert this behavior.');
            },
            continuePropagation () {
                shouldStopPropagation = false;
            }
        });
        handler(event);
        if (shouldStopPropagation) e.stopPropagation();
    };
}
/**
 * Handles keyboard interactions for a focusable element.
 */ function useKeyboard(props) {
    return {
        keyboardProps: props.isDisabled ? {
        } : {
            onKeyDown: $df2a10e65550e0fb9bbbe4a76eee490$export$createEventHandler(props.onKeyDown),
            onKeyUp: $df2a10e65550e0fb9bbbe4a76eee490$export$createEventHandler(props.onKeyUp)
        }
    };
}
exports.useKeyboard = useKeyboard;
/**
 * Handles move interactions across mouse, touch, and keyboard, including dragging with
 * the mouse or touch, and using the arrow keys. Normalizes behavior across browsers and
 * platforms, and ignores emulated mouse events on touch devices.
 */ function useMove(props) {
    let { onMoveStart , onMove , onMoveEnd  } = props;
    let state = useRef({
        didMove: false,
        lastPosition: null,
        id: null
    });
    let { addGlobalListener , removeGlobalListener  } = useGlobalListeners();
    let moveProps = useMemo(()=>{
        let moveProps1 = {
        };
        let start = ()=>{
            $ce801cc8e3ff24b95c928e0152c7b7f2$export$disableTextSelection();
            state.current.didMove = false;
        };
        let move = (pointerType, deltaX, deltaY)=>{
            if (deltaX === 0 && deltaY === 0) return;
            if (!state.current.didMove) {
                state.current.didMove = true;
                onMoveStart == null || onMoveStart({
                    type: 'movestart',
                    pointerType
                });
            }
            onMove({
                type: 'move',
                pointerType,
                deltaX: deltaX,
                deltaY: deltaY
            });
        };
        let end = (pointerType)=>{
            $ce801cc8e3ff24b95c928e0152c7b7f2$export$restoreTextSelection();
            if (state.current.didMove) onMoveEnd == null || onMoveEnd({
                type: 'moveend',
                pointerType
            });
        };
        if (typeof PointerEvent === 'undefined') {
            let onMouseMove = (e)=>{
                if (e.button === 0) {
                    move('mouse', e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);
                    state.current.lastPosition = {
                        pageX: e.pageX,
                        pageY: e.pageY
                    };
                }
            };
            let onMouseUp = (e)=>{
                if (e.button === 0) {
                    end('mouse');
                    removeGlobalListener(window, 'mousemove', onMouseMove, false);
                    removeGlobalListener(window, 'mouseup', onMouseUp, false);
                }
            };
            moveProps1.onMouseDown = (e)=>{
                if (e.button === 0) {
                    start();
                    e.stopPropagation();
                    e.preventDefault();
                    state.current.lastPosition = {
                        pageX: e.pageX,
                        pageY: e.pageY
                    };
                    addGlobalListener(window, 'mousemove', onMouseMove, false);
                    addGlobalListener(window, 'mouseup', onMouseUp, false);
                }
            };
            let onTouchMove = (e)=>{
                // @ts-ignore
                let touch = [
                    ...e.changedTouches
                ].findIndex((_ref)=>{
                    let { identifier  } = _ref;
                    return identifier === state.current.id;
                });
                if (touch >= 0) {
                    let { pageX , pageY  } = e.changedTouches[touch];
                    move('touch', pageX - state.current.lastPosition.pageX, pageY - state.current.lastPosition.pageY);
                    state.current.lastPosition = {
                        pageX,
                        pageY
                    };
                }
            };
            let onTouchEnd = (e)=>{
                // @ts-ignore
                let touch = [
                    ...e.changedTouches
                ].findIndex((_ref2)=>{
                    let { identifier  } = _ref2;
                    return identifier === state.current.id;
                });
                if (touch >= 0) {
                    end('touch');
                    state.current.id = null;
                    removeGlobalListener(window, 'touchmove', onTouchMove);
                    removeGlobalListener(window, 'touchend', onTouchEnd);
                    removeGlobalListener(window, 'touchcancel', onTouchEnd);
                }
            };
            moveProps1.onTouchStart = (e)=>{
                if (e.changedTouches.length === 0 || state.current.id != null) return;
                let { pageX , pageY , identifier  } = e.changedTouches[0];
                start();
                e.stopPropagation();
                e.preventDefault();
                state.current.lastPosition = {
                    pageX,
                    pageY
                };
                state.current.id = identifier;
                addGlobalListener(window, 'touchmove', onTouchMove, false);
                addGlobalListener(window, 'touchend', onTouchEnd, false);
                addGlobalListener(window, 'touchcancel', onTouchEnd, false);
            };
        } else {
            let onPointerMove = (e)=>{
                if (e.pointerId === state.current.id) {
                    // @ts-ignore
                    let pointerType = e.pointerType || 'mouse'; // Problems with PointerEvent#movementX/movementY:
                    // 1. it is always 0 on macOS Safari.
                    // 2. On Chrome Android, it's scaled by devicePixelRatio, but not on Chrome macOS
                    move(pointerType, e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);
                    state.current.lastPosition = {
                        pageX: e.pageX,
                        pageY: e.pageY
                    };
                }
            };
            let onPointerUp = (e)=>{
                if (e.pointerId === state.current.id) {
                    // @ts-ignore
                    let pointerType = e.pointerType || 'mouse';
                    end(pointerType);
                    state.current.id = null;
                    removeGlobalListener(window, 'pointermove', onPointerMove, false);
                    removeGlobalListener(window, 'pointerup', onPointerUp, false);
                    removeGlobalListener(window, 'pointercancel', onPointerUp, false);
                }
            };
            moveProps1.onPointerDown = (e)=>{
                if (e.button === 0 && state.current.id == null) {
                    start();
                    e.stopPropagation();
                    e.preventDefault();
                    state.current.lastPosition = {
                        pageX: e.pageX,
                        pageY: e.pageY
                    };
                    state.current.id = e.pointerId;
                    addGlobalListener(window, 'pointermove', onPointerMove, false);
                    addGlobalListener(window, 'pointerup', onPointerUp, false);
                    addGlobalListener(window, 'pointercancel', onPointerUp, false);
                }
            };
        }
        let triggerKeyboardMove = (deltaX, deltaY)=>{
            start();
            move('keyboard', deltaX, deltaY);
            end('keyboard');
        };
        moveProps1.onKeyDown = (e)=>{
            switch(e.key){
                case 'Left':
                case 'ArrowLeft':
                    e.preventDefault();
                    e.stopPropagation();
                    triggerKeyboardMove(-1, 0);
                    break;
                case 'Right':
                case 'ArrowRight':
                    e.preventDefault();
                    e.stopPropagation();
                    triggerKeyboardMove(1, 0);
                    break;
                case 'Up':
                case 'ArrowUp':
                    e.preventDefault();
                    e.stopPropagation();
                    triggerKeyboardMove(0, -1);
                    break;
                case 'Down':
                case 'ArrowDown':
                    e.preventDefault();
                    e.stopPropagation();
                    triggerKeyboardMove(0, 1);
                    break;
            }
        };
        return moveProps1;
    }, [
        state,
        onMoveStart,
        onMove,
        onMoveEnd,
        addGlobalListener,
        removeGlobalListener
    ]);
    return {
        moveProps
    };
}
exports.useMove = useMove;
// scroll wheel needs to be added not passively so it's cancelable, small helper hook to remember that
function useScrollWheel(props, ref) {
    let { onScroll , isDisabled  } = props;
    let onScrollHandler = useCallback((e)=>{
        // If the ctrlKey is pressed, this is a zoom event, do nothing.
        if (e.ctrlKey) return;
         // stop scrolling the page
        e.preventDefault();
        e.stopPropagation();
        if (onScroll) onScroll({
            deltaX: e.deltaX,
            deltaY: e.deltaY
        });
    }, [
        onScroll
    ]);
    useEffect(()=>{
        let elem = ref.current;
        if (isDisabled) return;
        elem.addEventListener('wheel', onScrollHandler);
        return ()=>{
            elem.removeEventListener('wheel', onScrollHandler);
        };
    }, [
        onScrollHandler,
        ref,
        isDisabled
    ]);
}
exports.useScrollWheel = useScrollWheel;

},{"react":"a6qBW","@react-aria/utils":"d8qxy","@babel/runtime/helpers/objectWithoutPropertiesLoose":"5byko","@babel/runtime/helpers/extends":"5xz6u"}],"7AZQ5":[function(require,module,exports) {
var { useTooltipTriggerState  } = require("@react-stately/tooltip");
var { useOverlayPosition  } = require("@react-aria/overlays");
var { Overlay  } = require("@react-spectrum/overlays");
var { FocusableProvider  } = require("@react-aria/focus");
var { useTooltip , useTooltipTrigger  } = require("@react-aria/tooltip");
var _spectrumIconsUiSuccessSmall = $parcel$interopDefault(require("@spectrum-icons/ui/SuccessSmall"));
var _react2 = require("react");
var _react = $parcel$interopDefault(_react2);
var { useContext , useImperativeHandle , useRef  } = _react2;
var { mergeProps  } = require("@react-aria/utils");
var _spectrumIconsUiInfoSmall = $parcel$interopDefault(require("@spectrum-icons/ui/InfoSmall"));
var { classNames , createDOMRef , useStyleProps  } = require("@react-spectrum/utils");
var _spectrumIconsUiAlertSmall = $parcel$interopDefault(require("@spectrum-icons/ui/AlertSmall"));
var _babelRuntimeHelpersObjectWithoutPropertiesLoose = $parcel$interopDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
require("./main.css");
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/tooltip/vars.css
var $e02064c879d8df5d7c99552d96e8391$exports = {
};
$e02064c879d8df5d7c99552d96e8391$exports = {
    "spectrum-Tooltip": "_spectrum-Tooltip_23042",
    "is-open": "_is-open_23042",
    "spectrum-Tooltip--bottom": "_spectrum-Tooltip--bottom_23042",
    "spectrum-Tooltip--top": "_spectrum-Tooltip--top_23042",
    "spectrum-Tooltip--right": "_spectrum-Tooltip--right_23042",
    "spectrum-Tooltip--left": "_spectrum-Tooltip--left_23042",
    "spectrum-Tooltip-tip": "_spectrum-Tooltip-tip_23042",
    "spectrum-Tooltip-typeIcon": "_spectrum-Tooltip-typeIcon_23042",
    "spectrum-Tooltip-label": "_spectrum-Tooltip-label_23042",
    "u-tooltip-showOnHover": "_u-tooltip-showOnHover_23042",
    "is-hovered": "_is-hovered_23042",
    "is-focused": "_is-focused_23042",
    "spectrum-Tooltip--negative": "_spectrum-Tooltip--negative_23042",
    "spectrum-Tooltip--error": "_spectrum-Tooltip--error_23042",
    "spectrum-Tooltip--info": "_spectrum-Tooltip--info_23042",
    "spectrum-Tooltip--help": "_spectrum-Tooltip--help_23042",
    "spectrum-Tooltip--positive": "_spectrum-Tooltip--positive_23042",
    "spectrum-Tooltip--success": "_spectrum-Tooltip--success_23042"
};
const $a23748555680c48540a4239b15ea00bc$export$TooltipContext = /*#__PURE__*/ _react.createContext({
});
let $ff273912ab399ba4f2bd386cbddf33$var$iconMap = {
    info: _spectrumIconsUiInfoSmall,
    positive: _spectrumIconsUiSuccessSmall,
    negative: _spectrumIconsUiAlertSmall
};
var $e02064c879d8df5d7c99552d96e8391$$interop$default = $parcel$interopDefault($e02064c879d8df5d7c99552d96e8391$exports);
function $ff273912ab399ba4f2bd386cbddf33$var$Tooltip(props, ref) {
    let _useContext = useContext($a23748555680c48540a4239b15ea00bc$export$TooltipContext), { ref: overlayRef , arrowProps , state  } = _useContext, tooltipProviderProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(_useContext, [
        "ref",
        "arrowProps",
        "state"
    ]);
    let defaultRef = useRef();
    overlayRef = overlayRef || defaultRef;
    props = mergeProps(props, tooltipProviderProps);
    let { variant ='neutral' , placement ='top' , isOpen , showIcon  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "variant",
        "placement",
        "isOpen",
        "showIcon"
    ]);
    let { styleProps  } = useStyleProps(otherProps);
    let { tooltipProps  } = useTooltip(props, state); // Sync ref with overlayRef from context.
    useImperativeHandle(ref, ()=>createDOMRef(overlayRef)
    );
    let Icon = $ff273912ab399ba4f2bd386cbddf33$var$iconMap[variant];
    return(/*#__PURE__*/ _react.createElement("div", _babelRuntimeHelpersExtends({
    }, styleProps, tooltipProps, {
        className: classNames($e02064c879d8df5d7c99552d96e8391$$interop$default, 'spectrum-Tooltip', "spectrum-Tooltip--" + variant, "spectrum-Tooltip--" + placement, {
            'is-open': isOpen
        }, styleProps.className),
        ref: overlayRef
    }), showIcon && variant !== 'neutral' && /*#__PURE__*/ _react.createElement(Icon, {
        UNSAFE_className: classNames($e02064c879d8df5d7c99552d96e8391$$interop$default, 'spectrum-Tooltip-typeIcon'),
        "aria-hidden": true
    }), props.children && /*#__PURE__*/ _react.createElement("span", {
        className: classNames($e02064c879d8df5d7c99552d96e8391$$interop$default, 'spectrum-Tooltip-label')
    }, props.children), /*#__PURE__*/ _react.createElement("span", _babelRuntimeHelpersExtends({
    }, arrowProps, {
        className: classNames($e02064c879d8df5d7c99552d96e8391$$interop$default, 'spectrum-Tooltip-tip')
    }))));
}
/**
 * Display container for Tooltip content. Has a directional arrow dependent on its placement.
 */ let Tooltip = /*#__PURE__*/ _react.forwardRef($ff273912ab399ba4f2bd386cbddf33$var$Tooltip);
exports.Tooltip = Tooltip;
const $b29140c6a34ca04560623b3e2e0d4c0b$var$DEFAULT_OFFSET = -1; // Offset needed to reach 4px/5px (med/large) distance between tooltip and trigger button
const $b29140c6a34ca04560623b3e2e0d4c0b$var$DEFAULT_CROSS_OFFSET = 0;
function $b29140c6a34ca04560623b3e2e0d4c0b$var$TooltipTrigger(props) {
    let { children , crossOffset =$b29140c6a34ca04560623b3e2e0d4c0b$var$DEFAULT_CROSS_OFFSET , isDisabled , offset =$b29140c6a34ca04560623b3e2e0d4c0b$var$DEFAULT_OFFSET , trigger: triggerAction  } = props;
    let [trigger, tooltip] = _react.Children.toArray(children);
    let state = useTooltipTriggerState(props);
    let tooltipTriggerRef = useRef();
    let overlayRef = useRef();
    let { triggerProps , tooltipProps  } = useTooltipTrigger({
        isDisabled,
        trigger: triggerAction
    }, state, tooltipTriggerRef);
    let { overlayProps , arrowProps , placement  } = useOverlayPosition({
        placement: props.placement || 'top',
        targetRef: tooltipTriggerRef,
        overlayRef,
        offset,
        crossOffset,
        isOpen: state.isOpen
    });
    return(/*#__PURE__*/ _react.createElement(FocusableProvider, _babelRuntimeHelpersExtends({
    }, triggerProps, {
        ref: tooltipTriggerRef
    }), trigger, /*#__PURE__*/ _react.createElement($a23748555680c48540a4239b15ea00bc$export$TooltipContext.Provider, {
        value: _babelRuntimeHelpersExtends({
            state,
            placement,
            ref: overlayRef,
            UNSAFE_style: overlayProps.style,
            arrowProps
        }, tooltipProps)
    }, /*#__PURE__*/ _react.createElement(Overlay, {
        isOpen: state.isOpen
    }, tooltip))));
} // Support TooltipTrigger inside components using CollectionBuilder.
$b29140c6a34ca04560623b3e2e0d4c0b$var$TooltipTrigger.getCollectionNode = function*(props) {
    // Replaced the use of React.Childern.toArray because it mutates the key prop.
    let childArray = [];
    _react.Children.forEach(props.children, (child)=>{
        if (/*#__PURE__*/ _react.isValidElement(child)) childArray.push(child);
    });
    let [trigger, tooltip] = childArray;
    yield {
        element: trigger,
        wrapper: (element)=>/*#__PURE__*/ _react.createElement($b29140c6a34ca04560623b3e2e0d4c0b$var$TooltipTrigger, _babelRuntimeHelpersExtends({
                key: element.key
            }, props), element, tooltip)
    };
};
/**
 * TooltipTrigger wraps around a trigger element and a Tooltip. It handles opening and closing
 * the Tooltip when the user hovers over or focuses the trigger, and positioning the Tooltip
 * relative to the trigger.
 */ // We don't want getCollectionNode to show up in the type definition
let TooltipTrigger = $b29140c6a34ca04560623b3e2e0d4c0b$var$TooltipTrigger;
exports.TooltipTrigger = TooltipTrigger;

},{"@react-stately/tooltip":"2I70V","@react-aria/overlays":"6I1ei","@react-spectrum/overlays":"4hImP","@react-aria/focus":"76fMY","@react-aria/tooltip":"81ZAN","@spectrum-icons/ui/SuccessSmall":"2dXMJ","react":"a6qBW","@react-aria/utils":"d8qxy","@spectrum-icons/ui/InfoSmall":"2SWlN","@react-spectrum/utils":"7ch5A","@spectrum-icons/ui/AlertSmall":"LB508","@babel/runtime/helpers/objectWithoutPropertiesLoose":"5byko","@babel/runtime/helpers/extends":"5xz6u","./main.css":"503wq"}],"2I70V":[function(require,module,exports) {
var { useOverlayTriggerState  } = require("@react-stately/overlays");
var { useEffect , useMemo , useRef  } = require("react");
const $dbf206483fc3f3f5862f69116107e0c$var$TOOLTIP_DELAY = 1500; // this seems to be a 1.5 second delay, check with design
const $dbf206483fc3f3f5862f69116107e0c$var$TOOLTIP_COOLDOWN = 500;
let $dbf206483fc3f3f5862f69116107e0c$var$tooltips = {
};
let $dbf206483fc3f3f5862f69116107e0c$var$tooltipId = 0;
let $dbf206483fc3f3f5862f69116107e0c$var$globalWarmedUp = false;
let $dbf206483fc3f3f5862f69116107e0c$var$globalWarmUpTimeout = null;
let $dbf206483fc3f3f5862f69116107e0c$var$globalCooldownTimeout = null;
/**
 * Manages state for a tooltip trigger. Tracks whether the tooltip is open, and provides
 * methods to toggle this state. Ensures only one tooltip is open at a time and controls
 * the delay for showing a tooltip.
 */ function useTooltipTriggerState(props) {
    if (props === void 0) props = {
    };
    let { delay =$dbf206483fc3f3f5862f69116107e0c$var$TOOLTIP_DELAY  } = props;
    let { isOpen , open , close  } = useOverlayTriggerState(props);
    let id = useMemo(()=>"" + ++$dbf206483fc3f3f5862f69116107e0c$var$tooltipId
    , []);
    let closeTimeout = useRef();
    let ensureTooltipEntry = ()=>{
        $dbf206483fc3f3f5862f69116107e0c$var$tooltips[id] = hideTooltip;
    };
    let closeOpenTooltips = ()=>{
        for(let hideTooltipId in $dbf206483fc3f3f5862f69116107e0c$var$tooltips)if (hideTooltipId !== id) {
            $dbf206483fc3f3f5862f69116107e0c$var$tooltips[hideTooltipId](true);
            delete $dbf206483fc3f3f5862f69116107e0c$var$tooltips[hideTooltipId];
        }
    };
    let showTooltip = ()=>{
        clearTimeout(closeTimeout.current);
        closeTimeout.current = null;
        closeOpenTooltips();
        ensureTooltipEntry();
        $dbf206483fc3f3f5862f69116107e0c$var$globalWarmedUp = true;
        open();
        if ($dbf206483fc3f3f5862f69116107e0c$var$globalWarmUpTimeout) {
            clearTimeout($dbf206483fc3f3f5862f69116107e0c$var$globalWarmUpTimeout);
            $dbf206483fc3f3f5862f69116107e0c$var$globalWarmUpTimeout = null;
        }
        if ($dbf206483fc3f3f5862f69116107e0c$var$globalCooldownTimeout) {
            clearTimeout($dbf206483fc3f3f5862f69116107e0c$var$globalCooldownTimeout);
            $dbf206483fc3f3f5862f69116107e0c$var$globalCooldownTimeout = null;
        }
    };
    let hideTooltip = (immediate)=>{
        if (immediate) {
            clearTimeout(closeTimeout.current);
            closeTimeout.current = null;
            close();
        } else if (!closeTimeout.current) closeTimeout.current = setTimeout(()=>{
            closeTimeout.current = null;
            close();
        }, $dbf206483fc3f3f5862f69116107e0c$var$TOOLTIP_COOLDOWN);
        if ($dbf206483fc3f3f5862f69116107e0c$var$globalWarmUpTimeout) {
            clearTimeout($dbf206483fc3f3f5862f69116107e0c$var$globalWarmUpTimeout);
            $dbf206483fc3f3f5862f69116107e0c$var$globalWarmUpTimeout = null;
        }
        if ($dbf206483fc3f3f5862f69116107e0c$var$globalWarmedUp) {
            if ($dbf206483fc3f3f5862f69116107e0c$var$globalCooldownTimeout) clearTimeout($dbf206483fc3f3f5862f69116107e0c$var$globalCooldownTimeout);
            $dbf206483fc3f3f5862f69116107e0c$var$globalCooldownTimeout = setTimeout(()=>{
                delete $dbf206483fc3f3f5862f69116107e0c$var$tooltips[id];
                $dbf206483fc3f3f5862f69116107e0c$var$globalCooldownTimeout = null;
                $dbf206483fc3f3f5862f69116107e0c$var$globalWarmedUp = false;
            }, $dbf206483fc3f3f5862f69116107e0c$var$TOOLTIP_COOLDOWN);
        }
    };
    let warmupTooltip = ()=>{
        closeOpenTooltips();
        ensureTooltipEntry();
        if (!isOpen && !$dbf206483fc3f3f5862f69116107e0c$var$globalWarmUpTimeout && !$dbf206483fc3f3f5862f69116107e0c$var$globalWarmedUp) $dbf206483fc3f3f5862f69116107e0c$var$globalWarmUpTimeout = setTimeout(()=>{
            $dbf206483fc3f3f5862f69116107e0c$var$globalWarmUpTimeout = null;
            $dbf206483fc3f3f5862f69116107e0c$var$globalWarmedUp = true;
            showTooltip();
        }, delay);
        else if (!isOpen) showTooltip();
    }; // eslint-disable-next-line arrow-body-style
    useEffect(()=>{
        return ()=>{
            clearTimeout(closeTimeout.current);
            let tooltip = $dbf206483fc3f3f5862f69116107e0c$var$tooltips[id];
            if (tooltip) delete $dbf206483fc3f3f5862f69116107e0c$var$tooltips[id];
        };
    }, [
        id
    ]);
    return {
        isOpen,
        open: (immediate)=>{
            if (!immediate && delay > 0 && !closeTimeout.current) warmupTooltip();
            else showTooltip();
        },
        close: hideTooltip
    };
}
exports.useTooltipTriggerState = useTooltipTriggerState;

},{"@react-stately/overlays":"XwYBm","react":"a6qBW"}],"XwYBm":[function(require,module,exports) {
var { useControlledState  } = require("@react-stately/utils");
/**
 * Manages state for an overlay trigger. Tracks whether the overlay is open, and provides
 * methods to toggle this state.
 */ function useOverlayTriggerState(props) {
    let [isOpen, setOpen] = useControlledState(props.isOpen, props.defaultOpen || false, props.onOpenChange);
    return {
        isOpen,
        open () {
            setOpen(true);
        },
        close () {
            setOpen(false);
        },
        toggle () {
            setOpen(!isOpen);
        }
    };
}
exports.useOverlayTriggerState = useOverlayTriggerState;

},{"@react-stately/utils":"7ILZk"}],"6I1ei":[function(require,module,exports) {
var { VisuallyHidden  } = require("@react-aria/visually-hidden");
var _babelRuntimeHelpersInteropRequireDefault = $parcel$interopDefault(require("@babel/runtime/helpers/interopRequireDefault"));
var _reactDom = $parcel$interopDefault(require("react-dom"));
var _babelRuntimeHelpersObjectWithoutPropertiesLoose = $parcel$interopDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var { useFocusWithin , useInteractOutside  } = require("@react-aria/interactions");
var { useLocale , useMessageFormatter  } = require("@react-aria/i18n");
var { useLayoutEffect , useId , chain , getScrollParent , isIOS  } = require("@react-aria/utils");
var _react2 = require("react");
var _react = $parcel$interopDefault(_react2);
var { useCallback , useRef , useState , useEffect , useContext , useMemo  } = _react2;
var _domHelpersOwnerDocument = $parcel$interopDefault(require("dom-helpers/ownerDocument"));
var _domHelpersQueryScrollTop = $parcel$interopDefault(require("dom-helpers/query/scrollTop"));
var _domHelpersQueryScrollLeft = $parcel$interopDefault(require("dom-helpers/query/scrollLeft"));
var _domHelpersQueryPosition = $parcel$interopDefault(require("dom-helpers/query/position"));
var _domHelpersQueryOffset = $parcel$interopDefault(require("dom-helpers/query/offset"));
var _domHelpersStyle = $parcel$interopDefault(require("dom-helpers/style"));
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
const $c13020473a0fe27b1a1c4797269d1704$var$AXIS = {
    top: 'top',
    bottom: 'top',
    left: 'left',
    right: 'left'
};
const $c13020473a0fe27b1a1c4797269d1704$var$FLIPPED_DIRECTION = {
    top: 'bottom',
    bottom: 'top',
    left: 'right',
    right: 'left'
};
const $c13020473a0fe27b1a1c4797269d1704$var$CROSS_AXIS = {
    top: 'left',
    left: 'top'
};
const $c13020473a0fe27b1a1c4797269d1704$var$AXIS_SIZE = {
    top: 'height',
    left: 'width'
};
const $c13020473a0fe27b1a1c4797269d1704$var$PARSED_PLACEMENT_CACHE = {
}; // @ts-ignore
let $c13020473a0fe27b1a1c4797269d1704$var$visualViewport = typeof window !== 'undefined' && window.visualViewport;
function $c13020473a0fe27b1a1c4797269d1704$var$getContainerDimensions(containerNode) {
    let width = 0, height = 0, top = 0, left = 0;
    let scroll = {
    };
    if (containerNode.tagName === 'BODY') {
        var _visualViewport$width, _visualViewport$heigh;
        width = (_visualViewport$width = $c13020473a0fe27b1a1c4797269d1704$var$visualViewport == null ? void 0 : $c13020473a0fe27b1a1c4797269d1704$var$visualViewport.width) != null ? _visualViewport$width : document.documentElement.clientWidth;
        height = (_visualViewport$heigh = $c13020473a0fe27b1a1c4797269d1704$var$visualViewport == null ? void 0 : $c13020473a0fe27b1a1c4797269d1704$var$visualViewport.height) != null ? _visualViewport$heigh : document.documentElement.clientHeight;
        scroll.top = _domHelpersQueryScrollTop(_domHelpersOwnerDocument(containerNode).documentElement) || _domHelpersQueryScrollTop(containerNode);
        scroll.left = _domHelpersQueryScrollLeft(_domHelpersOwnerDocument(containerNode).documentElement) || _domHelpersQueryScrollLeft(containerNode);
    } else {
        ({ width , height , top , left  } = _domHelpersQueryOffset(containerNode));
        scroll.top = _domHelpersQueryScrollTop(containerNode);
        scroll.left = _domHelpersQueryScrollLeft(containerNode);
    }
    return {
        width,
        height,
        scroll,
        top,
        left
    };
}
function $c13020473a0fe27b1a1c4797269d1704$var$getScroll(node) {
    return {
        top: node.scrollTop,
        left: node.scrollLeft,
        width: node.scrollWidth,
        height: node.scrollHeight
    };
}
function $c13020473a0fe27b1a1c4797269d1704$var$getDelta(axis, offset, size, containerDimensions, padding) {
    let containerScroll = containerDimensions.scroll[axis];
    let containerHeight = containerDimensions[$c13020473a0fe27b1a1c4797269d1704$var$AXIS_SIZE[axis]];
    let startEdgeOffset = offset - padding - containerScroll;
    let endEdgeOffset = offset + padding - containerScroll + size;
    if (startEdgeOffset < 0) return -startEdgeOffset;
    else if (endEdgeOffset > containerHeight) return Math.max(containerHeight - endEdgeOffset, -startEdgeOffset);
    else return 0;
}
function $c13020473a0fe27b1a1c4797269d1704$var$getMargins(node) {
    let style = window.getComputedStyle(node);
    return {
        top: parseInt(style.marginTop, 10) || 0,
        bottom: parseInt(style.marginBottom, 10) || 0,
        left: parseInt(style.marginLeft, 10) || 0,
        right: parseInt(style.marginRight, 10) || 0
    };
}
function $c13020473a0fe27b1a1c4797269d1704$var$parsePlacement(input) {
    if ($c13020473a0fe27b1a1c4797269d1704$var$PARSED_PLACEMENT_CACHE[input]) return $c13020473a0fe27b1a1c4797269d1704$var$PARSED_PLACEMENT_CACHE[input];
    let [placement, crossPlacement] = input.split(' ');
    let axis = $c13020473a0fe27b1a1c4797269d1704$var$AXIS[placement] || 'right';
    let crossAxis = $c13020473a0fe27b1a1c4797269d1704$var$CROSS_AXIS[axis];
    if (!$c13020473a0fe27b1a1c4797269d1704$var$AXIS[crossPlacement]) crossPlacement = 'center';
    let size = $c13020473a0fe27b1a1c4797269d1704$var$AXIS_SIZE[axis];
    let crossSize = $c13020473a0fe27b1a1c4797269d1704$var$AXIS_SIZE[crossAxis];
    $c13020473a0fe27b1a1c4797269d1704$var$PARSED_PLACEMENT_CACHE[input] = {
        placement,
        crossPlacement,
        axis,
        crossAxis,
        size,
        crossSize
    };
    return $c13020473a0fe27b1a1c4797269d1704$var$PARSED_PLACEMENT_CACHE[input];
}
function $c13020473a0fe27b1a1c4797269d1704$var$computePosition(childOffset, boundaryDimensions, overlaySize, placementInfo, offset, crossOffset, containerOffsetWithBoundary, isContainerPositioned) {
    let { placement , crossPlacement , axis , crossAxis , size , crossSize  } = placementInfo;
    let position = {
    }; // button position
    position[crossAxis] = childOffset[crossAxis];
    if (crossPlacement === 'center') //  + (button size / 2) - (overlay size / 2)
    // at this point the overlay center should match the button center
    position[crossAxis] += (childOffset[crossSize] - overlaySize[crossSize]) / 2;
    else if (crossPlacement !== crossAxis) //  + (button size) - (overlay size)
    // at this point the overlay bottom should match the button bottom
    position[crossAxis] += childOffset[crossSize] - overlaySize[crossSize];
    /* else {
   the overlay top should match the button top
  } */ // add the crossOffset from props
    position[crossAxis] += crossOffset; // this is button center position - the overlay size + half of the button to align bottom of overlay with button center
    let minViablePosition = childOffset[crossAxis] + childOffset[crossSize] / 2 - overlaySize[crossSize]; // this is button position of center, aligns top of overlay with button center
    let maxViablePosition = childOffset[crossAxis] + childOffset[crossSize] / 2; // clamp it into the range of the min/max positions
    position[crossAxis] = Math.min(Math.max(minViablePosition, position[crossAxis]), maxViablePosition); // Floor these so the position isn't placed on a partial pixel, only whole pixels. Shouldn't matter if it was floored or ceiled, so chose one.
    if (placement === axis) {
        // If the container is positioned (non-static), then we use the container's actual
        // height, as `bottom` will be relative to this height.  But if the container is static,
        // then it can only be the `document.body`, and `bottom` will be relative to _its_
        // container, which should be as large as boundaryDimensions.
        const containerHeight = isContainerPositioned ? containerOffsetWithBoundary[size] : boundaryDimensions[size];
        position[$c13020473a0fe27b1a1c4797269d1704$var$FLIPPED_DIRECTION[axis]] = Math.floor(containerHeight - childOffset[axis] + offset);
    } else position[axis] = Math.floor(childOffset[axis] + childOffset[size] + offset);
    return position;
}
function $c13020473a0fe27b1a1c4797269d1704$var$getMaxHeight(position, boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding) {
    return position.top != null ? Math.max(0, boundaryDimensions.height + boundaryDimensions.top + boundaryDimensions.scroll.top - (containerOffsetWithBoundary.top + position.top) - (margins.top + margins.bottom + padding)// save additional space for margin and padding
    ) : Math.max(0, childOffset.top + containerOffsetWithBoundary.top - (boundaryDimensions.top + boundaryDimensions.scroll.top) - (margins.top + margins.bottom + padding)// save additional space for margin and padding
    );
}
function $c13020473a0fe27b1a1c4797269d1704$var$getAvailableSpace(boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding, placementInfo) {
    let { placement , axis , size  } = placementInfo;
    if (placement === axis) return Math.max(0, childOffset[axis] - boundaryDimensions[axis] - boundaryDimensions.scroll[axis] + containerOffsetWithBoundary[axis] - margins[axis] - margins[$c13020473a0fe27b1a1c4797269d1704$var$FLIPPED_DIRECTION[axis]] - padding);
    return Math.max(0, boundaryDimensions[size] + boundaryDimensions[axis] + boundaryDimensions.scroll[axis] - containerOffsetWithBoundary[axis] - childOffset[axis] - childOffset[size] - margins[axis] - margins[$c13020473a0fe27b1a1c4797269d1704$var$FLIPPED_DIRECTION[axis]] - padding);
}
function $c13020473a0fe27b1a1c4797269d1704$export$calculatePositionInternal(placementInput, childOffset, overlaySize, scrollSize, margins, padding, flip, boundaryDimensions, containerOffsetWithBoundary, offset, crossOffset, isContainerPositioned) {
    let placementInfo = $c13020473a0fe27b1a1c4797269d1704$var$parsePlacement(placementInput);
    let { size , crossAxis , crossSize , placement , crossPlacement  } = placementInfo;
    let position = $c13020473a0fe27b1a1c4797269d1704$var$computePosition(childOffset, boundaryDimensions, overlaySize, placementInfo, offset, crossOffset, containerOffsetWithBoundary, isContainerPositioned);
    let normalizedOffset = offset;
    let space = $c13020473a0fe27b1a1c4797269d1704$var$getAvailableSpace(boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding + offset, placementInfo); // Check if the scroll size of the overlay is greater than the available space to determine if we need to flip
    if (flip && scrollSize[size] > space) {
        let flippedPlacementInfo = $c13020473a0fe27b1a1c4797269d1704$var$parsePlacement($c13020473a0fe27b1a1c4797269d1704$var$FLIPPED_DIRECTION[placement] + " " + crossPlacement);
        let flippedPosition = $c13020473a0fe27b1a1c4797269d1704$var$computePosition(childOffset, boundaryDimensions, overlaySize, flippedPlacementInfo, offset, crossOffset, containerOffsetWithBoundary, isContainerPositioned);
        let flippedSpace = $c13020473a0fe27b1a1c4797269d1704$var$getAvailableSpace(boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding + offset, flippedPlacementInfo); // If the available space for the flipped position is greater than the original available space, flip.
        if (flippedSpace > space) {
            placementInfo = flippedPlacementInfo;
            position = flippedPosition;
            normalizedOffset = offset;
        }
    }
    let delta = $c13020473a0fe27b1a1c4797269d1704$var$getDelta(crossAxis, position[crossAxis], overlaySize[crossSize], boundaryDimensions, padding);
    position[crossAxis] += delta;
    let maxHeight = $c13020473a0fe27b1a1c4797269d1704$var$getMaxHeight(position, boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding);
    overlaySize.height = Math.min(overlaySize.height, maxHeight);
    position = $c13020473a0fe27b1a1c4797269d1704$var$computePosition(childOffset, boundaryDimensions, overlaySize, placementInfo, normalizedOffset, crossOffset, containerOffsetWithBoundary, isContainerPositioned);
    delta = $c13020473a0fe27b1a1c4797269d1704$var$getDelta(crossAxis, position[crossAxis], overlaySize[crossSize], boundaryDimensions, padding);
    position[crossAxis] += delta;
    let arrowPosition = {
    };
    arrowPosition[crossAxis] = childOffset[crossAxis] - position[crossAxis] + childOffset[crossSize] / 2;
    return {
        position,
        maxHeight: maxHeight,
        arrowOffsetLeft: arrowPosition.left,
        arrowOffsetTop: arrowPosition.top,
        placement: placementInfo.placement
    };
}
/**
 * Determines where to place the overlay with regards to the target and the position of an optional indicator.
 */ function $c13020473a0fe27b1a1c4797269d1704$export$calculatePosition(opts) {
    let { placement , targetNode , overlayNode , scrollNode , padding , shouldFlip , boundaryElement , offset , crossOffset  } = opts;
    let container = overlayNode.offsetParent || document.body;
    let isBodyContainer = container.tagName === 'BODY';
    const containerPositionStyle = window.getComputedStyle(container).position;
    let isContainerPositioned = !!containerPositionStyle && containerPositionStyle !== 'static';
    let childOffset = isBodyContainer ? _domHelpersQueryOffset(targetNode) : _domHelpersQueryPosition(targetNode, container);
    if (!isBodyContainer) {
        childOffset.top += parseInt(_domHelpersStyle(targetNode, 'marginTop'), 10) || 0;
        childOffset.left += parseInt(_domHelpersStyle(targetNode, 'marginLeft'), 10) || 0;
    }
    let overlaySize = _domHelpersQueryOffset(overlayNode);
    let margins = $c13020473a0fe27b1a1c4797269d1704$var$getMargins(overlayNode);
    overlaySize.width += margins.left + margins.right;
    overlaySize.height += margins.top + margins.bottom;
    let scrollSize = $c13020473a0fe27b1a1c4797269d1704$var$getScroll(scrollNode);
    let boundaryDimensions = $c13020473a0fe27b1a1c4797269d1704$var$getContainerDimensions(boundaryElement);
    let containerOffsetWithBoundary = boundaryElement.tagName === 'BODY' ? _domHelpersQueryOffset(container) : _domHelpersQueryPosition(container, boundaryElement);
    return $c13020473a0fe27b1a1c4797269d1704$export$calculatePositionInternal(placement, childOffset, overlaySize, scrollSize, margins, padding, shouldFlip, boundaryDimensions, containerOffsetWithBoundary, offset, crossOffset, isContainerPositioned);
}
// This behavior moved from useOverlayTrigger to useOverlayPosition.
// For backward compatibility, where useOverlayTrigger handled hiding the popover on close,
// it sets a close function here mapped from the trigger element. This way we can avoid
// forcing users to pass an onClose function to useOverlayPosition which could be considered
// a breaking change.
const $ceea668dd9ec3b754bdc10a8bbb8$export$onCloseMap = new WeakMap();
/** @private */ function $ceea668dd9ec3b754bdc10a8bbb8$export$useCloseOnScroll(opts) {
    let { triggerRef , isOpen , onClose  } = opts;
    useEffect(()=>{
        if (!isOpen) return;
        let onScroll = (e)=>{
            // Ignore if scrolling an scrollable region outside the trigger's tree.
            let target = e.target;
            if (!triggerRef.current || !target.contains(triggerRef.current)) return;
            let onCloseHandler = onClose || $ceea668dd9ec3b754bdc10a8bbb8$export$onCloseMap.get(triggerRef.current);
            if (onCloseHandler) onCloseHandler();
        };
        window.addEventListener('scroll', onScroll, true);
        return ()=>{
            window.removeEventListener('scroll', onScroll, true);
        };
    }, [
        isOpen,
        onClose,
        triggerRef
    ]);
}
// @ts-ignore
let $adfbd034e9bc71c1$var$visualViewport = typeof window !== 'undefined' && window.visualViewport;
/**
 * Handles positioning overlays like popovers and menus relative to a trigger
 * element, and updating the position when the window resizes.
 */ function useOverlayPosition(props) {
    let { direction  } = useLocale();
    let { targetRef , overlayRef , scrollRef =overlayRef , placement ='bottom' , containerPadding =12 , shouldFlip =true , boundaryElement =typeof document !== 'undefined' ? document.body : null , offset =0 , crossOffset =0 , shouldUpdatePosition =true , isOpen =true , onClose  } = props;
    let [position, setPosition] = useState({
        position: {
        },
        arrowOffsetLeft: undefined,
        arrowOffsetTop: undefined,
        maxHeight: undefined,
        placement: undefined
    });
    let deps = [
        shouldUpdatePosition,
        placement,
        overlayRef.current,
        targetRef.current,
        scrollRef.current,
        containerPadding,
        shouldFlip,
        boundaryElement,
        offset,
        crossOffset,
        isOpen,
        direction
    ];
    let updatePosition = useCallback(()=>{
        if (shouldUpdatePosition === false || !isOpen || !overlayRef.current || !targetRef.current || !scrollRef.current || !boundaryElement) return;
        setPosition($c13020473a0fe27b1a1c4797269d1704$export$calculatePosition({
            placement: $adfbd034e9bc71c1$var$translateRTL(placement, direction),
            overlayNode: overlayRef.current,
            targetNode: targetRef.current,
            scrollNode: scrollRef.current,
            padding: containerPadding,
            shouldFlip,
            boundaryElement,
            offset,
            crossOffset
        }));
    }, deps); // Update position when anything changes
    useLayoutEffect(updatePosition, deps); // Update position on window resize
    $adfbd034e9bc71c1$var$useResize(updatePosition); // Reposition the overlay and do not close on scroll while the visual viewport is resizing.
    // This will ensure that overlays adjust their positioning when the iOS virtual keyboard appears.
    let isResizing = useRef(false);
    useLayoutEffect(()=>{
        let timeout;
        let onResize = ()=>{
            isResizing.current = true;
            clearTimeout(timeout);
            timeout = setTimeout(()=>{
                isResizing.current = false;
            }, 500);
            updatePosition();
        };
        $adfbd034e9bc71c1$var$visualViewport == null || $adfbd034e9bc71c1$var$visualViewport.addEventListener('resize', onResize);
        return ()=>{
            $adfbd034e9bc71c1$var$visualViewport == null || $adfbd034e9bc71c1$var$visualViewport.removeEventListener('resize', onResize);
        };
    }, [
        updatePosition
    ]);
    let close = useCallback(()=>{
        if (!isResizing.current) onClose();
    }, [
        onClose,
        isResizing
    ]); // When scrolling a parent scrollable region of the trigger (other than the body),
    // we hide the popover. Otherwise, its position would be incorrect.
    $ceea668dd9ec3b754bdc10a8bbb8$export$useCloseOnScroll({
        triggerRef: targetRef,
        isOpen,
        onClose: onClose ? close : undefined
    });
    return {
        overlayProps: {
            style: _babelRuntimeHelpersExtends({
                position: 'absolute',
                zIndex: 100000
            }, position.position, {
                maxHeight: position.maxHeight
            })
        },
        placement: position.placement,
        arrowProps: {
            style: {
                left: position.arrowOffsetLeft,
                top: position.arrowOffsetTop
            }
        },
        updatePosition
    };
}
exports.useOverlayPosition = useOverlayPosition;
function $adfbd034e9bc71c1$var$useResize(onResize) {
    useLayoutEffect(()=>{
        window.addEventListener('resize', onResize, false);
        return ()=>{
            window.removeEventListener('resize', onResize, false);
        };
    }, [
        onResize
    ]);
}
function $adfbd034e9bc71c1$var$translateRTL(position, direction) {
    if (direction === 'rtl') return position.replace('start', 'right').replace('end', 'left');
    return position.replace('start', 'left').replace('end', 'right');
}
const $a59c58b6dadb0208d379e9464d2377f7$var$visibleOverlays = [];
/**
 * Provides the behavior for overlays such as dialogs, popovers, and menus.
 * Hides the overlay when the user interacts outside it, when the Escape key is pressed,
 * or optionally, on blur. Only the top-most overlay will close at once.
 */ function useOverlay(props, ref) {
    let { onClose , shouldCloseOnBlur , isOpen , isDismissable =false , isKeyboardDismissDisabled =false , shouldCloseOnInteractOutside  } = props; // Add the overlay ref to the stack of visible overlays on mount, and remove on unmount.
    useEffect(()=>{
        if (isOpen) $a59c58b6dadb0208d379e9464d2377f7$var$visibleOverlays.push(ref);
        return ()=>{
            let index = $a59c58b6dadb0208d379e9464d2377f7$var$visibleOverlays.indexOf(ref);
            if (index >= 0) $a59c58b6dadb0208d379e9464d2377f7$var$visibleOverlays.splice(index, 1);
        };
    }, [
        isOpen,
        ref
    ]); // Only hide the overlay when it is the topmost visible overlay in the stack.
    let onHide = ()=>{
        if ($a59c58b6dadb0208d379e9464d2377f7$var$visibleOverlays[$a59c58b6dadb0208d379e9464d2377f7$var$visibleOverlays.length - 1] === ref && onClose) onClose();
    };
    let onInteractOutsideStart = (e)=>{
        if (!shouldCloseOnInteractOutside || shouldCloseOnInteractOutside(e.target)) {
            if ($a59c58b6dadb0208d379e9464d2377f7$var$visibleOverlays[$a59c58b6dadb0208d379e9464d2377f7$var$visibleOverlays.length - 1] === ref) {
                e.stopPropagation();
                e.preventDefault();
            }
        }
    };
    let onInteractOutside = (e)=>{
        if (!shouldCloseOnInteractOutside || shouldCloseOnInteractOutside(e.target)) {
            if ($a59c58b6dadb0208d379e9464d2377f7$var$visibleOverlays[$a59c58b6dadb0208d379e9464d2377f7$var$visibleOverlays.length - 1] === ref) {
                e.stopPropagation();
                e.preventDefault();
            }
            onHide();
        }
    }; // Handle the escape key
    let onKeyDown = (e)=>{
        if (e.key === 'Escape' && !isKeyboardDismissDisabled) {
            e.preventDefault();
            onHide();
        }
    }; // Handle clicking outside the overlay to close it
    useInteractOutside({
        ref,
        onInteractOutside: isDismissable ? onInteractOutside : null,
        onInteractOutsideStart
    });
    let { focusWithinProps  } = useFocusWithin({
        isDisabled: !shouldCloseOnBlur,
        onBlurWithin: (e)=>{
            if (!shouldCloseOnInteractOutside || shouldCloseOnInteractOutside(e.relatedTarget)) onClose();
        }
    });
    let onPointerDownUnderlay = (e)=>{
        // fixes a firefox issue that starts text selection https://bugzilla.mozilla.org/show_bug.cgi?id=1675846
        if (e.target === e.currentTarget) e.preventDefault();
    };
    return {
        overlayProps: _babelRuntimeHelpersExtends({
            onKeyDown
        }, focusWithinProps),
        underlayProps: {
            onPointerDown: onPointerDownUnderlay
        }
    };
}
exports.useOverlay = useOverlay;
/**
 * Handles the behavior and accessibility for an overlay trigger, e.g. a button
 * that opens a popover, menu, or other overlay that is positioned relative to the trigger.
 */ function useOverlayTrigger(props, state, ref) {
    let { type  } = props;
    let { isOpen  } = state; // Backward compatibility. Share state close function with useOverlayPosition so it can close on scroll
    // without forcing users to pass onClose.
    useEffect(()=>{
        if (ref.current) $ceea668dd9ec3b754bdc10a8bbb8$export$onCloseMap.set(ref.current, state.close);
    }); // Aria 1.1 supports multiple values for aria-haspopup other than just menus.
    // https://www.w3.org/TR/wai-aria-1.1/#aria-haspopup
    // However, we only add it for menus for now because screen readers often
    // announce it as a menu even for other values.
    let ariaHasPopup = undefined;
    if (type === 'menu') ariaHasPopup = true;
    else if (type === 'listbox') ariaHasPopup = 'listbox';
    let overlayId = useId();
    return {
        triggerProps: {
            'aria-haspopup': ariaHasPopup,
            'aria-expanded': isOpen,
            'aria-controls': isOpen ? overlayId : null
        },
        overlayProps: {
            id: overlayId
        }
    };
}
exports.useOverlayTrigger = useOverlayTrigger;
// @ts-ignore
const $a21edfc55f5392c9a20c9978f0e487$var$visualViewport = typeof window !== 'undefined' && window.visualViewport; // HTML input types that do not cause the software keyboard to appear.
const $a21edfc55f5392c9a20c9978f0e487$var$nonTextInputTypes = new Set([
    'checkbox',
    'radio',
    'range',
    'color',
    'file',
    'image',
    'button',
    'submit',
    'reset'
]);
/**
 * Prevents scrolling on the document body on mount, and
 * restores it on unmount. Also ensures that content does not
 * shift due to the scrollbars disappearing.
 */ function usePreventScroll(options) {
    if (options === void 0) options = {
    };
    let { isDisabled  } = options;
    useLayoutEffect(()=>{
        if (isDisabled) return;
        if (isIOS()) return $a21edfc55f5392c9a20c9978f0e487$var$preventScrollMobileSafari();
        else return $a21edfc55f5392c9a20c9978f0e487$var$preventScrollStandard();
    }, [
        isDisabled
    ]);
} // For most browsers, all we need to do is set `overflow: hidden` on the root element, and
// add some padding to prevent the page from shifting when the scrollbar is hidden.
exports.usePreventScroll = usePreventScroll;
function $a21edfc55f5392c9a20c9978f0e487$var$preventScrollStandard() {
    return chain($a21edfc55f5392c9a20c9978f0e487$var$setStyle(document.documentElement, 'paddingRight', window.innerWidth - document.documentElement.clientWidth + "px"), $a21edfc55f5392c9a20c9978f0e487$var$setStyle(document.documentElement, 'overflow', 'hidden'));
} // Mobile Safari is a whole different beast. Even with overflow: hidden,
// it still scrolls the page in many situations:
//
// 1. When the bottom toolbar and address bar are collapsed, page scrolling is always allowed.
// 2. When the keyboard is visible, the viewport does not resize. Instead, the keyboard covers part of
//    it, so it becomes scrollable.
// 3. When tapping on an input, the page always scrolls so that the input is centered in the visual viewport.
//    This may cause even fixed position elements to scroll off the screen.
// 4. When using the next/previous buttons in the keyboard to navigate between inputs, the whole page always
//    scrolls, even if the input is inside a nested scrollable element that could be scrolled instead.
//
// In order to work around these cases, and prevent scrolling without jankiness, we do a few things:
//
// 1. Prevent default on `touchmove` events that are not in a scrollable element. This prevents touch scrolling
//    on the window.
// 2. Prevent default on `touchmove` events inside a scrollable element when the scroll position is at the
//    top or bottom. This avoids the whole page scrolling instead, but does prevent overscrolling.
// 3. Prevent default on `touchend` events on input elements and handle focusing the element ourselves.
// 4. When focusing an input, apply a transform to trick Safari into thinking the input is at the top
//    of the page, which prevents it from scrolling the page. After the input is focused, scroll the element
//    into view ourselves, without scrolling the whole page.
// 5. Offset the body by the scroll position using a negative margin and scroll to the top. This should appear the
//    same visually, but makes the actual scroll position always zero. This is required to make all of the
//    above work or Safari will still try to scroll the page when focusing an input.
// 6. As a last resort, handle window scroll events, and scroll back to the top. This can happen when attempting
//    to navigate to an input with the next/previous buttons that's outside a modal.
function $a21edfc55f5392c9a20c9978f0e487$var$preventScrollMobileSafari() {
    let scrollable;
    let lastY = 0;
    let onTouchStart = (e)=>{
        // Store the nearest scrollable parent element from the element that the user touched.
        scrollable = getScrollParent(e.target);
        if (scrollable === document.documentElement && scrollable === document.body) return;
        lastY = e.changedTouches[0].pageY;
    };
    let onTouchMove = (e)=>{
        // Prevent scrolling the window.
        if (scrollable === document.documentElement || scrollable === document.body) {
            e.preventDefault();
            return;
        } // Prevent scrolling up when at the top and scrolling down when at the bottom
        // of a nested scrollable area, otherwise mobile Safari will start scrolling
        // the window instead. Unfortunately, this disables bounce scrolling when at
        // the top but it's the best we can do.
        let y = e.changedTouches[0].pageY;
        let scrollTop = scrollable.scrollTop;
        let bottom = scrollable.scrollHeight - scrollable.clientHeight;
        if (scrollTop <= 0 && y > lastY || scrollTop >= bottom && y < lastY) e.preventDefault();
        lastY = y;
    };
    let onTouchEnd = (e)=>{
        let target = e.target;
        if (target instanceof HTMLInputElement && !$a21edfc55f5392c9a20c9978f0e487$var$nonTextInputTypes.has(target.type)) {
            e.preventDefault(); // Apply a transform to trick Safari into thinking the input is at the top of the page
            // so it doesn't try to scroll it into view. When tapping on an input, this needs to
            // be done before the "focus" event, so we have to focus the element ourselves.
            target.style.transform = 'translateY(-2000px)';
            target.focus();
            requestAnimationFrame(()=>{
                target.style.transform = '';
            });
        }
    };
    let onFocus = (e)=>{
        let target = e.target;
        if (target instanceof HTMLInputElement && !$a21edfc55f5392c9a20c9978f0e487$var$nonTextInputTypes.has(target.type)) {
            // Transform also needs to be applied in the focus event in cases where focus moves
            // software keyboard. In these cases, it seems applying the transform in the focus event
            // is good enough, whereas when tapping an input, it must be done before the focus event. 🤷‍♂️
            target.style.transform = 'translateY(-2000px)';
            requestAnimationFrame(()=>{
                target.style.transform = ''; // This will have prevented the browser from scrolling the focused element into view,
                // so we need to do this ourselves in a way that doesn't cause the whole page to scroll.
                if ($a21edfc55f5392c9a20c9978f0e487$var$visualViewport) {
                    if ($a21edfc55f5392c9a20c9978f0e487$var$visualViewport.height < window.innerHeight) // If the keyboard is already visible, do this after one additional frame
                    // to wait for the transform to be removed.
                    requestAnimationFrame(()=>{
                        $a21edfc55f5392c9a20c9978f0e487$var$scrollIntoView(target);
                    });
                    else // Otherwise, wait for the visual viewport to resize before scrolling so we can
                    // measure the correct position to scroll to.
                    $a21edfc55f5392c9a20c9978f0e487$var$visualViewport.addEventListener('resize', ()=>$a21edfc55f5392c9a20c9978f0e487$var$scrollIntoView(target)
                    , {
                        once: true
                    });
                }
            });
        }
    };
    let onWindowScroll = ()=>{
        // Last resort. If the window scrolled, scroll it back to the top.
        // It should always be at the top because the body will have a negative margin (see below).
        window.scrollTo(0, 0);
    }; // Record the original scroll position so we can restore it.
    // Then apply a negative margin to the body to offset it by the scroll position. This will
    // enable us to scroll the window to the top, which is required for the rest of this to work.
    let scrollX = window.pageXOffset;
    let scrollY = window.pageYOffset;
    let restoreStyles = chain($a21edfc55f5392c9a20c9978f0e487$var$setStyle(document.documentElement, 'paddingRight', window.innerWidth - document.documentElement.clientWidth + "px"), $a21edfc55f5392c9a20c9978f0e487$var$setStyle(document.documentElement, 'overflow', 'hidden'), $a21edfc55f5392c9a20c9978f0e487$var$setStyle(document.body, 'marginTop', "-" + scrollY + "px")); // Scroll to the top. The negative margin on the body will make this appear the same.
    window.scrollTo(0, 0);
    let removeEvents = chain($a21edfc55f5392c9a20c9978f0e487$var$addEvent(document, 'touchstart', onTouchStart, {
        passive: false,
        capture: true
    }), $a21edfc55f5392c9a20c9978f0e487$var$addEvent(document, 'touchmove', onTouchMove, {
        passive: false,
        capture: true
    }), $a21edfc55f5392c9a20c9978f0e487$var$addEvent(document, 'touchend', onTouchEnd, {
        passive: false,
        capture: true
    }), $a21edfc55f5392c9a20c9978f0e487$var$addEvent(document, 'focus', onFocus, true), $a21edfc55f5392c9a20c9978f0e487$var$addEvent(window, 'scroll', onWindowScroll));
    return ()=>{
        // Restore styles and scroll the page back to where it was.
        restoreStyles();
        removeEvents();
        window.scrollTo(scrollX, scrollY);
    };
} // Sets a CSS property on an element, and returns a function to revert it to the previous value.
function $a21edfc55f5392c9a20c9978f0e487$var$setStyle(element, style, value) {
    let cur = element.style[style];
    element.style[style] = value;
    return ()=>{
        element.style[style] = cur;
    };
} // Adds an event listener to an element, and returns a function to remove it.
function $a21edfc55f5392c9a20c9978f0e487$var$addEvent(target, event, handler, options) {
    target.addEventListener(event, handler, options);
    return ()=>{
        target.removeEventListener(event, handler, options);
    };
}
function $a21edfc55f5392c9a20c9978f0e487$var$scrollIntoView(target) {
    // Find the parent scrollable element and adjust the scroll position if the target is not already in view.
    let scrollable = getScrollParent(target);
    if (scrollable !== document.documentElement && scrollable !== document.body) {
        let scrollableTop = scrollable.getBoundingClientRect().top;
        let targetTop = target.getBoundingClientRect().top;
        if (targetTop > scrollableTop + target.clientHeight) scrollable.scrollTop += targetTop - scrollableTop;
    }
}
const $c5f9596976ab8bd94c5879001549a3e$var$Context = /*#__PURE__*/ _react.createContext(null);
/**
 * Each ModalProvider tracks how many modals are open in its subtree. On mount, the modals
 * trigger `addModal` to increment the count, and trigger `removeModal` on unmount to decrement it.
 * This is done recursively so that all parent providers are incremented and decremented.
 * If the modal count is greater than zero, we add `aria-hidden` to this provider to hide its
 * subtree from screen readers. This is done using React context in order to account for things
 * like portals, which can cause the React tree and the DOM tree to differ significantly in structure.
 */ function ModalProvider(props) {
    let { children  } = props;
    let parent = useContext($c5f9596976ab8bd94c5879001549a3e$var$Context);
    let [modalCount, setModalCount] = useState(0);
    let context = useMemo(()=>({
            parent,
            modalCount,
            addModal () {
                setModalCount((count)=>count + 1
                );
                if (parent) parent.addModal();
            },
            removeModal () {
                setModalCount((count)=>count - 1
                );
                if (parent) parent.removeModal();
            }
        })
    , [
        parent,
        modalCount
    ]);
    return(/*#__PURE__*/ _react.createElement($c5f9596976ab8bd94c5879001549a3e$var$Context.Provider, {
        value: context
    }, children));
}
exports.ModalProvider = ModalProvider;
/**
 * Used to determine if the tree should be aria-hidden based on how many
 * modals are open.
 */ function useModalProvider() {
    let context = useContext($c5f9596976ab8bd94c5879001549a3e$var$Context);
    return {
        modalProviderProps: {
            'aria-hidden': context && context.modalCount > 0 ? true : null
        }
    };
}
/**
 * Creates a root node that will be aria-hidden if there are other modals open.
 */ exports.useModalProvider = useModalProvider;
function $c5f9596976ab8bd94c5879001549a3e$var$OverlayContainerDOM(props) {
    let { modalProviderProps  } = useModalProvider();
    return(/*#__PURE__*/ _react.createElement("div", _babelRuntimeHelpersExtends({
        "data-overlay-container": true
    }, props, modalProviderProps)));
}
/**
 * An OverlayProvider acts as a container for the top-level application.
 * Any application that uses modal dialogs or other overlays should
 * be wrapped in a `<OverlayProvider>`. This is used to ensure that
 * the main content of the application is hidden from screen readers
 * if a modal or other overlay is opened. Only the top-most modal or
 * overlay should be accessible at once.
 */ function OverlayProvider(props) {
    return(/*#__PURE__*/ _react.createElement(ModalProvider, null, /*#__PURE__*/ _react.createElement($c5f9596976ab8bd94c5879001549a3e$var$OverlayContainerDOM, props)));
}
exports.OverlayProvider = OverlayProvider;
/**
 * A container for overlays like modals and popovers. Renders the overlay
 * into a Portal which is placed at the end of the document body.
 * Also ensures that the overlay is hidden from screen readers if a
 * nested modal is opened. Only the top-most modal or overlay should
 * be accessible at once.
 */ function OverlayContainer(props) {
    let { portalContainer =document.body  } = props, rest = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "portalContainer"
    ]);
    _react.useEffect(()=>{
        if (portalContainer.closest('[data-overlay-container]')) throw new Error('An OverlayContainer must not be inside another container. Please change the portalContainer prop.');
    }, [
        portalContainer
    ]);
    let contents = /*#__PURE__*/ _react.createElement(OverlayProvider, rest);
    return(/*#__PURE__*/ _reactDom.createPortal(contents, portalContainer));
}
exports.OverlayContainer = OverlayContainer;
/**
 * Hides content outside the current `<OverlayContainer>` from screen readers
 * on mount and restores it on unmount. Typically used by modal dialogs and
 * other types of overlays to ensure that only the top-most modal is
 * accessible at once.
 */ function useModal(options) {
    // Add aria-hidden to all parent providers on mount, and restore on unmount.
    let context = useContext($c5f9596976ab8bd94c5879001549a3e$var$Context);
    if (!context) throw new Error('Modal is not contained within a provider');
    useEffect(()=>{
        if (options != null && options.isDisabled || !context || !context.parent) return;
         // The immediate context is from the provider containing this modal, so we only
        // want to trigger aria-hidden on its parents not on the modal provider itself.
        context.parent.addModal();
        return ()=>{
            if (context && context.parent) context.parent.removeModal();
        };
    }, [
        context,
        context.parent,
        options == null ? void 0 : options.isDisabled
    ]);
    return {
        modalProps: {
            'data-ismodal': !(options != null && options.isDisabled)
        }
    };
}
exports.useModal = useModal;
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/ar-AE.json
var $a8bb21dadcfaad10bb0a0bcf2b281764$exports = {
};
$a8bb21dadcfaad10bb0a0bcf2b281764$exports = JSON.parse("{\"dismiss\":\"تجاهل\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/bg-BG.json
var $dafefe57ee4fa5270277199b63666456$exports = {
};
$dafefe57ee4fa5270277199b63666456$exports = JSON.parse("{\"dismiss\":\"Отхвърляне\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/cs-CZ.json
var $c2158ac3aac63d05c0787f91c5e6$exports = {
};
$c2158ac3aac63d05c0787f91c5e6$exports = JSON.parse("{\"dismiss\":\"Odstranit\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/da-DK.json
var $f7aea96abdaae1eb301c63fe67ff9fa$exports = {
};
$f7aea96abdaae1eb301c63fe67ff9fa$exports = JSON.parse("{\"dismiss\":\"Luk\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/de-DE.json
var $f3491c664171e6b5e47db3baca390e$exports = {
};
$f3491c664171e6b5e47db3baca390e$exports = JSON.parse("{\"dismiss\":\"Schließen\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/el-GR.json
var $da631def8a53d3d7ca63b5a989a2$exports = {
};
$da631def8a53d3d7ca63b5a989a2$exports = JSON.parse("{\"dismiss\":\"Απόρριψη\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/en-US.json
var $fb4c477a38a74b935d35db24ae7$exports = {
};
$fb4c477a38a74b935d35db24ae7$exports = JSON.parse("{\"dismiss\":\"Dismiss\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/es-ES.json
var $b6fd69f9d5c0d1736b0ffb60159dbd4$exports = {
};
$b6fd69f9d5c0d1736b0ffb60159dbd4$exports = JSON.parse("{\"dismiss\":\"Descartar\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/et-EE.json
var $ba5713ed42715892c62c91f4a61185db$exports = {
};
$ba5713ed42715892c62c91f4a61185db$exports = JSON.parse("{\"dismiss\":\"Lõpeta\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/fi-FI.json
var $d425c7f620a7cd6fec958b2d805b4748$exports = {
};
$d425c7f620a7cd6fec958b2d805b4748$exports = JSON.parse("{\"dismiss\":\"Hylkää\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/fr-FR.json
var $a53b9b9e4ee3c32689ca1c9d37$exports = {
};
$a53b9b9e4ee3c32689ca1c9d37$exports = JSON.parse("{\"dismiss\":\"Rejeter\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/he-IL.json
var $c53806192c6b46eb32dc82efae908cb$exports = {
};
$c53806192c6b46eb32dc82efae908cb$exports = JSON.parse("{\"dismiss\":\"התעלם\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/hr-HR.json
var $cbbca9d8ba35e50d9d74ddc492ac95d5$exports = {
};
$cbbca9d8ba35e50d9d74ddc492ac95d5$exports = JSON.parse("{\"dismiss\":\"Odbaci\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/hu-HU.json
var $b6e1f06770a0ad8a02049cb304d$exports = {
};
$b6e1f06770a0ad8a02049cb304d$exports = JSON.parse("{\"dismiss\":\"Elutasítás\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/it-IT.json
var $b6c1d31d04e4e80df25d89ebefb38d6c$exports = {
};
$b6c1d31d04e4e80df25d89ebefb38d6c$exports = JSON.parse("{\"dismiss\":\"Ignora\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/ja-JP.json
var $a858c6dc87cf51add44cd600186b$exports = {
};
$a858c6dc87cf51add44cd600186b$exports = JSON.parse("{\"dismiss\":\"閉じる\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/ko-KR.json
var $bce3a6596f5d6bce7af4e1cdfe714b9$exports = {
};
$bce3a6596f5d6bce7af4e1cdfe714b9$exports = JSON.parse("{\"dismiss\":\"무시\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/lt-LT.json
var $a80424d4da258b90efdca51671420e98$exports = {
};
$a80424d4da258b90efdca51671420e98$exports = JSON.parse("{\"dismiss\":\"Atmesti\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/lv-LV.json
var $b7b9bc8c0cfc6eec9fa971e7b25cd656$exports = {
};
$b7b9bc8c0cfc6eec9fa971e7b25cd656$exports = JSON.parse("{\"dismiss\":\"Nerādīt\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/nb-NO.json
var $e985758bae9fabb24500c21a0a00b725$exports = {
};
$e985758bae9fabb24500c21a0a00b725$exports = JSON.parse("{\"dismiss\":\"Lukk\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/nl-NL.json
var $f05d419963f6daeda3bc9dbbe3cc02bd$exports = {
};
$f05d419963f6daeda3bc9dbbe3cc02bd$exports = JSON.parse("{\"dismiss\":\"Negeren\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/pl-PL.json
var $c8fa3e85daf6d04ed07583e629c87ce4$exports = {
};
$c8fa3e85daf6d04ed07583e629c87ce4$exports = JSON.parse("{\"dismiss\":\"Zignoruj\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/pt-BR.json
var $f06e8ad24001ed35ea808810226a15$exports = {
};
$f06e8ad24001ed35ea808810226a15$exports = JSON.parse("{\"dismiss\":\"Descartar\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/pt-PT.json
var $fd097ce7a9000ad9750e5946ad880932$exports = {
};
$fd097ce7a9000ad9750e5946ad880932$exports = JSON.parse("{\"dismiss\":\"Dispensar\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/ro-RO.json
var $a20ad400f1086b2bea7f9791d7257ad$exports = {
};
$a20ad400f1086b2bea7f9791d7257ad$exports = JSON.parse("{\"dismiss\":\"Revocare\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/ru-RU.json
var $fc28441a9133071c2297a09b6b420dd$exports = {
};
$fc28441a9133071c2297a09b6b420dd$exports = JSON.parse("{\"dismiss\":\"Пропустить\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/sk-SK.json
var $a91ecad4479ad50b50aa177a2506dc$exports = {
};
$a91ecad4479ad50b50aa177a2506dc$exports = JSON.parse("{\"dismiss\":\"Zrušiť\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/sl-SI.json
var $f9693ead50748c9beb107ad23956eb9$exports = {
};
$f9693ead50748c9beb107ad23956eb9$exports = JSON.parse("{\"dismiss\":\"Opusti\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/sr-SP.json
var $b5e22101ce830f7d95581df69464b$exports = {
};
$b5e22101ce830f7d95581df69464b$exports = JSON.parse("{\"dismiss\":\"Odbaci\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/sv-SE.json
var $c0b006e739315f2d0109fd704d505d4d$exports = {
};
$c0b006e739315f2d0109fd704d505d4d$exports = JSON.parse("{\"dismiss\":\"Avvisa\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/tr-TR.json
var $b2fcb8208d40a3677791cb274f5c23$exports = {
};
$b2fcb8208d40a3677791cb274f5c23$exports = JSON.parse("{\"dismiss\":\"Kapat\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/uk-UA.json
var $bedf08a338a4a9658a5b3265b7ba64$exports = {
};
$bedf08a338a4a9658a5b3265b7ba64$exports = JSON.parse("{\"dismiss\":\"Скасувати\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/zh-CN.json
var $b49f1939211bfd9e1f4f626061efad44$exports = {
};
$b49f1939211bfd9e1f4f626061efad44$exports = JSON.parse("{\"dismiss\":\"取消\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/zh-TW.json
var $a878720d2a5fd83cfd5a0f74b64957e$exports = {
};
$a878720d2a5fd83cfd5a0f74b64957e$exports = JSON.parse("{\"dismiss\":\"關閉\"}");
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // @ts-ignore
const $e0a65de2c0deb9a27bf483be129a43c1$var$intlMessages = {
    "ar-AE": _babelRuntimeHelpersInteropRequireDefault($a8bb21dadcfaad10bb0a0bcf2b281764$exports).default,
    "bg-BG": _babelRuntimeHelpersInteropRequireDefault($dafefe57ee4fa5270277199b63666456$exports).default,
    "cs-CZ": _babelRuntimeHelpersInteropRequireDefault($c2158ac3aac63d05c0787f91c5e6$exports).default,
    "da-DK": _babelRuntimeHelpersInteropRequireDefault($f7aea96abdaae1eb301c63fe67ff9fa$exports).default,
    "de-DE": _babelRuntimeHelpersInteropRequireDefault($f3491c664171e6b5e47db3baca390e$exports).default,
    "el-GR": _babelRuntimeHelpersInteropRequireDefault($da631def8a53d3d7ca63b5a989a2$exports).default,
    "en-US": _babelRuntimeHelpersInteropRequireDefault($fb4c477a38a74b935d35db24ae7$exports).default,
    "es-ES": _babelRuntimeHelpersInteropRequireDefault($b6fd69f9d5c0d1736b0ffb60159dbd4$exports).default,
    "et-EE": _babelRuntimeHelpersInteropRequireDefault($ba5713ed42715892c62c91f4a61185db$exports).default,
    "fi-FI": _babelRuntimeHelpersInteropRequireDefault($d425c7f620a7cd6fec958b2d805b4748$exports).default,
    "fr-FR": _babelRuntimeHelpersInteropRequireDefault($a53b9b9e4ee3c32689ca1c9d37$exports).default,
    "he-IL": _babelRuntimeHelpersInteropRequireDefault($c53806192c6b46eb32dc82efae908cb$exports).default,
    "hr-HR": _babelRuntimeHelpersInteropRequireDefault($cbbca9d8ba35e50d9d74ddc492ac95d5$exports).default,
    "hu-HU": _babelRuntimeHelpersInteropRequireDefault($b6e1f06770a0ad8a02049cb304d$exports).default,
    "it-IT": _babelRuntimeHelpersInteropRequireDefault($b6c1d31d04e4e80df25d89ebefb38d6c$exports).default,
    "ja-JP": _babelRuntimeHelpersInteropRequireDefault($a858c6dc87cf51add44cd600186b$exports).default,
    "ko-KR": _babelRuntimeHelpersInteropRequireDefault($bce3a6596f5d6bce7af4e1cdfe714b9$exports).default,
    "lt-LT": _babelRuntimeHelpersInteropRequireDefault($a80424d4da258b90efdca51671420e98$exports).default,
    "lv-LV": _babelRuntimeHelpersInteropRequireDefault($b7b9bc8c0cfc6eec9fa971e7b25cd656$exports).default,
    "nb-NO": _babelRuntimeHelpersInteropRequireDefault($e985758bae9fabb24500c21a0a00b725$exports).default,
    "nl-NL": _babelRuntimeHelpersInteropRequireDefault($f05d419963f6daeda3bc9dbbe3cc02bd$exports).default,
    "pl-PL": _babelRuntimeHelpersInteropRequireDefault($c8fa3e85daf6d04ed07583e629c87ce4$exports).default,
    "pt-BR": _babelRuntimeHelpersInteropRequireDefault($f06e8ad24001ed35ea808810226a15$exports).default,
    "pt-PT": _babelRuntimeHelpersInteropRequireDefault($fd097ce7a9000ad9750e5946ad880932$exports).default,
    "ro-RO": _babelRuntimeHelpersInteropRequireDefault($a20ad400f1086b2bea7f9791d7257ad$exports).default,
    "ru-RU": _babelRuntimeHelpersInteropRequireDefault($fc28441a9133071c2297a09b6b420dd$exports).default,
    "sk-SK": _babelRuntimeHelpersInteropRequireDefault($a91ecad4479ad50b50aa177a2506dc$exports).default,
    "sl-SI": _babelRuntimeHelpersInteropRequireDefault($f9693ead50748c9beb107ad23956eb9$exports).default,
    "sr-SP": _babelRuntimeHelpersInteropRequireDefault($b5e22101ce830f7d95581df69464b$exports).default,
    "sv-SE": _babelRuntimeHelpersInteropRequireDefault($c0b006e739315f2d0109fd704d505d4d$exports).default,
    "tr-TR": _babelRuntimeHelpersInteropRequireDefault($b2fcb8208d40a3677791cb274f5c23$exports).default,
    "uk-UA": _babelRuntimeHelpersInteropRequireDefault($bedf08a338a4a9658a5b3265b7ba64$exports).default,
    "zh-CN": _babelRuntimeHelpersInteropRequireDefault($b49f1939211bfd9e1f4f626061efad44$exports).default,
    "zh-TW": _babelRuntimeHelpersInteropRequireDefault($a878720d2a5fd83cfd5a0f74b64957e$exports).default
};
/**
 * A visually hidden button that can be used to allow screen reader
 * users to dismiss a modal or popup when there is no visual
 * affordance to do so.
 */ function DismissButton(props) {
    let { onDismiss  } = props;
    let formatMessage = useMessageFormatter($e0a65de2c0deb9a27bf483be129a43c1$var$intlMessages);
    let onClick = ()=>{
        if (onDismiss) onDismiss();
    };
    return(/*#__PURE__*/ _react.createElement(VisuallyHidden, null, /*#__PURE__*/ _react.createElement("button", {
        tabIndex: -1,
        "aria-label": formatMessage('dismiss'),
        onClick: onClick
    })));
}
exports.DismissButton = DismissButton;
// subtracted from when showing it again. When it reaches zero, aria-hidden is removed.
let $a683bb0d63d5b6f7885c12dcc6f96807$var$refCountMap = new WeakMap();
/**
 * Hides all elements in the DOM outside the given targets from screen readers using aria-hidden,
 * and returns a function to revert these changes. In addition, changes to the DOM are watched
 * and new elements outside the targets are automatically hidden.
 * @param targets - The elements that should remain visible.
 * @param root - Nothing will be hidden above this element.
 * @returns - A function to restore all hidden elements.
 */ function ariaHideOutside(targets, root) {
    if (root === void 0) root = document.body;
    let visibleNodes = new Set(targets);
    let hiddenNodes = new Set();
    let walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT, {
        acceptNode (node) {
            // If this node is a live announcer, add it to the set of nodes to keep visible.
            if (node instanceof HTMLElement && node.dataset.liveAnnouncer === 'true') visibleNodes.add(node);
             // Skip this node and its children if it is one of the target nodes, or a live announcer.
            // Also skip children of already hidden nodes, as aria-hidden is recursive.
            if (visibleNodes.has(node) || hiddenNodes.has(node.parentElement)) return NodeFilter.FILTER_REJECT;
             // VoiceOver on iOS has issues hiding elements with role="row". Hide the cells inside instead.
            // https://bugs.webkit.org/show_bug.cgi?id=222623
            if (node instanceof HTMLElement && node.getAttribute('role') === 'row') return NodeFilter.FILTER_SKIP;
             // Skip this node but continue to children if one of the targets is inside the node.
            if (targets.some((target)=>node.contains(target)
            )) return NodeFilter.FILTER_SKIP;
            return NodeFilter.FILTER_ACCEPT;
        }
    });
    let hide = (node)=>{
        var _refCountMap$get;
        let refCount = (_refCountMap$get = $a683bb0d63d5b6f7885c12dcc6f96807$var$refCountMap.get(node)) != null ? _refCountMap$get : 0; // If already aria-hidden, and the ref count is zero, then this element
        // was already hidden and there's nothing for us to do.
        if (node.getAttribute('aria-hidden') === 'true' && refCount === 0) return;
        if (refCount === 0) node.setAttribute('aria-hidden', 'true');
        hiddenNodes.add(node);
        $a683bb0d63d5b6f7885c12dcc6f96807$var$refCountMap.set(node, refCount + 1);
    };
    let node = walker.nextNode();
    while(node != null){
        hide(node);
        node = walker.nextNode();
    }
    let observer = new MutationObserver((changes)=>{
        for (let change of changes){
            if (change.type !== 'childList' || change.addedNodes.length === 0) continue;
             // If the parent element of the added nodes is not within one of the targets,
            // and not already inside a hidden node, hide all of the new children.
            if (![
                ...visibleNodes,
                ...hiddenNodes
            ].some((node1)=>node1.contains(change.target)
            )) for (let node1 of change.addedNodes){
                if (node1 instanceof HTMLElement && node1.dataset.liveAnnouncer === 'true') visibleNodes.add(node1);
                else if (node1 instanceof Element) hide(node1);
            }
        }
    });
    observer.observe(root, {
        childList: true,
        subtree: true
    });
    return ()=>{
        observer.disconnect();
        for (let node1 of hiddenNodes){
            let count = $a683bb0d63d5b6f7885c12dcc6f96807$var$refCountMap.get(node1);
            if (count === 1) {
                node1.removeAttribute('aria-hidden');
                $a683bb0d63d5b6f7885c12dcc6f96807$var$refCountMap.delete(node1);
            } else $a683bb0d63d5b6f7885c12dcc6f96807$var$refCountMap.set(node1, count - 1);
        }
    };
}
exports.ariaHideOutside = ariaHideOutside;

},{"@react-aria/visually-hidden":"AVm9K","@babel/runtime/helpers/interopRequireDefault":"5TvsK","react-dom":"6V7Bv","@babel/runtime/helpers/objectWithoutPropertiesLoose":"5byko","@react-aria/interactions":"3irYN","@react-aria/i18n":"6xZcx","@react-aria/utils":"d8qxy","react":"a6qBW","dom-helpers/ownerDocument":"2kV5o","dom-helpers/query/scrollTop":"6mD3p","dom-helpers/query/scrollLeft":"7MURl","dom-helpers/query/position":"5IsFH","dom-helpers/query/offset":"2X0xF","dom-helpers/style":"4VOiF","@babel/runtime/helpers/extends":"5xz6u"}],"AVm9K":[function(require,module,exports) {
var { useFocus  } = require("@react-aria/interactions");
var _react2 = require("react");
var _react = $parcel$interopDefault(_react2);
var { useMemo , useState  } = _react2;
var { mergeProps  } = require("@react-aria/utils");
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
var _babelRuntimeHelpersObjectWithoutPropertiesLoose = $parcel$interopDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
const $c1f76ac3c0285c5bc650b183209bb9$var$styles = {
    border: 0,
    clip: 'rect(0 0 0 0)',
    clipPath: 'inset(50%)',
    height: 1,
    margin: '0 -1px -1px 0',
    overflow: 'hidden',
    padding: 0,
    position: 'absolute',
    width: 1,
    whiteSpace: 'nowrap'
};
/**
 * Provides props for an element that hides its children visually
 * but keeps content visible to assistive technology.
 */ function useVisuallyHidden(props) {
    if (props === void 0) props = {
    };
    let { style , isFocusable  } = props;
    let [isFocused, setFocused] = useState(false);
    let { focusProps  } = useFocus({
        isDisabled: !isFocusable,
        onFocusChange: setFocused
    }); // If focused, don't hide the element.
    let combinedStyles = useMemo(()=>{
        if (isFocused) return style;
        else if (style) return _babelRuntimeHelpersExtends({
        }, $c1f76ac3c0285c5bc650b183209bb9$var$styles, style);
        else return $c1f76ac3c0285c5bc650b183209bb9$var$styles;
    }, [
        isFocused
    ]);
    return {
        visuallyHiddenProps: _babelRuntimeHelpersExtends({
        }, focusProps, {
            style: combinedStyles
        })
    };
}
/**
 * VisuallyHidden hides its children visually, while keeping content visible
 * to screen readers.
 */ exports.useVisuallyHidden = useVisuallyHidden;
function VisuallyHidden(props) {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    let { children , elementType: Element1 = 'div'  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "children",
        "elementType",
        "isFocusable",
        "style"
    ]);
    let { visuallyHiddenProps  } = useVisuallyHidden(props);
    return(/*#__PURE__*/ _react.createElement(Element1, mergeProps(otherProps, visuallyHiddenProps), children));
}
exports.VisuallyHidden = VisuallyHidden;

},{"@react-aria/interactions":"3irYN","react":"a6qBW","@react-aria/utils":"d8qxy","@babel/runtime/helpers/extends":"5xz6u","@babel/runtime/helpers/objectWithoutPropertiesLoose":"5byko"}],"5TvsK":[function(require,module,exports) {
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
}
module.exports = _interopRequireDefault;
module.exports["default"] = module.exports, module.exports.__esModule = true;

},{}],"2kV5o":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.default = ownerDocument;
function ownerDocument(node) {
    return node && node.ownerDocument || document;
}
module.exports = exports["default"];

},{}],"6mD3p":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = scrollTop;
var _isWindow = _interopRequireDefault(require("./isWindow"));
function scrollTop(node, val) {
    var win = _isWindow.default(node);
    if (val === undefined) return win ? 'pageYOffset' in win ? win.pageYOffset : win.document.documentElement.scrollTop : node.scrollTop;
    if (win) win.scrollTo('pageXOffset' in win ? win.pageXOffset : win.document.documentElement.scrollLeft, val);
    else node.scrollTop = val;
}
module.exports = exports["default"];

},{"@babel/runtime/helpers/interopRequireDefault":"5TvsK","./isWindow":"G0lpU"}],"G0lpU":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.default = getWindow;
function getWindow(node) {
    return node === node.window ? node : node.nodeType === 9 ? node.defaultView || node.parentWindow : false;
}
module.exports = exports["default"];

},{}],"7MURl":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = scrollTop;
var _isWindow = _interopRequireDefault(require("./isWindow"));
function scrollTop(node, val) {
    var win = _isWindow.default(node);
    if (val === undefined) return win ? 'pageXOffset' in win ? win.pageXOffset : win.document.documentElement.scrollLeft : node.scrollLeft;
    if (win) win.scrollTo(val, 'pageYOffset' in win ? win.pageYOffset : win.document.documentElement.scrollTop);
    else node.scrollLeft = val;
}
module.exports = exports["default"];

},{"@babel/runtime/helpers/interopRequireDefault":"5TvsK","./isWindow":"G0lpU"}],"5IsFH":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = position;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _offset = _interopRequireDefault(require("./offset"));
var _offsetParent = _interopRequireDefault(require("./offsetParent"));
var _scrollTop = _interopRequireDefault(require("./scrollTop"));
var _scrollLeft = _interopRequireDefault(require("./scrollLeft"));
var _style = _interopRequireDefault(require("../style"));
function nodeName(node) {
    return node.nodeName && node.nodeName.toLowerCase();
}
function position(node, offsetParent) {
    var parentOffset = {
        top: 0,
        left: 0
    }, offset; // Fixed elements are offset from window (parentOffset = {top:0, left: 0},
    // because it is its only offset parent
    if (_style.default(node, 'position') === 'fixed') offset = node.getBoundingClientRect();
    else {
        offsetParent = offsetParent || _offsetParent.default(node);
        offset = _offset.default(node);
        if (nodeName(offsetParent) !== 'html') parentOffset = _offset.default(offsetParent);
        parentOffset.top += parseInt(_style.default(offsetParent, 'borderTopWidth'), 10) - _scrollTop.default(offsetParent) || 0;
        parentOffset.left += parseInt(_style.default(offsetParent, 'borderLeftWidth'), 10) - _scrollLeft.default(offsetParent) || 0;
    } // Subtract parent offsets and node margins
    return _extends2.default({
    }, offset, {
        top: offset.top - parentOffset.top - (parseInt(_style.default(node, 'marginTop'), 10) || 0),
        left: offset.left - parentOffset.left - (parseInt(_style.default(node, 'marginLeft'), 10) || 0)
    });
}
module.exports = exports["default"];

},{"@babel/runtime/helpers/interopRequireDefault":"5TvsK","@babel/runtime/helpers/extends":"5xz6u","./offset":"2X0xF","./offsetParent":"2T6IN","./scrollTop":"6mD3p","./scrollLeft":"7MURl","../style":"4VOiF"}],"2X0xF":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = offset;
var _contains = _interopRequireDefault(require("./contains"));
var _isWindow = _interopRequireDefault(require("./isWindow"));
var _ownerDocument = _interopRequireDefault(require("../ownerDocument"));
function offset(node) {
    var doc = _ownerDocument.default(node), win = _isWindow.default(doc), docElem = doc && doc.documentElement, box = {
        top: 0,
        left: 0,
        height: 0,
        width: 0
    };
    if (!doc) return; // Make sure it's not a disconnected DOM node
    if (!_contains.default(docElem, node)) return box;
    if (node.getBoundingClientRect !== undefined) box = node.getBoundingClientRect(); // IE8 getBoundingClientRect doesn't support width & height
    box = {
        top: box.top + (win.pageYOffset || docElem.scrollTop) - (docElem.clientTop || 0),
        left: box.left + (win.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || 0),
        width: (box.width == null ? node.offsetWidth : box.width) || 0,
        height: (box.height == null ? node.offsetHeight : box.height) || 0
    };
    return box;
}
module.exports = exports["default"];

},{"@babel/runtime/helpers/interopRequireDefault":"5TvsK","./contains":"QYil6","./isWindow":"G0lpU","../ownerDocument":"2kV5o"}],"QYil6":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = void 0;
var _inDOM = _interopRequireDefault(require("../util/inDOM"));
var _default = function() {
    // HTML DOM and SVG DOM may have different support levels,
    // so we need to check on context instead of a document root element.
    return _inDOM.default ? function(context, node) {
        if (context.contains) return context.contains(node);
        else if (context.compareDocumentPosition) return context === node || !!(context.compareDocumentPosition(node) & 16);
        else return fallback(context, node);
    } : fallback;
}();
exports.default = _default;
function fallback(context, node) {
    if (node) do {
        if (node === context) return true;
    }while (node = node.parentNode)
    return false;
}
module.exports = exports["default"];

},{"@babel/runtime/helpers/interopRequireDefault":"5TvsK","../util/inDOM":"7Efw9"}],"7Efw9":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.default = void 0;
var _default = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
exports.default = _default;
module.exports = exports["default"];

},{}],"2T6IN":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = offsetParent;
var _ownerDocument = _interopRequireDefault(require("../ownerDocument"));
var _style = _interopRequireDefault(require("../style"));
function nodeName(node) {
    return node.nodeName && node.nodeName.toLowerCase();
}
function offsetParent(node) {
    var doc = _ownerDocument.default(node), offsetParent1 = node && node.offsetParent;
    while(offsetParent1 && nodeName(node) !== 'html' && _style.default(offsetParent1, 'position') === 'static')offsetParent1 = offsetParent1.offsetParent;
    return offsetParent1 || doc.documentElement;
}
module.exports = exports["default"];

},{"@babel/runtime/helpers/interopRequireDefault":"5TvsK","../ownerDocument":"2kV5o","../style":"4VOiF"}],"4VOiF":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = style;
var _camelizeStyle = _interopRequireDefault(require("../util/camelizeStyle"));
var _hyphenateStyle = _interopRequireDefault(require("../util/hyphenateStyle"));
var _getComputedStyle2 = _interopRequireDefault(require("./getComputedStyle"));
var _removeStyle = _interopRequireDefault(require("./removeStyle"));
var _properties = require("../transition/properties");
var _isTransform = _interopRequireDefault(require("../transition/isTransform"));
function style(node, property, value) {
    var css = '';
    var transforms = '';
    var props = property;
    if (typeof property === 'string') {
        if (value === undefined) return node.style[_camelizeStyle.default(property)] || _getComputedStyle2.default(node).getPropertyValue(_hyphenateStyle.default(property));
        else (props = {
        })[property] = value;
    }
    Object.keys(props).forEach(function(key) {
        var value1 = props[key];
        if (!value1 && value1 !== 0) _removeStyle.default(node, _hyphenateStyle.default(key));
        else if (_isTransform.default(key)) transforms += key + "(" + value1 + ") ";
        else css += _hyphenateStyle.default(key) + ": " + value1 + ";";
    });
    if (transforms) css += _properties.transform + ": " + transforms + ";";
    node.style.cssText += ';' + css;
}
module.exports = exports["default"];

},{"@babel/runtime/helpers/interopRequireDefault":"5TvsK","../util/camelizeStyle":"VorzO","../util/hyphenateStyle":"6X5ox","./getComputedStyle":"38XAA","./removeStyle":"4s0GY","../transition/properties":"5kgKJ","../transition/isTransform":"3c84I"}],"VorzO":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = camelizeStyleName;
var _camelize = _interopRequireDefault(require("./camelize"));
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 * https://github.com/facebook/react/blob/2aeb8a2a6beb00617a4217f7f8284924fa2ad819/src/vendor/core/camelizeStyleName.js
 */ var msPattern = /^-ms-/;
function camelizeStyleName(string) {
    return _camelize.default(string.replace(msPattern, 'ms-'));
}
module.exports = exports["default"];

},{"@babel/runtime/helpers/interopRequireDefault":"5TvsK","./camelize":"WP82r"}],"WP82r":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.default = camelize;
var rHyphen = /-(.)/g;
function camelize(string) {
    return string.replace(rHyphen, function(_, chr) {
        return chr.toUpperCase();
    });
}
module.exports = exports["default"];

},{}],"6X5ox":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = hyphenateStyleName;
var _hyphenate = _interopRequireDefault(require("./hyphenate"));
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 * https://github.com/facebook/react/blob/2aeb8a2a6beb00617a4217f7f8284924fa2ad819/src/vendor/core/hyphenateStyleName.js
 */ var msPattern = /^ms-/;
function hyphenateStyleName(string) {
    return _hyphenate.default(string).replace(msPattern, '-ms-');
}
module.exports = exports["default"];

},{"@babel/runtime/helpers/interopRequireDefault":"5TvsK","./hyphenate":"RrwpD"}],"RrwpD":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.default = hyphenate;
var rUpper = /([A-Z])/g;
function hyphenate(string) {
    return string.replace(rUpper, '-$1').toLowerCase();
}
module.exports = exports["default"];

},{}],"38XAA":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = _getComputedStyle;
var _camelizeStyle = _interopRequireDefault(require("../util/camelizeStyle"));
var rposition = /^(top|right|bottom|left)$/;
var rnumnonpx = /^([+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|))(?!px)[a-z%]+$/i;
function _getComputedStyle(node) {
    if (!node) throw new TypeError('No Element passed to `getComputedStyle()`');
    var doc = node.ownerDocument;
    return 'defaultView' in doc ? doc.defaultView.opener ? node.ownerDocument.defaultView.getComputedStyle(node, null) : window.getComputedStyle(node, null) : {
        //ie 8 "magic" from: https://github.com/jquery/jquery/blob/1.11-stable/src/css/curCSS.js#L72
        getPropertyValue: function getPropertyValue(prop) {
            var style = node.style;
            prop = _camelizeStyle.default(prop);
            if (prop == 'float') prop = 'styleFloat';
            var current = node.currentStyle[prop] || null;
            if (current == null && style && style[prop]) current = style[prop];
            if (rnumnonpx.test(current) && !rposition.test(prop)) {
                // Remember the original values
                var left = style.left;
                var runStyle = node.runtimeStyle;
                var rsLeft = runStyle && runStyle.left; // Put in the new values to get a computed value out
                if (rsLeft) runStyle.left = node.currentStyle.left;
                style.left = prop === 'fontSize' ? '1em' : current;
                current = style.pixelLeft + 'px'; // Revert the changed values
                style.left = left;
                if (rsLeft) runStyle.left = rsLeft;
            }
            return current;
        }
    };
}
module.exports = exports["default"];

},{"@babel/runtime/helpers/interopRequireDefault":"5TvsK","../util/camelizeStyle":"VorzO"}],"4s0GY":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.default = removeStyle;
function removeStyle(node, key) {
    return 'removeProperty' in node.style ? node.style.removeProperty(key) : node.style.removeAttribute(key);
}
module.exports = exports["default"];

},{}],"5kgKJ":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = exports.animationEnd = exports.animationDelay = exports.animationTiming = exports.animationDuration = exports.animationName = exports.transitionEnd = exports.transitionDuration = exports.transitionDelay = exports.transitionTiming = exports.transitionProperty = exports.transform = void 0;
var _inDOM = _interopRequireDefault(require("../util/inDOM"));
var transform = 'transform';
exports.transform = transform;
var prefix, transitionEnd, animationEnd;
exports.animationEnd = animationEnd;
exports.transitionEnd = transitionEnd;
var transitionProperty, transitionDuration, transitionTiming, transitionDelay;
exports.transitionDelay = transitionDelay;
exports.transitionTiming = transitionTiming;
exports.transitionDuration = transitionDuration;
exports.transitionProperty = transitionProperty;
var animationName, animationDuration, animationTiming, animationDelay;
exports.animationDelay = animationDelay;
exports.animationTiming = animationTiming;
exports.animationDuration = animationDuration;
exports.animationName = animationName;
if (_inDOM.default) {
    var _getTransitionPropert = getTransitionProperties();
    prefix = _getTransitionPropert.prefix;
    exports.transitionEnd = transitionEnd = _getTransitionPropert.transitionEnd;
    exports.animationEnd = animationEnd = _getTransitionPropert.animationEnd;
    exports.transform = transform = prefix + "-" + transform;
    exports.transitionProperty = transitionProperty = prefix + "-transition-property";
    exports.transitionDuration = transitionDuration = prefix + "-transition-duration";
    exports.transitionDelay = transitionDelay = prefix + "-transition-delay";
    exports.transitionTiming = transitionTiming = prefix + "-transition-timing-function";
    exports.animationName = animationName = prefix + "-animation-name";
    exports.animationDuration = animationDuration = prefix + "-animation-duration";
    exports.animationTiming = animationTiming = prefix + "-animation-delay";
    exports.animationDelay = animationDelay = prefix + "-animation-timing-function";
}
var _default = {
    transform: transform,
    end: transitionEnd,
    property: transitionProperty,
    timing: transitionTiming,
    delay: transitionDelay,
    duration: transitionDuration
};
exports.default = _default;
function getTransitionProperties() {
    var style = document.createElement('div').style;
    var vendorMap = {
        O: function O(e) {
            return "o" + e.toLowerCase();
        },
        Moz: function Moz(e) {
            return e.toLowerCase();
        },
        Webkit: function Webkit(e) {
            return "webkit" + e;
        },
        ms: function ms(e) {
            return "MS" + e;
        }
    };
    var vendors = Object.keys(vendorMap);
    var transitionEnd1, animationEnd1;
    var prefix1 = '';
    for(var i = 0; i < vendors.length; i++){
        var vendor = vendors[i];
        if (vendor + "TransitionProperty" in style) {
            prefix1 = "-" + vendor.toLowerCase();
            transitionEnd1 = vendorMap[vendor]('TransitionEnd');
            animationEnd1 = vendorMap[vendor]('AnimationEnd');
            break;
        }
    }
    if (!transitionEnd1 && 'transitionProperty' in style) transitionEnd1 = 'transitionend';
    if (!animationEnd1 && 'animationName' in style) animationEnd1 = 'animationend';
    style = null;
    return {
        animationEnd: animationEnd1,
        transitionEnd: transitionEnd1,
        prefix: prefix1
    };
}

},{"@babel/runtime/helpers/interopRequireDefault":"5TvsK","../util/inDOM":"7Efw9"}],"3c84I":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.default = isTransform;
var supportedTransforms = /^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)$/i;
function isTransform(property) {
    return !!(property && supportedTransforms.test(property));
}
module.exports = exports["default"];

},{}],"4hImP":[function(require,module,exports) {
var { useModal , useOverlay , usePreventScroll  } = require("@react-aria/overlays");
var { mergeProps , useLayoutEffect , useViewportSize  } = require("@react-aria/utils");
var { classNames , useDOMRef , useStyleProps  } = require("@react-spectrum/utils");
var _babelRuntimeHelpersObjectWithoutPropertiesLoose = $parcel$interopDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _reactDom = $parcel$interopDefault(require("react-dom"));
var { Provider  } = require("@react-spectrum/provider");
var _reactTransitionGroupTransition = $parcel$interopDefault(require("react-transition-group/Transition"));
var _react2 = require("react");
var _react = $parcel$interopDefault(_react2);
var { useCallback , useState , forwardRef , useRef , useEffect  } = _react2;
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
require("./main.css");
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
const $d6d5f972d86d8a448288809c5c267883$var$OPEN_STATES = {
    entering: false,
    entered: true
};
/**
 * Timeout issues adding css animations to enter may be related to
 * https://github.com/reactjs/react-transition-group/issues/189 or
 * https://github.com/reactjs/react-transition-group/issues/22
 * my VM isn't good enough to debug accurately and get a better answer.
 *
 * As a result, use enter 0 so that is-open is applied once entered
 * it doesn't matter if we know when the css-animation is done on entering
 * for exiting though, give time for the css-animation to play
 * before removing from the DOM
 * **note** hitting esc bypasses exit animation for anyone testing.
 */ function $d6d5f972d86d8a448288809c5c267883$export$OpenTransition(props) {
    return(/*#__PURE__*/ _react.createElement(_reactTransitionGroupTransition, _babelRuntimeHelpersExtends({
        timeout: {
            enter: 0,
            exit: 350
        }
    }, props), (state)=>_react.Children.map(props.children, (child)=>child && /*#__PURE__*/ _react.cloneElement(child, {
                isOpen: !!$d6d5f972d86d8a448288809c5c267883$var$OPEN_STATES[state]
            })
        )
    ));
}
function $d0270a5a2198467ee027b9df554cc09$var$Overlay(props, ref) {
    let { children , isOpen , container , onEnter , onEntering , onEntered , onExit , onExiting , onExited  } = props;
    let [exited, setExited] = useState(!isOpen);
    let handleEntered = useCallback(()=>{
        setExited(false);
        if (onEntered) onEntered();
    }, [
        onEntered
    ]);
    let handleExited = useCallback(()=>{
        setExited(true);
        if (onExited) onExited();
    }, [
        onExited
    ]); // Don't un-render the overlay while it's transitioning out.
    let mountOverlay = isOpen || !exited;
    if (!mountOverlay) // Don't bother showing anything if we don't have to.
    return null;
    let contents = /*#__PURE__*/ _react.createElement(Provider, {
        ref: ref,
        UNSAFE_style: {
            background: 'transparent',
            isolation: 'isolate'
        }
    }, /*#__PURE__*/ _react.createElement($d6d5f972d86d8a448288809c5c267883$export$OpenTransition, {
        in: isOpen,
        appear: true,
        onExit: onExit,
        onExiting: onExiting,
        onExited: handleExited,
        onEnter: onEnter,
        onEntering: onEntering,
        onEntered: handleEntered
    }, children));
    return(/*#__PURE__*/ _reactDom.createPortal(contents, container || document.body));
}
let Overlay = /*#__PURE__*/ _react.forwardRef($d0270a5a2198467ee027b9df554cc09$var$Overlay);
exports.Overlay = Overlay;
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/overlays/src/overlays.css
var $a434c787f706f7c179fc4f21b517d3a$exports = {
};
$a434c787f706f7c179fc4f21b517d3a$exports = {
    "spectrum-Popover": "_spectrum-Popover_1c0dd",
    "react-spectrum-Popover": "_react-spectrum-Popover_1c0dd",
    "spectrum-Dialog-content": "_spectrum-Dialog-content_1c0dd",
    "spectrum-Modal-wrapper": "_spectrum-Modal-wrapper_1c0dd",
    "react-spectrum-Modal-wrapper": "_react-spectrum-Modal-wrapper_1c0dd",
    "spectrum-Modal": "_spectrum-Modal_1c0dd",
    "react-spectrum-Modal": "_react-spectrum-Modal_1c0dd",
    "spectrum-Tray": "_spectrum-Tray_1c0dd",
    "react-spectrum-Tray": "_react-spectrum-Tray_1c0dd"
};
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/popover/vars.css
var $a9f4222934d4412568b57bdfebcfeb3$exports = {
};
$a9f4222934d4412568b57bdfebcfeb3$exports = {
    "spectrum-Popover": "_spectrum-Popover_c37f7",
    "is-open": "_is-open_c37f7",
    "spectrum-Popover--bottom": "_spectrum-Popover--bottom_c37f7",
    "spectrum-Popover--top": "_spectrum-Popover--top_c37f7",
    "spectrum-Popover--right": "_spectrum-Popover--right_c37f7",
    "spectrum-Popover--left": "_spectrum-Popover--left_c37f7",
    "spectrum-Popover-tip": "_spectrum-Popover-tip_c37f7",
    "spectrum-Popover-tip-triangle": "_spectrum-Popover-tip-triangle_c37f7",
    "spectrum-Popover--dialog": "_spectrum-Popover--dialog_c37f7",
    "spectrum-Popover--withTip": "_spectrum-Popover--withTip_c37f7"
};
/**
 * Arrow placement can be done pointing right or down because those paths start at 0, x or y. Because the
 * other two don't, they start at a fractional pixel value, it introduces rounding differences between browsers and
 * between display types (retina with subpixels vs not retina). By flipping them with CSS we can ensure that
 * the path always starts at 0 so that it perfectly overlaps the popover's border.
 * See bottom of file for more explanation.
 */ let $cb5ac2f1b271cf568ded3aa34c88ecd$var$arrowPlacement = {
    left: 'right',
    right: 'right',
    top: 'bottom',
    bottom: 'bottom'
};
function $cb5ac2f1b271cf568ded3aa34c88ecd$var$Popover(props, ref) {
    let { children , placement , arrowProps , onClose , shouldCloseOnBlur , hideArrow , isKeyboardDismissDisabled , isNonModal , isDismissable =true  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "children",
        "placement",
        "arrowProps",
        "onClose",
        "shouldCloseOnBlur",
        "hideArrow",
        "isKeyboardDismissDisabled",
        "isNonModal",
        "isDismissable"
    ]);
    let domRef = useDOMRef(ref);
    let { styleProps  } = useStyleProps(props);
    return(/*#__PURE__*/ _react.createElement(Overlay, otherProps, /*#__PURE__*/ _react.createElement($cb5ac2f1b271cf568ded3aa34c88ecd$var$PopoverWrapper, _babelRuntimeHelpersExtends({
    }, styleProps, {
        ref: domRef,
        placement: placement,
        arrowProps: arrowProps,
        onClose: onClose,
        shouldCloseOnBlur: shouldCloseOnBlur,
        isKeyboardDismissDisabled: isKeyboardDismissDisabled,
        hideArrow: hideArrow,
        isNonModal: isNonModal,
        isDismissable: isDismissable
    }), children)));
}
var $a9f4222934d4412568b57bdfebcfeb3$$interop$default = $parcel$interopDefault($a9f4222934d4412568b57bdfebcfeb3$exports);
var $a434c787f706f7c179fc4f21b517d3a$$interop$default = $parcel$interopDefault($a434c787f706f7c179fc4f21b517d3a$exports);
const $cb5ac2f1b271cf568ded3aa34c88ecd$var$PopoverWrapper = /*#__PURE__*/ forwardRef((props, ref)=>{
    let { children , placement ='bottom' , arrowProps , isOpen , hideArrow , isNonModal , // eslint-disable-next-line @typescript-eslint/no-unused-vars
    isDismissable  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "children",
        "placement",
        "arrowProps",
        "isOpen",
        "hideArrow",
        "shouldCloseOnBlur",
        "isKeyboardDismissDisabled",
        "isNonModal",
        "isDismissable"
    ]);
    let { overlayProps  } = useOverlay(_babelRuntimeHelpersExtends({
    }, props, {
        isDismissable: isDismissable && isOpen
    }), ref);
    let { modalProps  } = useModal({
        isDisabled: isNonModal
    });
    return(/*#__PURE__*/ _react.createElement("div", _babelRuntimeHelpersExtends({
    }, mergeProps(otherProps, overlayProps, modalProps), {
        ref: ref,
        className: classNames($a9f4222934d4412568b57bdfebcfeb3$$interop$default, 'spectrum-Popover', "spectrum-Popover--" + placement, {
            'spectrum-Popover--withTip': !hideArrow,
            'is-open': isOpen
        }, classNames($a434c787f706f7c179fc4f21b517d3a$$interop$default, 'spectrum-Popover', 'react-spectrum-Popover'), otherProps.className),
        role: "presentation"
    }), children, hideArrow ? null : /*#__PURE__*/ _react.createElement($cb5ac2f1b271cf568ded3aa34c88ecd$var$Arrow, {
        arrowProps: arrowProps,
        direction: $cb5ac2f1b271cf568ded3aa34c88ecd$var$arrowPlacement[placement]
    })));
});
let $cb5ac2f1b271cf568ded3aa34c88ecd$var$ROOT_2 = Math.sqrt(2);
function $cb5ac2f1b271cf568ded3aa34c88ecd$var$Arrow(props) {
    let [size, setSize] = useState(20);
    let [borderWidth, setBorderWidth] = useState(1);
    let ref = useRef(); // get the css value for the tip size and divide it by 2 for this arrow implementation
    useLayoutEffect(()=>{
        if (ref.current) {
            let spectrumTipWidth = window.getComputedStyle(ref.current).getPropertyValue('--spectrum-popover-tip-size');
            if (spectrumTipWidth !== '') setSize(parseInt(spectrumTipWidth, 10) / 2);
            let spectrumBorderWidth = window.getComputedStyle(ref.current).getPropertyValue('--spectrum-popover-tip-borderWidth');
            if (spectrumBorderWidth !== '') setBorderWidth(parseInt(spectrumBorderWidth, 10));
        }
    }, [
        ref
    ]);
    let landscape = props.direction === 'top' || props.direction === 'bottom';
    let mirror = props.direction === 'left' || props.direction === 'top';
    let borderDiagonal = borderWidth * $cb5ac2f1b271cf568ded3aa34c88ecd$var$ROOT_2;
    let halfBorderDiagonal = borderDiagonal / 2;
    let secondary = 2 * size + 2 * borderDiagonal;
    let primary = size + borderDiagonal;
    let primaryStart = mirror ? primary : 0;
    let primaryEnd = mirror ? halfBorderDiagonal : primary - halfBorderDiagonal;
    let secondaryStart = halfBorderDiagonal;
    let secondaryMiddle = secondary / 2;
    let secondaryEnd = secondary - halfBorderDiagonal;
    let pathData = landscape ? [
        'M',
        secondaryStart,
        primaryStart,
        'L',
        secondaryMiddle,
        primaryEnd,
        'L',
        secondaryEnd,
        primaryStart
    ] : [
        'M',
        primaryStart,
        secondaryStart,
        'L',
        primaryEnd,
        secondaryMiddle,
        'L',
        primaryStart,
        secondaryEnd
    ];
    let arrowProps = props.arrowProps;
    /* use ceil because the svg needs to always accomodate the path inside it */ return(/*#__PURE__*/ _react.createElement("svg", _babelRuntimeHelpersExtends({
        xmlns: "http://www.w3.org/svg/2000",
        width: Math.ceil(landscape ? secondary : primary),
        height: Math.ceil(landscape ? primary : secondary),
        style: props.style,
        className: classNames($a9f4222934d4412568b57bdfebcfeb3$$interop$default, 'spectrum-Popover-tip'),
        ref: ref
    }, arrowProps), /*#__PURE__*/ _react.createElement("path", {
        className: classNames($a9f4222934d4412568b57bdfebcfeb3$$interop$default, 'spectrum-Popover-tip-triangle'),
        d: pathData.join(' ')
    })));
}
let Popover = /*#__PURE__*/ forwardRef($cb5ac2f1b271cf568ded3aa34c88ecd$var$Popover);
exports.Popover = Popover;
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/modal/vars.css
var $b8ac61fc976db2b0e346a0671961$exports = {
};
$b8ac61fc976db2b0e346a0671961$exports = {
    "spectrum-Modal": "_spectrum-Modal_cdccb",
    "is-open": "_is-open_cdccb",
    "spectrum-Modal-wrapper": "_spectrum-Modal-wrapper_cdccb",
    "spectrum-Modal--responsive": "_spectrum-Modal--responsive_cdccb",
    "spectrum-Modal--fullscreen": "_spectrum-Modal--fullscreen_cdccb",
    "spectrum-Modal--fullscreenTakeover": "_spectrum-Modal--fullscreenTakeover_cdccb"
};
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/underlay/vars.css
var $f2a147f4891994bda5d87ce34e55004f$exports = {
};
$f2a147f4891994bda5d87ce34e55004f$exports = {
    "spectrum-Underlay": "_spectrum-Underlay_8c345",
    "is-open": "_is-open_8c345"
};
var $f2a147f4891994bda5d87ce34e55004f$$interop$default = $parcel$interopDefault($f2a147f4891994bda5d87ce34e55004f$exports);
function $c648a952e23df4b2fc75f8a200e83b76$export$Underlay(_ref) {
    let { isOpen  } = _ref;
    return(/*#__PURE__*/ _react.createElement("div", {
        className: classNames($f2a147f4891994bda5d87ce34e55004f$$interop$default, 'spectrum-Underlay', {
            'is-open': isOpen
        })
    }));
}
function $a62d82478f31e7bc19e59228dca6318$var$Modal(props, ref) {
    let { children , onClose , type  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "children",
        "onClose",
        "type"
    ]);
    let domRef = useDOMRef(ref);
    let { styleProps  } = useStyleProps(props);
    let { overlayProps , underlayProps  } = useOverlay(props, domRef);
    return(/*#__PURE__*/ _react.createElement(Overlay, otherProps, /*#__PURE__*/ _react.createElement($c648a952e23df4b2fc75f8a200e83b76$export$Underlay, underlayProps), /*#__PURE__*/ _react.createElement($a62d82478f31e7bc19e59228dca6318$var$ModalWrapper, _babelRuntimeHelpersExtends({
    }, styleProps, {
        onClose: onClose,
        type: type,
        ref: domRef,
        overlayProps: overlayProps
    }), children)));
}
let $a62d82478f31e7bc19e59228dca6318$var$typeMap = {
    fullscreen: 'fullscreen',
    fullscreenTakeover: 'fullscreenTakeover'
};
var $b8ac61fc976db2b0e346a0671961$$interop$default = $parcel$interopDefault($b8ac61fc976db2b0e346a0671961$exports);
let $a62d82478f31e7bc19e59228dca6318$var$ModalWrapper = /*#__PURE__*/ forwardRef(function(props, ref) {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    let { children , isOpen , type , overlayProps  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "children",
        "isOpen",
        "type",
        "overlayProps"
    ]);
    let typeVariant = $a62d82478f31e7bc19e59228dca6318$var$typeMap[type];
    usePreventScroll();
    let { modalProps  } = useModal();
    let wrapperClassName = classNames($b8ac61fc976db2b0e346a0671961$$interop$default, 'spectrum-Modal-wrapper', classNames($a434c787f706f7c179fc4f21b517d3a$$interop$default, 'spectrum-Modal-wrapper', 'react-spectrum-Modal-wrapper'));
    let modalClassName = classNames($b8ac61fc976db2b0e346a0671961$$interop$default, 'spectrum-Modal', {
        'is-open': isOpen
    }, classNames($a434c787f706f7c179fc4f21b517d3a$$interop$default, 'spectrum-Modal', 'react-spectrum-Modal'), {
        ["spectrum-Modal--" + typeVariant]: typeVariant
    }, otherProps.className);
    let viewport = useViewportSize();
    let style = {
        '--spectrum-visual-viewport-height': viewport.height + 'px'
    };
    return(/*#__PURE__*/ _react.createElement("div", {
        className: wrapperClassName,
        style: style
    }, /*#__PURE__*/ _react.createElement("div", _babelRuntimeHelpersExtends({
    }, mergeProps(otherProps, overlayProps, modalProps), {
        ref: ref,
        className: modalClassName
    }), children)));
});
let Modal = /*#__PURE__*/ forwardRef($a62d82478f31e7bc19e59228dca6318$var$Modal);
exports.Modal = Modal;
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/tray/vars.css
var $cf6719050fb6ee63a92f86b402a03d3c$exports = {
};
$cf6719050fb6ee63a92f86b402a03d3c$exports = {
    "spectrum-Tray": "_spectrum-Tray_8bca2",
    "is-open": "_is-open_8bca2",
    "spectrum-Tray-wrapper": "_spectrum-Tray-wrapper_8bca2",
    "spectrum-Tray--fixedHeight": "_spectrum-Tray--fixedHeight_8bca2"
};
function $c302f13166ea83bbd2ac9accda46696$var$Tray(props, ref) {
    let { children , onClose , isFixedHeight , isNonModal  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "children",
        "onClose",
        "isFixedHeight",
        "isNonModal"
    ]);
    let domRef = useDOMRef(ref);
    let { styleProps  } = useStyleProps(props);
    let { overlayProps , underlayProps  } = useOverlay(_babelRuntimeHelpersExtends({
    }, props, {
        isDismissable: true
    }), domRef);
    return(/*#__PURE__*/ _react.createElement(Overlay, otherProps, /*#__PURE__*/ _react.createElement($c648a952e23df4b2fc75f8a200e83b76$export$Underlay, underlayProps), /*#__PURE__*/ _react.createElement($c302f13166ea83bbd2ac9accda46696$var$TrayWrapper, _babelRuntimeHelpersExtends({
    }, styleProps, {
        onClose: onClose,
        ref: domRef,
        overlayProps: overlayProps,
        isFixedHeight: isFixedHeight,
        isNonModal: isNonModal
    }), children)));
}
var $cf6719050fb6ee63a92f86b402a03d3c$$interop$default = $parcel$interopDefault($cf6719050fb6ee63a92f86b402a03d3c$exports);
let $c302f13166ea83bbd2ac9accda46696$var$TrayWrapper = /*#__PURE__*/ forwardRef(function(props, ref) {
    let { children , isOpen , isFixedHeight , isNonModal , overlayProps  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "children",
        "isOpen",
        "isFixedHeight",
        "isNonModal",
        "overlayProps"
    ]);
    usePreventScroll();
    let { modalProps  } = useModal({
        isDisabled: isNonModal
    }); // We need to measure the window's height in JS rather than using percentages in CSS
    // so that contents (e.g. menu) can inherit the max-height properly. Using percentages
    // does not work properly because there is nothing to base the percentage on.
    // We cannot use vh units because mobile browsers adjust the window height dynamically
    // when the address bar/bottom toolbars show and hide on scroll and vh units are fixed.
    // Also, the visual viewport is smaller than the layout viewport when the virtual keyboard
    // is up, so use the VisualViewport API to ensure the tray is displayed above the keyboard.
    let viewport = useViewportSize();
    let [height, setHeight] = useState(viewport.height);
    let timeoutRef = useRef();
    useEffect(()=>{
        clearTimeout(timeoutRef.current); // When the height is decreasing, and the keyboard is visible
        // (visual viewport smaller than layout viewport), delay setting
        // the new max height until after the animation is complete
        // so that there isn't an empty space under the tray briefly.
        if (viewport.height < height && viewport.height < window.innerHeight) timeoutRef.current = setTimeout(()=>{
            setHeight(viewport.height);
        }, 500);
        else setHeight(viewport.height);
    }, [
        height,
        viewport.height
    ]);
    let wrapperStyle = {
        '--spectrum-visual-viewport-height': height + 'px'
    };
    let wrapperClassName = classNames($cf6719050fb6ee63a92f86b402a03d3c$$interop$default, 'spectrum-Tray-wrapper');
    let className = classNames($cf6719050fb6ee63a92f86b402a03d3c$$interop$default, 'spectrum-Tray', {
        'is-open': isOpen,
        'spectrum-Tray--fixedHeight': isFixedHeight
    }, classNames($a434c787f706f7c179fc4f21b517d3a$$interop$default, 'spectrum-Tray', 'react-spectrum-Tray'), otherProps.className);
    let domProps = mergeProps(otherProps, overlayProps);
    return(/*#__PURE__*/ _react.createElement("div", {
        className: wrapperClassName,
        style: wrapperStyle
    }, /*#__PURE__*/ _react.createElement("div", _babelRuntimeHelpersExtends({
    }, domProps, modalProps, {
        className: className,
        ref: ref
    }), children)));
});
let Tray = /*#__PURE__*/ forwardRef($c302f13166ea83bbd2ac9accda46696$var$Tray);
exports.Tray = Tray;

},{"@react-aria/overlays":"6I1ei","@react-aria/utils":"d8qxy","@react-spectrum/utils":"7ch5A","@babel/runtime/helpers/objectWithoutPropertiesLoose":"5byko","react-dom":"6V7Bv","@react-spectrum/provider":"3Y6zE","react-transition-group/Transition":"2M6wE","react":"a6qBW","@babel/runtime/helpers/extends":"5xz6u","./main.css":"53uY5"}],"7ch5A":[function(require,module,exports) {
var { mergeProps , useLayoutEffect , useResizeObserver  } = require("@react-aria/utils");
exports.useResizeObserver = useResizeObserver;
var { useLocale  } = require("@react-aria/i18n");
var _babelRuntimeHelpersObjectWithoutPropertiesLoose = $parcel$interopDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
var { useIsSSR  } = require("@react-aria/ssr");
var _react2 = require("react");
var _react = $parcel$interopDefault(_react2);
var { useEffect , useState , useImperativeHandle , useMemo , useRef , useContext , useCallback  } = _react2;
var _clsx = $parcel$interopDefault(require("clsx"));
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
let shouldKeepSpectrumClassNames = false;
exports.shouldKeepSpectrumClassNames = shouldKeepSpectrumClassNames;
function keepSpectrumClassNames() {
    shouldKeepSpectrumClassNames = true;
    exports.shouldKeepSpectrumClassNames = shouldKeepSpectrumClassNames;
    console.warn("Legacy spectrum-prefixed class names enabled for backward compatibility. We recommend replacing instances of CSS overrides targeting spectrum selectors in your app with custom class names of your own, and disabling this flag.");
}
exports.keepSpectrumClassNames = keepSpectrumClassNames;
function classNames(cssModule) {
    let classes = [];
    for(var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)values[_key - 1] = arguments[_key];
    for (let value of values){
        if (typeof value === 'object' && value) {
            let mapped = {
            };
            for(let key in value){
                if (cssModule[key]) mapped[cssModule[key]] = value[key];
                if (shouldKeepSpectrumClassNames || !cssModule[key]) mapped[key] = value[key];
            }
            classes.push(mapped);
        } else if (typeof value === 'string') {
            if (cssModule[value]) classes.push(cssModule[value]);
            if (shouldKeepSpectrumClassNames || !cssModule[value]) classes.push(value);
        } else classes.push(value);
    }
    return _clsx(...classes);
}
exports.classNames = classNames;
function getWrappedElement(children) {
    let element;
    if (typeof children === 'string') element = /*#__PURE__*/ _react.createElement("span", null, children);
    else element = _react.Children.only(children);
    return element;
}
exports.getWrappedElement = getWrappedElement;
function useMediaQuery(query) {
    let supportsMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia === 'function';
    let [matches, setMatches] = useState(()=>supportsMatchMedia ? window.matchMedia(query).matches : false
    );
    useEffect(()=>{
        if (!supportsMatchMedia) return;
        let mq = window.matchMedia(query);
        let onChange = (evt)=>{
            setMatches(evt.matches);
        };
        mq.addListener(onChange);
        return ()=>{
            mq.removeListener(onChange);
        };
    }, [
        supportsMatchMedia,
        query
    ]); // If in SSR, the media query should never match. Once the page hydrates,
    // this will update and the real value will be returned.
    let isSSR = useIsSSR();
    return isSSR ? false : matches;
}
exports.useMediaQuery = useMediaQuery;
function createDOMRef(ref) {
    return {
        UNSAFE_getDOMNode () {
            return ref.current;
        }
    };
}
exports.createDOMRef = createDOMRef;
function createFocusableRef(domRef, focusableRef) {
    if (focusableRef === void 0) focusableRef = domRef;
    return _babelRuntimeHelpersExtends({
    }, createDOMRef(domRef), {
        focus () {
            if (focusableRef.current) focusableRef.current.focus();
        }
    });
}
exports.createFocusableRef = createFocusableRef;
function useDOMRef(ref) {
    let domRef = useRef(null);
    useImperativeHandle(ref, ()=>createDOMRef(domRef)
    );
    return domRef;
}
exports.useDOMRef = useDOMRef;
function useFocusableRef(ref, focusableRef) {
    let domRef = useRef(null);
    useImperativeHandle(ref, ()=>createFocusableRef(domRef, focusableRef)
    );
    return domRef;
}
exports.useFocusableRef = useFocusableRef;
function unwrapDOMRef(ref) {
    return {
        get current () {
            return ref.current && ref.current.UNSAFE_getDOMNode();
        }
    };
}
exports.unwrapDOMRef = unwrapDOMRef;
function useUnwrapDOMRef(ref) {
    return useMemo(()=>unwrapDOMRef(ref)
    , [
        ref
    ]);
}
exports.useUnwrapDOMRef = useUnwrapDOMRef;
const $a7996575bce26478d1cdac9b52b1cf84$var$Context = /*#__PURE__*/ _react.createContext(null);
$a7996575bce26478d1cdac9b52b1cf84$var$Context.displayName = 'BreakpointContext';
function BreakpointProvider(props) {
    let { children , matchedBreakpoints  } = props;
    return(/*#__PURE__*/ _react.createElement($a7996575bce26478d1cdac9b52b1cf84$var$Context.Provider, {
        value: {
            matchedBreakpoints
        }
    }, children));
}
exports.BreakpointProvider = BreakpointProvider;
function useMatchedBreakpoints(breakpoints) {
    let entries = Object.entries(breakpoints).sort((_ref, _ref2)=>{
        let [, valueA] = _ref;
        let [, valueB] = _ref2;
        return valueB - valueA;
    });
    let breakpointQueries = entries.map((_ref3)=>{
        let [, value] = _ref3;
        return "(min-width: " + value + "px)";
    });
    let supportsMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia === 'function';
    let getBreakpointHandler = ()=>{
        let matched = [];
        for(let i in breakpointQueries){
            let query = breakpointQueries[i];
            if (window.matchMedia(query).matches) matched.push(entries[i][0]);
        }
        matched.push('base');
        return matched;
    };
    let [breakpoint, setBreakpoint] = useState(()=>supportsMatchMedia ? getBreakpointHandler() : [
            'base'
        ]
    );
    useEffect(()=>{
        if (!supportsMatchMedia) return;
        let onResize = ()=>{
            setBreakpoint(getBreakpointHandler());
        };
        window.addEventListener('resize', onResize);
        return ()=>{
            window.removeEventListener('resize', onResize);
        };
    }, [
        supportsMatchMedia
    ]); // If in SSR, the media query should never match. Once the page hydrates,
    // this will update and the real value will be returned.
    let isSSR = useIsSSR();
    return isSSR ? [
        'base'
    ] : breakpoint;
}
exports.useMatchedBreakpoints = useMatchedBreakpoints;
function useBreakpoint() {
    return useContext($a7996575bce26478d1cdac9b52b1cf84$var$Context);
}
exports.useBreakpoint = useBreakpoint;
const baseStyleProps = {
    margin: [
        'margin',
        dimensionValue
    ],
    marginStart: [
        $fde11e9d9d7d059795140092a2808e57$var$rtl('marginLeft', 'marginRight'),
        dimensionValue
    ],
    marginEnd: [
        $fde11e9d9d7d059795140092a2808e57$var$rtl('marginRight', 'marginLeft'),
        dimensionValue
    ],
    // marginLeft: ['marginLeft', dimensionValue],
    // marginRight: ['marginRight', dimensionValue],
    marginTop: [
        'marginTop',
        dimensionValue
    ],
    marginBottom: [
        'marginBottom',
        dimensionValue
    ],
    marginX: [
        [
            'marginLeft',
            'marginRight'
        ],
        dimensionValue
    ],
    marginY: [
        [
            'marginTop',
            'marginBottom'
        ],
        dimensionValue
    ],
    width: [
        'width',
        dimensionValue
    ],
    height: [
        'height',
        dimensionValue
    ],
    minWidth: [
        'minWidth',
        dimensionValue
    ],
    minHeight: [
        'minHeight',
        dimensionValue
    ],
    maxWidth: [
        'maxWidth',
        dimensionValue
    ],
    maxHeight: [
        'maxHeight',
        dimensionValue
    ],
    isHidden: [
        'display',
        $fde11e9d9d7d059795140092a2808e57$var$hiddenValue
    ],
    alignSelf: [
        'alignSelf',
        passthroughStyle
    ],
    justifySelf: [
        'justifySelf',
        passthroughStyle
    ],
    position: [
        'position',
        $fde11e9d9d7d059795140092a2808e57$var$anyValue
    ],
    zIndex: [
        'zIndex',
        $fde11e9d9d7d059795140092a2808e57$var$anyValue
    ],
    top: [
        'top',
        dimensionValue
    ],
    bottom: [
        'bottom',
        dimensionValue
    ],
    start: [
        $fde11e9d9d7d059795140092a2808e57$var$rtl('left', 'right'),
        dimensionValue
    ],
    end: [
        $fde11e9d9d7d059795140092a2808e57$var$rtl('right', 'left'),
        dimensionValue
    ],
    left: [
        'left',
        dimensionValue
    ],
    right: [
        'right',
        dimensionValue
    ],
    order: [
        'order',
        $fde11e9d9d7d059795140092a2808e57$var$anyValue
    ],
    flex: [
        'flex',
        $fde11e9d9d7d059795140092a2808e57$var$flexValue
    ],
    flexGrow: [
        'flexGrow',
        passthroughStyle
    ],
    flexShrink: [
        'flexShrink',
        passthroughStyle
    ],
    flexBasis: [
        'flexBasis',
        passthroughStyle
    ],
    gridArea: [
        'gridArea',
        passthroughStyle
    ],
    gridColumn: [
        'gridColumn',
        passthroughStyle
    ],
    gridColumnEnd: [
        'gridColumnEnd',
        passthroughStyle
    ],
    gridColumnStart: [
        'gridColumnStart',
        passthroughStyle
    ],
    gridRow: [
        'gridRow',
        passthroughStyle
    ],
    gridRowEnd: [
        'gridRowEnd',
        passthroughStyle
    ],
    gridRowStart: [
        'gridRowStart',
        passthroughStyle
    ]
};
exports.baseStyleProps = baseStyleProps;
const viewStyleProps = _babelRuntimeHelpersExtends({
}, baseStyleProps, {
    backgroundColor: [
        'backgroundColor',
        $fde11e9d9d7d059795140092a2808e57$var$backgroundColorValue
    ],
    borderWidth: [
        'borderWidth',
        $fde11e9d9d7d059795140092a2808e57$var$borderSizeValue
    ],
    borderStartWidth: [
        $fde11e9d9d7d059795140092a2808e57$var$rtl('borderLeftWidth', 'borderRightWidth'),
        $fde11e9d9d7d059795140092a2808e57$var$borderSizeValue
    ],
    borderEndWidth: [
        $fde11e9d9d7d059795140092a2808e57$var$rtl('borderRightWidth', 'borderLeftWidth'),
        $fde11e9d9d7d059795140092a2808e57$var$borderSizeValue
    ],
    borderLeftWidth: [
        'borderLeftWidth',
        $fde11e9d9d7d059795140092a2808e57$var$borderSizeValue
    ],
    borderRightWidth: [
        'borderRightWidth',
        $fde11e9d9d7d059795140092a2808e57$var$borderSizeValue
    ],
    borderTopWidth: [
        'borderTopWidth',
        $fde11e9d9d7d059795140092a2808e57$var$borderSizeValue
    ],
    borderBottomWidth: [
        'borderBottomWidth',
        $fde11e9d9d7d059795140092a2808e57$var$borderSizeValue
    ],
    borderXWidth: [
        [
            'borderLeftWidth',
            'borderRightWidth'
        ],
        $fde11e9d9d7d059795140092a2808e57$var$borderSizeValue
    ],
    borderYWidth: [
        [
            'borderTopWidth',
            'borderBottomWidth'
        ],
        $fde11e9d9d7d059795140092a2808e57$var$borderSizeValue
    ],
    borderColor: [
        'borderColor',
        $fde11e9d9d7d059795140092a2808e57$var$borderColorValue
    ],
    borderStartColor: [
        $fde11e9d9d7d059795140092a2808e57$var$rtl('borderLeftColor', 'borderRightColor'),
        $fde11e9d9d7d059795140092a2808e57$var$borderColorValue
    ],
    borderEndColor: [
        $fde11e9d9d7d059795140092a2808e57$var$rtl('borderRightColor', 'borderLeftColor'),
        $fde11e9d9d7d059795140092a2808e57$var$borderColorValue
    ],
    borderLeftColor: [
        'borderLeftColor',
        $fde11e9d9d7d059795140092a2808e57$var$borderColorValue
    ],
    borderRightColor: [
        'borderRightColor',
        $fde11e9d9d7d059795140092a2808e57$var$borderColorValue
    ],
    borderTopColor: [
        'borderTopColor',
        $fde11e9d9d7d059795140092a2808e57$var$borderColorValue
    ],
    borderBottomColor: [
        'borderBottomColor',
        $fde11e9d9d7d059795140092a2808e57$var$borderColorValue
    ],
    borderXColor: [
        [
            'borderLeftColor',
            'borderRightColor'
        ],
        $fde11e9d9d7d059795140092a2808e57$var$borderColorValue
    ],
    borderYColor: [
        [
            'borderTopColor',
            'borderBottomColor'
        ],
        $fde11e9d9d7d059795140092a2808e57$var$borderColorValue
    ],
    borderRadius: [
        'borderRadius',
        $fde11e9d9d7d059795140092a2808e57$var$borderRadiusValue
    ],
    borderTopStartRadius: [
        $fde11e9d9d7d059795140092a2808e57$var$rtl('borderTopLeftRadius', 'borderTopRightRadius'),
        $fde11e9d9d7d059795140092a2808e57$var$borderRadiusValue
    ],
    borderTopEndRadius: [
        $fde11e9d9d7d059795140092a2808e57$var$rtl('borderTopRightRadius', 'borderTopLeftRadius'),
        $fde11e9d9d7d059795140092a2808e57$var$borderRadiusValue
    ],
    borderBottomStartRadius: [
        $fde11e9d9d7d059795140092a2808e57$var$rtl('borderBottomLeftRadius', 'borderBottomRightRadius'),
        $fde11e9d9d7d059795140092a2808e57$var$borderRadiusValue
    ],
    borderBottomEndRadius: [
        $fde11e9d9d7d059795140092a2808e57$var$rtl('borderBottomRightRadius', 'borderBottomLeftRadius'),
        $fde11e9d9d7d059795140092a2808e57$var$borderRadiusValue
    ],
    borderTopLeftRadius: [
        'borderTopLeftRadius',
        $fde11e9d9d7d059795140092a2808e57$var$borderRadiusValue
    ],
    borderTopRightRadius: [
        'borderTopRightRadius',
        $fde11e9d9d7d059795140092a2808e57$var$borderRadiusValue
    ],
    borderBottomLeftRadius: [
        'borderBottomLeftRadius',
        $fde11e9d9d7d059795140092a2808e57$var$borderRadiusValue
    ],
    borderBottomRightRadius: [
        'borderBottomRightRadius',
        $fde11e9d9d7d059795140092a2808e57$var$borderRadiusValue
    ],
    padding: [
        'padding',
        dimensionValue
    ],
    paddingStart: [
        $fde11e9d9d7d059795140092a2808e57$var$rtl('paddingLeft', 'paddingRight'),
        dimensionValue
    ],
    paddingEnd: [
        $fde11e9d9d7d059795140092a2808e57$var$rtl('paddingRight', 'paddingLeft'),
        dimensionValue
    ],
    paddingLeft: [
        'paddingLeft',
        dimensionValue
    ],
    paddingRight: [
        'paddingRight',
        dimensionValue
    ],
    paddingTop: [
        'paddingTop',
        dimensionValue
    ],
    paddingBottom: [
        'paddingBottom',
        dimensionValue
    ],
    paddingX: [
        [
            'paddingLeft',
            'paddingRight'
        ],
        dimensionValue
    ],
    paddingY: [
        [
            'paddingTop',
            'paddingBottom'
        ],
        dimensionValue
    ],
    overflow: [
        'overflow',
        passthroughStyle
    ]
});
exports.viewStyleProps = viewStyleProps;
const $fde11e9d9d7d059795140092a2808e57$var$borderStyleProps = {
    borderWidth: 'borderStyle',
    borderLeftWidth: 'borderLeftStyle',
    borderRightWidth: 'borderRightStyle',
    borderTopWidth: 'borderTopStyle',
    borderBottomWidth: 'borderBottomStyle'
};
function $fde11e9d9d7d059795140092a2808e57$var$rtl(ltr, rtl) {
    return (direction)=>direction === 'rtl' ? rtl : ltr
    ;
}
const $fde11e9d9d7d059795140092a2808e57$var$UNIT_RE = /(%|px|em|rem|vw|vh|auto|cm|mm|in|pt|pc|ex|ch|rem|vmin|vmax|fr)$/;
const $fde11e9d9d7d059795140092a2808e57$var$FUNC_RE = /^\s*\w+\(/;
const $fde11e9d9d7d059795140092a2808e57$var$SPECTRUM_VARIABLE_RE = /(static-)?size-\d+|single-line-(height|width)/g;
function dimensionValue(value) {
    if (typeof value === 'number') return value + 'px';
    if ($fde11e9d9d7d059795140092a2808e57$var$UNIT_RE.test(value)) return value;
    if ($fde11e9d9d7d059795140092a2808e57$var$FUNC_RE.test(value)) return value.replace($fde11e9d9d7d059795140092a2808e57$var$SPECTRUM_VARIABLE_RE, 'var(--spectrum-global-dimension-$&, var(--spectrum-alias-$&))');
    return "var(--spectrum-global-dimension-" + value + ", var(--spectrum-alias-" + value + "))";
}
exports.dimensionValue = dimensionValue;
function responsiveDimensionValue(value, matchedBreakpoints) {
    value = getResponsiveProp(value, matchedBreakpoints);
    return dimensionValue(value);
}
exports.responsiveDimensionValue = responsiveDimensionValue;
function $fde11e9d9d7d059795140092a2808e57$var$colorValue(value, type) {
    if (type === void 0) type = 'default';
    return "var(--spectrum-global-color-" + value + ", var(--spectrum-semantic-" + value + "-color-" + type + "))";
}
function $fde11e9d9d7d059795140092a2808e57$var$backgroundColorValue(value) {
    return "var(--spectrum-alias-background-color-" + value + ", " + $fde11e9d9d7d059795140092a2808e57$var$colorValue(value, 'background') + ")";
}
function $fde11e9d9d7d059795140092a2808e57$var$borderColorValue(value) {
    if (value === 'default') return 'var(--spectrum-alias-border-color)';
    return "var(--spectrum-alias-border-color-" + value + ", " + $fde11e9d9d7d059795140092a2808e57$var$colorValue(value, 'border') + ")";
}
function $fde11e9d9d7d059795140092a2808e57$var$borderSizeValue(value) {
    return "var(--spectrum-alias-border-size-" + value + ")";
}
function $fde11e9d9d7d059795140092a2808e57$var$borderRadiusValue(value) {
    return "var(--spectrum-alias-border-radius-" + value + ")";
}
function $fde11e9d9d7d059795140092a2808e57$var$hiddenValue(value) {
    return value ? 'none' : undefined;
}
function $fde11e9d9d7d059795140092a2808e57$var$anyValue(value) {
    return value;
}
function $fde11e9d9d7d059795140092a2808e57$var$flexValue(value) {
    if (typeof value === 'boolean') return value ? '1' : undefined;
    return '' + value;
}
function convertStyleProps(props, handlers, direction, matchedBreakpoints) {
    let style = {
    };
    for(let key in props){
        let styleProp = handlers[key];
        if (!styleProp || props[key] == null) continue;
        let [name, convert] = styleProp;
        if (typeof name === 'function') name = name(direction);
        let prop = getResponsiveProp(props[key], matchedBreakpoints);
        let value = convert(prop);
        if (Array.isArray(name)) for (let k of name)style[k] = value;
        else style[name] = value;
    }
    for(let prop in $fde11e9d9d7d059795140092a2808e57$var$borderStyleProps)if (style[prop]) {
        style[$fde11e9d9d7d059795140092a2808e57$var$borderStyleProps[prop]] = 'solid';
        style.boxSizing = 'border-box';
    }
    return style;
}
exports.convertStyleProps = convertStyleProps;
function useStyleProps(props, handlers, options) {
    if (handlers === void 0) handlers = baseStyleProps;
    if (options === void 0) options = {
    };
    let { UNSAFE_className , UNSAFE_style  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "UNSAFE_className",
        "UNSAFE_style"
    ]);
    let breakpointProvider = useBreakpoint();
    let { direction  } = useLocale();
    let { matchedBreakpoints =(breakpointProvider == null ? void 0 : breakpointProvider.matchedBreakpoints) || [
        'base'
    ]  } = options;
    let styles = convertStyleProps(props, handlers, direction, matchedBreakpoints);
    let style = _babelRuntimeHelpersExtends({
    }, UNSAFE_style, styles); // @ts-ignore
    if (otherProps.className) console.warn("The className prop is unsafe and is unsupported in React Spectrum v3. Please use style props with Spectrum variables, or UNSAFE_className if you absolutely must do something custom. Note that this may break in future versions due to DOM structure changes.");
     // @ts-ignore
    if (otherProps.style) console.warn("The style prop is unsafe and is unsupported in React Spectrum v3. Please use style props with Spectrum variables, or UNSAFE_style if you absolutely must do something custom. Note that this may break in future versions due to DOM structure changes.");
    let styleProps = {
        style,
        className: UNSAFE_className
    };
    if (getResponsiveProp(props.isHidden, matchedBreakpoints)) styleProps.hidden = true;
    return {
        styleProps
    };
}
exports.useStyleProps = useStyleProps;
function passthroughStyle(value) {
    return value;
}
exports.passthroughStyle = passthroughStyle;
function getResponsiveProp(prop, matchedBreakpoints) {
    if (prop && typeof prop === 'object' && !Array.isArray(prop)) {
        for(let i = 0; i < matchedBreakpoints.length; i++){
            let breakpoint = matchedBreakpoints[i];
            if (prop[breakpoint] != null) return prop[breakpoint];
        }
        return prop.base;
    }
    return prop;
}
exports.getResponsiveProp = getResponsiveProp;
let $fda26b2aacd0a7728829de04d10c975$var$SlotContext = /*#__PURE__*/ _react.createContext(null);
function useSlotProps(props, defaultSlot) {
    let slot = props.slot || defaultSlot;
    let { [slot]: slotProps = {
    }  } = useContext($fda26b2aacd0a7728829de04d10c975$var$SlotContext) || {
    };
    return mergeProps(slotProps, props);
}
exports.useSlotProps = useSlotProps;
function cssModuleToSlots(cssModule) {
    return Object.keys(cssModule).reduce((acc, slot)=>{
        acc[slot] = {
            UNSAFE_className: cssModule[slot]
        };
        return acc;
    }, {
    });
}
exports.cssModuleToSlots = cssModuleToSlots;
function SlotProvider(props) {
    let parentSlots = useContext($fda26b2aacd0a7728829de04d10c975$var$SlotContext) || {
    };
    let { slots ={
    } , children  } = props; // Merge props for each slot from parent context and props
    let value = useMemo(()=>Object.keys(parentSlots).concat(Object.keys(slots)).reduce((o, p)=>_babelRuntimeHelpersExtends({
            }, o, {
                [p]: mergeProps(parentSlots[p] || {
                }, slots[p] || {
                })
            })
        , {
        })
    , [
        parentSlots,
        slots
    ]);
    return(/*#__PURE__*/ _react.createElement($fda26b2aacd0a7728829de04d10c975$var$SlotContext.Provider, {
        value: value
    }, children));
}
exports.SlotProvider = SlotProvider;
function ClearSlots(props) {
    let { children  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "children"
    ]);
    let content = children;
    if (_react.Children.toArray(children).length <= 1) {
        if (typeof children === 'function') // need to know if the node is a string or something else that react can render that doesn't get props
        content = /*#__PURE__*/ _react.cloneElement(_react.Children.only(children), otherProps);
    }
    return(/*#__PURE__*/ _react.createElement($fda26b2aacd0a7728829de04d10c975$var$SlotContext.Provider, {
        value: {
        }
    }, content));
}
exports.ClearSlots = ClearSlots;
function useHasChild(query, ref) {
    let [hasChild, setHasChild] = useState(true);
    useLayoutEffect(()=>{
        setHasChild(!!(ref.current && ref.current.querySelector(query)));
    }, [
        setHasChild,
        query,
        ref
    ]);
    return hasChild;
}
exports.useHasChild = useHasChild;
const $dfba26b46b2b2f027a9d4ad19567e6fd$var$MOBILE_SCREEN_WIDTH = 700;
function useIsMobileDevice() {
    let isSSR = useIsSSR();
    if (isSSR || typeof window === 'undefined') return false;
    return window.screen.width <= $dfba26b46b2b2f027a9d4ad19567e6fd$var$MOBILE_SCREEN_WIDTH;
}
exports.useIsMobileDevice = useIsMobileDevice;
// This hook works like `useState`, but when setting the value, you pass a generator function
// that can yield multiple values. Each yielded value updates the state and waits for the next
// layout effect, then continues the generator. This allows sequential updates to state to be
// written linearly.
function useValueEffect(defaultValue) {
    let [value, setValue] = useState(defaultValue);
    let effect = useRef(null); // Store the function in a ref so we can always access the current version
    // which has the proper `value` in scope.
    let nextRef = useRef(null);
    nextRef.current = ()=>{
        // Run the generator to the next yield.
        let newValue = effect.current.next(); // If the generator is done, reset the effect.
        if (newValue.done) {
            effect.current = null;
            return;
        } // If the value is the same as the current value,
        // then continue to the next yield. Otherwise,
        // set the value in state and wait for the next layout effect.
        if (value === newValue.value) nextRef.current();
        else setValue(newValue.value);
    };
    useLayoutEffect(()=>{
        // If there is an effect currently running, continue to the next yield.
        if (effect.current) nextRef.current();
    });
    let queue = useCallback((fn)=>{
        effect.current = fn();
        nextRef.current();
    }, [
        effect,
        nextRef
    ]);
    return [
        value,
        queue
    ];
}
exports.useValueEffect = useValueEffect;

},{"@react-aria/utils":"d8qxy","@react-aria/i18n":"6xZcx","@babel/runtime/helpers/objectWithoutPropertiesLoose":"5byko","@babel/runtime/helpers/extends":"5xz6u","@react-aria/ssr":"Pnsqr","react":"a6qBW","clsx":"54v82"}],"3Y6zE":[function(require,module,exports) {
var _react2 = require("react");
var _react = $parcel$interopDefault(_react2);
var { useContext , useEffect , useRef  } = _react2;
var { ModalProvider , useModalProvider  } = require("@react-aria/overlays");
var { I18nProvider , useLocale  } = require("@react-aria/i18n");
var { filterDOMProps  } = require("@react-aria/utils");
var _clsx = $parcel$interopDefault(require("clsx"));
var { BreakpointProvider , shouldKeepSpectrumClassNames , useDOMRef , useMatchedBreakpoints , useStyleProps , useMediaQuery  } = require("@react-spectrum/utils");
var _babelRuntimeHelpersObjectWithoutPropertiesLoose = $parcel$interopDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
require("./main.css");
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/page/vars.css
var $bdf53da28d3991a48a6a4f1a69cf6748$exports = {
};
$bdf53da28d3991a48a6a4f1a69cf6748$exports = {
    "spectrum": "_spectrum_d43d2"
};
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/typography/index.css
var $a4b6d91f224137a9e1821db979545594$exports = {
};
$a4b6d91f224137a9e1821db979545594$exports = {
    "spectrum": "_spectrum_60105",
    "spectrum-Body": "_spectrum-Body_60105",
    "spectrum-Body--italic": "_spectrum-Body--italic_60105"
};
function $ae471163e3fb08c2a281b1d3e1120f94$export$useColorScheme(theme, defaultColorScheme) {
    let matchesDark = useMediaQuery('(prefers-color-scheme: dark)');
    let matchesLight = useMediaQuery('(prefers-color-scheme: light)'); // importance OS > default > omitted
    if (theme.dark && matchesDark) return 'dark';
    if (theme.light && matchesLight) return 'light';
    if (theme.dark && defaultColorScheme === 'dark') return 'dark';
    if (theme.light && defaultColorScheme === 'light') return 'light';
    if (!theme.dark) return 'light';
    if (!theme.light) return 'dark';
    return 'light';
}
function $ae471163e3fb08c2a281b1d3e1120f94$export$useScale(theme) {
    let matchesFine = useMediaQuery('(any-pointer: fine)');
    if (matchesFine && theme.medium) return 'medium';
    if (theme.large) return 'large';
    return 'medium';
}
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/provider/package.json
var $cb3a8279d5bbe24ad5b01eee2a870ec3$exports = {
};
$cb3a8279d5bbe24ad5b01eee2a870ec3$exports = JSON.parse("{\"name\":\"@react-spectrum/provider\",\"version\":\"3.2.0\",\"description\":\"Spectrum UI components in React\",\"license\":\"Apache-2.0\",\"main\":\"dist/main.js\",\"module\":\"dist/module.js\",\"types\":\"dist/types.d.ts\",\"source\":\"src/index.ts\",\"files\":[\"dist\",\"src\"],\"sideEffects\":[\"*.css\"],\"targets\":{\"main\":{\"includeNodeModules\":[\"@adobe/spectrum-css-temp\"]},\"module\":{\"includeNodeModules\":[\"@adobe/spectrum-css-temp\"]}},\"repository\":{\"type\":\"git\",\"url\":\"https://github.com/adobe/react-spectrum\"},\"dependencies\":{\"@babel/runtime\":\"^7.6.2\",\"@react-aria/i18n\":\"^3.3.1\",\"@react-aria/overlays\":\"^3.7.0\",\"@react-aria/utils\":\"^3.8.1\",\"@react-spectrum/utils\":\"^3.6.0\",\"@react-types/provider\":\"^3.3.0\",\"@react-types/shared\":\"^3.7.0\",\"clsx\":\"^1.1.1\"},\"devDependencies\":{\"@adobe/spectrum-css-temp\":\"3.0.0-alpha.1\"},\"peerDependencies\":{\"react\":\"^16.8.0 || ^17.0.0-rc.1\"},\"publishConfig\":{\"access\":\"public\"}}");
const $f150a45acb1414cf0ebc786fd600e35$var$Context = /*#__PURE__*/ _react.createContext(null);
$f150a45acb1414cf0ebc786fd600e35$var$Context.displayName = 'ProviderContext';
const $f150a45acb1414cf0ebc786fd600e35$var$DEFAULT_BREAKPOINTS = {
    S: 640,
    M: 768,
    L: 1024,
    XL: 1280,
    XXL: 1536
};
function $f150a45acb1414cf0ebc786fd600e35$var$Provider(props, ref) {
    let prevContext = useProvider();
    let prevColorScheme = prevContext && prevContext.colorScheme;
    let prevBreakpoints = prevContext && prevContext.breakpoints;
    let { theme =prevContext && prevContext.theme , defaultColorScheme  } = props; // Hooks must always be called.
    let autoColorScheme = $ae471163e3fb08c2a281b1d3e1120f94$export$useColorScheme(theme, defaultColorScheme);
    let autoScale = $ae471163e3fb08c2a281b1d3e1120f94$export$useScale(theme);
    let { locale: prevLocale  } = useLocale(); // if the new theme doesn't support the prevColorScheme, we must resort to the auto
    let usePrevColorScheme = !!theme[prevColorScheme]; // importance of color scheme props > parent > auto:(OS > default > omitted)
    let { colorScheme =usePrevColorScheme ? prevColorScheme : autoColorScheme , scale =prevContext ? prevContext.scale : autoScale , locale =prevContext ? prevLocale : null , breakpoints =prevContext ? prevBreakpoints : $f150a45acb1414cf0ebc786fd600e35$var$DEFAULT_BREAKPOINTS , children , isQuiet , isEmphasized , isDisabled , isRequired , isReadOnly , validationState  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "colorScheme",
        "scale",
        "locale",
        "breakpoints",
        "children",
        "isQuiet",
        "isEmphasized",
        "isDisabled",
        "isRequired",
        "isReadOnly",
        "validationState"
    ]); // select only the props with values so undefined props don't overwrite prevContext values
    let currentProps = {
        version: $cb3a8279d5bbe24ad5b01eee2a870ec3$exports.version,
        theme,
        breakpoints,
        colorScheme,
        scale,
        isQuiet,
        isEmphasized,
        isDisabled,
        isRequired,
        isReadOnly,
        validationState
    };
    let matchedBreakpoints = useMatchedBreakpoints(breakpoints);
    let filteredProps = {
    };
    Object.entries(currentProps).forEach((_ref)=>{
        let [key, value] = _ref;
        return value !== undefined && (filteredProps[key] = value);
    }); // Merge options with parent provider
    let context = Object.assign({
    }, prevContext, filteredProps); // Only wrap in a DOM node if the theme, colorScheme, or scale changed
    let contents = children;
    let domProps = filterDOMProps(otherProps);
    let { styleProps  } = useStyleProps(otherProps, undefined, {
        matchedBreakpoints
    });
    if (!prevContext || props.locale || theme !== prevContext.theme || colorScheme !== prevContext.colorScheme || scale !== prevContext.scale || Object.keys(domProps).length > 0 || otherProps.UNSAFE_className || Object.keys(styleProps.style).length > 0) contents = /*#__PURE__*/ _react.createElement($f150a45acb1414cf0ebc786fd600e35$var$ProviderWrapper, _babelRuntimeHelpersExtends({
    }, props, {
        UNSAFE_style: _babelRuntimeHelpersExtends({
            isolation: !prevContext ? 'isolate' : undefined
        }, styleProps.style),
        ref: ref
    }), contents);
    return(/*#__PURE__*/ _react.createElement($f150a45acb1414cf0ebc786fd600e35$var$Context.Provider, {
        value: context
    }, /*#__PURE__*/ _react.createElement(I18nProvider, {
        locale: locale
    }, /*#__PURE__*/ _react.createElement(BreakpointProvider, {
        matchedBreakpoints: matchedBreakpoints
    }, /*#__PURE__*/ _react.createElement(ModalProvider, null, contents)))));
}
/**
 * Provider is the container for all React Spectrum applications.
 * It defines the theme, locale, and other application level settings,
 * and can also be used to provide common properties to a group of components.
 */ let Provider = /*#__PURE__*/ _react.forwardRef($f150a45acb1414cf0ebc786fd600e35$var$Provider);
exports.Provider = Provider;
var $bdf53da28d3991a48a6a4f1a69cf6748$$interop$default = $parcel$interopDefault($bdf53da28d3991a48a6a4f1a69cf6748$exports);
var $a4b6d91f224137a9e1821db979545594$$interop$default = $parcel$interopDefault($a4b6d91f224137a9e1821db979545594$exports);
const $f150a45acb1414cf0ebc786fd600e35$var$ProviderWrapper = /*#__PURE__*/ _react.forwardRef(function ProviderWrapper(props, ref) {
    var _ref2, _props$colorScheme;
    let { children  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "children"
    ]);
    let { locale , direction  } = useLocale();
    let { theme , colorScheme , scale  } = useProvider();
    let { modalProviderProps  } = useModalProvider();
    let { styleProps  } = useStyleProps(otherProps);
    let domRef = useDOMRef(ref);
    let themeKey = Object.keys(theme[colorScheme])[0];
    let scaleKey = Object.keys(theme[scale])[0];
    let className = _clsx(styleProps.className, $bdf53da28d3991a48a6a4f1a69cf6748$$interop$default['spectrum'], $a4b6d91f224137a9e1821db979545594$$interop$default['spectrum'], theme[colorScheme][themeKey], theme[scale][scaleKey], theme.global ? Object.values(theme.global) : null, {
        'react-spectrum-provider': shouldKeepSpectrumClassNames,
        spectrum: shouldKeepSpectrumClassNames,
        [themeKey]: shouldKeepSpectrumClassNames,
        [scaleKey]: shouldKeepSpectrumClassNames
    });
    let style = _babelRuntimeHelpersExtends({
    }, styleProps.style, {
        // This ensures that browser native UI like scrollbars are rendered in the right color scheme.
        // See https://web.dev/color-scheme/.
        colorScheme: (_ref2 = (_props$colorScheme = props.colorScheme) != null ? _props$colorScheme : colorScheme) != null ? _ref2 : Object.keys(theme).filter((k)=>k === 'light' || k === 'dark'
        ).join(' ')
    });
    let hasWarned = useRef(false);
    useEffect(()=>{
        if (direction && domRef.current) {
            let closestDir = domRef.current.parentElement.closest('[dir]');
            let dir = closestDir && closestDir.getAttribute('dir');
            if (dir && dir !== direction && !hasWarned.current) {
                console.warn("Language directions cannot be nested. " + direction + " inside " + dir + ".");
                hasWarned.current = true;
            }
        }
    }, [
        direction,
        domRef,
        hasWarned
    ]);
    return(/*#__PURE__*/ _react.createElement("div", _babelRuntimeHelpersExtends({
    }, filterDOMProps(otherProps), styleProps, modalProviderProps, {
        className: className,
        style: style,
        lang: locale,
        dir: direction,
        ref: domRef
    }), children));
});
function useProvider() {
    return useContext($f150a45acb1414cf0ebc786fd600e35$var$Context);
}
exports.useProvider = useProvider;
function useProviderProps(props) {
    let context = useProvider();
    if (!context) return props;
    return Object.assign({
    }, {
        isQuiet: context.isQuiet,
        isEmphasized: context.isEmphasized,
        isDisabled: context.isDisabled,
        isRequired: context.isRequired,
        isReadOnly: context.isReadOnly,
        validationState: context.validationState
    }, props);
}
exports.useProviderProps = useProviderProps;

},{"react":"a6qBW","@react-aria/overlays":"6I1ei","@react-aria/i18n":"6xZcx","@react-aria/utils":"d8qxy","clsx":"54v82","@react-spectrum/utils":"7ch5A","@babel/runtime/helpers/objectWithoutPropertiesLoose":"5byko","@babel/runtime/helpers/extends":"5xz6u","./main.css":"7l7jQ"}],"7l7jQ":[function() {},{}],"2M6wE":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.default = exports.EXITING = exports.ENTERED = exports.ENTERING = exports.EXITED = exports.UNMOUNTED = void 0;
var PropTypes = _interopRequireWildcard(require("prop-types"));
var _react = _interopRequireDefault(require("react"));
var _reactDom = _interopRequireDefault(require("react-dom"));
var _reactLifecyclesCompat = require("react-lifecycles-compat");
var _PropTypes = require("./utils/PropTypes");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    else {
        var newObj = {
        };
        if (obj != null) {
            for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
                var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {
                };
                if (desc.get || desc.set) Object.defineProperty(newObj, key, desc);
                else newObj[key] = obj[key];
            }
        }
        newObj.default = obj;
        return newObj;
    }
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
}
var UNMOUNTED = 'unmounted';
exports.UNMOUNTED = UNMOUNTED;
var EXITED = 'exited';
exports.EXITED = EXITED;
var ENTERING = 'entering';
exports.ENTERING = ENTERING;
var ENTERED = 'entered';
exports.ENTERED = ENTERED;
var EXITING = 'exiting';
/**
 * The Transition component lets you describe a transition from one component
 * state to another _over time_ with a simple declarative API. Most commonly
 * it's used to animate the mounting and unmounting of a component, but can also
 * be used to describe in-place transition states as well.
 *
 * ---
 *
 * **Note**: `Transition` is a platform-agnostic base component. If you're using
 * transitions in CSS, you'll probably want to use
 * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)
 * instead. It inherits all the features of `Transition`, but contains
 * additional features necessary to play nice with CSS transitions (hence the
 * name of the component).
 *
 * ---
 *
 * By default the `Transition` component does not alter the behavior of the
 * component it renders, it only tracks "enter" and "exit" states for the
 * components. It's up to you to give meaning and effect to those states. For
 * example we can add styles to a component when it enters or exits:
 *
 * ```jsx
 * import { Transition } from 'react-transition-group';
 *
 * const duration = 300;
 *
 * const defaultStyle = {
 *   transition: `opacity ${duration}ms ease-in-out`,
 *   opacity: 0,
 * }
 *
 * const transitionStyles = {
 *   entering: { opacity: 0 },
 *   entered:  { opacity: 1 },
 * };
 *
 * const Fade = ({ in: inProp }) => (
 *   <Transition in={inProp} timeout={duration}>
 *     {state => (
 *       <div style={{
 *         ...defaultStyle,
 *         ...transitionStyles[state]
 *       }}>
 *         I'm a fade Transition!
 *       </div>
 *     )}
 *   </Transition>
 * );
 * ```
 *
 * There are 4 main states a Transition can be in:
 *  - `'entering'`
 *  - `'entered'`
 *  - `'exiting'`
 *  - `'exited'`
 *
 * Transition state is toggled via the `in` prop. When `true` the component
 * begins the "Enter" stage. During this stage, the component will shift from
 * its current transition state, to `'entering'` for the duration of the
 * transition and then to the `'entered'` stage once it's complete. Let's take
 * the following example (we'll use the
 * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):
 *
 * ```jsx
 * function App() {
 *   const [inProp, setInProp] = useState(false);
 *   return (
 *     <div>
 *       <Transition in={inProp} timeout={500}>
 *         {state => (
 *           // ...
 *         )}
 *       </Transition>
 *       <button onClick={() => setInProp(true)}>
 *         Click to Enter
 *       </button>
 *     </div>
 *   );
 * }
 * ```
 *
 * When the button is clicked the component will shift to the `'entering'` state
 * and stay there for 500ms (the value of `timeout`) before it finally switches
 * to `'entered'`.
 *
 * When `in` is `false` the same thing happens except the state moves from
 * `'exiting'` to `'exited'`.
 */ exports.EXITING = EXITING;
var Transition1 = /*#__PURE__*/ function(_React$Component) {
    _inheritsLoose(Transition2, _React$Component);
    function Transition2(props, context) {
        var _this;
        _this = _React$Component.call(this, props, context) || this;
        var parentGroup = context.transitionGroup; // In the context of a TransitionGroup all enters are really appears
        var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
        var initialStatus;
        _this.appearStatus = null;
        if (props.in) {
            if (appear) {
                initialStatus = EXITED;
                _this.appearStatus = ENTERING;
            } else initialStatus = ENTERED;
        } else if (props.unmountOnExit || props.mountOnEnter) initialStatus = UNMOUNTED;
        else initialStatus = EXITED;
        _this.state = {
            status: initialStatus
        };
        _this.nextCallback = null;
        return _this;
    }
    var _proto = Transition2.prototype;
    _proto.getChildContext = function getChildContext() {
        return {
            transitionGroup: null
        };
    };
    Transition2.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
        var nextIn = _ref.in;
        if (nextIn && prevState.status === UNMOUNTED) return {
            status: EXITED
        };
        return null;
    }; // getSnapshotBeforeUpdate(prevProps) {
    //   let nextStatus = null
    //   if (prevProps !== this.props) {
    //     const { status } = this.state
    //     if (this.props.in) {
    //       if (status !== ENTERING && status !== ENTERED) {
    //         nextStatus = ENTERING
    //       }
    //     } else {
    //       if (status === ENTERING || status === ENTERED) {
    //         nextStatus = EXITING
    //       }
    //     }
    //   }
    //   return { nextStatus }
    // }
    _proto.componentDidMount = function componentDidMount() {
        this.updateStatus(true, this.appearStatus);
    };
    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
        var nextStatus = null;
        if (prevProps !== this.props) {
            var status = this.state.status;
            if (this.props.in) {
                if (status !== ENTERING && status !== ENTERED) nextStatus = ENTERING;
            } else if (status === ENTERING || status === ENTERED) nextStatus = EXITING;
        }
        this.updateStatus(false, nextStatus);
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
        this.cancelNextCallback();
    };
    _proto.getTimeouts = function getTimeouts() {
        var timeout = this.props.timeout;
        var exit, enter, appear;
        exit = enter = appear = timeout;
        if (timeout != null && typeof timeout !== 'number') {
            exit = timeout.exit;
            enter = timeout.enter; // TODO: remove fallback for next major
            appear = timeout.appear !== undefined ? timeout.appear : enter;
        }
        return {
            exit: exit,
            enter: enter,
            appear: appear
        };
    };
    _proto.updateStatus = function updateStatus(mounting, nextStatus) {
        if (mounting === void 0) mounting = false;
        if (nextStatus !== null) {
            // nextStatus will always be ENTERING or EXITING.
            this.cancelNextCallback();
            var node = _reactDom.default.findDOMNode(this);
            if (nextStatus === ENTERING) this.performEnter(node, mounting);
            else this.performExit(node);
        } else if (this.props.unmountOnExit && this.state.status === EXITED) this.setState({
            status: UNMOUNTED
        });
    };
    _proto.performEnter = function performEnter(node, mounting) {
        var _this2 = this;
        var enter = this.props.enter;
        var appearing = this.context.transitionGroup ? this.context.transitionGroup.isMounting : mounting;
        var timeouts = this.getTimeouts();
        var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED
        // if we are mounting and running this it means appear _must_ be set
        if (!mounting && !enter) {
            this.safeSetState({
                status: ENTERED
            }, function() {
                _this2.props.onEntered(node);
            });
            return;
        }
        this.props.onEnter(node, appearing);
        this.safeSetState({
            status: ENTERING
        }, function() {
            _this2.props.onEntering(node, appearing);
            _this2.onTransitionEnd(node, enterTimeout, function() {
                _this2.safeSetState({
                    status: ENTERED
                }, function() {
                    _this2.props.onEntered(node, appearing);
                });
            });
        });
    };
    _proto.performExit = function performExit(node) {
        var _this3 = this;
        var exit = this.props.exit;
        var timeouts = this.getTimeouts(); // no exit animation skip right to EXITED
        if (!exit) {
            this.safeSetState({
                status: EXITED
            }, function() {
                _this3.props.onExited(node);
            });
            return;
        }
        this.props.onExit(node);
        this.safeSetState({
            status: EXITING
        }, function() {
            _this3.props.onExiting(node);
            _this3.onTransitionEnd(node, timeouts.exit, function() {
                _this3.safeSetState({
                    status: EXITED
                }, function() {
                    _this3.props.onExited(node);
                });
            });
        });
    };
    _proto.cancelNextCallback = function cancelNextCallback() {
        if (this.nextCallback !== null) {
            this.nextCallback.cancel();
            this.nextCallback = null;
        }
    };
    _proto.safeSetState = function safeSetState(nextState, callback) {
        // This shouldn't be necessary, but there are weird race conditions with
        // setState callbacks and unmounting in testing, so always make sure that
        // we can cancel any pending setState callbacks after we unmount.
        callback = this.setNextCallback(callback);
        this.setState(nextState, callback);
    };
    _proto.setNextCallback = function setNextCallback(callback) {
        var _this4 = this;
        var active = true;
        this.nextCallback = function(event) {
            if (active) {
                active = false;
                _this4.nextCallback = null;
                callback(event);
            }
        };
        this.nextCallback.cancel = function() {
            active = false;
        };
        return this.nextCallback;
    };
    _proto.onTransitionEnd = function onTransitionEnd(node, timeout, handler) {
        this.setNextCallback(handler);
        var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;
        if (!node || doesNotHaveTimeoutOrListener) {
            setTimeout(this.nextCallback, 0);
            return;
        }
        if (this.props.addEndListener) this.props.addEndListener(node, this.nextCallback);
        if (timeout != null) setTimeout(this.nextCallback, timeout);
    };
    _proto.render = function render() {
        var status = this.state.status;
        if (status === UNMOUNTED) return null;
        var _this$props = this.props, children = _this$props.children, childProps = _objectWithoutPropertiesLoose(_this$props, [
            "children"
        ]); // filter props for Transtition
        delete childProps.in;
        delete childProps.mountOnEnter;
        delete childProps.unmountOnExit;
        delete childProps.appear;
        delete childProps.enter;
        delete childProps.exit;
        delete childProps.timeout;
        delete childProps.addEndListener;
        delete childProps.onEnter;
        delete childProps.onEntering;
        delete childProps.onEntered;
        delete childProps.onExit;
        delete childProps.onExiting;
        delete childProps.onExited;
        if (typeof children === 'function') return children(status, childProps);
        var child = _react.default.Children.only(children);
        return _react.default.cloneElement(child, childProps);
    };
    return Transition2;
}(_react.default.Component);
Transition1.contextTypes = {
    transitionGroup: PropTypes.object
};
Transition1.childContextTypes = {
    transitionGroup: function transitionGroup() {
    }
};
Transition1.propTypes = {
    /**
   * A `function` child can be used instead of a React element. This function is
   * called with the current transition status (`'entering'`, `'entered'`,
   * `'exiting'`, `'exited'`, `'unmounted'`), which can be used to apply context
   * specific props to a component.
   *
   * ```jsx
   * <Transition in={this.state.in} timeout={150}>
   *   {state => (
   *     <MyComponent className={`fade fade-${state}`} />
   *   )}
   * </Transition>
   * ```
   */ children: PropTypes.oneOfType([
        PropTypes.func.isRequired,
        PropTypes.element.isRequired
    ]).isRequired,
    /**
   * Show the component; triggers the enter or exit states
   */ in: PropTypes.bool,
    /**
   * By default the child component is mounted immediately along with
   * the parent `Transition` component. If you want to "lazy mount" the component on the
   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
   * mounted, even on "exited", unless you also specify `unmountOnExit`.
   */ mountOnEnter: PropTypes.bool,
    /**
   * By default the child component stays mounted after it reaches the `'exited'` state.
   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
   */ unmountOnExit: PropTypes.bool,
    /**
   * Normally a component is not transitioned if it is shown when the `<Transition>` component mounts.
   * If you want to transition on the first mount set `appear` to `true`, and the
   * component will transition in as soon as the `<Transition>` mounts.
   *
   * > Note: there are no specific "appear" states. `appear` only adds an additional `enter` transition.
   */ appear: PropTypes.bool,
    /**
   * Enable or disable enter transitions.
   */ enter: PropTypes.bool,
    /**
   * Enable or disable exit transitions.
   */ exit: PropTypes.bool,
    /**
   * The duration of the transition, in milliseconds.
   * Required unless `addEndListener` is provided.
   *
   * You may specify a single timeout for all transitions:
   *
   * ```jsx
   * timeout={500}
   * ```
   *
   * or individually:
   *
   * ```jsx
   * timeout={{
   *  appear: 500,
   *  enter: 300,
   *  exit: 500,
   * }}
   * ```
   *
   * - `appear` defaults to the value of `enter`
   * - `enter` defaults to `0`
   * - `exit` defaults to `0`
   *
   * @type {number | { enter?: number, exit?: number, appear?: number }}
   */ timeout: function timeout(props) {
        var pt = _PropTypes.timeoutsShape;
        if (!props.addEndListener) pt = pt.isRequired;
        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
        return pt.apply(void 0, [
            props
        ].concat(args));
    },
    /**
   * Add a custom transition end trigger. Called with the transitioning
   * DOM node and a `done` callback. Allows for more fine grained transition end
   * logic. **Note:** Timeouts are still used as a fallback if provided.
   *
   * ```jsx
   * addEndListener={(node, done) => {
   *   // use the css transitionend event to mark the finish of a transition
   *   node.addEventListener('transitionend', done, false);
   * }}
   * ```
   */ addEndListener: PropTypes.func,
    /**
   * Callback fired before the "entering" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * @type Function(node: HtmlElement, isAppearing: bool) -> void
   */ onEnter: PropTypes.func,
    /**
   * Callback fired after the "entering" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */ onEntering: PropTypes.func,
    /**
   * Callback fired after the "entered" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * @type Function(node: HtmlElement, isAppearing: bool) -> void
   */ onEntered: PropTypes.func,
    /**
   * Callback fired before the "exiting" status is applied.
   *
   * @type Function(node: HtmlElement) -> void
   */ onExit: PropTypes.func,
    /**
   * Callback fired after the "exiting" status is applied.
   *
   * @type Function(node: HtmlElement) -> void
   */ onExiting: PropTypes.func,
    /**
   * Callback fired after the "exited" status is applied.
   *
   * @type Function(node: HtmlElement) -> void
   */ onExited: PropTypes.func
};
function noop() {
}
Transition1.defaultProps = {
    in: false,
    mountOnEnter: false,
    unmountOnExit: false,
    appear: false,
    enter: true,
    exit: true,
    onEnter: noop,
    onEntering: noop,
    onEntered: noop,
    onExit: noop,
    onExiting: noop,
    onExited: noop
};
Transition1.UNMOUNTED = 0;
Transition1.EXITED = 1;
Transition1.ENTERING = 2;
Transition1.ENTERED = 3;
Transition1.EXITING = 4;
var _default = _reactLifecyclesCompat.polyfill(Transition1);
exports.default = _default;

},{"prop-types":"22hk3","react":"a6qBW","react-dom":"6V7Bv","react-lifecycles-compat":"7Bvd3","./utils/PropTypes":"Womik"}],"22hk3":[function(require,module,exports) {
var ReactIs = require('react-is');
// By explicitly using `prop-types` you are opting into new development behavior.
// http://fb.me/prop-types-in-prod
var throwOnDirectAccess = true;
module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);

},{"react-is":"3a6ZL","./factoryWithTypeCheckers":"GYaCB"}],"3a6ZL":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/react-is.development.js');

},{"./cjs/react-is.development.js":"40UQu"}],"40UQu":[function(require,module,exports) {
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 60103;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 60106;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 60107;
    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 60108;
    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 60114;
    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 60109;
    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 60110; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
    // (unstable) APIs that have been removed. Can we remove the symbols?
    var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 60111;
    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 60111;
    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 60112;
    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 60113;
    var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 60120;
    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 60115;
    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 60116;
    var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 60121;
    var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 60117;
    var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 60118;
    var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 60119;
    function isValidElementType(type) {
        return typeof type === 'string' || typeof type === 'function' || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
    }
    function typeOf(object) {
        if (typeof object === 'object' && object !== null) {
            var $$typeof = object.$$typeof;
            switch($$typeof){
                case REACT_ELEMENT_TYPE:
                    var type = object.type;
                    switch(type){
                        case REACT_ASYNC_MODE_TYPE:
                        case REACT_CONCURRENT_MODE_TYPE:
                        case REACT_FRAGMENT_TYPE:
                        case REACT_PROFILER_TYPE:
                        case REACT_STRICT_MODE_TYPE:
                        case REACT_SUSPENSE_TYPE:
                            return type;
                        default:
                            var $$typeofType = type && type.$$typeof;
                            switch($$typeofType){
                                case REACT_CONTEXT_TYPE:
                                case REACT_FORWARD_REF_TYPE:
                                case REACT_LAZY_TYPE:
                                case REACT_MEMO_TYPE:
                                case REACT_PROVIDER_TYPE:
                                    return $$typeofType;
                                default:
                                    return $$typeof;
                            }
                    }
                case REACT_PORTAL_TYPE:
                    return $$typeof;
            }
        }
        return undefined;
    } // AsyncMode is deprecated along with isAsyncMode
    var AsyncMode = REACT_ASYNC_MODE_TYPE;
    var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
    var ContextConsumer = REACT_CONTEXT_TYPE;
    var ContextProvider = REACT_PROVIDER_TYPE;
    var Element1 = REACT_ELEMENT_TYPE;
    var ForwardRef = REACT_FORWARD_REF_TYPE;
    var Fragment = REACT_FRAGMENT_TYPE;
    var Lazy = REACT_LAZY_TYPE;
    var Memo = REACT_MEMO_TYPE;
    var Portal = REACT_PORTAL_TYPE;
    var Profiler = REACT_PROFILER_TYPE;
    var StrictMode = REACT_STRICT_MODE_TYPE;
    var Suspense = REACT_SUSPENSE_TYPE;
    var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated
    function isAsyncMode(object) {
        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
            hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint
            console['warn']("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
        }
        return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
    }
    function isConcurrentMode(object) {
        return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
    }
    function isContextConsumer(object) {
        return typeOf(object) === REACT_CONTEXT_TYPE;
    }
    function isContextProvider(object) {
        return typeOf(object) === REACT_PROVIDER_TYPE;
    }
    function isElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function isForwardRef(object) {
        return typeOf(object) === REACT_FORWARD_REF_TYPE;
    }
    function isFragment(object) {
        return typeOf(object) === REACT_FRAGMENT_TYPE;
    }
    function isLazy(object) {
        return typeOf(object) === REACT_LAZY_TYPE;
    }
    function isMemo(object) {
        return typeOf(object) === REACT_MEMO_TYPE;
    }
    function isPortal(object) {
        return typeOf(object) === REACT_PORTAL_TYPE;
    }
    function isProfiler(object) {
        return typeOf(object) === REACT_PROFILER_TYPE;
    }
    function isStrictMode(object) {
        return typeOf(object) === REACT_STRICT_MODE_TYPE;
    }
    function isSuspense(object) {
        return typeOf(object) === REACT_SUSPENSE_TYPE;
    }
    exports.AsyncMode = AsyncMode;
    exports.ConcurrentMode = ConcurrentMode;
    exports.ContextConsumer = ContextConsumer;
    exports.ContextProvider = ContextProvider;
    exports.Element = Element1;
    exports.ForwardRef = ForwardRef;
    exports.Fragment = Fragment;
    exports.Lazy = Lazy;
    exports.Memo = Memo;
    exports.Portal = Portal;
    exports.Profiler = Profiler;
    exports.StrictMode = StrictMode;
    exports.Suspense = Suspense;
    exports.isAsyncMode = isAsyncMode;
    exports.isConcurrentMode = isConcurrentMode;
    exports.isContextConsumer = isContextConsumer;
    exports.isContextProvider = isContextProvider;
    exports.isElement = isElement;
    exports.isForwardRef = isForwardRef;
    exports.isFragment = isFragment;
    exports.isLazy = isLazy;
    exports.isMemo = isMemo;
    exports.isPortal = isPortal;
    exports.isProfiler = isProfiler;
    exports.isStrictMode = isStrictMode;
    exports.isSuspense = isSuspense;
    exports.isValidElementType = isValidElementType;
    exports.typeOf = typeOf;
})();

},{}],"GYaCB":[function(require,module,exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
var ReactIs = require('react-is');
var assign = require('object-assign');
var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');
var checkPropTypes = require('./checkPropTypes');
var has = Function.call.bind(Object.prototype.hasOwnProperty);
var printWarning = function() {
};
printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') console.error(message);
    try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
    } catch (x) {
    }
};
function emptyFunctionThatReturnsNull() {
    return null;
}
module.exports = function(isValidElement, throwOnDirectAccess) {
    /* global Symbol */ var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.
    /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */ function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === 'function') return iteratorFn;
    }
    /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */ var ANONYMOUS = '<<anonymous>>';
    // Important!
    // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
    var ReactPropTypes = {
        array: createPrimitiveTypeChecker('array'),
        bool: createPrimitiveTypeChecker('boolean'),
        func: createPrimitiveTypeChecker('function'),
        number: createPrimitiveTypeChecker('number'),
        object: createPrimitiveTypeChecker('object'),
        string: createPrimitiveTypeChecker('string'),
        symbol: createPrimitiveTypeChecker('symbol'),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
    };
    /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */ /*eslint-disable no-self-compare*/ function is(x, y) {
        // SameValue algorithm
        if (x === y) // Steps 1-5, 7-10
        // Steps 6.b-6.e: +0 != -0
        return x !== 0 || 1 / x === 1 / y;
        else // Step 6.a: NaN == NaN
        return x !== x && y !== y;
    }
    /*eslint-enable no-self-compare*/ /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */ function PropTypeError(message) {
        this.message = message;
        this.stack = '';
    }
    // Make `instanceof Error` still work for returned errors.
    PropTypeError.prototype = Error.prototype;
    function createChainableTypeChecker(validate) {
        var manualPropTypeCallCache = {
        };
        var manualPropTypeWarningCount = 0;
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
            componentName = componentName || ANONYMOUS;
            propFullName = propFullName || propName;
            if (secret !== ReactPropTypesSecret) {
                if (throwOnDirectAccess) {
                    // New behavior only for users of `prop-types` package
                    var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");
                    err.name = 'Invariant Violation';
                    throw err;
                } else if (typeof console !== 'undefined') {
                    // Old behavior for people using React.PropTypes
                    var cacheKey = componentName + ':' + propName;
                    if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
                    manualPropTypeWarningCount < 3) {
                        printWarning("You are manually calling a React.PropTypes validation function for the `" + propFullName + '` prop on `' + componentName + '`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.');
                        manualPropTypeCallCache[cacheKey] = true;
                        manualPropTypeWarningCount++;
                    }
                }
            }
            if (props[propName] == null) {
                if (isRequired) {
                    if (props[propName] === null) return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
                    return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
                }
                return null;
            } else return validate(props, propName, componentName, location, propFullName);
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
    }
    function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== expectedType) {
                // `propValue` being instance of, say, date/regexp, pass the 'object'
                // check, but we can offer a more precise error message here rather than
                // 'of type `object`'.
                var preciseType = getPreciseType(propValue);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
    }
    function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== 'function') return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
            var propValue = props[propName];
            if (!Array.isArray(propValue)) {
                var propType = getPropType(propValue);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
            }
            for(var i = 0; i < propValue.length; i++){
                var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
                if (error instanceof Error) return error;
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!isValidElement(propValue)) {
                var propType = getPropType(propValue);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!ReactIs.isValidElementType(propValue)) {
                var propType = getPropType(propValue);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
            if (!(props[propName] instanceof expectedClass)) {
                var expectedClassName = expectedClass.name || ANONYMOUS;
                var actualClassName = getClassName(props[propName]);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
            {
                if (arguments.length > 1) printWarning('Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' + 'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).');
                else printWarning('Invalid argument supplied to oneOf, expected an array.');
            }
            return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            for(var i = 0; i < expectedValues.length; i++){
                if (is(propValue, expectedValues[i])) return null;
            }
            var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
                var type = getPreciseType(value);
                if (type === 'symbol') return String(value);
                return value;
            });
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
        }
        return createChainableTypeChecker(validate);
    }
    function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== 'function') return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== 'object') return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
            for(var key in propValue)if (has(propValue, key)) {
                var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
                if (error instanceof Error) return error;
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
            printWarning('Invalid argument supplied to oneOfType, expected an instance of array.');
            return emptyFunctionThatReturnsNull;
        }
        for(var i = 0; i < arrayOfTypeCheckers.length; i++){
            var checker = arrayOfTypeCheckers[i];
            if (typeof checker !== 'function') {
                printWarning("Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + ' at index ' + i + '.');
                return emptyFunctionThatReturnsNull;
            }
        }
        function validate(props, propName, componentName, location, propFullName) {
            for(var i1 = 0; i1 < arrayOfTypeCheckers.length; i1++){
                var checker = arrayOfTypeCheckers[i1];
                if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) return null;
            }
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
        }
        return createChainableTypeChecker(validate);
    }
    function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
            if (!isNode(props[propName])) return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== 'object') return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
            for(var key in shapeTypes){
                var checker = shapeTypes[key];
                if (!checker) continue;
                var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
                if (error) return error;
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== 'object') return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
            // We need to check all keys in case some are required but missing from
            // props.
            var allKeys = assign({
            }, props[propName], shapeTypes);
            for(var key in allKeys){
                var checker = shapeTypes[key];
                if (!checker) return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
                var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
                if (error) return error;
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function isNode(propValue) {
        switch(typeof propValue){
            case 'number':
            case 'string':
            case 'undefined':
                return true;
            case 'boolean':
                return !propValue;
            case 'object':
                if (Array.isArray(propValue)) return propValue.every(isNode);
                if (propValue === null || isValidElement(propValue)) return true;
                var iteratorFn = getIteratorFn(propValue);
                if (iteratorFn) {
                    var iterator = iteratorFn.call(propValue);
                    var step;
                    if (iteratorFn !== propValue.entries) while(!(step = iterator.next()).done){
                        if (!isNode(step.value)) return false;
                    }
                    else // Iterator will provide entry [k,v] tuples rather than values.
                    while(!(step = iterator.next()).done){
                        var entry = step.value;
                        if (entry) {
                            if (!isNode(entry[1])) return false;
                        }
                    }
                } else return false;
                return true;
            default:
                return false;
        }
    }
    function isSymbol(propType, propValue) {
        // Native Symbol.
        if (propType === 'symbol') return true;
        // falsy value can't be a Symbol
        if (!propValue) return false;
        // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
        if (propValue['@@toStringTag'] === 'Symbol') return true;
        // Fallback for non-spec compliant Symbols which are polyfilled.
        if (typeof Symbol === 'function' && propValue instanceof Symbol) return true;
        return false;
    }
    // Equivalent of `typeof` but with special handling for array and regexp.
    function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) return 'array';
        if (propValue instanceof RegExp) // Old webkits (at least until Android 4.0) return 'function' rather than
        // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
        // passes PropTypes.object.
        return 'object';
        if (isSymbol(propType, propValue)) return 'symbol';
        return propType;
    }
    // This handles more types than `getPropType`. Only used for error messages.
    // See `createPrimitiveTypeChecker`.
    function getPreciseType(propValue) {
        if (typeof propValue === 'undefined' || propValue === null) return '' + propValue;
        var propType = getPropType(propValue);
        if (propType === 'object') {
            if (propValue instanceof Date) return 'date';
            else if (propValue instanceof RegExp) return 'regexp';
        }
        return propType;
    }
    // Returns a string that is postfixed to a warning about an invalid type.
    // For example, "undefined" or "of type array"
    function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch(type){
            case 'array':
            case 'object':
                return 'an ' + type;
            case 'boolean':
            case 'date':
            case 'regexp':
                return 'a ' + type;
            default:
                return type;
        }
    }
    // Returns class name of the object, if any.
    function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) return ANONYMOUS;
        return propValue.constructor.name;
    }
    ReactPropTypes.checkPropTypes = checkPropTypes;
    ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
    ReactPropTypes.PropTypes = ReactPropTypes;
    return ReactPropTypes;
};

},{"react-is":"3a6ZL","object-assign":"5kNPX","./lib/ReactPropTypesSecret":"3LbZD","./checkPropTypes":"15rgd"}],"7Bvd3":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ function componentWillMount() {
    // Call this.constructor.gDSFP to support sub-classes.
    var state = this.constructor.getDerivedStateFromProps(this.props, this.state);
    if (state !== null && state !== undefined) this.setState(state);
}
function componentWillReceiveProps(nextProps) {
    // Call this.constructor.gDSFP to support sub-classes.
    // Use the setState() updater to ensure state isn't stale in certain edge cases.
    function updater(prevState) {
        var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);
        return state !== null && state !== undefined ? state : null;
    }
    // Binding "this" is important for shallow renderer support.
    this.setState(updater.bind(this));
}
function componentWillUpdate(nextProps, nextState) {
    try {
        var prevProps = this.props;
        var prevState = this.state;
        this.props = nextProps;
        this.state = nextState;
        this.__reactInternalSnapshotFlag = true;
        this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(prevProps, prevState);
    } finally{
        this.props = prevProps;
        this.state = prevState;
    }
}
// React may warn about cWM/cWRP/cWU methods being deprecated.
// Add a flag to suppress these warnings for this special case.
componentWillMount.__suppressDeprecationWarning = true;
componentWillReceiveProps.__suppressDeprecationWarning = true;
componentWillUpdate.__suppressDeprecationWarning = true;
function polyfill(Component) {
    var prototype = Component.prototype;
    if (!prototype || !prototype.isReactComponent) throw new Error('Can only polyfill class components');
    if (typeof Component.getDerivedStateFromProps !== 'function' && typeof prototype.getSnapshotBeforeUpdate !== 'function') return Component;
    // If new component APIs are defined, "unsafe" lifecycles won't be called.
    // Error if any of these lifecycles are present,
    // Because they would work differently between older and newer (16.3+) versions of React.
    var foundWillMountName = null;
    var foundWillReceivePropsName = null;
    var foundWillUpdateName = null;
    if (typeof prototype.componentWillMount === 'function') foundWillMountName = 'componentWillMount';
    else if (typeof prototype.UNSAFE_componentWillMount === 'function') foundWillMountName = 'UNSAFE_componentWillMount';
    if (typeof prototype.componentWillReceiveProps === 'function') foundWillReceivePropsName = 'componentWillReceiveProps';
    else if (typeof prototype.UNSAFE_componentWillReceiveProps === 'function') foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
    if (typeof prototype.componentWillUpdate === 'function') foundWillUpdateName = 'componentWillUpdate';
    else if (typeof prototype.UNSAFE_componentWillUpdate === 'function') foundWillUpdateName = 'UNSAFE_componentWillUpdate';
    if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
        var componentName = Component.displayName || Component.name;
        var newApiName = typeof Component.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';
        throw Error('Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + componentName + ' uses ' + newApiName + ' but also contains the following legacy lifecycles:' + (foundWillMountName !== null ? '\n  ' + foundWillMountName : '') + (foundWillReceivePropsName !== null ? '\n  ' + foundWillReceivePropsName : '') + (foundWillUpdateName !== null ? '\n  ' + foundWillUpdateName : '') + '\n\nThe above lifecycles should be removed. Learn more about this warning here:\n' + 'https://fb.me/react-async-component-lifecycle-hooks');
    }
    // React <= 16.2 does not support static getDerivedStateFromProps.
    // As a workaround, use cWM and cWRP to invoke the new static lifecycle.
    // Newer versions of React will ignore these lifecycles if gDSFP exists.
    if (typeof Component.getDerivedStateFromProps === 'function') {
        prototype.componentWillMount = componentWillMount;
        prototype.componentWillReceiveProps = componentWillReceiveProps;
    }
    // React <= 16.2 does not support getSnapshotBeforeUpdate.
    // As a workaround, use cWU to invoke the new lifecycle.
    // Newer versions of React will ignore that lifecycle if gSBU exists.
    if (typeof prototype.getSnapshotBeforeUpdate === 'function') {
        if (typeof prototype.componentDidUpdate !== 'function') throw new Error('Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype');
        prototype.componentWillUpdate = componentWillUpdate;
        var componentDidUpdate = prototype.componentDidUpdate;
        prototype.componentDidUpdate = function componentDidUpdatePolyfill(prevProps, prevState, maybeSnapshot) {
            // 16.3+ will not execute our will-update method;
            // It will pass a snapshot value to did-update though.
            // Older versions will require our polyfilled will-update value.
            // We need to handle both cases, but can't just check for the presence of "maybeSnapshot",
            // Because for <= 15.x versions this might be a "prevContext" object.
            // We also can't just check "__reactInternalSnapshot",
            // Because get-snapshot might return a falsy value.
            // So check for the explicit __reactInternalSnapshotFlag flag to determine behavior.
            var snapshot = this.__reactInternalSnapshotFlag ? this.__reactInternalSnapshot : maybeSnapshot;
            componentDidUpdate.call(this, prevProps, prevState, snapshot);
        };
    }
    return Component;
}
exports.polyfill = polyfill;

},{}],"Womik":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.classNamesShape = exports.timeoutsShape = void 0;
var _propTypes = _interopRequireDefault(require("prop-types"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var timeoutsShape = _propTypes.default.oneOfType([
    _propTypes.default.number,
    _propTypes.default.shape({
        enter: _propTypes.default.number,
        exit: _propTypes.default.number,
        appear: _propTypes.default.number
    }).isRequired
]);
exports.timeoutsShape = timeoutsShape;
var classNamesShape = _propTypes.default.oneOfType([
    _propTypes.default.string,
    _propTypes.default.shape({
        enter: _propTypes.default.string,
        exit: _propTypes.default.string,
        active: _propTypes.default.string
    }),
    _propTypes.default.shape({
        enter: _propTypes.default.string,
        enterDone: _propTypes.default.string,
        enterActive: _propTypes.default.string,
        exit: _propTypes.default.string,
        exitDone: _propTypes.default.string,
        exitActive: _propTypes.default.string
    })
]);
exports.classNamesShape = classNamesShape;

},{"prop-types":"22hk3"}],"53uY5":[function() {},{}],"81ZAN":[function(require,module,exports) {
var { useFocusable  } = require("@react-aria/focus");
var { useEffect , useRef  } = require("react");
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
var { useHover , getInteractionModality , isFocusVisible , usePress  } = require("@react-aria/interactions");
var { filterDOMProps , mergeProps , useId  } = require("@react-aria/utils");
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
/**
 * Provides the accessibility implementation for a Tooltip component.
 */ function useTooltip(props, state) {
    let domProps = filterDOMProps(props, {
        labelable: true
    });
    let { hoverProps  } = useHover({
        onHoverStart: ()=>state == null ? void 0 : state.open(true)
        ,
        onHoverEnd: ()=>state == null ? void 0 : state.close()
    });
    return {
        tooltipProps: mergeProps(domProps, hoverProps, {
            role: 'tooltip'
        })
    };
}
exports.useTooltip = useTooltip;
/**
 * Provides the behavior and accessibility implementation for a tooltip trigger, e.g. a button
 * that shows a description when focused or hovered.
 */ function useTooltipTrigger(props, state, ref) {
    let { isDisabled , trigger  } = props;
    let tooltipId = useId();
    let isHovered = useRef(false);
    let isFocused = useRef(false);
    let handleShow = ()=>{
        if (isHovered.current || isFocused.current) state.open(isFocused.current);
    };
    let handleHide = (immediate)=>{
        if (!isHovered.current && !isFocused.current) state.close(immediate);
    };
    useEffect(()=>{
        let onKeyDown = (e)=>{
            if (ref && ref.current) // Escape after clicking something can give it keyboard focus
            // dismiss tooltip on esc key press
            {
                if (e.key === 'Escape') state.close(true);
            }
        };
        if (state.isOpen) {
            document.addEventListener('keydown', onKeyDown, true);
            return ()=>{
                document.removeEventListener('keydown', onKeyDown, true);
            };
        }
    }, [
        ref,
        state
    ]);
    let onHoverStart = ()=>{
        if (trigger === 'focus') return;
         // In chrome, if you hover a trigger, then another element obscures it, due to keyboard
        // interactions for example, hover will end. When hover is restored after that element disappears,
        // focus moves on for example, then the tooltip will reopen. We check the modality to know if the hover
        // is the result of moving the mouse.
        if (getInteractionModality() === 'pointer') isHovered.current = true;
        else isHovered.current = false;
        handleShow();
    };
    let onHoverEnd = ()=>{
        if (trigger === 'focus') return;
         // no matter how the trigger is left, we should close the tooltip
        isFocused.current = false;
        isHovered.current = false;
        handleHide();
    };
    let onPressStart = ()=>{
        // no matter how the trigger is pressed, we should close the tooltip
        isFocused.current = false;
        isHovered.current = false;
        handleHide(true);
    };
    let onFocus = ()=>{
        let isVisible = isFocusVisible();
        if (isVisible) {
            isFocused.current = true;
            handleShow();
        }
    };
    let onBlur = ()=>{
        isFocused.current = false;
        isHovered.current = false;
        handleHide(true);
    };
    let { hoverProps  } = useHover({
        isDisabled,
        onHoverStart,
        onHoverEnd
    });
    let { pressProps  } = usePress({
        onPressStart
    });
    let { focusableProps  } = useFocusable({
        isDisabled,
        onFocus,
        onBlur
    }, ref);
    return {
        triggerProps: _babelRuntimeHelpersExtends({
            'aria-describedby': state.isOpen ? tooltipId : undefined
        }, mergeProps(focusableProps, hoverProps, pressProps)),
        tooltipProps: {
            id: tooltipId
        }
    };
}
exports.useTooltipTrigger = useTooltipTrigger;

},{"@react-aria/focus":"76fMY","react":"a6qBW","@babel/runtime/helpers/extends":"5xz6u","@react-aria/interactions":"3irYN","@react-aria/utils":"d8qxy"}],"2dXMJ":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = SuccessSmall;
var _SuccessSmall = require("@adobe/react-spectrum-ui/dist/SuccessSmall");
var _icon = require("@react-spectrum/icon");
var _react = _interopRequireDefault(require("react"));
function SuccessSmall(props) {
    return(/*#__PURE__*/ _react.default.createElement(_icon.UIIcon, props, /*#__PURE__*/ _react.default.createElement(_SuccessSmall.SuccessSmall, null)));
}

},{"@babel/runtime/helpers/interopRequireDefault":"5TvsK","@adobe/react-spectrum-ui/dist/SuccessSmall":"1YKrS","@react-spectrum/icon":"5ij4g","react":"a6qBW"}],"1YKrS":[function(require,module,exports) {
/**
* @adobe/react-spectrum-ui (c) by Adobe
* 
* @adobe/react-spectrum-ui is licensed under a
* Creative Commons Attribution-NoDerivatives 4.0 International License.
* 
* You should have received a copy of the license along with this
* work. If not, see <http://creativecommons.org/licenses/by-nd/4.0/>.
**/ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SuccessSmall = SuccessSmall;
var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutProperties(source, excluded) {
    if (source == null) return {
    };
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function SuccessSmall(_ref) {
    var _ref$scale = _ref.scale, scale = _ref$scale === void 0 ? 'M' : _ref$scale, props = _objectWithoutProperties(_ref, [
        "scale"
    ]);
    return _react["default"].createElement("svg", _extends({
    }, props, props), scale === 'L' && _react["default"].createElement("path", {
        d: "M9 1a8 8 0 1 0 8 8 8 8 0 0 0-8-8zm5.333 4.54l-6.324 8.13a.6.6 0 0 1-.437.23h-.037a.6.6 0 0 1-.425-.176l-3.893-3.9a.6.6 0 0 1 0-.849l.663-.663a.6.6 0 0 1 .848 0L7.4 10.991l5.256-6.754a.6.6 0 0 1 .843-.1l.728.566a.6.6 0 0 1 .106.837z"
    }), scale === 'M' && _react["default"].createElement("path", {
        d: "M7 .778A6.222 6.222 0 1 0 13.222 7 6.222 6.222 0 0 0 7 .778zm4.148 3.53l-4.919 6.324a.467.467 0 0 1-.34.18h-.028a.467.467 0 0 1-.331-.138L2.502 7.641a.467.467 0 0 1 0-.66l.516-.516a.467.467 0 0 1 .66 0l2.078 2.084 4.088-5.254a.467.467 0 0 1 .655-.078l.566.44a.467.467 0 0 1 .083.652z"
    }));
}
SuccessSmall.displayName = 'SuccessSmall';

},{"react":"a6qBW"}],"5ij4g":[function(require,module,exports) {
var { useProvider  } = require("@react-spectrum/provider");
var _react = $parcel$interopDefault(require("react"));
var { filterDOMProps  } = require("@react-aria/utils");
var { baseStyleProps , classNames , useSlotProps , useStyleProps  } = require("@react-spectrum/utils");
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
var _babelRuntimeHelpersObjectWithoutPropertiesLoose = $parcel$interopDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
require("./main.css");
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/icon/vars.css
var $b35c5b15aff1f74941511439de8f0ba8$exports = {
};
$b35c5b15aff1f74941511439de8f0ba8$exports = {
    "spectrum-Icon": "_spectrum-Icon_8ac98",
    "spectrum-UIIcon": "_spectrum-UIIcon_8ac98",
    "spectrum-Icon--sizeXXS": "_spectrum-Icon--sizeXXS_8ac98",
    "spectrum-Icon--sizeXS": "_spectrum-Icon--sizeXS_8ac98",
    "spectrum-Icon--sizeS": "_spectrum-Icon--sizeS_8ac98",
    "spectrum-Icon--sizeM": "_spectrum-Icon--sizeM_8ac98",
    "spectrum-Icon--sizeL": "_spectrum-Icon--sizeL_8ac98",
    "spectrum-Icon--sizeXL": "_spectrum-Icon--sizeXL_8ac98",
    "spectrum-Icon--sizeXXL": "_spectrum-Icon--sizeXXL_8ac98",
    "spectrum--medium": "_spectrum--medium_8ac98",
    "spectrum-UIIcon--large": "_spectrum-UIIcon--large_8ac98",
    "spectrum-UIIcon--medium": "_spectrum-UIIcon--medium_8ac98",
    "spectrum--large": "_spectrum--large_8ac98",
    "spectrum-UIIcon-AlertMedium": "_spectrum-UIIcon-AlertMedium_8ac98",
    "spectrum-UIIcon-AlertSmall": "_spectrum-UIIcon-AlertSmall_8ac98",
    "spectrum-UIIcon-ArrowDownSmall": "_spectrum-UIIcon-ArrowDownSmall_8ac98",
    "spectrum-UIIcon-ArrowLeftMedium": "_spectrum-UIIcon-ArrowLeftMedium_8ac98",
    "spectrum-UIIcon-Asterisk": "_spectrum-UIIcon-Asterisk_8ac98",
    "spectrum-UIIcon-CheckmarkMedium": "_spectrum-UIIcon-CheckmarkMedium_8ac98",
    "spectrum-UIIcon-CheckmarkSmall": "_spectrum-UIIcon-CheckmarkSmall_8ac98",
    "spectrum-UIIcon-ChevronDownMedium": "_spectrum-UIIcon-ChevronDownMedium_8ac98",
    "spectrum-UIIcon-ChevronDownSmall": "_spectrum-UIIcon-ChevronDownSmall_8ac98",
    "spectrum-UIIcon-ChevronLeftLarge": "_spectrum-UIIcon-ChevronLeftLarge_8ac98",
    "spectrum-UIIcon-ChevronLeftMedium": "_spectrum-UIIcon-ChevronLeftMedium_8ac98",
    "spectrum-UIIcon-ChevronRightLarge": "_spectrum-UIIcon-ChevronRightLarge_8ac98",
    "spectrum-UIIcon-ChevronRightMedium": "_spectrum-UIIcon-ChevronRightMedium_8ac98",
    "spectrum-UIIcon-ChevronRightSmall": "_spectrum-UIIcon-ChevronRightSmall_8ac98",
    "spectrum-UIIcon-ChevronUpSmall": "_spectrum-UIIcon-ChevronUpSmall_8ac98",
    "spectrum-UIIcon-CornerTriangle": "_spectrum-UIIcon-CornerTriangle_8ac98",
    "spectrum-UIIcon-CrossLarge": "_spectrum-UIIcon-CrossLarge_8ac98",
    "spectrum-UIIcon-CrossMedium": "_spectrum-UIIcon-CrossMedium_8ac98",
    "spectrum-UIIcon-CrossSmall": "_spectrum-UIIcon-CrossSmall_8ac98",
    "spectrum-UIIcon-DashSmall": "_spectrum-UIIcon-DashSmall_8ac98",
    "spectrum-UIIcon-DoubleGripper": "_spectrum-UIIcon-DoubleGripper_8ac98",
    "spectrum-UIIcon-FolderBreadcrumb": "_spectrum-UIIcon-FolderBreadcrumb_8ac98",
    "spectrum-UIIcon-HelpMedium": "_spectrum-UIIcon-HelpMedium_8ac98",
    "spectrum-UIIcon-HelpSmall": "_spectrum-UIIcon-HelpSmall_8ac98",
    "spectrum-UIIcon-InfoMedium": "_spectrum-UIIcon-InfoMedium_8ac98",
    "spectrum-UIIcon-InfoSmall": "_spectrum-UIIcon-InfoSmall_8ac98",
    "spectrum-UIIcon-Magnifier": "_spectrum-UIIcon-Magnifier_8ac98",
    "spectrum-UIIcon-SkipLeft": "_spectrum-UIIcon-SkipLeft_8ac98",
    "spectrum-UIIcon-SkipRight": "_spectrum-UIIcon-SkipRight_8ac98",
    "spectrum-UIIcon-Star": "_spectrum-UIIcon-Star_8ac98",
    "spectrum-UIIcon-StarOutline": "_spectrum-UIIcon-StarOutline_8ac98",
    "spectrum-UIIcon-SuccessMedium": "_spectrum-UIIcon-SuccessMedium_8ac98",
    "spectrum-UIIcon-SuccessSmall": "_spectrum-UIIcon-SuccessSmall_8ac98",
    "spectrum-UIIcon-TripleGripper": "_spectrum-UIIcon-TripleGripper_8ac98"
};
function $f9f19014aa8aad151b33659ca$var$iconColorValue(value) {
    return "var(--spectrum-semantic-" + value + "-color-icon)";
}
const $f9f19014aa8aad151b33659ca$var$iconStyleProps = _babelRuntimeHelpersExtends({
}, baseStyleProps, {
    color: [
        'color',
        $f9f19014aa8aad151b33659ca$var$iconColorValue
    ]
});
/**
 * Spectrum icons are clear, minimal, and consistent across platforms. They follow the focused and rational principles of the design system in both metaphor and style.
 */ var $b35c5b15aff1f74941511439de8f0ba8$$interop$default = $parcel$interopDefault($b35c5b15aff1f74941511439de8f0ba8$exports);
function Icon(props) {
    props = useSlotProps(props, 'icon');
    let { children , size , 'aria-label': ariaLabel , 'aria-hidden': ariaHidden  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "children",
        "size",
        "aria-label",
        "aria-hidden"
    ]);
    let { styleProps  } = useStyleProps(otherProps, $f9f19014aa8aad151b33659ca$var$iconStyleProps);
    let provider = useProvider();
    let scale = 'M';
    if (provider !== null) scale = provider.scale === 'large' ? 'L' : 'M';
    if (!ariaHidden) ariaHidden = undefined;
     // Use user specified size, falling back to provider scale if size is undef
    let iconSize = size ? size : scale;
    return(/*#__PURE__*/ _react.cloneElement(children, _babelRuntimeHelpersExtends({
    }, filterDOMProps(otherProps), styleProps, {
        focusable: 'false',
        'aria-label': ariaLabel,
        'aria-hidden': ariaLabel ? ariaHidden || undefined : true,
        role: 'img',
        className: classNames($b35c5b15aff1f74941511439de8f0ba8$$interop$default, children.props.className, 'spectrum-Icon', "spectrum-Icon--size" + iconSize, styleProps.className)
    })));
}
exports.Icon = Icon;
function UIIcon(props) {
    props = useSlotProps(props, 'icon');
    let { children , 'aria-label': ariaLabel , 'aria-hidden': ariaHidden  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "children",
        "aria-label",
        "aria-hidden"
    ]);
    let { styleProps  } = useStyleProps(otherProps);
    let provider = useProvider();
    let scale = 'M';
    if (provider !== null) scale = provider.scale === 'large' ? 'L' : 'M';
    if (!ariaHidden) ariaHidden = undefined;
    return(/*#__PURE__*/ _react.cloneElement(children, _babelRuntimeHelpersExtends({
    }, filterDOMProps(otherProps), styleProps, {
        scale,
        focusable: 'false',
        'aria-label': ariaLabel,
        'aria-hidden': ariaLabel ? ariaHidden || undefined : true,
        role: 'img',
        className: classNames($b35c5b15aff1f74941511439de8f0ba8$$interop$default, children.props.className, 'spectrum-Icon', {
            ["spectrum-UIIcon-" + children.type['displayName']]: children.type['displayName']
        }, styleProps.className)
    })));
}
exports.UIIcon = UIIcon;

},{"@react-spectrum/provider":"3Y6zE","react":"a6qBW","@react-aria/utils":"d8qxy","@react-spectrum/utils":"7ch5A","@babel/runtime/helpers/extends":"5xz6u","@babel/runtime/helpers/objectWithoutPropertiesLoose":"5byko","./main.css":"1Lgyc"}],"1Lgyc":[function() {},{}],"2SWlN":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = InfoSmall;
var _InfoSmall = require("@adobe/react-spectrum-ui/dist/InfoSmall");
var _icon = require("@react-spectrum/icon");
var _react = _interopRequireDefault(require("react"));
function InfoSmall(props) {
    return(/*#__PURE__*/ _react.default.createElement(_icon.UIIcon, props, /*#__PURE__*/ _react.default.createElement(_InfoSmall.InfoSmall, null)));
}

},{"@babel/runtime/helpers/interopRequireDefault":"5TvsK","@adobe/react-spectrum-ui/dist/InfoSmall":"2F48K","@react-spectrum/icon":"5ij4g","react":"a6qBW"}],"2F48K":[function(require,module,exports) {
/**
* @adobe/react-spectrum-ui (c) by Adobe
* 
* @adobe/react-spectrum-ui is licensed under a
* Creative Commons Attribution-NoDerivatives 4.0 International License.
* 
* You should have received a copy of the license along with this
* work. If not, see <http://creativecommons.org/licenses/by-nd/4.0/>.
**/ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InfoSmall = InfoSmall;
var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutProperties(source, excluded) {
    if (source == null) return {
    };
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function InfoSmall(_ref) {
    var _ref$scale = _ref.scale, scale = _ref$scale === void 0 ? 'M' : _ref$scale, props = _objectWithoutProperties(_ref, [
        "scale"
    ]);
    return _react["default"].createElement("svg", _extends({
    }, props, props), scale === 'L' && _react["default"].createElement("path", {
        d: "M9 1a8 8 0 1 0 8 8 8 8 0 0 0-8-8zm-.15 2.15a1.359 1.359 0 0 1 1.431 1.283q.004.064.001.129A1.332 1.332 0 0 1 8.85 5.994a1.353 1.353 0 0 1-1.432-1.433 1.359 1.359 0 0 1 1.304-1.412q.064-.002.128.001zM11 13.5a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5H8V9h-.5a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 .5.5V12h.5a.5.5 0 0 1 .5.5z"
    }), scale === 'M' && _react["default"].createElement("path", {
        d: "M7 .778A6.222 6.222 0 1 0 13.222 7 6.222 6.222 0 0 0 7 .778zM6.883 2.45a1.057 1.057 0 0 1 1.113.998q.003.05.001.1a1.036 1.036 0 0 1-1.114 1.114A1.052 1.052 0 0 1 5.77 3.547 1.057 1.057 0 0 1 6.784 2.45q.05-.002.1.001zm1.673 8.05a.389.389 0 0 1-.39.389H5.834a.389.389 0 0 1-.389-.389v-.778a.389.389 0 0 1 .39-.389h.388V7h-.389a.389.389 0 0 1-.389-.389v-.778a.389.389 0 0 1 .39-.389h1.555a.389.389 0 0 1 .389.39v3.5h.389a.389.389 0 0 1 .389.388z"
    }));
}
InfoSmall.displayName = 'InfoSmall';

},{"react":"a6qBW"}],"LB508":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = AlertSmall;
var _AlertSmall = require("@adobe/react-spectrum-ui/dist/AlertSmall");
var _icon = require("@react-spectrum/icon");
var _react = _interopRequireDefault(require("react"));
function AlertSmall(props) {
    return(/*#__PURE__*/ _react.default.createElement(_icon.UIIcon, props, /*#__PURE__*/ _react.default.createElement(_AlertSmall.AlertSmall, null)));
}

},{"@babel/runtime/helpers/interopRequireDefault":"5TvsK","@adobe/react-spectrum-ui/dist/AlertSmall":"Jc2ui","@react-spectrum/icon":"5ij4g","react":"a6qBW"}],"Jc2ui":[function(require,module,exports) {
/**
* @adobe/react-spectrum-ui (c) by Adobe
* 
* @adobe/react-spectrum-ui is licensed under a
* Creative Commons Attribution-NoDerivatives 4.0 International License.
* 
* You should have received a copy of the license along with this
* work. If not, see <http://creativecommons.org/licenses/by-nd/4.0/>.
**/ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AlertSmall = AlertSmall;
var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutProperties(source, excluded) {
    if (source == null) return {
    };
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function AlertSmall(_ref) {
    var _ref$scale = _ref.scale, scale = _ref$scale === void 0 ? 'M' : _ref$scale, props = _objectWithoutProperties(_ref, [
        "scale"
    ]);
    return _react["default"].createElement("svg", _extends({
    }, props, props), scale === 'L' && _react["default"].createElement("path", {
        d: "M8.564 1.289L.2 16.256A.5.5 0 0 0 .636 17h16.728a.5.5 0 0 0 .436-.744L9.436 1.289a.5.5 0 0 0-.872 0zM10 14.75a.25.25 0 0 1-.25.25h-1.5a.25.25 0 0 1-.25-.25v-1.5a.25.25 0 0 1 .25-.25h1.5a.25.25 0 0 1 .25.25zm0-3a.25.25 0 0 1-.25.25h-1.5a.25.25 0 0 1-.25-.25v-6a.25.25 0 0 1 .25-.25h1.5a.25.25 0 0 1 .25.25z"
    }), scale === 'M' && _react["default"].createElement("path", {
        d: "M6.66 1.003L.157 12.643a.389.389 0 0 0 .339.58h13.01a.389.389 0 0 0 .34-.58L7.338 1.004a.389.389 0 0 0-.678 0zm1.118 10.47a.194.194 0 0 1-.195.194H6.417a.194.194 0 0 1-.195-.195v-1.166a.194.194 0 0 1 .195-.195h1.166a.194.194 0 0 1 .195.195zm0-2.334a.194.194 0 0 1-.195.194H6.417a.194.194 0 0 1-.195-.194V4.472a.194.194 0 0 1 .195-.194h1.166a.194.194 0 0 1 .195.194z"
    }));
}
AlertSmall.displayName = 'AlertSmall';

},{"react":"a6qBW"}],"503wq":[function() {},{}],"ib5WK":[function(require,module,exports) {
var { useDOMRef , useSlotProps , useStyleProps  } = require("@react-spectrum/utils");
var _react2 = require("react");
var _react = $parcel$interopDefault(_react2);
var { forwardRef  } = _react2;
var { filterDOMProps , mergeProps  } = require("@react-aria/utils");
var _babelRuntimeHelpersObjectWithoutPropertiesLoose = $parcel$interopDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
function $fe1955053990ab873941970c7463$var$Text(props, ref) {
    props = useSlotProps(props, 'text');
    let { children  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "children"
    ]);
    let { styleProps  } = useStyleProps(otherProps);
    let domRef = useDOMRef(ref);
    return(/*#__PURE__*/ _react.createElement("span", _babelRuntimeHelpersExtends({
    }, filterDOMProps(otherProps), styleProps, {
        ref: domRef
    }), children));
}
/**
 * Text represents text with no specific semantic meaning.
 */ const Text1 = /*#__PURE__*/ forwardRef($fe1955053990ab873941970c7463$var$Text);
exports.Text = Text1;
const $a76c0421a0242146b7d397a8ac50$var$slotDOMProps = new Set([
    'aria-current'
]);
function $a76c0421a0242146b7d397a8ac50$var$Heading(props, ref) {
    let slotProps = useSlotProps({
    }, 'heading');
    props = mergeProps(slotProps, props);
    let domProps = mergeProps(filterDOMProps(props), filterDOMProps(slotProps, {
        propNames: $a76c0421a0242146b7d397a8ac50$var$slotDOMProps
    }));
    let { children , level =3  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "children",
        "level"
    ]);
    let { styleProps  } = useStyleProps(otherProps);
    let domRef = useDOMRef(ref);
    let HeadingTag = "h" + level;
    return(/*#__PURE__*/ _react.createElement(HeadingTag, _babelRuntimeHelpersExtends({
    }, domProps, styleProps, {
        ref: domRef
    }), children));
}
/**
 * Heading is used to create various levels of typographic hierarchies.
 */ const Heading = /*#__PURE__*/ forwardRef($a76c0421a0242146b7d397a8ac50$var$Heading);
exports.Heading = Heading;
function $f53f3a6b6cb51dbfd2b9e4c867c$var$Keyboard(props, ref) {
    props = useSlotProps(props, 'keyboard');
    let { children  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "children"
    ]);
    let { styleProps  } = useStyleProps(otherProps);
    let domRef = useDOMRef(ref);
    return(/*#__PURE__*/ _react.createElement("kbd", _babelRuntimeHelpersExtends({
    }, filterDOMProps(otherProps), styleProps, {
        dir: "ltr",
        ref: domRef
    }), children));
}
/**
 * Keyboard represents text that specifies a keyboard command.
 */ const Keyboard = /*#__PURE__*/ forwardRef($f53f3a6b6cb51dbfd2b9e4c867c$var$Keyboard);
exports.Keyboard = Keyboard;

},{"@react-spectrum/utils":"7ch5A","react":"a6qBW","@react-aria/utils":"d8qxy","@babel/runtime/helpers/objectWithoutPropertiesLoose":"5byko","@babel/runtime/helpers/extends":"5xz6u"}],"1fTgu":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = More;
var _More = require("@adobe/react-spectrum-workflow/dist/More");
var _icon = require("@react-spectrum/icon");
var _react = _interopRequireDefault(require("react"));
function More(props) {
    return(/*#__PURE__*/ _react.default.createElement(_icon.Icon, props, /*#__PURE__*/ _react.default.createElement(_More.A4uMore, null)));
}

},{"@babel/runtime/helpers/interopRequireDefault":"5TvsK","@adobe/react-spectrum-workflow/dist/More":"3v83d","@react-spectrum/icon":"5ij4g","react":"a6qBW"}],"3v83d":[function(require,module,exports) {
/**
* @adobe/react-spectrum-workflow (c) by Adobe
* 
* @adobe/react-spectrum-workflow is licensed under a
* Creative Commons Attribution-NoDerivatives 4.0 International License.
* 
* You should have received a copy of the license along with this
* work. If not, see <http://creativecommons.org/licenses/by-nd/4.0/>.
**/ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.A4uMore = A4uMore;
var _react = _interopRequireDefault(require("react"));
var _util = require("./util");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutProperties(source, excluded) {
    if (source == null) return {
    };
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function A4uMore(_ref) {
    var _ref$scale = _ref.scale, scale = _ref$scale === void 0 ? 'M' : _ref$scale, _ref$color = _ref.color, color = _ref$color === void 0 ? 'LIGHT' : _ref$color, props = _objectWithoutProperties(_ref, [
        "scale",
        "color"
    ]);
    return _react["default"].createElement("svg", _extends({
        viewBox: _util.viewBoxes[scale]
    }, props, props), _react["default"].createElement("circle", {
        cx: 17.8,
        cy: 18.2,
        r: 3.4
    }), _react["default"].createElement("circle", {
        cx: 29.5,
        cy: 18.2,
        r: 3.4
    }), _react["default"].createElement("circle", {
        cx: 6.1,
        cy: 18.2,
        r: 3.4
    }));
}

},{"react":"a6qBW","./util":"4bMhm"}],"4bMhm":[function(require,module,exports) {
/**
* @adobe/react-spectrum-workflow (c) by Adobe
* 
* @adobe/react-spectrum-workflow is licensed under a
* Creative Commons Attribution-NoDerivatives 4.0 International License.
* 
* You should have received a copy of the license along with this
* work. If not, see <http://creativecommons.org/licenses/by-nd/4.0/>.
**/ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.viewBoxes = void 0;
var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
}
var viewBoxes = {
    M: '0 0 36 36',
    L: '0 0 48 48'
};
exports.viewBoxes = viewBoxes;

},{"react":"a6qBW"}],"6jXbK":[function(require,module,exports) {
var { useControlledState  } = require("@react-stately/utils");
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
var { useCollection  } = require("@react-stately/collections");
var { SelectionManager , useMultipleSelectionState  } = require("@react-stately/selection");
var { useEffect , useMemo  } = require("react");
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
let $b42f1d5166481a4c34c86bbfb4215e1$var$_Symbol$iterator;
$b42f1d5166481a4c34c86bbfb4215e1$var$_Symbol$iterator = Symbol.iterator;
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ class ListCollection {
    constructor(nodes){
        var _last;
        this.keyMap = new Map();
        this.iterable = void 0;
        this.firstKey = void 0;
        this.lastKey = void 0;
        this.iterable = nodes;
        let visit = (node)=>{
            this.keyMap.set(node.key, node);
            if (node.childNodes && node.type === 'section') for (let child of node.childNodes)visit(child);
        };
        for (let node of nodes)visit(node);
        let last;
        let index = 0;
        for (let [key1, node1] of this.keyMap){
            if (last) {
                last.nextKey = key1;
                node1.prevKey = last.key;
            } else {
                this.firstKey = key1;
                node1.prevKey = undefined;
            }
            if (node1.type === 'item') node1.index = index++;
            last = node1; // Set nextKey as undefined since this might be the last node
            // If it isn't the last node, last.nextKey will properly set at start of new loop
            last.nextKey = undefined;
        }
        this.lastKey = (_last = last) == null ? void 0 : _last.key;
    }
    *[$b42f1d5166481a4c34c86bbfb4215e1$var$_Symbol$iterator]() {
        yield* this.iterable;
    }
    get size() {
        return this.keyMap.size;
    }
    getKeys() {
        return this.keyMap.keys();
    }
    getKeyBefore(key) {
        let node2 = this.keyMap.get(key);
        return node2 ? node2.prevKey : null;
    }
    getKeyAfter(key) {
        let node2 = this.keyMap.get(key);
        return node2 ? node2.nextKey : null;
    }
    getFirstKey() {
        return this.firstKey;
    }
    getLastKey() {
        return this.lastKey;
    }
    getItem(key) {
        return this.keyMap.get(key);
    }
}
exports.ListCollection = ListCollection;
/**
 * Provides state management for list-like components. Handles building a collection
 * of items from props, and manages multiple selection state.
 */ function useListState(props) {
    let { filter  } = props;
    let selectionState = useMultipleSelectionState(props);
    let disabledKeys = useMemo(()=>props.disabledKeys ? new Set(props.disabledKeys) : new Set()
    , [
        props.disabledKeys
    ]);
    let factory = (nodes1)=>filter ? new ListCollection(filter(nodes1)) : new ListCollection(nodes1)
    ;
    let context = useMemo(()=>({
            suppressTextValueWarning: props.suppressTextValueWarning
        })
    , [
        props.suppressTextValueWarning
    ]);
    let collection = useCollection(props, factory, context, [
        filter
    ]); // Reset focused key if that item is deleted from the collection.
    useEffect(()=>{
        if (selectionState.focusedKey != null && !collection.getItem(selectionState.focusedKey)) selectionState.setFocusedKey(null);
    }, [
        collection,
        selectionState.focusedKey
    ]);
    return {
        collection,
        disabledKeys,
        selectionManager: new SelectionManager(collection, selectionState)
    };
}
exports.useListState = useListState;
/**
 * Provides state management for list-like components with single selection.
 * Handles building a collection of items from props, and manages selection state.
 */ function useSingleSelectListState(props) {
    var _props$defaultSelecte;
    let [selectedKey, setSelectedKey] = useControlledState(props.selectedKey, (_props$defaultSelecte = props.defaultSelectedKey) != null ? _props$defaultSelecte : null, props.onSelectionChange);
    let selectedKeys = useMemo(()=>selectedKey != null ? [
            selectedKey
        ] : []
    , [
        selectedKey
    ]);
    let { collection , disabledKeys , selectionManager  } = useListState(_babelRuntimeHelpersExtends({
    }, props, {
        selectionMode: 'single',
        disallowEmptySelection: true,
        selectedKeys,
        onSelectionChange: (keys)=>{
            let key2 = keys.values().next().value; // Always fire onSelectionChange, even if the key is the same
            // as the current key (useControlledState does not).
            if (key2 === selectedKey && props.onSelectionChange) props.onSelectionChange(key2);
            setSelectedKey(key2);
        }
    }));
    let selectedItem = selectedKey != null ? collection.getItem(selectedKey) : null;
    return {
        collection,
        disabledKeys,
        selectionManager,
        selectedKey,
        setSelectedKey,
        selectedItem
    };
}
exports.useSingleSelectListState = useSingleSelectListState;

},{"@react-stately/utils":"7ILZk","@babel/runtime/helpers/extends":"5xz6u","@react-stately/collections":"4IPbJ","@react-stately/selection":"7esLB","react":"a6qBW"}],"4IPbJ":[function(require,module,exports) {
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
var _react2 = require("react");
var _react = $parcel$interopDefault(_react2);
var { useMemo , useRef  } = _react2;
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
function $de85adf0b38f4f13e9cffd2f21$var$Item(props) {
    // eslint-disable-line @typescript-eslint/no-unused-vars
    return null;
}
$de85adf0b38f4f13e9cffd2f21$var$Item.getCollectionNode = function* getCollectionNode(props, context) {
    let { childItems , title , children  } = props;
    let rendered = props.title || props.children;
    let textValue = props.textValue || (typeof rendered === 'string' ? rendered : '') || props['aria-label'] || ''; // suppressTextValueWarning is used in components like Tabs, which don't have type to select support.
    if (!textValue && !(context == null ? void 0 : context.suppressTextValueWarning)) console.warn('<Item> with non-plain text contents is unsupported by type to select for accessibility. Please add a `textValue` prop.');
    yield {
        type: 'item',
        props: props,
        rendered,
        textValue,
        'aria-label': props['aria-label'],
        hasChildNodes: $de85adf0b38f4f13e9cffd2f21$var$hasChildItems(props),
        *childNodes () {
            if (childItems) for (let child of childItems)yield {
                type: 'item',
                value: child
            };
            else if (title) {
                let items = [];
                _react.Children.forEach(children, (child1)=>{
                    items.push({
                        type: 'item',
                        element: child1
                    });
                });
                yield* items;
            }
        }
    };
};
function $de85adf0b38f4f13e9cffd2f21$var$hasChildItems(props) {
    if (props.hasChildItems != null) return props.hasChildItems;
    if (props.childItems) return true;
    if (props.title && _react.Children.count(props.children) > 0) return true;
    return false;
} // We don't want getCollectionNode to show up in the type definition
let Item = $de85adf0b38f4f13e9cffd2f21$var$Item;
exports.Item = Item;
function $fce9f2c25e6e4c6ae9d7b8458177776c$var$Section(props) {
    // eslint-disable-line @typescript-eslint/no-unused-vars
    return null;
}
$fce9f2c25e6e4c6ae9d7b8458177776c$var$Section.getCollectionNode = function* getCollectionNode1(props) {
    let { children , title , items  } = props;
    yield {
        type: 'section',
        hasChildNodes: true,
        rendered: title,
        'aria-label': props['aria-label'],
        *childNodes () {
            if (typeof children === 'function') {
                if (!items) throw new Error('props.children was a function but props.items is missing');
                for (let item of items)yield {
                    type: 'item',
                    value: item,
                    renderer: children
                };
            } else {
                let items1 = [];
                _react.Children.forEach(children, (child)=>{
                    items1.push({
                        type: 'item',
                        element: child
                    });
                });
                yield* items1;
            }
        }
    };
}; // We don't want getCollectionNode to show up in the type definition
let Section = $fce9f2c25e6e4c6ae9d7b8458177776c$var$Section;
exports.Section = Section;
class $f9fc6bc72d334a59f09d47517f9a056a$export$CollectionBuilder {
    constructor(){
        this.context = void 0;
        this.cache = new WeakMap();
    }
    build(props, context) {
        this.context = context;
        return $f9fc6bc72d334a59f09d47517f9a056a$var$iterable(()=>this.iterateCollection(props)
        );
    }
    *iterateCollection(props) {
        let { children , items  } = props;
        if (typeof children === 'function') {
            if (!items) throw new Error('props.children was a function but props.items is missing');
            for (let item of props.items)yield* this.getFullNode({
                value: item
            }, {
                renderer: children
            });
        } else {
            let items1 = [];
            _react.Children.forEach(children, (child)=>{
                items1.push(child);
            });
            let index = 0;
            for (let item of items1){
                let nodes = this.getFullNode({
                    element: item,
                    index: index
                }, {
                });
                for (let node of nodes){
                    index++;
                    yield node;
                }
            }
        }
    }
    getKey(item, partialNode, state, parentKey) {
        if (item.key != null) return item.key;
        if (partialNode.type === 'cell' && partialNode.key != null) return "" + parentKey + partialNode.key;
        let v = partialNode.value;
        if (v != null) {
            var _v$key;
            let key = (_v$key = v.key) != null ? _v$key : v.id;
            if (key == null) throw new Error('No key found for item');
            return key;
        }
        return parentKey ? parentKey + "." + partialNode.index : "$." + partialNode.index;
    }
    getChildState(state, partialNode) {
        return {
            renderer: partialNode.renderer || state.renderer
        };
    }
    *getFullNode(partialNode, state, parentKey, parentNode) {
        // If there's a value instead of an element on the node, and a parent renderer function is available,
        // use it to render an element for the value.
        let element = partialNode.element;
        if (!element && partialNode.value && state && state.renderer) {
            let cached = this.cache.get(partialNode.value);
            if (cached && (!cached.shouldInvalidate || !cached.shouldInvalidate(this.context))) {
                cached.index = partialNode.index;
                yield cached;
                return;
            }
            element = state.renderer(partialNode.value);
        } // If there's an element with a getCollectionNode function on its type, then it's a supported component.
        // Call this function to get a partial node, and recursively build a full node from there.
        if (/*#__PURE__*/ _react.isValidElement(element)) {
            let type = element.type;
            if (typeof type !== 'function' || typeof type.getCollectionNode !== 'function') {
                let name = typeof element.type === 'function' ? element.type.name : element.type;
                throw new Error("Unknown element <" + name + "> in collection.");
            }
            let childNodes = type.getCollectionNode(element.props, this.context);
            let index = partialNode.index;
            let result = childNodes.next();
            while(!result.done && result.value){
                let childNode = result.value;
                partialNode.index = index;
                let nodeKey = childNode.key;
                if (!nodeKey) nodeKey = childNode.element ? null : this.getKey(element, partialNode, state, parentKey);
                let nodes = this.getFullNode(_babelRuntimeHelpersExtends({
                }, childNode, {
                    key: nodeKey,
                    index,
                    wrapper: $f9fc6bc72d334a59f09d47517f9a056a$var$compose(partialNode.wrapper, childNode.wrapper)
                }), this.getChildState(state, childNode), parentKey ? "" + parentKey + element.key : element.key, parentNode);
                let children = [
                    ...nodes
                ];
                for (let node of children){
                    // Cache the node based on its value
                    node.value = childNode.value || partialNode.value;
                    if (node.value) this.cache.set(node.value, node);
                     // The partial node may have specified a type for the child in order to specify a constraint.
                    // Verify that the full node that was built recursively matches this type.
                    if (partialNode.type && node.type !== partialNode.type) throw new Error("Unsupported type <" + $f9fc6bc72d334a59f09d47517f9a056a$var$capitalize(node.type) + "> in <" + $f9fc6bc72d334a59f09d47517f9a056a$var$capitalize(parentNode.type) + ">. Only <" + $f9fc6bc72d334a59f09d47517f9a056a$var$capitalize(partialNode.type) + "> is supported.");
                    index++;
                    yield node;
                }
                result = childNodes.next(children);
            }
            return;
        } // Ignore invalid elements
        if (partialNode.key == null) return;
         // Create full node
        let builder = this;
        let node = {
            type: partialNode.type,
            props: partialNode.props,
            key: partialNode.key,
            parentKey: parentNode ? parentNode.key : null,
            value: partialNode.value,
            level: parentNode ? parentNode.level + 1 : 0,
            index: partialNode.index,
            rendered: partialNode.rendered,
            textValue: partialNode.textValue,
            'aria-label': partialNode['aria-label'],
            wrapper: partialNode.wrapper,
            shouldInvalidate: partialNode.shouldInvalidate,
            hasChildNodes: partialNode.hasChildNodes,
            childNodes: $f9fc6bc72d334a59f09d47517f9a056a$var$iterable(function*() {
                if (!partialNode.hasChildNodes) return;
                let index = 0;
                for (let child of partialNode.childNodes()){
                    // Ensure child keys are globally unique by prepending the parent node's key
                    if (child.key != null) child.key = "" + node.key + child.key;
                    child.index = index;
                    let nodes = builder.getFullNode(child, builder.getChildState(state, child), node.key, node);
                    for (let node1 of nodes){
                        index++;
                        yield node1;
                    }
                }
            })
        };
        yield node;
    }
} // Wraps an iterator function as an iterable object, and caches the results.
function $f9fc6bc72d334a59f09d47517f9a056a$var$iterable(iterator) {
    let cache = [];
    let iterable = null;
    return {
        *[Symbol.iterator] () {
            for (let item of cache)yield item;
            if (!iterable) iterable = iterator();
            for (let item1 of iterable){
                cache.push(item1);
                yield item1;
            }
        }
    };
}
function $f9fc6bc72d334a59f09d47517f9a056a$var$compose(outer, inner) {
    if (outer && inner) return (element)=>outer(inner(element))
    ;
    if (outer) return outer;
    if (inner) return inner;
}
function $f9fc6bc72d334a59f09d47517f9a056a$var$capitalize(str) {
    return str[0].toUpperCase() + str.slice(1);
}
function useCollection(props, factory, context, invalidators) {
    if (invalidators === void 0) invalidators = [];
    let builder = useMemo(()=>new $f9fc6bc72d334a59f09d47517f9a056a$export$CollectionBuilder()
    , []);
    let prev = useRef(null);
    return useMemo(()=>{
        let nodes = builder.build(props, context);
        prev.current = factory(nodes, prev.current);
        return prev.current; // Don't invalidate when any prop changes, just the two we care about.
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [
        builder,
        props.children,
        props.items,
        context,
        ...invalidators
    ]);
}
exports.useCollection = useCollection;
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ const $f87be1a9afd2842b9b36ca75398a185$var$cache = new WeakMap();
function getItemCount(collection) {
    let count = $f87be1a9afd2842b9b36ca75398a185$var$cache.get(collection);
    if (count != null) return count;
    count = 0;
    for (let item of collection)if (item.type === 'section') count += getItemCount(item.childNodes);
    else count++;
    $f87be1a9afd2842b9b36ca75398a185$var$cache.set(collection, count);
    return count;
}
exports.getItemCount = getItemCount;

},{"@babel/runtime/helpers/extends":"5xz6u","react":"a6qBW"}],"7esLB":[function(require,module,exports) {
var { useControlledState  } = require("@react-stately/utils");
var { useMemo , useRef , useState  } = require("react");
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /**
 * A Selection is a special Set containing Keys, which also has an anchor
 * and current selected key for use when range selecting.
 */ class $cc81f14158b02e1e259a5a46d24f0c$export$Selection extends Set {
    constructor(keys1, anchorKey, currentKey){
        super(keys1);
        this.anchorKey = void 0;
        this.currentKey = void 0;
        if (keys1 instanceof $cc81f14158b02e1e259a5a46d24f0c$export$Selection) {
            this.anchorKey = anchorKey || keys1.anchorKey;
            this.currentKey = currentKey || keys1.currentKey;
        } else {
            this.anchorKey = anchorKey;
            this.currentKey = currentKey;
        }
    }
}
/**
 * Manages state for multiple selection and focus in a collection.
 */ function useMultipleSelectionState(props) {
    let { selectionMode ='none' , disallowEmptySelection  } = props; // We want synchronous updates to `isFocused` and `focusedKey` after their setters are called.
    // But we also need to trigger a react re-render. So, we have both a ref (sync) and state (async).
    let isFocusedRef = useRef(false);
    let [, setFocused] = useState(false);
    let focusedKeyRef = useRef(null);
    let childFocusStrategyRef = useRef(null);
    let [, setFocusedKey] = useState(null);
    let selectedKeysProp = useMemo(()=>$e792d6adfd95a7ce87c6dd8b719ea117$var$convertSelection(props.selectedKeys)
    , [
        props.selectedKeys
    ]);
    let defaultSelectedKeys = useMemo(()=>$e792d6adfd95a7ce87c6dd8b719ea117$var$convertSelection(props.defaultSelectedKeys, new $cc81f14158b02e1e259a5a46d24f0c$export$Selection())
    , [
        props.defaultSelectedKeys
    ]);
    let [selectedKeys, setSelectedKeys] = useControlledState(selectedKeysProp, defaultSelectedKeys, props.onSelectionChange);
    let disabledKeysProp = useMemo(()=>props.disabledKeys ? new Set(props.disabledKeys) : new Set()
    , [
        props.disabledKeys
    ]);
    return {
        selectionMode,
        disallowEmptySelection,
        get isFocused () {
            return isFocusedRef.current;
        },
        setFocused (f) {
            isFocusedRef.current = f;
            setFocused(f);
        },
        get focusedKey () {
            return focusedKeyRef.current;
        },
        get childFocusStrategy () {
            return childFocusStrategyRef.current;
        },
        setFocusedKey (k, childFocusStrategy) {
            if (childFocusStrategy === void 0) childFocusStrategy = 'first';
            focusedKeyRef.current = k;
            childFocusStrategyRef.current = childFocusStrategy;
            setFocusedKey(k);
        },
        selectedKeys,
        setSelectedKeys,
        disabledKeys: disabledKeysProp
    };
}
exports.useMultipleSelectionState = useMultipleSelectionState;
function $e792d6adfd95a7ce87c6dd8b719ea117$var$convertSelection(selection, defaultValue) {
    if (!selection) return defaultValue;
    return selection === 'all' ? 'all' : new $cc81f14158b02e1e259a5a46d24f0c$export$Selection(selection);
}
/**
 * An interface for reading and updating multiple selection state.
 */ class SelectionManager {
    constructor(collection, state, options){
        var _options$allowsCellSe;
        this.collection = void 0;
        this.state = void 0;
        this.allowsCellSelection = void 0;
        this._isSelectAll = void 0;
        this.collection = collection;
        this.state = state;
        this.allowsCellSelection = (_options$allowsCellSe = options == null ? void 0 : options.allowsCellSelection) != null ? _options$allowsCellSe : false;
        this._isSelectAll = null;
    }
    /**
   * The type of selection that is allowed in the collection.
   */ get selectionMode() {
        return this.state.selectionMode;
    }
    /**
   * Whether the collection allows empty selection.
   */ get disallowEmptySelection() {
        return this.state.disallowEmptySelection;
    }
    /**
   * Whether the collection is currently focused.
   */ get isFocused() {
        return this.state.isFocused;
    }
    /**
   * Sets whether the collection is focused.
   */ setFocused(isFocused) {
        this.state.setFocused(isFocused);
    }
    /**
   * The current focused key in the collection.
   */ get focusedKey() {
        return this.state.focusedKey;
    }
    /** Whether the first or last child of the focused key should receive focus. */ get childFocusStrategy() {
        return this.state.childFocusStrategy;
    }
    /**
   * Sets the focused key.
   */ setFocusedKey(key, childFocusStrategy) {
        this.state.setFocusedKey(key, childFocusStrategy);
    }
    /**
   * The currently selected keys in the collection.
   */ get selectedKeys() {
        return this.state.selectedKeys === 'all' ? new Set(this.getSelectAllKeys()) : this.state.selectedKeys;
    }
    /**
   * The raw selection value for the collection.
   * Either 'all' for select all, or a set of keys.
   */ get rawSelection() {
        return this.state.selectedKeys;
    }
    /**
   * Returns whether a key is selected.
   */ isSelected(key) {
        if (this.state.selectionMode === 'none') return false;
        key = this.getKey(key);
        return this.state.selectedKeys === 'all' || this.state.selectedKeys.has(key);
    }
    /**
   * Whether the selection is empty.
   */ get isEmpty() {
        return this.state.selectedKeys !== 'all' && this.state.selectedKeys.size === 0;
    }
    /**
   * Whether all items in the collection are selected.
   */ get isSelectAll() {
        if (this.isEmpty) return false;
        if (this.state.selectedKeys === 'all') return true;
        if (this._isSelectAll != null) return this._isSelectAll;
        let allKeys = this.getSelectAllKeys();
        let selectedKeys = this.state.selectedKeys;
        this._isSelectAll = allKeys.every((k)=>selectedKeys.has(k)
        );
        return this._isSelectAll;
    }
    get firstSelectedKey() {
        var _first;
        let first = null;
        for (let key of this.state.selectedKeys){
            let item = this.collection.getItem(key);
            if (!first || (item == null ? void 0 : item.index) < first.index) first = item;
        }
        return (_first = first) == null ? void 0 : _first.key;
    }
    get lastSelectedKey() {
        var _last;
        let last = null;
        for (let key of this.state.selectedKeys){
            let item = this.collection.getItem(key);
            if (!last || (item == null ? void 0 : item.index) > last.index) last = item;
        }
        return (_last = last) == null ? void 0 : _last.key;
    }
    /**
   * Extends the selection to the given key.
   */ extendSelection(toKey) {
        toKey = this.getKey(toKey);
        let selection; // Only select the one key if coming from a select all.
        if (this.state.selectedKeys === 'all') selection = new $cc81f14158b02e1e259a5a46d24f0c$export$Selection([
            toKey
        ], toKey, toKey);
        else {
            let selectedKeys = this.state.selectedKeys;
            let anchorKey1 = selectedKeys.anchorKey || toKey;
            selection = new $cc81f14158b02e1e259a5a46d24f0c$export$Selection(selectedKeys, anchorKey1, toKey);
            for (let key of this.getKeyRange(anchorKey1, selectedKeys.currentKey || toKey))selection.delete(key);
            for (let key1 of this.getKeyRange(toKey, anchorKey1))if (!this.state.disabledKeys.has(key1)) selection.add(key1);
        }
        this.state.setSelectedKeys(selection);
    }
    getKeyRange(from, to) {
        let fromItem = this.collection.getItem(from);
        let toItem = this.collection.getItem(to);
        if (fromItem && toItem) {
            if (fromItem.index <= toItem.index) return this.getKeyRangeInternal(from, to);
            return this.getKeyRangeInternal(to, from);
        }
        return [];
    }
    getKeyRangeInternal(from, to) {
        let keys1 = [];
        let key = from;
        while(key){
            let item = this.collection.getItem(key);
            if (item && item.type === 'item' || item.type === 'cell' && this.allowsCellSelection) keys1.push(key);
            if (key === to) return keys1;
            key = this.collection.getKeyAfter(key);
        }
        return [];
    }
    getKey(key) {
        let item = this.collection.getItem(key);
        if (!item) // ¯\_(ツ)_/¯
        return key;
         // If cell selection is allowed, just return the key.
        if (item.type === 'cell' && this.allowsCellSelection) return key;
         // Find a parent item to select
        while(item.type !== 'item' && item.parentKey)item = this.collection.getItem(item.parentKey);
        if (!item || item.type !== 'item') return null;
        return item.key;
    }
    /**
   * Toggles whether the given key is selected.
   */ toggleSelection(key) {
        key = this.getKey(key);
        if (key == null) return;
        let keys1 = new $cc81f14158b02e1e259a5a46d24f0c$export$Selection(this.state.selectedKeys === 'all' ? this.getSelectAllKeys() : this.state.selectedKeys);
        if (keys1.has(key)) keys1.delete(key); // TODO: move anchor to last selected key...
        else {
            keys1.add(key);
            keys1.anchorKey = key;
            keys1.currentKey = key;
        }
        this.state.setSelectedKeys(keys1);
    }
    /**
   * Replaces the selection with only the given key.
   */ replaceSelection(key) {
        key = this.getKey(key);
        if (key == null) return;
        this.state.setSelectedKeys(new $cc81f14158b02e1e259a5a46d24f0c$export$Selection([
            key
        ], key, key));
    }
    /**
   * Replaces the selection with the given keys.
   */ setSelectedKeys(keys) {
        if (this.selectionMode === 'none') return;
        let selection = new $cc81f14158b02e1e259a5a46d24f0c$export$Selection();
        for (let key of keys){
            key = this.getKey(key);
            if (key != null) {
                selection.add(key);
                if (this.selectionMode === 'single') break;
            }
        }
        this.state.setSelectedKeys(selection);
    }
    getSelectAllKeys() {
        let keys2 = [];
        let addKeys = (key)=>{
            while(key){
                if (!this.state.disabledKeys.has(key)) {
                    let item = this.collection.getItem(key);
                    if (item.type === 'item') keys2.push(key);
                     // Add child keys. If cell selection is allowed, then include item children too.
                    if (item.hasChildNodes && (this.allowsCellSelection || item.type !== 'item')) addKeys([
                        ...item.childNodes
                    ][0].key);
                }
                key = this.collection.getKeyAfter(key);
            }
        };
        addKeys(this.collection.getFirstKey());
        return keys2;
    }
    /**
   * Selects all items in the collection.
   */ selectAll() {
        if (this.selectionMode === 'multiple') this.state.setSelectedKeys('all');
    }
    /**
   * Removes all keys from the selection.
   */ clearSelection() {
        if (this.state.selectedKeys === 'all' || this.state.selectedKeys.size > 0) this.state.setSelectedKeys(new $cc81f14158b02e1e259a5a46d24f0c$export$Selection());
    }
    /**
   * Toggles between select all and an empty selection.
   */ toggleSelectAll() {
        if (this.isSelectAll) this.clearSelection();
        else this.selectAll();
    }
    select(key, e) {
        if (this.selectionMode === 'none') return;
        if (this.selectionMode === 'single') {
            if (this.isSelected(key) && !this.disallowEmptySelection) this.toggleSelection(key);
            else this.replaceSelection(key);
        } else if (e && e.shiftKey) this.extendSelection(key);
        else this.toggleSelection(key);
    }
    /**
   * Returns whether the current selection is equal to the given selection.
   */ isSelectionEqual(selection) {
        if (selection === this.state.selectedKeys) return true;
         // Check if the set of keys match.
        let selectedKeys = this.selectedKeys;
        if (selection.size !== selectedKeys.size) return false;
        for (let key of selection){
            if (!selectedKeys.has(key)) return false;
        }
        for (let key1 of selectedKeys){
            if (!selection.has(key1)) return false;
        }
        return true;
    }
}
exports.SelectionManager = SelectionManager;

},{"@react-stately/utils":"7ILZk","react":"a6qBW"}],"6D0yE":[function(require,module,exports) {
var { useTreeState  } = require("@react-stately/tree");
var { useSeparator  } = require("@react-aria/separator");
var { Text: Text1  } = require("@react-spectrum/text");
var { mergeProps , useSyncRef  } = require("@react-aria/utils");
var { Grid  } = require("@react-spectrum/layout");
var _spectrumIconsUiCheckmarkMedium = $parcel$interopDefault(require("@spectrum-icons/ui/CheckmarkMedium"));
var { useMenuTriggerState  } = require("@react-stately/menu");
var { useMenuTrigger , useMenuItem , useMenuSection , useMenu  } = require("@react-aria/menu");
var { PressResponder , useHover  } = require("@react-aria/interactions");
var { Popover , Tray  } = require("@react-spectrum/overlays");
var _react2 = require("react");
var _react = $parcel$interopDefault(_react2);
var { useContext , forwardRef , Fragment , useRef  } = _react2;
var { FocusScope , FocusRing  } = require("@react-aria/focus");
var { DismissButton , useOverlayPosition  } = require("@react-aria/overlays");
var { classNames , unwrapDOMRef , useDOMRef , useIsMobileDevice , useStyleProps , SlotProvider  } = require("@react-spectrum/utils");
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
var { Item , Section  } = require("@react-stately/collections");
exports.Section = Section;
exports.Item = Item;
require("./main.css");
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
const $edd9ab002cde8b9b98bf7ac7e2372c8e$export$MenuContext = /*#__PURE__*/ _react.createContext({
});
function $edd9ab002cde8b9b98bf7ac7e2372c8e$export$useMenuContext() {
    return useContext($edd9ab002cde8b9b98bf7ac7e2372c8e$export$MenuContext);
}
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/menu/vars.css
var $bfbcd6bc836614813c70085787fd$exports = {
};
$bfbcd6bc836614813c70085787fd$exports = {
    "spectrum-Menu-popover": "_spectrum-Menu-popover_7c360",
    "spectrum-Menu": "_spectrum-Menu_7c360",
    "spectrum-Menu-sectionHeading": "_spectrum-Menu-sectionHeading_7c360",
    "spectrum-Menu-checkmark": "_spectrum-Menu-checkmark_7c360",
    "spectrum-Menu-item": "_spectrum-Menu-item_7c360",
    "is-selected": "_is-selected_7c360",
    "spectrum-Icon": "_spectrum-Icon_7c360",
    "spectrum-Menu-itemLabel": "_spectrum-Menu-itemLabel_7c360",
    "spectrum-Menu-itemIcon": "_spectrum-Menu-itemIcon_7c360",
    "spectrum-Menu-itemLabel--wrapping": "_spectrum-Menu-itemLabel--wrapping_7c360",
    "spectrum-Menu-divider": "_spectrum-Menu-divider_7c360",
    "spectrum-Menu-itemGrid": "_spectrum-Menu-itemGrid_7c360",
    "is-selectable": "_is-selectable_7c360",
    "spectrum-Menu-end": "_spectrum-Menu-end_7c360",
    "spectrum-Menu-icon": "_spectrum-Menu-icon_7c360",
    "spectrum-Menu-description": "_spectrum-Menu-description_7c360",
    "spectrum-Menu-keyboard": "_spectrum-Menu-keyboard_7c360",
    "focus-ring": "_focus-ring_7c360",
    "is-focused": "_is-focused_7c360",
    "is-hovered": "_is-hovered_7c360",
    "is-highlighted": "_is-highlighted_7c360",
    "is-open": "_is-open_7c360",
    "is-active": "_is-active_7c360",
    "is-disabled": "_is-disabled_7c360"
};
var $bfbcd6bc836614813c70085787fd$$interop$default = $parcel$interopDefault($bfbcd6bc836614813c70085787fd$exports);
function $c4892d994b65f49f4dea95880128b38$var$MenuTrigger(props, ref) {
    let menuPopoverRef = useRef();
    let triggerRef = useRef();
    let domRef = useDOMRef(ref);
    let menuTriggerRef = domRef || triggerRef;
    let menuRef = useRef();
    let { children , align ='start' , shouldFlip =true , direction ='bottom' , closeOnSelect  } = props;
    let [menuTrigger, menu] = _react.Children.toArray(children);
    let state = useMenuTriggerState(props);
    let { menuTriggerProps , menuProps  } = useMenuTrigger({
    }, state, menuTriggerRef);
    let initialPlacement;
    switch(direction){
        case 'left':
        case 'right':
        case 'start':
        case 'end':
            initialPlacement = direction + " " + (align === 'end' ? 'bottom' : 'top');
            break;
        case 'bottom':
        case 'top':
        default:
            initialPlacement = direction + " " + align;
    }
    let isMobile = useIsMobileDevice();
    let { overlayProps: positionProps , placement  } = useOverlayPosition({
        targetRef: menuTriggerRef,
        overlayRef: unwrapDOMRef(menuPopoverRef),
        scrollRef: menuRef,
        placement: initialPlacement,
        shouldFlip: shouldFlip,
        isOpen: state.isOpen && !isMobile,
        onClose: state.close
    });
    let menuContext = _babelRuntimeHelpersExtends({
    }, menuProps, {
        ref: menuRef,
        onClose: state.close,
        closeOnSelect,
        autoFocus: state.focusStrategy || true,
        UNSAFE_style: isMobile ? {
            width: '100%',
            maxHeight: 'inherit'
        } : undefined,
        UNSAFE_className: classNames($bfbcd6bc836614813c70085787fd$$interop$default, {
            'spectrum-Menu-popover': !isMobile
        })
    });
    let contents = /*#__PURE__*/ _react.createElement(FocusScope, {
        restoreFocus: true
    }, /*#__PURE__*/ _react.createElement(DismissButton, {
        onDismiss: state.close
    }), menu, /*#__PURE__*/ _react.createElement(DismissButton, {
        onDismiss: state.close
    })); // On small screen devices, the menu is rendered in a tray, otherwise a popover.
    let overlay;
    if (isMobile) overlay = /*#__PURE__*/ _react.createElement(Tray, {
        isOpen: state.isOpen,
        onClose: state.close,
        shouldCloseOnBlur: true
    }, contents);
    else overlay = /*#__PURE__*/ _react.createElement(Popover, {
        isOpen: state.isOpen,
        UNSAFE_style: positionProps.style,
        ref: menuPopoverRef,
        placement: placement,
        hideArrow: true,
        onClose: state.close,
        shouldCloseOnBlur: true
    }, contents);
    return(/*#__PURE__*/ _react.createElement(Fragment, null, /*#__PURE__*/ _react.createElement(PressResponder, _babelRuntimeHelpersExtends({
    }, menuTriggerProps, {
        ref: menuTriggerRef,
        isPressed: state.isOpen
    }), menuTrigger), /*#__PURE__*/ _react.createElement($edd9ab002cde8b9b98bf7ac7e2372c8e$export$MenuContext.Provider, {
        value: menuContext
    }, overlay)));
}
/**
 * The MenuTrigger serves as a wrapper around a Menu and its associated trigger,
 * linking the Menu's open state with the trigger's press state.
 */ let MenuTrigger = /*#__PURE__*/ forwardRef($c4892d994b65f49f4dea95880128b38$var$MenuTrigger);
exports.MenuTrigger = MenuTrigger;
/** @private */ function $c7f2f7472da9591348da844617ffa5d9$export$MenuItem(props) {
    let { item , state , isVirtualized , onAction  } = props;
    let { onClose , closeOnSelect  } = $edd9ab002cde8b9b98bf7ac7e2372c8e$export$useMenuContext();
    let { rendered , key  } = item;
    let isSelected = state.selectionManager.isSelected(key);
    let isDisabled = state.disabledKeys.has(key);
    let ref = useRef();
    let { menuItemProps , labelProps , descriptionProps , keyboardShortcutProps  } = useMenuItem({
        isSelected,
        isDisabled,
        'aria-label': item['aria-label'],
        key,
        onClose,
        closeOnSelect,
        isVirtualized,
        onAction
    }, state, ref);
    let { hoverProps , isHovered  } = useHover({
        isDisabled
    });
    let contents = typeof rendered === 'string' ? /*#__PURE__*/ _react.createElement(Text1, null, rendered) : rendered;
    return(/*#__PURE__*/ _react.createElement(FocusRing, {
        focusRingClass: classNames($bfbcd6bc836614813c70085787fd$$interop$default, 'focus-ring')
    }, /*#__PURE__*/ _react.createElement("li", _babelRuntimeHelpersExtends({
    }, mergeProps(menuItemProps, hoverProps), {
        ref: ref,
        className: classNames($bfbcd6bc836614813c70085787fd$$interop$default, 'spectrum-Menu-item', {
            'is-disabled': isDisabled,
            'is-selected': isSelected,
            'is-selectable': state.selectionManager.selectionMode !== 'none',
            'is-hovered': isHovered
        })
    }), /*#__PURE__*/ _react.createElement(Grid, {
        UNSAFE_className: classNames($bfbcd6bc836614813c70085787fd$$interop$default, 'spectrum-Menu-itemGrid')
    }, /*#__PURE__*/ _react.createElement(SlotProvider, {
        slots: {
            text: _babelRuntimeHelpersExtends({
                UNSAFE_className: $bfbcd6bc836614813c70085787fd$$interop$default['spectrum-Menu-itemLabel']
            }, labelProps),
            end: _babelRuntimeHelpersExtends({
                UNSAFE_className: $bfbcd6bc836614813c70085787fd$$interop$default['spectrum-Menu-end']
            }, descriptionProps),
            icon: {
                UNSAFE_className: $bfbcd6bc836614813c70085787fd$$interop$default['spectrum-Menu-icon'],
                size: 'S'
            },
            description: _babelRuntimeHelpersExtends({
                UNSAFE_className: $bfbcd6bc836614813c70085787fd$$interop$default['spectrum-Menu-description']
            }, descriptionProps),
            keyboard: _babelRuntimeHelpersExtends({
                UNSAFE_className: $bfbcd6bc836614813c70085787fd$$interop$default['spectrum-Menu-keyboard']
            }, keyboardShortcutProps)
        }
    }, contents, isSelected && /*#__PURE__*/ _react.createElement(_spectrumIconsUiCheckmarkMedium, {
        slot: "checkmark",
        UNSAFE_className: classNames($bfbcd6bc836614813c70085787fd$$interop$default, 'spectrum-Menu-checkmark')
    }))))));
}
/** @private */ function $c0ff64d7a4e982f233f34aa6c4a1bc$export$MenuSection(props) {
    let { item , state , onAction  } = props;
    let { itemProps , headingProps , groupProps  } = useMenuSection({
        heading: item.rendered,
        'aria-label': item['aria-label']
    });
    let { separatorProps  } = useSeparator({
        elementType: 'li'
    });
    return(/*#__PURE__*/ _react.createElement(Fragment, null, item.key !== state.collection.getFirstKey() && /*#__PURE__*/ _react.createElement("li", _babelRuntimeHelpersExtends({
    }, separatorProps, {
        className: classNames($bfbcd6bc836614813c70085787fd$$interop$default, 'spectrum-Menu-divider')
    })), /*#__PURE__*/ _react.createElement("li", itemProps, item.rendered && /*#__PURE__*/ _react.createElement("span", _babelRuntimeHelpersExtends({
    }, headingProps, {
        className: classNames($bfbcd6bc836614813c70085787fd$$interop$default, 'spectrum-Menu-sectionHeading')
    }), item.rendered), /*#__PURE__*/ _react.createElement("ul", _babelRuntimeHelpersExtends({
    }, groupProps, {
        className: classNames($bfbcd6bc836614813c70085787fd$$interop$default, 'spectrum-Menu')
    }), [
        ...item.childNodes
    ].map((node)=>{
        let item1 = /*#__PURE__*/ _react.createElement($c7f2f7472da9591348da844617ffa5d9$export$MenuItem, {
            key: node.key,
            item: node,
            state: state,
            onAction: onAction
        });
        if (node.wrapper) item1 = node.wrapper(item1);
        return item1;
    })))));
}
function $be3a5c916828e33faf8ffa30483fbe6$var$Menu(props, ref) {
    let contextProps = useContext($edd9ab002cde8b9b98bf7ac7e2372c8e$export$MenuContext);
    let completeProps = _babelRuntimeHelpersExtends({
    }, mergeProps(contextProps, props));
    let domRef = useDOMRef(ref);
    let state = useTreeState(completeProps);
    let { menuProps  } = useMenu(completeProps, state, domRef);
    let { styleProps  } = useStyleProps(completeProps);
    useSyncRef(contextProps, domRef);
    return(/*#__PURE__*/ _react.createElement("ul", _babelRuntimeHelpersExtends({
    }, menuProps, styleProps, {
        ref: domRef,
        className: classNames($bfbcd6bc836614813c70085787fd$$interop$default, 'spectrum-Menu', styleProps.className)
    }), [
        ...state.collection
    ].map((item)=>{
        if (item.type === 'section') return(/*#__PURE__*/ _react.createElement($c0ff64d7a4e982f233f34aa6c4a1bc$export$MenuSection, {
            key: item.key,
            item: item,
            state: state,
            onAction: completeProps.onAction
        }));
        let menuItem = /*#__PURE__*/ _react.createElement($c7f2f7472da9591348da844617ffa5d9$export$MenuItem, {
            key: item.key,
            item: item,
            state: state,
            onAction: completeProps.onAction
        });
        if (item.wrapper) menuItem = item.wrapper(menuItem);
        return menuItem;
    })));
}
/**
 * Menus display a list of actions or options that a user can choose.
 */ // forwardRef doesn't support generic parameters, so cast the result to the correct type
// https://stackoverflow.com/questions/58469229/react-with-typescript-generics-while-using-react-forwardref
const Menu = /*#__PURE__*/ _react.forwardRef($be3a5c916828e33faf8ffa30483fbe6$var$Menu);
exports.Menu = Menu;

},{"@react-stately/tree":"h8PWh","@react-aria/separator":"1gzBL","@react-spectrum/text":"ib5WK","@react-aria/utils":"d8qxy","@react-spectrum/layout":"5dHqK","@spectrum-icons/ui/CheckmarkMedium":"6ue5E","@react-stately/menu":"3UPRC","@react-aria/menu":"MJnSy","@react-aria/interactions":"3irYN","@react-spectrum/overlays":"4hImP","react":"a6qBW","@react-aria/focus":"76fMY","@react-aria/overlays":"6I1ei","@react-spectrum/utils":"7ch5A","@babel/runtime/helpers/extends":"5xz6u","@react-stately/collections":"4IPbJ","./main.css":"6RLiY"}],"h8PWh":[function(require,module,exports) {
var { useControlledState  } = require("@react-stately/utils");
var { useCollection  } = require("@react-stately/collections");
var { SelectionManager , useMultipleSelectionState  } = require("@react-stately/selection");
var { useEffect , useMemo  } = require("react");
let $f4c7caecb598119f63e2918a55ec91a9$var$_Symbol$iterator;
$f4c7caecb598119f63e2918a55ec91a9$var$_Symbol$iterator = Symbol.iterator;
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ class $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
    constructor(nodes, _temp){
        var _last;
        let { expandedKeys  } = _temp === void 0 ? {
        } : _temp;
        this.keyMap = new Map();
        this.iterable = void 0;
        this.firstKey = void 0;
        this.lastKey = void 0;
        this.iterable = nodes;
        expandedKeys = expandedKeys || new Set();
        let visit = (node)=>{
            this.keyMap.set(node.key, node);
            if (node.childNodes && (node.type === 'section' || expandedKeys.has(node.key))) for (let child of node.childNodes)visit(child);
        };
        for (let node of nodes)visit(node);
        let last;
        let index = 0;
        for (let [key1, node1] of this.keyMap){
            if (last) {
                last.nextKey = key1;
                node1.prevKey = last.key;
            } else {
                this.firstKey = key1;
                node1.prevKey = undefined;
            }
            if (node1.type === 'item') node1.index = index++;
            last = node1; // Set nextKey as undefined since this might be the last node
            // If it isn't the last node, last.nextKey will properly set at start of new loop
            last.nextKey = undefined;
        }
        this.lastKey = (_last = last) == null ? void 0 : _last.key;
    }
    *[$f4c7caecb598119f63e2918a55ec91a9$var$_Symbol$iterator]() {
        yield* this.iterable;
    }
    get size() {
        return this.keyMap.size;
    }
    getKeys() {
        return this.keyMap.keys();
    }
    getKeyBefore(key) {
        let node2 = this.keyMap.get(key);
        return node2 ? node2.prevKey : null;
    }
    getKeyAfter(key) {
        let node2 = this.keyMap.get(key);
        return node2 ? node2.nextKey : null;
    }
    getFirstKey() {
        return this.firstKey;
    }
    getLastKey() {
        return this.lastKey;
    }
    getItem(key) {
        return this.keyMap.get(key);
    }
}
/**
 * Provides state management for tree-like components. Handles building a collection
 * of items from props, item expanded state, and manages multiple selection state.
 */ function useTreeState(props) {
    let [expandedKeys1, setExpandedKeys] = useControlledState(props.expandedKeys ? new Set(props.expandedKeys) : undefined, props.defaultExpandedKeys ? new Set(props.defaultExpandedKeys) : new Set(), props.onExpandedChange);
    let selectionState = useMultipleSelectionState(props);
    let disabledKeys = useMemo(()=>props.disabledKeys ? new Set(props.disabledKeys) : new Set()
    , [
        props.disabledKeys
    ]);
    let tree = useCollection(props, (nodes1)=>new $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection(nodes1, {
            expandedKeys: expandedKeys1
        })
    , null, [
        expandedKeys1
    ]); // Reset focused key if that item is deleted from the collection.
    useEffect(()=>{
        if (selectionState.focusedKey != null && !tree.getItem(selectionState.focusedKey)) selectionState.setFocusedKey(null);
    }, [
        tree,
        selectionState.focusedKey
    ]);
    let onToggle = (key2)=>{
        setExpandedKeys((expandedKeys2)=>$f01b8043d944d5f04fffbeb1df9fd6cb$var$toggleKey(expandedKeys2, key2)
        );
    };
    return {
        collection: tree,
        expandedKeys: expandedKeys1,
        disabledKeys,
        toggleKey: onToggle,
        selectionManager: new SelectionManager(tree, selectionState)
    };
}
exports.useTreeState = useTreeState;
function $f01b8043d944d5f04fffbeb1df9fd6cb$var$toggleKey(set, key2) {
    let res = new Set(set);
    if (res.has(key2)) res.delete(key2);
    else res.add(key2);
    return res;
}

},{"@react-stately/utils":"7ILZk","@react-stately/collections":"4IPbJ","@react-stately/selection":"7esLB","react":"a6qBW"}],"1gzBL":[function(require,module,exports) {
var { filterDOMProps  } = require("@react-aria/utils");
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
/**
 * Provides the accessibility implementation for a separator.
 * A separator is a visual divider between two groups of content,
 * e.g. groups of menu items or sections of a page.
 */ function useSeparator(props) {
    let domProps = filterDOMProps(props, {
        labelable: true
    });
    let ariaOrientation; // if orientation is horizontal, aria-orientation default is horizontal, so we leave it undefined
    // if it's vertical, we need to specify it
    if (props.orientation === 'vertical') ariaOrientation = 'vertical';
     // hr elements implicitly have role = separator and a horizontal orientation
    if (props.elementType !== 'hr') return {
        separatorProps: _babelRuntimeHelpersExtends({
        }, domProps, {
            role: 'separator',
            'aria-orientation': ariaOrientation
        })
    };
    return {
        separatorProps: domProps
    };
}
exports.useSeparator = useSeparator;

},{"@react-aria/utils":"d8qxy","@babel/runtime/helpers/extends":"5xz6u"}],"5dHqK":[function(require,module,exports) {
var { useIsSSR  } = require("@react-aria/ssr");
var _react2 = require("react");
var _react = $parcel$interopDefault(_react2);
var { forwardRef  } = _react2;
var { filterDOMProps  } = require("@react-aria/utils");
var { baseStyleProps , dimensionValue , passthroughStyle , useDOMRef , useStyleProps , classNames , responsiveDimensionValue , useBreakpoint  } = require("@react-spectrum/utils");
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
var _babelRuntimeHelpersObjectWithoutPropertiesLoose = $parcel$interopDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
require("./main.css");
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
const $f784fbb881b5b101cd7607722a86$var$gridStyleProps = _babelRuntimeHelpersExtends({
}, baseStyleProps, {
    autoFlow: [
        'gridAutoFlow',
        passthroughStyle
    ],
    autoColumns: [
        'gridAutoColumns',
        $f784fbb881b5b101cd7607722a86$var$gridDimensionValue
    ],
    autoRows: [
        'gridAutoRows',
        $f784fbb881b5b101cd7607722a86$var$gridDimensionValue
    ],
    areas: [
        'gridTemplateAreas',
        $f784fbb881b5b101cd7607722a86$var$gridTemplateAreasValue
    ],
    columns: [
        'gridTemplateColumns',
        $f784fbb881b5b101cd7607722a86$var$gridTemplateValue
    ],
    rows: [
        'gridTemplateRows',
        $f784fbb881b5b101cd7607722a86$var$gridTemplateValue
    ],
    gap: [
        'gap',
        dimensionValue
    ],
    rowGap: [
        'rowGap',
        dimensionValue
    ],
    columnGap: [
        'columnGap',
        dimensionValue
    ],
    justifyItems: [
        'justifyItems',
        passthroughStyle
    ],
    justifyContent: [
        'justifyContent',
        passthroughStyle
    ],
    alignItems: [
        'alignItems',
        passthroughStyle
    ],
    alignContent: [
        'alignContent',
        passthroughStyle
    ]
});
function $f784fbb881b5b101cd7607722a86$var$Grid(props, ref) {
    let { children  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "children"
    ]);
    let { styleProps  } = useStyleProps(otherProps, $f784fbb881b5b101cd7607722a86$var$gridStyleProps);
    styleProps.style.display = 'grid'; // inline-grid?
    let domRef = useDOMRef(ref);
    return(/*#__PURE__*/ _react.createElement("div", _babelRuntimeHelpersExtends({
    }, filterDOMProps(otherProps), styleProps, {
        ref: domRef
    }), children));
}
/**
 * Can be used to make a repeating fragment of the columns or rows list.
 * See [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/repeat).
 * @param count - The number of times to repeat the fragment.
 * @param repeat - The fragment to repeat.
 */ function repeat(count, repeat1) {
    return "repeat(" + count + ", " + $f784fbb881b5b101cd7607722a86$var$gridTemplateValue(repeat1) + ")";
}
/**
 * Defines a size range greater than or equal to min and less than or equal to max.
 * See [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/minmax).
 * @param min - The minimum size.
 * @param max - The maximum size.
 */ exports.repeat = repeat;
function minmax(min, max) {
    return "minmax(" + $f784fbb881b5b101cd7607722a86$var$gridDimensionValue(min) + ", " + $f784fbb881b5b101cd7607722a86$var$gridDimensionValue(max) + ")";
}
/**
 * Clamps a given size to an available size.
 * See [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/fit-content).
 * @param dimension - The size to clamp.
 */ exports.minmax = minmax;
function fitContent(dimension) {
    return "fit-content(" + $f784fbb881b5b101cd7607722a86$var$gridDimensionValue(dimension) + ")";
}
exports.fitContent = fitContent;
function $f784fbb881b5b101cd7607722a86$var$gridTemplateAreasValue(value) {
    return value.map((v)=>"\"" + v + "\""
    ).join('\n');
}
function $f784fbb881b5b101cd7607722a86$var$gridDimensionValue(value) {
    if (/^max-content|min-content|minmax|auto|fit-content|repeat|subgrid/.test(value)) return value;
    return dimensionValue(value);
}
function $f784fbb881b5b101cd7607722a86$var$gridTemplateValue(value) {
    if (Array.isArray(value)) return value.map($f784fbb881b5b101cd7607722a86$var$gridDimensionValue).join(' ');
    return $f784fbb881b5b101cd7607722a86$var$gridDimensionValue(value);
}
/**
 * A layout container using CSS grid. Supports Spectrum dimensions as values to
 * ensure consistent and adaptive sizing and spacing.
 */ const Grid = /*#__PURE__*/ forwardRef($f784fbb881b5b101cd7607722a86$var$Grid);
exports.Grid = Grid;
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/layout/src/flex-gap.css
var $fc072772828195097956358aadf4fa$exports = {
};
$fc072772828195097956358aadf4fa$exports = {
    "flex-container": "_flex-container_ffbb7",
    "-ms-flex": "_flex_ffbb7",
    "flex": "_flex_ffbb7",
    "flex-gap": "_flex-gap_ffbb7"
};
const $e9098d18abf2a118bc3bc95f0d402bb5$var$flexStyleProps = {
    direction: [
        'flexDirection',
        passthroughStyle
    ],
    wrap: [
        'flexWrap',
        $e9098d18abf2a118bc3bc95f0d402bb5$var$flexWrapValue
    ],
    justifyContent: [
        'justifyContent',
        $e9098d18abf2a118bc3bc95f0d402bb5$var$flexAlignValue
    ],
    alignItems: [
        'alignItems',
        $e9098d18abf2a118bc3bc95f0d402bb5$var$flexAlignValue
    ],
    alignContent: [
        'alignContent',
        $e9098d18abf2a118bc3bc95f0d402bb5$var$flexAlignValue
    ]
};
var $fc072772828195097956358aadf4fa$$interop$default = $parcel$interopDefault($fc072772828195097956358aadf4fa$exports);
function $e9098d18abf2a118bc3bc95f0d402bb5$var$Flex(props, ref) {
    let { children  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "children"
    ]);
    let breakpointProvider = useBreakpoint();
    let matchedBreakpoints = (breakpointProvider == null ? void 0 : breakpointProvider.matchedBreakpoints) || [
        'base'
    ];
    let { styleProps  } = useStyleProps(otherProps);
    let { styleProps: flexStyle  } = useStyleProps(otherProps, $e9098d18abf2a118bc3bc95f0d402bb5$var$flexStyleProps);
    let domRef = useDOMRef(ref);
    let isSSR = useIsSSR(); // If a gap property is specified, and there is no native support or we're in SSR, use a shim.
    // Two divs are required for this: the outer one contains most style properties, and the inner
    // one is the flex container. Each item inside the flex container gets a margin around it based
    // on the gap, and the flex container has a negative margin to counteract this. The outer container
    // is necessary to allow nesting of flex containers with gaps, so that the inner CSS variable doesn't
    // override the outer one.
    if ((props.gap || props.rowGap || props.columnGap) && (isSSR || !$e9098d18abf2a118bc3bc95f0d402bb5$var$isFlexGapSupported())) {
        let style = _babelRuntimeHelpersExtends({
        }, flexStyle.style, {
            '--column-gap': props.columnGap != null ? responsiveDimensionValue(props.columnGap, matchedBreakpoints) : undefined,
            '--row-gap': props.rowGap != null ? responsiveDimensionValue(props.rowGap, matchedBreakpoints) : undefined,
            '--gap': props.gap != null ? responsiveDimensionValue(props.gap, matchedBreakpoints) : undefined
        });
        return(/*#__PURE__*/ _react.createElement("div", _babelRuntimeHelpersExtends({
        }, filterDOMProps(otherProps), styleProps, {
            className: classNames($fc072772828195097956358aadf4fa$$interop$default, 'flex-container', styleProps.className),
            ref: domRef
        }), /*#__PURE__*/ _react.createElement("div", {
            className: classNames($fc072772828195097956358aadf4fa$$interop$default, 'flex', 'flex-gap'),
            style: style
        }, children)));
    } // If no gaps, or native support exists, then we only need to render a single div.
    let style = _babelRuntimeHelpersExtends({
    }, styleProps.style, flexStyle.style);
    if (props.gap != null) style.gap = responsiveDimensionValue(props.gap, matchedBreakpoints);
    if (props.columnGap != null) style.columnGap = responsiveDimensionValue(props.columnGap, matchedBreakpoints);
    if (props.rowGap != null) style.rowGap = responsiveDimensionValue(props.rowGap, matchedBreakpoints);
    return(/*#__PURE__*/ _react.createElement("div", _babelRuntimeHelpersExtends({
    }, filterDOMProps(otherProps), {
        className: classNames($fc072772828195097956358aadf4fa$$interop$default, 'flex', styleProps.className),
        style: style,
        ref: domRef
    }), children));
}
/**
 * Normalize 'start' and 'end' alignment values to 'flex-start' and 'flex-end'
 * in flex containers for browser compatibility.
 */ function $e9098d18abf2a118bc3bc95f0d402bb5$var$flexAlignValue(value) {
    if (value === 'start') return 'flex-start';
    if (value === 'end') return 'flex-end';
    return value;
}
/**
 * Takes a boolean and translates it to flex wrap or nowrap.
 */ function $e9098d18abf2a118bc3bc95f0d402bb5$var$flexWrapValue(value) {
    if (typeof value === 'boolean') return value ? 'wrap' : 'nowrap';
    return value;
} // Original licensing for the following method can be found in the
// NOTICE file in the root directory of this source tree.
// See https://github.com/Modernizr/Modernizr/blob/7efb9d0edd66815fb115fdce95fabaf019ce8db5/feature-detects/css/flexgap.js
let $e9098d18abf2a118bc3bc95f0d402bb5$var$_isFlexGapSupported = null;
function $e9098d18abf2a118bc3bc95f0d402bb5$var$isFlexGapSupported() {
    if ($e9098d18abf2a118bc3bc95f0d402bb5$var$_isFlexGapSupported != null) return $e9098d18abf2a118bc3bc95f0d402bb5$var$_isFlexGapSupported;
    if (typeof document === 'undefined') return false;
     // create flex container with row-gap set
    var flex = document.createElement('div');
    flex.style.display = 'flex';
    flex.style.flexDirection = 'column';
    flex.style.rowGap = '1px'; // create two, elements inside it
    flex.appendChild(document.createElement('div'));
    flex.appendChild(document.createElement('div')); // append to the DOM (needed to obtain scrollHeight)
    document.body.appendChild(flex);
    $e9098d18abf2a118bc3bc95f0d402bb5$var$_isFlexGapSupported = flex.scrollHeight === 1; // flex container should be 1px high from the row-gap
    flex.parentNode.removeChild(flex);
    return $e9098d18abf2a118bc3bc95f0d402bb5$var$_isFlexGapSupported;
}
/**
 * A layout container using flexbox. Provides Spectrum dimension values, and supports the gap
 * property to define consistent spacing between items.
 */ const Flex = /*#__PURE__*/ forwardRef($e9098d18abf2a118bc3bc95f0d402bb5$var$Flex);
exports.Flex = Flex;

},{"@react-aria/ssr":"Pnsqr","react":"a6qBW","@react-aria/utils":"d8qxy","@react-spectrum/utils":"7ch5A","@babel/runtime/helpers/extends":"5xz6u","@babel/runtime/helpers/objectWithoutPropertiesLoose":"5byko","./main.css":"4uKtm"}],"4uKtm":[function() {},{}],"6ue5E":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = CheckmarkMedium;
var _CheckmarkMedium = require("@adobe/react-spectrum-ui/dist/CheckmarkMedium");
var _icon = require("@react-spectrum/icon");
var _react = _interopRequireDefault(require("react"));
function CheckmarkMedium(props) {
    return(/*#__PURE__*/ _react.default.createElement(_icon.UIIcon, props, /*#__PURE__*/ _react.default.createElement(_CheckmarkMedium.CheckmarkMedium, null)));
}

},{"@babel/runtime/helpers/interopRequireDefault":"5TvsK","@adobe/react-spectrum-ui/dist/CheckmarkMedium":"3xshW","@react-spectrum/icon":"5ij4g","react":"a6qBW"}],"3xshW":[function(require,module,exports) {
/**
* @adobe/react-spectrum-ui (c) by Adobe
* 
* @adobe/react-spectrum-ui is licensed under a
* Creative Commons Attribution-NoDerivatives 4.0 International License.
* 
* You should have received a copy of the license along with this
* work. If not, see <http://creativecommons.org/licenses/by-nd/4.0/>.
**/ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CheckmarkMedium = CheckmarkMedium;
var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutProperties(source, excluded) {
    if (source == null) return {
    };
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function CheckmarkMedium(_ref) {
    var _ref$scale = _ref.scale, scale = _ref$scale === void 0 ? 'M' : _ref$scale, props = _objectWithoutProperties(_ref, [
        "scale"
    ]);
    return _react["default"].createElement("svg", _extends({
    }, props, props), scale === 'L' && _react["default"].createElement("path", {
        d: "M6 14a1 1 0 0 1-.789-.385l-4-5a1 1 0 1 1 1.577-1.23L6 11.376l7.213-8.99a1 1 0 1 1 1.576 1.23l-8 10a1 1 0 0 1-.789.384z"
    }), scale === 'M' && _react["default"].createElement("path", {
        d: "M4.5 10a1.022 1.022 0 0 1-.799-.384l-2.488-3a1 1 0 0 1 1.576-1.233L4.5 7.376l4.712-5.991a1 1 0 1 1 1.576 1.23l-5.51 7A.978.978 0 0 1 4.5 10z"
    }));
}
CheckmarkMedium.displayName = 'CheckmarkMedium';

},{"react":"a6qBW"}],"3UPRC":[function(require,module,exports) {
var { useState  } = require("react");
var { useOverlayTriggerState  } = require("@react-stately/overlays");
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
/**
 * Manages state for a menu trigger. Tracks whether the menu is currently open,
 * and controls which item will receive focus when it opens.
 */ function useMenuTriggerState(props) {
    let overlayTriggerState = useOverlayTriggerState(props);
    let [focusStrategy1, setFocusStrategy] = useState(null);
    return _babelRuntimeHelpersExtends({
        focusStrategy: focusStrategy1
    }, overlayTriggerState, {
        open (focusStrategy) {
            if (focusStrategy === void 0) focusStrategy = null;
            setFocusStrategy(focusStrategy);
            overlayTriggerState.open();
        },
        toggle (focusStrategy) {
            if (focusStrategy === void 0) focusStrategy = null;
            setFocusStrategy(focusStrategy);
            overlayTriggerState.toggle();
        }
    });
}
exports.useMenuTriggerState = useMenuTriggerState;

},{"react":"a6qBW","@react-stately/overlays":"XwYBm","@babel/runtime/helpers/extends":"5xz6u"}],"MJnSy":[function(require,module,exports) {
var { isFocusVisible , useHover , usePress  } = require("@react-aria/interactions");
var { getItemCount  } = require("@react-stately/collections");
var { useSelectableList , useSelectableItem  } = require("@react-aria/selection");
var _babelRuntimeHelpersObjectWithoutPropertiesLoose = $parcel$interopDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var { useOverlayTrigger  } = require("@react-aria/overlays");
var { useId , filterDOMProps , mergeProps , useSlotId  } = require("@react-aria/utils");
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
/**
 * Provides the behavior and accessibility implementation for a menu trigger.
 * @param props - Props for the menu trigger.
 * @param state - State for the menu trigger.
 */ function useMenuTrigger(props, state, ref) {
    let { type ='menu' , isDisabled  } = props;
    let menuTriggerId = useId();
    let { triggerProps , overlayProps  } = useOverlayTrigger({
        type
    }, state, ref);
    let onKeyDown = (e)=>{
        if (typeof e.isDefaultPrevented === 'function' && e.isDefaultPrevented() || e.defaultPrevented || isDisabled) return;
        if (ref && ref.current) switch(e.key){
            case 'ArrowDown':
            case 'Enter':
            case ' ':
                e.preventDefault();
                e.stopPropagation();
                state.toggle('first');
                break;
            case 'ArrowUp':
                e.preventDefault();
                e.stopPropagation();
                state.toggle('last');
                break;
        }
    };
    return {
        menuTriggerProps: _babelRuntimeHelpersExtends({
        }, triggerProps, {
            id: menuTriggerId,
            onPressStart (e) {
                // For consistency with native, open the menu on mouse/key down, but touch up.
                if (e.pointerType !== 'touch' && e.pointerType !== 'keyboard') // If opened with a screen reader, auto focus the first item.
                // Otherwise, the menu itself will be focused.
                state.toggle(e.pointerType === 'virtual' ? 'first' : null);
            },
            onPress (e) {
                if (e.pointerType === 'touch') state.toggle();
            },
            onKeyDown
        }),
        menuProps: _babelRuntimeHelpersExtends({
        }, overlayProps, {
            'aria-labelledby': menuTriggerId
        })
    };
}
exports.useMenuTrigger = useMenuTrigger;
/**
 * Provides the behavior and accessibility implementation for a menu component.
 * A menu displays a list of actions or options that a user can choose.
 * @param props - Props for the menu.
 * @param state - State for the menu, as returned by `useListState`.
 */ function useMenu(props, state, ref) {
    let { shouldFocusWrap =true  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "shouldFocusWrap"
    ]);
    if (!props['aria-label'] && !props['aria-labelledby']) console.warn('An aria-label or aria-labelledby prop is required for accessibility.');
    let domProps = filterDOMProps(props, {
        labelable: true
    });
    let { listProps  } = useSelectableList(_babelRuntimeHelpersExtends({
    }, otherProps, {
        ref,
        selectionManager: state.selectionManager,
        collection: state.collection,
        disabledKeys: state.disabledKeys,
        shouldFocusWrap
    }));
    return {
        menuProps: mergeProps(domProps, _babelRuntimeHelpersExtends({
            role: 'menu'
        }, listProps))
    };
}
exports.useMenu = useMenu;
/**
 * Provides the behavior and accessibility implementation for an item in a menu.
 * See `useMenu` for more details about menus.
 * @param props - Props for the item.
 * @param state - State for the menu, as returned by `useTreeState`.
 */ function useMenuItem(props, state, ref) {
    let { isSelected , isDisabled , key , onClose , closeOnSelect , isVirtualized , onAction  } = props;
    let role = 'menuitem';
    if (state.selectionManager.selectionMode === 'single') role = 'menuitemradio';
    else if (state.selectionManager.selectionMode === 'multiple') role = 'menuitemcheckbox';
    let labelId = useSlotId();
    let descriptionId = useSlotId();
    let keyboardId = useSlotId();
    let ariaProps = {
        'aria-disabled': isDisabled,
        role,
        'aria-label': props['aria-label'],
        'aria-labelledby': labelId,
        'aria-describedby': [
            descriptionId,
            keyboardId
        ].filter(Boolean).join(' ') || undefined
    };
    if (state.selectionManager.selectionMode !== 'none') ariaProps['aria-checked'] = isSelected;
    if (isVirtualized) {
        ariaProps['aria-posinset'] = state.collection.getItem(key).index;
        ariaProps['aria-setsize'] = getItemCount(state.collection);
    }
    let onKeyDown = (e)=>{
        // Ignore repeating events, which may have started on the menu trigger before moving
        // focus to the menu item. We want to wait for a second complete key press sequence.
        if (e.repeat) return;
        switch(e.key){
            case ' ':
                if (!isDisabled && state.selectionManager.selectionMode === 'none' && closeOnSelect !== false && onClose) onClose();
                break;
            case 'Enter':
                // The Enter key should always close on select, except if overridden.
                if (!isDisabled && closeOnSelect !== false && onClose) onClose();
                break;
        }
    };
    let onPressStart = (e)=>{
        if (e.pointerType === 'keyboard' && onAction) onAction(key);
    };
    let onPressUp = (e)=>{
        if (e.pointerType !== 'keyboard') {
            if (onAction) onAction(key);
             // Pressing a menu item should close by default in single selection mode but not multiple
            // selection mode, except if overridden by the closeOnSelect prop.
            if (onClose && (closeOnSelect != null ? closeOnSelect : state.selectionManager.selectionMode !== 'multiple')) onClose();
        }
    };
    let { itemProps  } = useSelectableItem({
        selectionManager: state.selectionManager,
        key,
        ref,
        shouldSelectOnPressUp: true
    });
    let { pressProps  } = usePress(mergeProps({
        onPressStart,
        onPressUp,
        onKeyDown,
        isDisabled
    }, itemProps));
    let { hoverProps  } = useHover({
        isDisabled,
        onHoverStart () {
            if (!isFocusVisible()) {
                state.selectionManager.setFocused(true);
                state.selectionManager.setFocusedKey(key);
            }
        }
    });
    return {
        menuItemProps: _babelRuntimeHelpersExtends({
        }, ariaProps, mergeProps(pressProps, hoverProps)),
        labelProps: {
            id: labelId
        },
        descriptionProps: {
            id: descriptionId
        },
        keyboardShortcutProps: {
            id: keyboardId
        }
    };
}
exports.useMenuItem = useMenuItem;
/**
 * Provides the behavior and accessibility implementation for a section in a menu.
 * See `useMenu` for more details about menus.
 * @param props - Props for the section.
 */ function useMenuSection(props) {
    let { heading , 'aria-label': ariaLabel  } = props;
    let headingId = useId();
    return {
        itemProps: {
            role: 'presentation'
        },
        headingProps: heading ? {
            // Techincally, menus cannot contain headings according to ARIA.
            // We hide the heading from assistive technology, and only use it
            // as a label for the nested group.
            id: headingId,
            'aria-hidden': true
        } : {
        },
        groupProps: {
            role: 'group',
            'aria-label': ariaLabel,
            'aria-labelledby': heading ? headingId : undefined
        }
    };
}
exports.useMenuSection = useMenuSection;

},{"@react-aria/interactions":"3irYN","@react-stately/collections":"4IPbJ","@react-aria/selection":"3khS7","@babel/runtime/helpers/objectWithoutPropertiesLoose":"5byko","@react-aria/overlays":"6I1ei","@react-aria/utils":"d8qxy","@babel/runtime/helpers/extends":"5xz6u"}],"3khS7":[function(require,module,exports) {
var { useLocale , useCollator  } = require("@react-aria/i18n");
var { focusWithoutScrolling , isMac , mergeProps  } = require("@react-aria/utils");
var { focusSafely , getFocusableTreeWalker  } = require("@react-aria/focus");
var { useEffect , useRef , useMemo  } = require("react");
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
/**
 * Handles typeahead interactions with collections.
 */ function useTypeSelect(options) {
    let { keyboardDelegate , selectionManager , onTypeSelect  } = options;
    let state = useRef({
        search: '',
        timeout: null
    }).current;
    let onKeyDown = (e)=>{
        let character = $c2e740eb44846c887b3b88306c61$var$getStringForKey(e.key);
        if (!character || e.ctrlKey || e.metaKey) return;
         // Do not propagate the Spacebar event if it's meant to be part of the search.
        // When we time out, the search term becomes empty, hence the check on length.
        // Trimming is to account for the case of pressing the Spacebar more than once,
        // which should cycle through the selection/deselection of the focused item.
        if (character === ' ' && state.search.trim().length > 0) {
            e.preventDefault();
            if (!('continuePropagation' in e)) e.stopPropagation();
        }
        state.search += character; // Use the delegate to find a key to focus.
        // Prioritize items after the currently focused item, falling back to searching the whole list.
        let key = keyboardDelegate.getKeyForSearch(state.search, selectionManager.focusedKey); // If no key found, search from the top.
        if (key == null) key = keyboardDelegate.getKeyForSearch(state.search);
        if (key != null) {
            selectionManager.setFocusedKey(key);
            if (onTypeSelect) onTypeSelect(key);
        }
        clearTimeout(state.timeout);
        state.timeout = setTimeout(()=>{
            state.search = '';
        }, 500);
    };
    return {
        typeSelectProps: {
            // Using a capturing listener to catch the keydown event before
            // other hooks in order to handle the Spacebar event.
            onKeyDownCapture: keyboardDelegate.getKeyForSearch ? onKeyDown : null
        }
    };
}
exports.useTypeSelect = useTypeSelect;
function $c2e740eb44846c887b3b88306c61$var$getStringForKey(key) {
    // If the key is of length 1, it is an ASCII value.
    // Otherwise, if there are no ASCII characters in the key name,
    // it is a Unicode character.
    // See https://www.w3.org/TR/uievents-key/
    if (key.length === 1 || !/^[A-Z]/i.test(key)) return key;
    return '';
}
function $f791fefd7189e0e4d903034fb2925$var$isCtrlKeyPressed(e) {
    if (isMac()) return e.metaKey;
    return e.ctrlKey;
}
/**
 * Handles interactions with selectable collections.
 */ function useSelectableCollection(options) {
    let { selectionManager: manager , keyboardDelegate: delegate , ref , autoFocus =false , shouldFocusWrap =false , disallowEmptySelection =false , disallowSelectAll =false , selectOnFocus =false , disallowTypeAhead =false , shouldUseVirtualFocus , allowsTabNavigation =false  } = options;
    let { direction  } = useLocale();
    let onKeyDown = (e)=>{
        // Let child element (e.g. menu button) handle the event if the Alt key is pressed.
        // Keyboard events bubble through portals. Don't handle keyboard events
        // for elements outside the collection (e.g. menus).
        if (e.altKey || !ref.current.contains(e.target)) return;
        const navigateToKey = (key, childFocus)=>{
            if (key != null) {
                manager.setFocusedKey(key, childFocus);
                if (e.shiftKey && manager.selectionMode === 'multiple') manager.extendSelection(key);
                else if (selectOnFocus) manager.replaceSelection(key);
            }
        };
        switch(e.key){
            case 'ArrowDown':
                if (delegate.getKeyBelow) {
                    e.preventDefault();
                    let nextKey = manager.focusedKey != null ? delegate.getKeyBelow(manager.focusedKey) : delegate.getFirstKey == null ? void 0 : delegate.getFirstKey();
                    if (nextKey == null && shouldFocusWrap) nextKey = delegate.getFirstKey == null ? void 0 : delegate.getFirstKey(manager.focusedKey);
                    navigateToKey(nextKey);
                }
                break;
            case 'ArrowUp':
                if (delegate.getKeyAbove) {
                    e.preventDefault();
                    let nextKey = manager.focusedKey != null ? delegate.getKeyAbove(manager.focusedKey) : delegate.getLastKey == null ? void 0 : delegate.getLastKey();
                    if (nextKey == null && shouldFocusWrap) nextKey = delegate.getLastKey == null ? void 0 : delegate.getLastKey(manager.focusedKey);
                    navigateToKey(nextKey);
                }
                break;
            case 'ArrowLeft':
                if (delegate.getKeyLeftOf) {
                    e.preventDefault();
                    let nextKey = delegate.getKeyLeftOf(manager.focusedKey);
                    navigateToKey(nextKey, direction === 'rtl' ? 'first' : 'last');
                }
                break;
            case 'ArrowRight':
                if (delegate.getKeyRightOf) {
                    e.preventDefault();
                    let nextKey = delegate.getKeyRightOf(manager.focusedKey);
                    navigateToKey(nextKey, direction === 'rtl' ? 'last' : 'first');
                }
                break;
            case 'Home':
                if (delegate.getFirstKey) {
                    e.preventDefault();
                    let firstKey = delegate.getFirstKey(manager.focusedKey, $f791fefd7189e0e4d903034fb2925$var$isCtrlKeyPressed(e));
                    manager.setFocusedKey(firstKey);
                    if ($f791fefd7189e0e4d903034fb2925$var$isCtrlKeyPressed(e) && e.shiftKey && manager.selectionMode === 'multiple') manager.extendSelection(firstKey);
                    else if (selectOnFocus) manager.replaceSelection(firstKey);
                }
                break;
            case 'End':
                if (delegate.getLastKey) {
                    e.preventDefault();
                    let lastKey = delegate.getLastKey(manager.focusedKey, $f791fefd7189e0e4d903034fb2925$var$isCtrlKeyPressed(e));
                    manager.setFocusedKey(lastKey);
                    if ($f791fefd7189e0e4d903034fb2925$var$isCtrlKeyPressed(e) && e.shiftKey && manager.selectionMode === 'multiple') manager.extendSelection(lastKey);
                    else if (selectOnFocus) manager.replaceSelection(lastKey);
                }
                break;
            case 'PageDown':
                if (delegate.getKeyPageBelow) {
                    e.preventDefault();
                    let nextKey = delegate.getKeyPageBelow(manager.focusedKey);
                    navigateToKey(nextKey);
                }
                break;
            case 'PageUp':
                if (delegate.getKeyPageAbove) {
                    e.preventDefault();
                    let nextKey = delegate.getKeyPageAbove(manager.focusedKey);
                    navigateToKey(nextKey);
                }
                break;
            case 'a':
                if ($f791fefd7189e0e4d903034fb2925$var$isCtrlKeyPressed(e) && manager.selectionMode === 'multiple' && disallowSelectAll !== true) {
                    e.preventDefault();
                    manager.selectAll();
                }
                break;
            case 'Escape':
                e.preventDefault();
                if (!disallowEmptySelection) manager.clearSelection();
                break;
            case 'Tab':
                if (!allowsTabNavigation) {
                    // There may be elements that are "tabbable" inside a collection (e.g. in a grid cell).
                    // However, collections should be treated as a single tab stop, with arrow key navigation internally.
                    // We don't control the rendering of these, so we can't override the tabIndex to prevent tabbing.
                    // Instead, we handle the Tab key, and move focus manually to the first/last tabbable element
                    // in the collection, so that the browser default behavior will apply starting from that element
                    // rather than the currently focused one.
                    if (e.shiftKey) ref.current.focus();
                    else {
                        let walker = getFocusableTreeWalker(ref.current, {
                            tabbable: true
                        });
                        let next;
                        let last;
                        do {
                            last = walker.lastChild();
                            if (last) next = last;
                        }while (last)
                        if (next && !next.contains(document.activeElement)) focusWithoutScrolling(next);
                    }
                    break;
                }
        }
    };
    let onFocus = (e)=>{
        if (manager.isFocused) {
            // If a focus event bubbled through a portal, reset focus state.
            if (!e.currentTarget.contains(e.target)) manager.setFocused(false);
            return;
        } // Focus events can bubble through portals. Ignore these events.
        if (!e.currentTarget.contains(e.target)) return;
        manager.setFocused(true);
        if (manager.focusedKey == null) {
            // If the user hasn't yet interacted with the collection, there will be no focusedKey set.
            // Attempt to detect whether the user is tabbing forward or backward into the collection
            // and either focus the first or last item accordingly.
            let relatedTarget = e.relatedTarget;
            if (relatedTarget && e.currentTarget.compareDocumentPosition(relatedTarget) & Node.DOCUMENT_POSITION_FOLLOWING) {
                var _manager$lastSelected;
                manager.setFocusedKey((_manager$lastSelected = manager.lastSelectedKey) != null ? _manager$lastSelected : delegate.getLastKey());
            } else {
                var _manager$firstSelecte;
                manager.setFocusedKey((_manager$firstSelecte = manager.firstSelectedKey) != null ? _manager$firstSelecte : delegate.getFirstKey());
            }
        }
    };
    let onBlur = (e)=>{
        // Don't set blurred and then focused again if moving focus within the collection.
        if (!e.currentTarget.contains(e.relatedTarget)) manager.setFocused(false);
    };
    useEffect(()=>{
        if (autoFocus) {
            let focusedKey = null; // Check focus strategy to determine which item to focus
            if (autoFocus === 'first') focusedKey = delegate.getFirstKey();
            if (autoFocus === 'last') focusedKey = delegate.getLastKey();
             // If there are any selected keys, make the first one the new focus target
            let selectedKeys = manager.selectedKeys;
            if (selectedKeys.size) focusedKey = selectedKeys.values().next().value;
            manager.setFocused(true);
            manager.setFocusedKey(focusedKey); // If no default focus key is selected, focus the collection itself.
            if (focusedKey == null && !shouldUseVirtualFocus) focusSafely(ref.current);
        } // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    let handlers = {
        onKeyDown,
        onFocus,
        onBlur,
        onMouseDown (e) {
            // Ignore events that bubbled through portals.
            if (e.currentTarget.contains(e.target)) // Prevent focus going to the collection when clicking on the scrollbar.
            e.preventDefault();
        }
    };
    let { typeSelectProps  } = useTypeSelect({
        keyboardDelegate: delegate,
        selectionManager: manager
    });
    if (!disallowTypeAhead) handlers = mergeProps(typeSelectProps, handlers);
     // If nothing is focused within the collection, make the collection itself tabbable.
    // This will be marshalled to either the first or last item depending on where focus came from.
    // If using virtual focus, don't set a tabIndex at all so that VoiceOver on iOS 14 doesn't try
    // to move real DOM focus to the element anyway.
    let tabIndex;
    if (!shouldUseVirtualFocus) tabIndex = manager.focusedKey == null ? 0 : -1;
    return {
        collectionProps: _babelRuntimeHelpersExtends({
        }, handlers, {
            tabIndex
        })
    };
}
exports.useSelectableCollection = useSelectableCollection;
/**
 * Handles interactions with an item in a selectable collection.
 */ function useSelectableItem(options) {
    let { selectionManager: manager , key , ref , shouldSelectOnPressUp , isVirtualized , shouldUseVirtualFocus , focus  } = options;
    let onSelect = (e)=>manager.select(key, e)
    ; // Focus the associated DOM node when this item becomes the focusedKey
    let isFocused = key === manager.focusedKey;
    useEffect(()=>{
        if (isFocused && manager.isFocused && !shouldUseVirtualFocus && document.activeElement !== ref.current) {
            if (focus) focus();
            else focusSafely(ref.current);
        }
    }, [
        ref,
        isFocused,
        manager.focusedKey,
        manager.childFocusStrategy,
        manager.isFocused,
        shouldUseVirtualFocus
    ]); // Set tabIndex to 0 if the element is focused, or -1 otherwise so that only the last focused
    // item is tabbable.  If using virtual focus, don't set a tabIndex at all so that VoiceOver
    // on iOS 14 doesn't try to move real DOM focus to the item anyway.
    let itemProps = {
    };
    if (!shouldUseVirtualFocus) itemProps = {
        tabIndex: isFocused ? 0 : -1,
        onFocus (e) {
            if (e.target === ref.current) manager.setFocusedKey(key);
        }
    };
     // By default, selection occurs on pointer down. This can be strange if selecting an
    // item causes the UI to disappear immediately (e.g. menus).
    // If shouldSelectOnPressUp is true, we use onPressUp instead of onPressStart.
    // onPress requires a pointer down event on the same element as pointer up. For menus,
    // we want to be able to have the pointer down on the trigger that opens the menu and
    // the pointer up on the menu item rather than requiring a separate press.
    // For keyboard events, selection still occurs on key down.
    if (shouldSelectOnPressUp) {
        itemProps.onPressStart = (e)=>{
            if (e.pointerType === 'keyboard') onSelect(e);
        };
        itemProps.onPressUp = (e)=>{
            if (e.pointerType !== 'keyboard') onSelect(e);
        };
    } else {
        // On touch, it feels strange to select on touch down, so we special case this.
        itemProps.onPressStart = (e)=>{
            if (e.pointerType !== 'touch') onSelect(e);
        };
        itemProps.onPress = (e)=>{
            if (e.pointerType === 'touch') onSelect(e);
        };
    }
    if (!isVirtualized) itemProps['data-key'] = key;
    return {
        itemProps
    };
}
exports.useSelectableItem = useSelectableItem;
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ class ListKeyboardDelegate {
    constructor(collection, disabledKeys, ref, collator){
        this.collection = void 0;
        this.disabledKeys = void 0;
        this.ref = void 0;
        this.collator = void 0;
        this.collection = collection;
        this.disabledKeys = disabledKeys;
        this.ref = ref;
        this.collator = collator;
    }
    getKeyBelow(key) {
        key = this.collection.getKeyAfter(key);
        while(key != null){
            let item = this.collection.getItem(key);
            if (item.type === 'item' && !this.disabledKeys.has(key)) return key;
            key = this.collection.getKeyAfter(key);
        }
    }
    getKeyAbove(key) {
        key = this.collection.getKeyBefore(key);
        while(key != null){
            let item = this.collection.getItem(key);
            if (item.type === 'item' && !this.disabledKeys.has(key)) return key;
            key = this.collection.getKeyBefore(key);
        }
    }
    getFirstKey() {
        let key = this.collection.getFirstKey();
        while(key != null){
            let item = this.collection.getItem(key);
            if (item.type === 'item' && !this.disabledKeys.has(key)) return key;
            key = this.collection.getKeyAfter(key);
        }
    }
    getLastKey() {
        let key = this.collection.getLastKey();
        while(key != null){
            let item = this.collection.getItem(key);
            if (item.type === 'item' && !this.disabledKeys.has(key)) return key;
            key = this.collection.getKeyBefore(key);
        }
    }
    getItem(key) {
        return this.ref.current.querySelector("[data-key=\"" + key + "\"]");
    }
    getKeyPageAbove(key) {
        let menu = this.ref.current;
        let item = this.getItem(key);
        if (!item) return null;
        let pageY = Math.max(0, item.offsetTop + item.offsetHeight - menu.offsetHeight);
        while(item && item.offsetTop > pageY){
            key = this.getKeyAbove(key);
            item = this.getItem(key);
        }
        return key;
    }
    getKeyPageBelow(key) {
        let menu = this.ref.current;
        let item = this.getItem(key);
        if (!item) return null;
        let pageY = Math.min(menu.scrollHeight, item.offsetTop - item.offsetHeight + menu.offsetHeight);
        while(item && item.offsetTop < pageY){
            key = this.getKeyBelow(key);
            item = this.getItem(key);
        }
        return key;
    }
    getKeyForSearch(search, fromKey) {
        if (!this.collator) return null;
        let collection1 = this.collection;
        let key = fromKey || this.getFirstKey();
        while(key != null){
            let item = collection1.getItem(key);
            let substring = item.textValue.slice(0, search.length);
            if (item.textValue && this.collator.compare(substring, search) === 0) return key;
            key = this.getKeyBelow(key);
        }
        return null;
    }
}
exports.ListKeyboardDelegate = ListKeyboardDelegate;
/**
 * Handles interactions with a selectable list.
 */ function useSelectableList(props) {
    let { selectionManager , collection: collection1 , disabledKeys: disabledKeys1 , ref: ref1 , keyboardDelegate , autoFocus , shouldFocusWrap , isVirtualized , disallowEmptySelection , selectOnFocus =false , disallowTypeAhead , shouldUseVirtualFocus , allowsTabNavigation  } = props; // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).
    // When virtualized, the layout object will be passed in as a prop and override this.
    let collator1 = useCollator({
        usage: 'search',
        sensitivity: 'base'
    });
    let delegate = useMemo(()=>keyboardDelegate || new ListKeyboardDelegate(collection1, disabledKeys1, ref1, collator1)
    , [
        keyboardDelegate,
        collection1,
        disabledKeys1,
        ref1,
        collator1
    ]); // If not virtualized, scroll the focused element into view when the focusedKey changes.
    // When virtualized, Virtualizer handles this internally.
    useEffect(()=>{
        if (!isVirtualized && selectionManager.focusedKey && ref1 != null && ref1.current) {
            let element = ref1.current.querySelector("[data-key=\"" + selectionManager.focusedKey + "\"]");
            if (element) $e85d8307c59fae2ab45d73201aa19$var$scrollIntoView(ref1.current, element);
        }
    }, [
        isVirtualized,
        ref1,
        selectionManager.focusedKey
    ]);
    let { collectionProps  } = useSelectableCollection({
        ref: ref1,
        selectionManager,
        keyboardDelegate: delegate,
        autoFocus,
        shouldFocusWrap,
        disallowEmptySelection,
        selectOnFocus,
        disallowTypeAhead,
        shouldUseVirtualFocus,
        allowsTabNavigation
    });
    return {
        listProps: collectionProps
    };
}
/**
 * Scrolls `scrollView` so that `element` is visible.
 * Similar to `element.scrollIntoView({block: 'nearest'})` (not supported in Edge),
 * but doesn't affect parents above `scrollView`.
 */ exports.useSelectableList = useSelectableList;
function $e85d8307c59fae2ab45d73201aa19$var$scrollIntoView(scrollView, element) {
    let offsetX = $e85d8307c59fae2ab45d73201aa19$var$relativeOffset(scrollView, element, 'left');
    let offsetY = $e85d8307c59fae2ab45d73201aa19$var$relativeOffset(scrollView, element, 'top');
    let width = element.offsetWidth;
    let height = element.offsetHeight;
    let x = scrollView.scrollLeft;
    let y = scrollView.scrollTop;
    let maxX = x + scrollView.offsetWidth;
    let maxY = y + scrollView.offsetHeight;
    if (offsetX <= x) x = offsetX;
    else if (offsetX + width > maxX) x += offsetX + width - maxX;
    if (offsetY <= y) y = offsetY;
    else if (offsetY + height > maxY) y += offsetY + height - maxY;
    scrollView.scrollLeft = x;
    scrollView.scrollTop = y;
}
/**
 * Computes the offset left or top from child to ancestor by accumulating
 * offsetLeft or offsetTop through intervening offsetParents.
 */ function $e85d8307c59fae2ab45d73201aa19$var$relativeOffset(ancestor, child, axis) {
    const prop = axis === 'left' ? 'offsetLeft' : 'offsetTop';
    let sum = 0;
    while(child.offsetParent){
        sum += child[prop];
        if (child.offsetParent === ancestor) break;
        else if (child.offsetParent.contains(ancestor)) {
            // If the ancestor is not `position:relative`, then we stop at 
            // _its_ offset parent, and we subtract off _its_ offset, so that
            // we end up with the proper offset from child to ancestor.
            sum -= ancestor[prop];
            break;
        }
        child = child.offsetParent;
    }
    return sum;
}

},{"@react-aria/i18n":"6xZcx","@react-aria/utils":"d8qxy","@react-aria/focus":"76fMY","react":"a6qBW","@babel/runtime/helpers/extends":"5xz6u"}],"6RLiY":[function() {},{}],"2d2IG":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = ChevronDownMedium;
var _ChevronDownMedium = require("@adobe/react-spectrum-ui/dist/ChevronDownMedium");
var _icon = require("@react-spectrum/icon");
var _react = _interopRequireDefault(require("react"));
function ChevronDownMedium(props) {
    return(/*#__PURE__*/ _react.default.createElement(_icon.UIIcon, props, /*#__PURE__*/ _react.default.createElement(_ChevronDownMedium.ChevronDownMedium, null)));
}

},{"@babel/runtime/helpers/interopRequireDefault":"5TvsK","@adobe/react-spectrum-ui/dist/ChevronDownMedium":"3VpKk","@react-spectrum/icon":"5ij4g","react":"a6qBW"}],"3VpKk":[function(require,module,exports) {
/**
* @adobe/react-spectrum-ui (c) by Adobe
* 
* @adobe/react-spectrum-ui is licensed under a
* Creative Commons Attribution-NoDerivatives 4.0 International License.
* 
* You should have received a copy of the license along with this
* work. If not, see <http://creativecommons.org/licenses/by-nd/4.0/>.
**/ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ChevronDownMedium = ChevronDownMedium;
var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutProperties(source, excluded) {
    if (source == null) return {
    };
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function ChevronDownMedium(_ref) {
    var _ref$scale = _ref.scale, scale = _ref$scale === void 0 ? 'M' : _ref$scale, props = _objectWithoutProperties(_ref, [
        "scale"
    ]);
    return _react["default"].createElement("svg", _extends({
    }, props, props), scale === 'L' && _react["default"].createElement("path", {
        d: "M11.99 1.51a1 1 0 0 0-1.707-.707L6 5.086 1.717.803A1 1 0 1 0 .303 2.217l4.99 4.99a1 1 0 0 0 1.414 0l4.99-4.99a.997.997 0 0 0 .293-.707z"
    }), scale === 'M' && _react["default"].createElement("path", {
        d: "M9.99 1.01A1 1 0 0 0 8.283.303L5 3.586 1.717.303A1 1 0 1 0 .303 1.717l3.99 3.98a1 1 0 0 0 1.414 0l3.99-3.98a.997.997 0 0 0 .293-.707z"
    }));
}
ChevronDownMedium.displayName = 'ChevronDownMedium';

},{"react":"a6qBW"}],"7zChe":[function(require,module,exports) {
var { useToggleState  } = require("@react-stately/toggle");
var _spectrumIconsUiCrossSmall = $parcel$interopDefault(require("@spectrum-icons/ui/CrossSmall"));
var { useProviderProps  } = require("@react-spectrum/provider");
var { useHover  } = require("@react-aria/interactions");
var { useButton , useToggleButton  } = require("@react-aria/button");
var { Text: Text1  } = require("@react-spectrum/text");
var _react = $parcel$interopDefault(require("react"));
var { mergeProps  } = require("@react-aria/utils");
var { FocusRing  } = require("@react-aria/focus");
var { classNames , SlotProvider , useFocusableRef , useSlotProps , useStyleProps  } = require("@react-spectrum/utils");
var _babelRuntimeHelpersObjectWithoutPropertiesLoose = $parcel$interopDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
require("./main.css");
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/button/vars.css
var $a9040831959d0ed42473e9713dd4b23$exports = {
};
$a9040831959d0ed42473e9713dd4b23$exports = {
    "spectrum-Button": "_spectrum-Button_7a745",
    "spectrum-ActionButton": "_spectrum-ActionButton_7a745",
    "spectrum-LogicButton": "_spectrum-LogicButton_7a745",
    "spectrum-FieldButton": "_spectrum-FieldButton_7a745",
    "spectrum-ClearButton": "_spectrum-ClearButton_7a745",
    "focus-ring": "_focus-ring_7a745",
    "spectrum-Icon": "_spectrum-Icon_7a745",
    "spectrum-ActionButton--emphasized": "_spectrum-ActionButton--emphasized_7a745",
    "spectrum-ActionButton--staticColor": "_spectrum-ActionButton--staticColor_7a745",
    "is-hovered": "_is-hovered_7a745",
    "spectrum-Button-label": "_spectrum-Button-label_7a745",
    "spectrum-ActionButton-label": "_spectrum-ActionButton-label_7a745",
    "spectrum-ActionButton-hold": "_spectrum-ActionButton-hold_7a745",
    "spectrum-ActionButton--quiet": "_spectrum-ActionButton--quiet_7a745",
    "is-disabled": "_is-disabled_7a745",
    "is-open": "_is-open_7a745",
    "spectrum-FieldButton--quiet": "_spectrum-FieldButton--quiet_7a745",
    "spectrum-ClearButton--overBackground": "_spectrum-ClearButton--overBackground_7a745",
    "spectrum-ClearButton--small": "_spectrum-ClearButton--small_7a745",
    "is-focused": "_is-focused_7a745",
    "is-active": "_is-active_7a745",
    "spectrum-Button--cta": "_spectrum-Button--cta_7a745",
    "spectrum-Button--primary": "_spectrum-Button--primary_7a745",
    "spectrum-Button--secondary": "_spectrum-Button--secondary_7a745",
    "spectrum-Button--warning": "_spectrum-Button--warning_7a745",
    "spectrum-Button--overBackground": "_spectrum-Button--overBackground_7a745",
    "spectrum-Button--quiet": "_spectrum-Button--quiet_7a745",
    "is-selected": "_is-selected_7a745",
    "spectrum-ActionButton--staticWhite": "_spectrum-ActionButton--staticWhite_7a745",
    "spectrum-ActionButton--staticBlack": "_spectrum-ActionButton--staticBlack_7a745",
    "spectrum-LogicButton--and": "_spectrum-LogicButton--and_7a745",
    "spectrum-LogicButton--or": "_spectrum-LogicButton--or_7a745",
    "is-placeholder": "_is-placeholder_7a745",
    "spectrum-FieldButton--invalid": "_spectrum-FieldButton--invalid_7a745"
};
// todo: CSS hasn't caught up yet, map
let $ead2ca032915257adf53f639d99d1a73$var$VARIANT_MAPPING = {
    negative: 'warning'
};
var $a9040831959d0ed42473e9713dd4b23$$interop$default = $parcel$interopDefault($a9040831959d0ed42473e9713dd4b23$exports);
function $ead2ca032915257adf53f639d99d1a73$var$Button(props, ref) {
    props = useProviderProps(props);
    props = useSlotProps(props, 'button');
    let { elementType: ElementType = 'button' , children , variant , isQuiet , isDisabled , autoFocus  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "elementType",
        "children",
        "variant",
        "isQuiet",
        "isDisabled",
        "autoFocus"
    ]);
    let domRef = useFocusableRef(ref);
    let { buttonProps , isPressed  } = useButton(props, domRef);
    let { hoverProps , isHovered  } = useHover({
        isDisabled
    });
    let { styleProps  } = useStyleProps(otherProps);
    let buttonVariant = variant;
    if ($ead2ca032915257adf53f639d99d1a73$var$VARIANT_MAPPING[variant]) buttonVariant = $ead2ca032915257adf53f639d99d1a73$var$VARIANT_MAPPING[variant];
    return(/*#__PURE__*/ _react.createElement(FocusRing, {
        focusRingClass: classNames($a9040831959d0ed42473e9713dd4b23$$interop$default, 'focus-ring'),
        autoFocus: autoFocus
    }, /*#__PURE__*/ _react.createElement(ElementType, _babelRuntimeHelpersExtends({
    }, styleProps, mergeProps(buttonProps, hoverProps), {
        ref: domRef,
        className: classNames($a9040831959d0ed42473e9713dd4b23$$interop$default, 'spectrum-Button', "spectrum-Button--" + buttonVariant, {
            'spectrum-Button--quiet': isQuiet,
            'is-disabled': isDisabled,
            'is-active': isPressed,
            'is-hovered': isHovered
        }, styleProps.className)
    }), /*#__PURE__*/ _react.createElement(SlotProvider, {
        slots: {
            icon: {
                size: 'S',
                UNSAFE_className: classNames($a9040831959d0ed42473e9713dd4b23$$interop$default, 'spectrum-Icon')
            },
            text: {
                UNSAFE_className: classNames($a9040831959d0ed42473e9713dd4b23$$interop$default, 'spectrum-Button-label')
            }
        }
    }, typeof children === 'string' ? /*#__PURE__*/ _react.createElement(Text1, null, children) : children))));
}
/**
 * Buttons allow users to perform an action or to navigate to another page.
 * They have multiple styles for various needs, and are ideal for calling attention to
 * where a user needs to do something in order to move forward in a flow.
 */ let Button = /*#__PURE__*/ _react.forwardRef($ead2ca032915257adf53f639d99d1a73$var$Button);
exports.Button = Button;
function $f3063a10f4b2c05148061fca201b$var$ActionButton(props, ref) {
    props = useProviderProps(props);
    let { isQuiet , isDisabled , staticColor , children , autoFocus  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "isQuiet",
        "isDisabled",
        "staticColor",
        "children",
        "autoFocus"
    ]);
    let domRef = useFocusableRef(ref);
    let { buttonProps , isPressed  } = useButton(props, domRef);
    let { hoverProps , isHovered  } = useHover({
        isDisabled
    });
    let { styleProps  } = useStyleProps(otherProps);
    let isTextOnly = _react.Children.toArray(props.children).every((c)=>!/*#__PURE__*/ _react.isValidElement(c)
    );
    return(/*#__PURE__*/ _react.createElement(FocusRing, {
        focusRingClass: classNames($a9040831959d0ed42473e9713dd4b23$$interop$default, 'focus-ring'),
        autoFocus: autoFocus
    }, /*#__PURE__*/ _react.createElement("button", _babelRuntimeHelpersExtends({
    }, styleProps, mergeProps(buttonProps, hoverProps), {
        ref: domRef,
        className: classNames($a9040831959d0ed42473e9713dd4b23$$interop$default, 'spectrum-ActionButton', {
            'spectrum-ActionButton--quiet': isQuiet,
            'spectrum-ActionButton--staticColor': !!staticColor,
            'spectrum-ActionButton--staticWhite': staticColor === 'white',
            'spectrum-ActionButton--staticBlack': staticColor === 'black',
            'is-active': isPressed,
            'is-disabled': isDisabled,
            'is-hovered': isHovered
        }, styleProps.className)
    }), /*#__PURE__*/ _react.createElement(SlotProvider, {
        slots: {
            icon: {
                size: 'S',
                UNSAFE_className: classNames($a9040831959d0ed42473e9713dd4b23$$interop$default, 'spectrum-Icon')
            },
            text: {
                UNSAFE_className: classNames($a9040831959d0ed42473e9713dd4b23$$interop$default, 'spectrum-ActionButton-label')
            }
        }
    }, typeof children === 'string' || isTextOnly ? /*#__PURE__*/ _react.createElement(Text1, null, children) : children))));
}
/**
 * ActionButtons allow users to perform an action.
 * They’re used for similar, task-based options within a workflow, and are ideal for interfaces where buttons aren’t meant to draw a lot of attention.
 */ let ActionButton = /*#__PURE__*/ _react.forwardRef($f3063a10f4b2c05148061fca201b$var$ActionButton);
exports.ActionButton = ActionButton;
// @private
function $fee777d101ae103380e7aba8c00fbda$var$FieldButton(props, ref) {
    props = useSlotProps(props, 'button');
    let { isQuiet , isDisabled , validationState , children , autoFocus , isActive , focusRingClass  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "isQuiet",
        "isDisabled",
        "validationState",
        "children",
        "autoFocus",
        "isActive",
        "focusRingClass"
    ]);
    let domRef = useFocusableRef(ref);
    let { buttonProps , isPressed  } = useButton(props, domRef);
    let { hoverProps , isHovered  } = useHover({
        isDisabled
    });
    let { styleProps  } = useStyleProps(otherProps);
    return(/*#__PURE__*/ _react.createElement(FocusRing, {
        focusRingClass: classNames($a9040831959d0ed42473e9713dd4b23$$interop$default, 'focus-ring', focusRingClass),
        autoFocus: autoFocus
    }, /*#__PURE__*/ _react.createElement("button", _babelRuntimeHelpersExtends({
    }, mergeProps(buttonProps, hoverProps), {
        ref: domRef,
        className: classNames($a9040831959d0ed42473e9713dd4b23$$interop$default, 'spectrum-FieldButton', {
            'spectrum-FieldButton--quiet': isQuiet,
            'is-active': isActive || isPressed,
            'is-disabled': isDisabled,
            'spectrum-FieldButton--invalid': validationState === 'invalid',
            'is-hovered': isHovered
        }, styleProps.className)
    }), /*#__PURE__*/ _react.createElement(SlotProvider, {
        slots: {
            icon: {
                size: 'S',
                UNSAFE_className: classNames($a9040831959d0ed42473e9713dd4b23$$interop$default, 'spectrum-Icon')
            }
        }
    }, children))));
}
let FieldButton = /*#__PURE__*/ _react.forwardRef($fee777d101ae103380e7aba8c00fbda$var$FieldButton);
exports.FieldButton = FieldButton;
function $c1e922c08e26f540cc0b70e2998879f7$var$LogicButton(props, ref) {
    props = useProviderProps(props);
    let { variant , children , isDisabled , autoFocus  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "variant",
        "children",
        "isDisabled",
        "autoFocus"
    ]);
    let domRef = useFocusableRef(ref);
    let { buttonProps , isPressed  } = useButton(props, domRef);
    let { hoverProps , isHovered  } = useHover({
        isDisabled
    });
    let { styleProps  } = useStyleProps(otherProps);
    return(/*#__PURE__*/ _react.createElement(FocusRing, {
        focusRingClass: classNames($a9040831959d0ed42473e9713dd4b23$$interop$default, 'focus-ring'),
        autoFocus: autoFocus
    }, /*#__PURE__*/ _react.createElement("button", _babelRuntimeHelpersExtends({
    }, styleProps, mergeProps(buttonProps, hoverProps), {
        ref: domRef,
        className: classNames($a9040831959d0ed42473e9713dd4b23$$interop$default, 'spectrum-LogicButton', {
            ["spectrum-LogicButton--" + variant]: variant,
            'is-disabled': isDisabled,
            'is-active': isPressed,
            'is-hovered': isHovered
        }, styleProps.className)
    }), /*#__PURE__*/ _react.createElement("span", {
        className: classNames($a9040831959d0ed42473e9713dd4b23$$interop$default, 'spectrum-Button-label')
    }, children))));
}
/**
 * A LogicButton displays an operator within a boolean logic sequence.
 */ let LogicButton = /*#__PURE__*/ _react.forwardRef($c1e922c08e26f540cc0b70e2998879f7$var$LogicButton);
exports.LogicButton = LogicButton;
function $da329d9cf39ae507e223a144e84f29$var$ClearButton(props, ref) {
    let { children =/*#__PURE__*/ _react.createElement(_spectrumIconsUiCrossSmall, {
        UNSAFE_className: $a9040831959d0ed42473e9713dd4b23$$interop$default['spectrum-Icon']
    }) , focusClassName , variant , autoFocus , isDisabled , preventFocus , elementType =preventFocus ? 'div' : 'button'  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "children",
        "focusClassName",
        "variant",
        "autoFocus",
        "isDisabled",
        "preventFocus",
        "elementType"
    ]);
    let domRef = useFocusableRef(ref);
    let { buttonProps , isPressed  } = useButton(_babelRuntimeHelpersExtends({
    }, props, {
        elementType
    }), domRef);
    let { hoverProps , isHovered  } = useHover({
        isDisabled
    });
    let { styleProps  } = useStyleProps(otherProps); // For cases like the clear button in a search field, remove the tabIndex so
    // iOS 14 with VoiceOver doesn't focus the button and hide the keyboard when
    // moving the cursor over the clear button.
    if (preventFocus) delete buttonProps.tabIndex;
    let ElementType = elementType;
    return(/*#__PURE__*/ _react.createElement(FocusRing, {
        focusRingClass: classNames($a9040831959d0ed42473e9713dd4b23$$interop$default, 'focus-ring', focusClassName),
        autoFocus: autoFocus
    }, /*#__PURE__*/ _react.createElement(ElementType, _babelRuntimeHelpersExtends({
    }, styleProps, mergeProps(buttonProps, hoverProps), {
        ref: domRef,
        className: classNames($a9040831959d0ed42473e9713dd4b23$$interop$default, 'spectrum-ClearButton', {
            ["spectrum-ClearButton--" + variant]: variant,
            'is-disabled': isDisabled,
            'is-active': isPressed,
            'is-hovered': isHovered
        }, styleProps.className)
    }), children)));
}
let ClearButton = /*#__PURE__*/ _react.forwardRef($da329d9cf39ae507e223a144e84f29$var$ClearButton);
exports.ClearButton = ClearButton;
function $cafbdaa4815cfddd8f7335990626f4$var$ToggleButton(props, ref) {
    props = useProviderProps(props);
    let { isQuiet , isDisabled , isEmphasized , staticColor , children , autoFocus  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "isQuiet",
        "isDisabled",
        "isEmphasized",
        "staticColor",
        "children",
        "autoFocus"
    ]);
    let domRef = useFocusableRef(ref);
    let state = useToggleState(props);
    let { buttonProps , isPressed  } = useToggleButton(props, state, domRef);
    let { hoverProps , isHovered  } = useHover({
        isDisabled
    });
    let { styleProps  } = useStyleProps(otherProps);
    let isTextOnly = _react.Children.toArray(props.children).every((c)=>!/*#__PURE__*/ _react.isValidElement(c)
    );
    return(/*#__PURE__*/ _react.createElement(FocusRing, {
        focusRingClass: classNames($a9040831959d0ed42473e9713dd4b23$$interop$default, 'focus-ring'),
        autoFocus: autoFocus
    }, /*#__PURE__*/ _react.createElement("button", _babelRuntimeHelpersExtends({
    }, styleProps, mergeProps(buttonProps, hoverProps), {
        ref: domRef,
        className: classNames($a9040831959d0ed42473e9713dd4b23$$interop$default, 'spectrum-ActionButton', {
            'spectrum-ActionButton--quiet': isQuiet,
            'spectrum-ActionButton--emphasized': isEmphasized,
            'spectrum-ActionButton--staticColor': !!staticColor,
            'spectrum-ActionButton--staticWhite': staticColor === 'white',
            'spectrum-ActionButton--staticBlack': staticColor === 'black',
            'is-active': isPressed,
            'is-disabled': isDisabled,
            'is-hovered': isHovered,
            'is-selected': state.isSelected
        }, styleProps.className)
    }), /*#__PURE__*/ _react.createElement(SlotProvider, {
        slots: {
            icon: {
                size: 'S',
                UNSAFE_className: classNames($a9040831959d0ed42473e9713dd4b23$$interop$default, 'spectrum-Icon')
            },
            text: {
                UNSAFE_className: classNames($a9040831959d0ed42473e9713dd4b23$$interop$default, 'spectrum-ActionButton-label')
            }
        }
    }, typeof children === 'string' || isTextOnly ? /*#__PURE__*/ _react.createElement(Text1, null, children) : children))));
}
/**
 * ToggleButtons allow users to toggle a selection on or off, for example
 * switching between two states or modes.
 */ let ToggleButton = /*#__PURE__*/ _react.forwardRef($cafbdaa4815cfddd8f7335990626f4$var$ToggleButton);
exports.ToggleButton = ToggleButton;

},{"@react-stately/toggle":"1L9xd","@spectrum-icons/ui/CrossSmall":"2eCkE","@react-spectrum/provider":"3Y6zE","@react-aria/interactions":"3irYN","@react-aria/button":"6RKhD","@react-spectrum/text":"ib5WK","react":"a6qBW","@react-aria/utils":"d8qxy","@react-aria/focus":"76fMY","@react-spectrum/utils":"7ch5A","@babel/runtime/helpers/objectWithoutPropertiesLoose":"5byko","@babel/runtime/helpers/extends":"5xz6u","./main.css":"5uj6g"}],"1L9xd":[function(require,module,exports) {
var { useControlledState  } = require("@react-stately/utils");
/**
 * Provides state management for toggle components like checkboxes and switches.
 */ function useToggleState(props) {
    if (props === void 0) props = {
    };
    let { isReadOnly , onChange  } = props; // have to provide an empty function so useControlledState doesn't throw a fit
    // can't use useControlledState's prop calling because we need the event object from the change
    let [isSelected, setSelected] = useControlledState(props.isSelected, props.defaultSelected || false, ()=>{
    });
    function updateSelected(value) {
        if (!isReadOnly) {
            setSelected(value);
            if (onChange) onChange(value);
        }
    }
    function toggleState() {
        if (!isReadOnly) setSelected((prev)=>{
            let newVal = !prev;
            if (onChange) onChange(newVal);
            return newVal;
        });
    }
    return {
        isSelected,
        setSelected: updateSelected,
        toggle: toggleState
    };
}
exports.useToggleState = useToggleState;

},{"@react-stately/utils":"7ILZk"}],"2eCkE":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = CrossSmall;
var _CrossSmall = require("@adobe/react-spectrum-ui/dist/CrossSmall");
var _icon = require("@react-spectrum/icon");
var _react = _interopRequireDefault(require("react"));
function CrossSmall(props) {
    return(/*#__PURE__*/ _react.default.createElement(_icon.UIIcon, props, /*#__PURE__*/ _react.default.createElement(_CrossSmall.CrossSmall, null)));
}

},{"@babel/runtime/helpers/interopRequireDefault":"5TvsK","@adobe/react-spectrum-ui/dist/CrossSmall":"7h76p","@react-spectrum/icon":"5ij4g","react":"a6qBW"}],"7h76p":[function(require,module,exports) {
/**
* @adobe/react-spectrum-ui (c) by Adobe
* 
* @adobe/react-spectrum-ui is licensed under a
* Creative Commons Attribution-NoDerivatives 4.0 International License.
* 
* You should have received a copy of the license along with this
* work. If not, see <http://creativecommons.org/licenses/by-nd/4.0/>.
**/ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CrossSmall = CrossSmall;
var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutProperties(source, excluded) {
    if (source == null) return {
    };
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function CrossSmall(_ref) {
    var _ref$scale = _ref.scale, scale = _ref$scale === void 0 ? 'M' : _ref$scale, props = _objectWithoutProperties(_ref, [
        "scale"
    ]);
    return _react["default"].createElement("svg", _extends({
    }, props, props), scale === 'L' && _react["default"].createElement("path", {
        d: "M9.317 8.433L5.884 5l3.433-3.433a.625.625 0 1 0-.884-.884L5 4.116 1.567.683a.625.625 0 1 0-.884.884C.83 1.713 2.77 3.657 4.116 5L.683 8.433a.625.625 0 1 0 .884.884L5 5.884l3.433 3.433a.625.625 0 0 0 .884-.884z"
    }), scale === 'M' && _react["default"].createElement("path", {
        d: "M7.317 6.433L4.884 4l2.433-2.433a.625.625 0 1 0-.884-.884L4 3.116 1.567.683a.625.625 0 1 0-.884.884L3.116 4 .683 6.433a.625.625 0 1 0 .884.884L4 4.884l2.433 2.433a.625.625 0 0 0 .884-.884z"
    }));
}
CrossSmall.displayName = 'CrossSmall';

},{"react":"a6qBW"}],"6RKhD":[function(require,module,exports) {
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
var { usePress  } = require("@react-aria/interactions");
var { useFocusable  } = require("@react-aria/focus");
var { filterDOMProps , mergeProps , chain  } = require("@react-aria/utils");
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
/**
 * Provides the behavior and accessibility implementation for a button component. Handles mouse, keyboard, and touch interactions,
 * focus behavior, and ARIA props for both native button elements and custom element types.
 * @param props - Props to be applied to the button.
 * @param ref - A ref to a DOM element for the button.
 */ function useButton(props, ref) {
    /* eslint-enable no-redeclare */ let { elementType ='button' , isDisabled , onPress , onPressStart , onPressEnd , onPressChange , // @ts-ignore - undocumented
    preventFocusOnPress , // @ts-ignore
    onClick: deprecatedOnClick , href , target , rel , type ='button'  } = props;
    let additionalProps;
    if (elementType === 'button') additionalProps = {
        type,
        disabled: isDisabled
    };
    else additionalProps = {
        role: 'button',
        tabIndex: isDisabled ? undefined : 0,
        href: elementType === 'a' && isDisabled ? undefined : href,
        target: elementType === 'a' ? target : undefined,
        type: elementType === 'input' ? type : undefined,
        disabled: elementType === 'input' ? isDisabled : undefined,
        'aria-disabled': !isDisabled || elementType === 'input' ? undefined : isDisabled,
        rel: elementType === 'a' ? rel : undefined
    };
    let { pressProps , isPressed  } = usePress({
        onPressStart,
        onPressEnd,
        onPressChange,
        onPress,
        isDisabled,
        preventFocusOnPress,
        ref
    });
    let { focusableProps  } = useFocusable(props, ref);
    let buttonProps = mergeProps(focusableProps, pressProps);
    buttonProps = mergeProps(buttonProps, filterDOMProps(props, {
        labelable: true
    }));
    return {
        isPressed,
        // Used to indicate press state for visual
        buttonProps: mergeProps(additionalProps, buttonProps, {
            'aria-haspopup': props['aria-haspopup'],
            'aria-expanded': props['aria-expanded'],
            'aria-controls': props['aria-controls'],
            'aria-pressed': props['aria-pressed'],
            onClick: (e)=>{
                if (deprecatedOnClick) {
                    deprecatedOnClick(e);
                    console.warn('onClick is deprecated, please use onPress');
                }
            }
        })
    };
}
exports.useButton = useButton;
/**
 * Provides the behavior and accessibility implementation for a toggle button component.
 * ToggleButtons allow users to toggle a selection on or off, for example switching between two states or modes.
 */ function useToggleButton(props, state, ref) {
    /* eslint-enable no-redeclare */ const { isSelected  } = state;
    const { isPressed , buttonProps  } = useButton(_babelRuntimeHelpersExtends({
    }, props, {
        onPress: chain(state.toggle, props.onPress)
    }), ref);
    return {
        isPressed,
        buttonProps: mergeProps(buttonProps, {
            'aria-pressed': isSelected
        })
    };
}
exports.useToggleButton = useToggleButton;

},{"@babel/runtime/helpers/extends":"5xz6u","@react-aria/interactions":"3irYN","@react-aria/focus":"76fMY","@react-aria/utils":"d8qxy"}],"5uj6g":[function() {},{}],"669Dd":[function() {},{}],"62q9H":[function(require,module,exports) {
var { useProviderProps  } = require("@react-spectrum/provider");
var { Menu , MenuTrigger  } = require("@react-spectrum/menu");
var _spectrumIconsUiFolderBreadcrumb = $parcel$interopDefault(require("@spectrum-icons/ui/FolderBreadcrumb"));
var { useLocale  } = require("@react-aria/i18n");
var { useHover  } = require("@react-aria/interactions");
var { useBreadcrumbItem , useBreadcrumbs  } = require("@react-aria/breadcrumbs");
var _react2 = require("react");
var _react = $parcel$interopDefault(_react2);
var { Fragment , useRef , useCallback  } = _react2;
var { mergeProps , useLayoutEffect , useResizeObserver  } = require("@react-aria/utils");
var { FocusRing  } = require("@react-aria/focus");
var { classNames , getWrappedElement , useDOMRef , useStyleProps , useValueEffect  } = require("@react-spectrum/utils");
var _spectrumIconsUiChevronRightSmall = $parcel$interopDefault(require("@spectrum-icons/ui/ChevronRightSmall"));
var { ActionButton  } = require("@react-spectrum/button");
var _babelRuntimeHelpersObjectWithoutPropertiesLoose = $parcel$interopDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
var { Item  } = require("@react-stately/collections");
exports.Item = Item;
require("./main.css");
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/breadcrumb/vars.css
var $cbb9ca45c80051a074b454ff67e12191$exports = {
};
$cbb9ca45c80051a074b454ff67e12191$exports = {
    "spectrum-Breadcrumbs": "_spectrum-Breadcrumbs_e7b3e",
    "spectrum-Breadcrumbs-itemSeparator": "_spectrum-Breadcrumbs-itemSeparator_e7b3e",
    "is-reversed": "_is-reversed_e7b3e",
    "spectrum-Breadcrumbs-item": "_spectrum-Breadcrumbs-item_e7b3e",
    "spectrum-ActionButton": "_spectrum-ActionButton_e7b3e",
    "spectrum-Breadcrumbs-itemLink": "_spectrum-Breadcrumbs-itemLink_e7b3e",
    "is-hovered": "_is-hovered_e7b3e",
    "focus-ring": "_focus-ring_e7b3e",
    "is-dragged": "_is-dragged_e7b3e",
    "spectrum-Breadcrumbs--small": "_spectrum-Breadcrumbs--small_e7b3e",
    "spectrum-Breadcrumbs--medium": "_spectrum-Breadcrumbs--medium_e7b3e",
    "spectrum-Breadcrumbs--multiline": "_spectrum-Breadcrumbs--multiline_e7b3e",
    "spectrum-Heading--pageTitle": "_spectrum-Heading--pageTitle_e7b3e",
    "is-disabled": "_is-disabled_e7b3e",
    "is-selected": "_is-selected_e7b3e",
    "spectrum-Breadcrumb": "_spectrum-Breadcrumb_e7b3e"
};
var $cbb9ca45c80051a074b454ff67e12191$$interop$default = $parcel$interopDefault($cbb9ca45c80051a074b454ff67e12191$exports);
function $ccb3b1ecd96026a521a9bbbd15d0b93d$export$BreadcrumbItem(props) {
    let { children , isCurrent , isDisabled  } = props;
    let { direction  } = useLocale();
    let ref = useRef();
    let { itemProps  } = useBreadcrumbItem(_babelRuntimeHelpersExtends({
    }, props, {
        elementType: typeof children === 'string' ? 'span' : 'a'
    }), ref);
    let { hoverProps , isHovered  } = useHover(props);
    let element = /*#__PURE__*/ _react.cloneElement(getWrappedElement(children), _babelRuntimeHelpersExtends({
    }, mergeProps(itemProps, hoverProps), {
        ref,
        className: classNames($cbb9ca45c80051a074b454ff67e12191$$interop$default, 'spectrum-Breadcrumbs-itemLink', {
            'is-disabled': !isCurrent && isDisabled,
            'is-hovered': isHovered
        })
    }));
    return(/*#__PURE__*/ _react.createElement(Fragment, null, /*#__PURE__*/ _react.createElement(FocusRing, {
        focusRingClass: classNames($cbb9ca45c80051a074b454ff67e12191$$interop$default, 'focus-ring')
    }, element), isCurrent === false && /*#__PURE__*/ _react.createElement(_spectrumIconsUiChevronRightSmall, {
        UNSAFE_className: classNames($cbb9ca45c80051a074b454ff67e12191$$interop$default, 'spectrum-Breadcrumbs-itemSeparator', {
            'is-reversed': direction === 'rtl'
        })
    })));
}
const $e2f01fb373fadb4c4bc7c0c3ead285a$var$MIN_VISIBLE_ITEMS = 1;
const $e2f01fb373fadb4c4bc7c0c3ead285a$var$MAX_VISIBLE_ITEMS = 4;
function $e2f01fb373fadb4c4bc7c0c3ead285a$var$Breadcrumbs(props, ref) {
    props = useProviderProps(props);
    let { size ='L' , isMultiline , children , showRoot , isDisabled , onAction  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "size",
        "isMultiline",
        "children",
        "showRoot",
        "isDisabled",
        "onAction"
    ]); // Not using React.Children.toArray because it mutates the key prop.
    let childArray = [];
    _react.Children.forEach(children, (child)=>{
        if (/*#__PURE__*/ _react.isValidElement(child)) childArray.push(child);
    });
    let domRef = useDOMRef(ref);
    let listRef = useRef(null);
    let [visibleItems, setVisibleItems] = useValueEffect(childArray.length);
    let { navProps  } = useBreadcrumbs(props);
    let { styleProps  } = useStyleProps(otherProps);
    let updateOverflow = useCallback(()=>{
        let computeVisibleItems = (visibleItems1)=>{
            let listItems = Array.from(listRef.current.children);
            let containerWidth = listRef.current.offsetWidth;
            let isShowingMenu = childArray.length > visibleItems1;
            let calculatedWidth = 0;
            let newVisibleItems = 0;
            let maxVisibleItems = $e2f01fb373fadb4c4bc7c0c3ead285a$var$MAX_VISIBLE_ITEMS;
            if (showRoot) {
                calculatedWidth += listItems.shift().offsetWidth;
                newVisibleItems++;
            }
            if (isShowingMenu) {
                calculatedWidth += listItems.shift().offsetWidth;
                maxVisibleItems--;
            }
            if (showRoot && calculatedWidth >= containerWidth) newVisibleItems--;
             // TODO: what if multiline and only one breadcrumb??
            if (isMultiline) {
                listItems.pop();
                newVisibleItems++;
            } else {
                // Ensure the last breadcrumb isn't truncated when we measure it.
                let last = listItems.pop();
                last.style.overflow = 'visible';
                calculatedWidth += last.offsetWidth;
                if (calculatedWidth < containerWidth) newVisibleItems++;
                last.style.overflow = '';
            }
            for (let breadcrumb of listItems.reverse()){
                calculatedWidth += breadcrumb.offsetWidth;
                if (calculatedWidth < containerWidth) newVisibleItems++;
            }
            return Math.max($e2f01fb373fadb4c4bc7c0c3ead285a$var$MIN_VISIBLE_ITEMS, Math.min(maxVisibleItems, newVisibleItems));
        };
        setVisibleItems(function*() {
            // Update to show all items.
            yield childArray.length; // Measure, and update to show the items that fit.
            let newVisibleItems = computeVisibleItems(childArray.length);
            yield newVisibleItems; // If the number of items is less than the number of children,
            // then update again to ensure that the menu fits.
            if (newVisibleItems < childArray.length && newVisibleItems > 1) yield computeVisibleItems(newVisibleItems);
        });
    }, [
        listRef,
        children,
        setVisibleItems,
        showRoot,
        isMultiline
    ]);
    useResizeObserver({
        ref: domRef,
        onResize: updateOverflow
    });
    useLayoutEffect(updateOverflow, [
        children
    ]);
    let contents = childArray;
    if (childArray.length > visibleItems) {
        var _selectedItem$key;
        let selectedItem = childArray[childArray.length - 1];
        let selectedKey = (_selectedItem$key = selectedItem.key) != null ? _selectedItem$key : childArray.length - 1;
        let onMenuAction = (key)=>{
            // Don't fire onAction when clicking on the last item
            if (key !== selectedKey && onAction) onAction(key);
        };
        let menuItem = /*#__PURE__*/ _react.createElement($ccb3b1ecd96026a521a9bbbd15d0b93d$export$BreadcrumbItem, {
            key: "menu"
        }, /*#__PURE__*/ _react.createElement(MenuTrigger, null, /*#__PURE__*/ _react.createElement(ActionButton, {
            "aria-label": "\u2026",
            isQuiet: true,
            isDisabled: isDisabled
        }, /*#__PURE__*/ _react.createElement(_spectrumIconsUiFolderBreadcrumb, null)), /*#__PURE__*/ _react.createElement(Menu, {
            selectionMode: "single",
            selectedKeys: [
                selectedKey
            ],
            onAction: onMenuAction
        }, childArray)));
        contents = [
            menuItem
        ];
        let breadcrumbs = [
            ...childArray
        ];
        let endItems = visibleItems;
        if (showRoot && visibleItems > 1) {
            contents.unshift(breadcrumbs.shift());
            endItems--;
        }
        contents.push(...breadcrumbs.slice(-endItems));
    }
    let lastIndex = contents.length - 1;
    let breadcrumbItems = contents.map((child, index)=>{
        var _child$key;
        let isCurrent = index === lastIndex;
        let key = (_child$key = child.key) != null ? _child$key : index;
        let onPress = ()=>{
            if (onAction) onAction(key);
        };
        return(/*#__PURE__*/ _react.createElement("li", {
            key: key,
            className: classNames($cbb9ca45c80051a074b454ff67e12191$$interop$default, 'spectrum-Breadcrumbs-item')
        }, /*#__PURE__*/ _react.createElement($ccb3b1ecd96026a521a9bbbd15d0b93d$export$BreadcrumbItem, {
            isCurrent: isCurrent,
            isDisabled: isDisabled,
            onPress: onPress
        }, child.props.children)));
    });
    return(/*#__PURE__*/ _react.createElement("nav", _babelRuntimeHelpersExtends({
    }, styleProps, navProps, {
        ref: domRef
    }), /*#__PURE__*/ _react.createElement("ul", {
        ref: listRef,
        className: classNames($cbb9ca45c80051a074b454ff67e12191$$interop$default, 'spectrum-Breadcrumbs', {
            'spectrum-Breadcrumbs--small': size === 'S',
            'spectrum-Breadcrumbs--medium': size === 'M',
            'spectrum-Breadcrumbs--multiline': isMultiline,
            'spectrum-Breadcrumbs--showRoot': showRoot,
            'is-disabled': isDisabled
        }, styleProps.className)
    }, breadcrumbItems)));
}
/**
 * Breadcrumbs show hierarchy and navigational context for a user’s location within an application.
 */ let Breadcrumbs = /*#__PURE__*/ _react.forwardRef($e2f01fb373fadb4c4bc7c0c3ead285a$var$Breadcrumbs);
exports.Breadcrumbs = Breadcrumbs;

},{"@react-spectrum/provider":"3Y6zE","@react-spectrum/menu":"6D0yE","@spectrum-icons/ui/FolderBreadcrumb":"3vt2S","@react-aria/i18n":"6xZcx","@react-aria/interactions":"3irYN","@react-aria/breadcrumbs":"6r3aG","react":"a6qBW","@react-aria/utils":"d8qxy","@react-aria/focus":"76fMY","@react-spectrum/utils":"7ch5A","@spectrum-icons/ui/ChevronRightSmall":"2yTbp","@react-spectrum/button":"7zChe","@babel/runtime/helpers/objectWithoutPropertiesLoose":"5byko","@babel/runtime/helpers/extends":"5xz6u","@react-stately/collections":"4IPbJ","./main.css":"5CnUZ"}],"3vt2S":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = FolderBreadcrumb;
var _FolderBreadcrumb = require("@adobe/react-spectrum-ui/dist/FolderBreadcrumb");
var _icon = require("@react-spectrum/icon");
var _react = _interopRequireDefault(require("react"));
function FolderBreadcrumb(props) {
    return(/*#__PURE__*/ _react.default.createElement(_icon.UIIcon, props, /*#__PURE__*/ _react.default.createElement(_FolderBreadcrumb.FolderBreadcrumb, null)));
}

},{"@babel/runtime/helpers/interopRequireDefault":"5TvsK","@adobe/react-spectrum-ui/dist/FolderBreadcrumb":"1iFZv","@react-spectrum/icon":"5ij4g","react":"a6qBW"}],"1iFZv":[function(require,module,exports) {
/**
* @adobe/react-spectrum-ui (c) by Adobe
* 
* @adobe/react-spectrum-ui is licensed under a
* Creative Commons Attribution-NoDerivatives 4.0 International License.
* 
* You should have received a copy of the license along with this
* work. If not, see <http://creativecommons.org/licenses/by-nd/4.0/>.
**/ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.FolderBreadcrumb = FolderBreadcrumb;
var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutProperties(source, excluded) {
    if (source == null) return {
    };
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function FolderBreadcrumb(_ref) {
    var _ref$scale = _ref.scale, scale = _ref$scale === void 0 ? 'M' : _ref$scale, props = _objectWithoutProperties(_ref, [
        "scale"
    ]);
    return _react["default"].createElement("svg", _extends({
    }, props, props), scale === 'L' && _react["default"].createElement("path", {
        d: "M19.5 6l-9.166.004-1.668-1.7A.998.998 0 0 0 7.946 4H3a1 1 0 0 0-1 1v13a.5.5 0 0 0 .5.5h17a.5.5 0 0 0 .5-.5V6.5a.5.5 0 0 0-.5-.5zm-16-.5h4.237l1.964 2H3.5zm11.544 6.044l-3.5 3.5a.77.77 0 0 1-1.088 0l-3.5-3.5a.77.77 0 0 1 1.088-1.088L11 13.41l2.956-2.955a.77.77 0 0 1 1.088 1.088z"
    }), scale === 'M' && _react["default"].createElement("path", {
        d: "M16.5 4l-7.166.004-1.652-1.7A1 1 0 0 0 6.965 2H2a1 1 0 0 0-1 1v11.5a.5.5 0 0 0 .5.5h15a.5.5 0 0 0 .5-.5v-10a.5.5 0 0 0-.5-.5zM2 3h4.965l1.943 2H2zm10.354 5.854l-3 3a.5.5 0 0 1-.707 0l-3-3a.5.5 0 0 1 .707-.707L9 10.793l2.646-2.646a.5.5 0 0 1 .707.707z"
    }));
}
FolderBreadcrumb.displayName = 'FolderBreadcrumb';

},{"react":"a6qBW"}],"6r3aG":[function(require,module,exports) {
var { useMessageFormatter  } = require("@react-aria/i18n");
var { filterDOMProps  } = require("@react-aria/utils");
var _babelRuntimeHelpersInteropRequireDefault = $parcel$interopDefault(require("@babel/runtime/helpers/interopRequireDefault"));
var { useLink  } = require("@react-aria/link");
var _babelRuntimeHelpersObjectWithoutPropertiesLoose = $parcel$interopDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
/**
 * Provides the behavior and accessibility implementation for an in a breadcrumbs component.
 * See `useBreadcrumbs` for details about breadcrumbs.
 */ function useBreadcrumbItem(props, ref) {
    let { isCurrent , isDisabled , 'aria-current': ariaCurrent , elementType ='a'  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "isCurrent",
        "isDisabled",
        "aria-current",
        "elementType"
    ]);
    let { linkProps  } = useLink(_babelRuntimeHelpersExtends({
        isDisabled: isDisabled || isCurrent,
        elementType
    }, otherProps), ref);
    let isHeading = /^h[1-6]$/.test(elementType);
    let itemProps = {
    };
    if (!isHeading) itemProps = linkProps;
    if (isCurrent) itemProps['aria-current'] = ariaCurrent || 'page';
    return {
        itemProps: _babelRuntimeHelpersExtends({
            'aria-disabled': isDisabled
        }, itemProps)
    };
}
exports.useBreadcrumbItem = useBreadcrumbItem;
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/breadcrumbs/intl/ar-AE.json
var $bf7b69514695e7b1128e215173ed3aa$exports = {
};
$bf7b69514695e7b1128e215173ed3aa$exports = JSON.parse("{\"breadcrumbs\":\"عناصر الواجهة\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/breadcrumbs/intl/bg-BG.json
var $b157e8c27c059f2152f74f5070e$exports = {
};
$b157e8c27c059f2152f74f5070e$exports = JSON.parse("{\"breadcrumbs\":\"Трохи хляб\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/breadcrumbs/intl/cs-CZ.json
var $c9bfc59243736e7b1aafaab732ac38b$exports = {
};
$c9bfc59243736e7b1aafaab732ac38b$exports = JSON.parse("{\"breadcrumbs\":\"Popis cesty\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/breadcrumbs/intl/da-DK.json
var $cf8ed6703e35da24c72310112d4e35$exports = {
};
$cf8ed6703e35da24c72310112d4e35$exports = JSON.parse("{\"breadcrumbs\":\"Brødkrummer\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/breadcrumbs/intl/de-DE.json
var $d9307543b0542281beeb7e22f681b19c$exports = {
};
$d9307543b0542281beeb7e22f681b19c$exports = JSON.parse("{\"breadcrumbs\":\"Breadcrumbs\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/breadcrumbs/intl/el-GR.json
var $de142ae801946c567548545107b5531c$exports = {
};
$de142ae801946c567548545107b5531c$exports = JSON.parse("{\"breadcrumbs\":\"Πλοηγήσεις breadcrumb\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/breadcrumbs/intl/en-US.json
var $cc0a6f3770533b578cbd787b234585c8$exports = {
};
$cc0a6f3770533b578cbd787b234585c8$exports = JSON.parse("{\"breadcrumbs\":\"Breadcrumbs\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/breadcrumbs/intl/es-ES.json
var $f70700e533bf9aa56f1f3cd764a1$exports = {
};
$f70700e533bf9aa56f1f3cd764a1$exports = JSON.parse("{\"breadcrumbs\":\"Migas de pan\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/breadcrumbs/intl/et-EE.json
var $ed571b5206ad4b5c094a3c5bdf248c$exports = {
};
$ed571b5206ad4b5c094a3c5bdf248c$exports = JSON.parse("{\"breadcrumbs\":\"Lingiread\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/breadcrumbs/intl/fi-FI.json
var $df9205fadd247c0b84cd79392ce21032$exports = {
};
$df9205fadd247c0b84cd79392ce21032$exports = JSON.parse("{\"breadcrumbs\":\"Navigointilinkit\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/breadcrumbs/intl/fr-FR.json
var $f3eea9c6579603dda934144355040a2d$exports = {
};
$f3eea9c6579603dda934144355040a2d$exports = JSON.parse("{\"breadcrumbs\":\"Chemin de navigation\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/breadcrumbs/intl/he-IL.json
var $f9774d5d142622c7072a1347b897032b$exports = {
};
$f9774d5d142622c7072a1347b897032b$exports = JSON.parse("{\"breadcrumbs\":\"שבילי ניווט\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/breadcrumbs/intl/hr-HR.json
var $a4bbdcc3621c7c584f3572494718a01$exports = {
};
$a4bbdcc3621c7c584f3572494718a01$exports = JSON.parse("{\"breadcrumbs\":\"Navigacijski putovi\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/breadcrumbs/intl/hu-HU.json
var $e12e36b43464d9741af807bada4891$exports = {
};
$e12e36b43464d9741af807bada4891$exports = JSON.parse("{\"breadcrumbs\":\"Morzsamenü\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/breadcrumbs/intl/it-IT.json
var $a79ab94dc8a9c3b2fb085886f5ccbc66$exports = {
};
$a79ab94dc8a9c3b2fb085886f5ccbc66$exports = JSON.parse("{\"breadcrumbs\":\"Breadcrumb\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/breadcrumbs/intl/ja-JP.json
var $baa9ee67056b3cc587d70b0137ab735e$exports = {
};
$baa9ee67056b3cc587d70b0137ab735e$exports = JSON.parse("{\"breadcrumbs\":\"パンくずリスト\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/breadcrumbs/intl/ko-KR.json
var $e40ae400a31373d37c74cdc76c38ff$exports = {
};
$e40ae400a31373d37c74cdc76c38ff$exports = JSON.parse("{\"breadcrumbs\":\"탐색 표시\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/breadcrumbs/intl/lt-LT.json
var $cd039e28de9480e393a928a4b2a2e3b6$exports = {
};
$cd039e28de9480e393a928a4b2a2e3b6$exports = JSON.parse("{\"breadcrumbs\":\"Naršymo kelias\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/breadcrumbs/intl/lv-LV.json
var $c7a1c4d0b73360e4ac4e6ef0c38f0186$exports = {
};
$c7a1c4d0b73360e4ac4e6ef0c38f0186$exports = JSON.parse("{\"breadcrumbs\":\"Atpakaļceļi\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/breadcrumbs/intl/nb-NO.json
var $c64228fcac59603294a5db0d7728ab6d$exports = {
};
$c64228fcac59603294a5db0d7728ab6d$exports = JSON.parse("{\"breadcrumbs\":\"Navigasjonsstier\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/breadcrumbs/intl/nl-NL.json
var $ddafcced542afef86083cfed6bc$exports = {
};
$ddafcced542afef86083cfed6bc$exports = JSON.parse("{\"breadcrumbs\":\"Broodkruimels\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/breadcrumbs/intl/pl-PL.json
var $c61c9a0cad41323b9da26b281e9a5$exports = {
};
$c61c9a0cad41323b9da26b281e9a5$exports = JSON.parse("{\"breadcrumbs\":\"Struktura nawigacyjna\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/breadcrumbs/intl/pt-BR.json
var $e6f79e4771e7984ad4aef9aab4ac6ca3$exports = {
};
$e6f79e4771e7984ad4aef9aab4ac6ca3$exports = JSON.parse("{\"breadcrumbs\":\"Caminho detalhado\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/breadcrumbs/intl/pt-PT.json
var $b1183d1818907354aa5f722f2e42df6b$exports = {
};
$b1183d1818907354aa5f722f2e42df6b$exports = JSON.parse("{\"breadcrumbs\":\"Categorias\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/breadcrumbs/intl/ro-RO.json
var $d745b29ab36c1e9c0ea82baf0e68$exports = {
};
$d745b29ab36c1e9c0ea82baf0e68$exports = JSON.parse("{\"breadcrumbs\":\"Miez de pâine\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/breadcrumbs/intl/ru-RU.json
var $b7d77b5123f4c62cd57ce0b9e97ac16f$exports = {
};
$b7d77b5123f4c62cd57ce0b9e97ac16f$exports = JSON.parse("{\"breadcrumbs\":\"Навигация\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/breadcrumbs/intl/sk-SK.json
var $fd8955145330da5f2c0105b59ad5fc2$exports = {
};
$fd8955145330da5f2c0105b59ad5fc2$exports = JSON.parse("{\"breadcrumbs\":\"Navigačné prvky Breadcrumbs\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/breadcrumbs/intl/sl-SI.json
var $bc0bb761287ea640b58f23e5ac6$exports = {
};
$bc0bb761287ea640b58f23e5ac6$exports = JSON.parse("{\"breadcrumbs\":\"Drobtine\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/breadcrumbs/intl/sr-SP.json
var $e3f3030a1001072abe2a2fc4d7d3fc6$exports = {
};
$e3f3030a1001072abe2a2fc4d7d3fc6$exports = JSON.parse("{\"breadcrumbs\":\"Putanje navigacije\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/breadcrumbs/intl/sv-SE.json
var $db2dad9348ef6cca1e175dcd$exports = {
};
$db2dad9348ef6cca1e175dcd$exports = JSON.parse("{\"breadcrumbs\":\"Sökvägar\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/breadcrumbs/intl/tr-TR.json
var $ba7cb8ac4472c4c35403d5690af169ed$exports = {
};
$ba7cb8ac4472c4c35403d5690af169ed$exports = JSON.parse("{\"breadcrumbs\":\"İçerik haritaları\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/breadcrumbs/intl/uk-UA.json
var $edae15106a0d59ca331efc75aa5b07$exports = {
};
$edae15106a0d59ca331efc75aa5b07$exports = JSON.parse("{\"breadcrumbs\":\"Навігаційна стежка\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/breadcrumbs/intl/zh-CN.json
var $e534b66681c746bca8bec9ceeaaffea9$exports = {
};
$e534b66681c746bca8bec9ceeaaffea9$exports = JSON.parse("{\"breadcrumbs\":\"导航栏\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/breadcrumbs/intl/zh-TW.json
var $e95dae7ac0c049a67eea7b1ff53cd4e$exports = {
};
$e95dae7ac0c049a67eea7b1ff53cd4e$exports = JSON.parse("{\"breadcrumbs\":\"導覽列\"}");
// @ts-ignore
const $a3b7b8d70b74efa641c5c2c503b27e81$var$intlMessages = {
    "ar-AE": _babelRuntimeHelpersInteropRequireDefault($bf7b69514695e7b1128e215173ed3aa$exports).default,
    "bg-BG": _babelRuntimeHelpersInteropRequireDefault($b157e8c27c059f2152f74f5070e$exports).default,
    "cs-CZ": _babelRuntimeHelpersInteropRequireDefault($c9bfc59243736e7b1aafaab732ac38b$exports).default,
    "da-DK": _babelRuntimeHelpersInteropRequireDefault($cf8ed6703e35da24c72310112d4e35$exports).default,
    "de-DE": _babelRuntimeHelpersInteropRequireDefault($d9307543b0542281beeb7e22f681b19c$exports).default,
    "el-GR": _babelRuntimeHelpersInteropRequireDefault($de142ae801946c567548545107b5531c$exports).default,
    "en-US": _babelRuntimeHelpersInteropRequireDefault($cc0a6f3770533b578cbd787b234585c8$exports).default,
    "es-ES": _babelRuntimeHelpersInteropRequireDefault($f70700e533bf9aa56f1f3cd764a1$exports).default,
    "et-EE": _babelRuntimeHelpersInteropRequireDefault($ed571b5206ad4b5c094a3c5bdf248c$exports).default,
    "fi-FI": _babelRuntimeHelpersInteropRequireDefault($df9205fadd247c0b84cd79392ce21032$exports).default,
    "fr-FR": _babelRuntimeHelpersInteropRequireDefault($f3eea9c6579603dda934144355040a2d$exports).default,
    "he-IL": _babelRuntimeHelpersInteropRequireDefault($f9774d5d142622c7072a1347b897032b$exports).default,
    "hr-HR": _babelRuntimeHelpersInteropRequireDefault($a4bbdcc3621c7c584f3572494718a01$exports).default,
    "hu-HU": _babelRuntimeHelpersInteropRequireDefault($e12e36b43464d9741af807bada4891$exports).default,
    "it-IT": _babelRuntimeHelpersInteropRequireDefault($a79ab94dc8a9c3b2fb085886f5ccbc66$exports).default,
    "ja-JP": _babelRuntimeHelpersInteropRequireDefault($baa9ee67056b3cc587d70b0137ab735e$exports).default,
    "ko-KR": _babelRuntimeHelpersInteropRequireDefault($e40ae400a31373d37c74cdc76c38ff$exports).default,
    "lt-LT": _babelRuntimeHelpersInteropRequireDefault($cd039e28de9480e393a928a4b2a2e3b6$exports).default,
    "lv-LV": _babelRuntimeHelpersInteropRequireDefault($c7a1c4d0b73360e4ac4e6ef0c38f0186$exports).default,
    "nb-NO": _babelRuntimeHelpersInteropRequireDefault($c64228fcac59603294a5db0d7728ab6d$exports).default,
    "nl-NL": _babelRuntimeHelpersInteropRequireDefault($ddafcced542afef86083cfed6bc$exports).default,
    "pl-PL": _babelRuntimeHelpersInteropRequireDefault($c61c9a0cad41323b9da26b281e9a5$exports).default,
    "pt-BR": _babelRuntimeHelpersInteropRequireDefault($e6f79e4771e7984ad4aef9aab4ac6ca3$exports).default,
    "pt-PT": _babelRuntimeHelpersInteropRequireDefault($b1183d1818907354aa5f722f2e42df6b$exports).default,
    "ro-RO": _babelRuntimeHelpersInteropRequireDefault($d745b29ab36c1e9c0ea82baf0e68$exports).default,
    "ru-RU": _babelRuntimeHelpersInteropRequireDefault($b7d77b5123f4c62cd57ce0b9e97ac16f$exports).default,
    "sk-SK": _babelRuntimeHelpersInteropRequireDefault($fd8955145330da5f2c0105b59ad5fc2$exports).default,
    "sl-SI": _babelRuntimeHelpersInteropRequireDefault($bc0bb761287ea640b58f23e5ac6$exports).default,
    "sr-SP": _babelRuntimeHelpersInteropRequireDefault($e3f3030a1001072abe2a2fc4d7d3fc6$exports).default,
    "sv-SE": _babelRuntimeHelpersInteropRequireDefault($db2dad9348ef6cca1e175dcd$exports).default,
    "tr-TR": _babelRuntimeHelpersInteropRequireDefault($ba7cb8ac4472c4c35403d5690af169ed$exports).default,
    "uk-UA": _babelRuntimeHelpersInteropRequireDefault($edae15106a0d59ca331efc75aa5b07$exports).default,
    "zh-CN": _babelRuntimeHelpersInteropRequireDefault($e534b66681c746bca8bec9ceeaaffea9$exports).default,
    "zh-TW": _babelRuntimeHelpersInteropRequireDefault($e95dae7ac0c049a67eea7b1ff53cd4e$exports).default
};
/**
 * Provides the behavior and accessibility implementation for a breadcrumbs component.
 * Breadcrumbs display a heirarchy of links to the current page or resource in an application.
 */ function useBreadcrumbs(props) {
    let { 'aria-label': ariaLabel  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "aria-label"
    ]);
    let formatMessage = useMessageFormatter($a3b7b8d70b74efa641c5c2c503b27e81$var$intlMessages);
    return {
        navProps: _babelRuntimeHelpersExtends({
        }, filterDOMProps(otherProps, {
            labelable: true
        }), {
            'aria-label': ariaLabel || formatMessage('breadcrumbs')
        })
    };
}
exports.useBreadcrumbs = useBreadcrumbs;

},{"@react-aria/i18n":"6xZcx","@react-aria/utils":"d8qxy","@babel/runtime/helpers/interopRequireDefault":"5TvsK","@react-aria/link":"awG4X","@babel/runtime/helpers/objectWithoutPropertiesLoose":"5byko","@babel/runtime/helpers/extends":"5xz6u"}],"awG4X":[function(require,module,exports) {
var { usePress  } = require("@react-aria/interactions");
var { filterDOMProps , mergeProps  } = require("@react-aria/utils");
var _babelRuntimeHelpersObjectWithoutPropertiesLoose = $parcel$interopDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
/**
 * Provides the behavior and accessibility implementation for a link component.
 * A link allows a user to navigate to another page or resource within a web page
 * or application.
 */ function useLink(props, ref) {
    let { elementType ='a' , onPress , onPressStart , onPressEnd , // @ts-ignore
    onClick: deprecatedOnClick , isDisabled  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "elementType",
        "onPress",
        "onPressStart",
        "onPressEnd",
        "onClick",
        "isDisabled"
    ]);
    let linkProps;
    if (elementType !== 'a') linkProps = {
        role: 'link',
        tabIndex: !isDisabled ? 0 : undefined
    };
    let { pressProps , isPressed  } = usePress({
        onPress,
        onPressStart,
        onPressEnd,
        isDisabled,
        ref
    });
    let domProps = filterDOMProps(otherProps, {
        labelable: true
    });
    return {
        isPressed,
        // Used to indicate press state for visual
        linkProps: mergeProps(domProps, _babelRuntimeHelpersExtends({
        }, pressProps, linkProps, {
            'aria-disabled': isDisabled || undefined,
            onClick: (e)=>{
                pressProps.onClick(e);
                if (deprecatedOnClick) {
                    deprecatedOnClick(e);
                    console.warn('onClick is deprecated, please use onPress');
                }
            }
        }))
    };
}
exports.useLink = useLink;

},{"@react-aria/interactions":"3irYN","@react-aria/utils":"d8qxy","@babel/runtime/helpers/objectWithoutPropertiesLoose":"5byko","@babel/runtime/helpers/extends":"5xz6u"}],"2yTbp":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = ChevronRightSmall;
var _ChevronRightSmall = require("@adobe/react-spectrum-ui/dist/ChevronRightSmall");
var _icon = require("@react-spectrum/icon");
var _react = _interopRequireDefault(require("react"));
function ChevronRightSmall(props) {
    return(/*#__PURE__*/ _react.default.createElement(_icon.UIIcon, props, /*#__PURE__*/ _react.default.createElement(_ChevronRightSmall.ChevronRightSmall, null)));
}

},{"@babel/runtime/helpers/interopRequireDefault":"5TvsK","@adobe/react-spectrum-ui/dist/ChevronRightSmall":"41xBs","@react-spectrum/icon":"5ij4g","react":"a6qBW"}],"41xBs":[function(require,module,exports) {
/**
* @adobe/react-spectrum-ui (c) by Adobe
* 
* @adobe/react-spectrum-ui is licensed under a
* Creative Commons Attribution-NoDerivatives 4.0 International License.
* 
* You should have received a copy of the license along with this
* work. If not, see <http://creativecommons.org/licenses/by-nd/4.0/>.
**/ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ChevronRightSmall = ChevronRightSmall;
var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutProperties(source, excluded) {
    if (source == null) return {
    };
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function ChevronRightSmall(_ref) {
    var _ref$scale = _ref.scale, scale = _ref$scale === void 0 ? 'M' : _ref$scale, props = _objectWithoutProperties(_ref, [
        "scale"
    ]);
    return _react["default"].createElement("svg", _extends({
    }, props, props), scale === 'L' && _react["default"].createElement("path", {
        d: "M7 5a.747.747 0 0 0-.22-.53L2.54.23a.75.75 0 1 0-1.06 1.06L5.19 5 1.48 8.71a.75.75 0 1 0 1.06 1.06l4.24-4.24A.747.747 0 0 0 7 5z"
    }), scale === 'M' && _react["default"].createElement("path", {
        d: "M5.5 4a.747.747 0 0 0-.22-.53C4.703 2.862 3.242 1.5 2.04.23A.75.75 0 1 0 .98 1.29L3.69 4 .98 6.71a.75.75 0 1 0 1.06 1.06l3.24-3.24A.747.747 0 0 0 5.5 4z"
    }));
}
ChevronRightSmall.displayName = 'ChevronRightSmall';

},{"react":"a6qBW"}],"5CnUZ":[function() {},{}],"3AsKW":[function(require,module,exports) {
var { useProvider , useProviderProps  } = require("@react-spectrum/provider");
var _react2 = require("react");
var _react = $parcel$interopDefault(_react2);
var { useCallback , useEffect , useRef  } = _react2;
var { filterDOMProps  } = require("@react-aria/utils");
var { classNames , SlotProvider , useDOMRef , useResizeObserver , useSlotProps , useStyleProps , useValueEffect  } = require("@react-spectrum/utils");
var _babelRuntimeHelpersObjectWithoutPropertiesLoose = $parcel$interopDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
require("./main.css");
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/buttongroup/vars.css
var $e5350288554758da1efde2be1e5df5d4$exports = {
};
$e5350288554758da1efde2be1e5df5d4$exports = {
    "spectrum-ButtonGroup": "_spectrum-ButtonGroup_25328",
    "spectrum-ButtonGroup-Button": "_spectrum-ButtonGroup-Button_25328",
    "spectrum-ButtonGroup--alignEnd": "_spectrum-ButtonGroup--alignEnd_25328",
    "spectrum-ButtonGroup--alignCenter": "_spectrum-ButtonGroup--alignCenter_25328",
    "spectrum-ButtonGroup--vertical": "_spectrum-ButtonGroup--vertical_25328"
};
var $e5350288554758da1efde2be1e5df5d4$$interop$default = $parcel$interopDefault($e5350288554758da1efde2be1e5df5d4$exports);
function $b8c4ebb5d2445e152b6571d47036dd$var$ButtonGroup(props, ref) {
    let { scale  } = useProvider();
    props = useProviderProps(props);
    props = useSlotProps(props, 'buttonGroup');
    let { children , orientation ='horizontal' , isDisabled , align ='start'  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "children",
        "orientation",
        "isDisabled",
        "align"
    ]);
    let { styleProps  } = useStyleProps(otherProps);
    let domRef = useDOMRef(ref);
    let [hasOverflow, setHasOverflow] = useValueEffect(false);
    let checkForOverflow = useCallback(()=>{
        let computeHasOverflow = ()=>{
            if (domRef.current && orientation === 'horizontal') {
                let buttonGroupChildren = Array.from(domRef.current.children);
                let maxX = domRef.current.offsetWidth + 1; // + 1 to account for rounding errors
                // If any buttons have negative X positions (align="end") or extend beyond
                // the width of the button group (align="start"), then switch to vertical.
                if (buttonGroupChildren.some((child)=>child.offsetLeft < 0 || child.offsetLeft + child.offsetWidth > maxX
                )) return true;
                return false;
            }
        };
        if (orientation === 'horizontal') setHasOverflow(function*() {
            // Force to horizontal for measurement.
            yield false; // Measure, and update if there is overflow.
            yield computeHasOverflow();
        });
    }, [
        domRef,
        orientation,
        scale,
        setHasOverflow,
        children
    ]); // There are two main reasons we need to remeasure:
    // 1. Internal changes: Check for initial overflow or when orientation/scale/children change (from checkForOverflow dep array)
    useEffect(()=>{
        checkForOverflow();
    }, [
        checkForOverflow
    ]); // 2. External changes: buttongroup won't change size due to any parents changing size, so listen to its container for size changes to figure out if we should remeasure
    let parent = useRef();
    useEffect(()=>{
        parent.current = domRef.current.parentElement;
    }, [
        domRef.current
    ]);
    useResizeObserver({
        ref: parent,
        onResize: checkForOverflow
    });
    return(/*#__PURE__*/ _react.createElement("div", _babelRuntimeHelpersExtends({
    }, filterDOMProps(otherProps), styleProps, {
        ref: domRef,
        className: classNames($e5350288554758da1efde2be1e5df5d4$$interop$default, 'spectrum-ButtonGroup', {
            'spectrum-ButtonGroup--vertical': orientation === 'vertical' || hasOverflow,
            'spectrum-ButtonGroup--alignEnd': align === 'end',
            'spectrum-ButtonGroup--alignCenter': align === 'center'
        }, styleProps.className)
    }), /*#__PURE__*/ _react.createElement(SlotProvider, {
        slots: {
            button: {
                isDisabled,
                UNSAFE_className: classNames($e5350288554758da1efde2be1e5df5d4$$interop$default, 'spectrum-ButtonGroup-Button')
            }
        }
    }, children)));
}
/**
 * ButtonGroup handles overflow for a grouping of buttons whose actions are related to each other.
 */ let ButtonGroup = /*#__PURE__*/ _react.forwardRef($b8c4ebb5d2445e152b6571d47036dd$var$ButtonGroup);
exports.ButtonGroup = ButtonGroup;

},{"@react-spectrum/provider":"3Y6zE","react":"a6qBW","@react-aria/utils":"d8qxy","@react-spectrum/utils":"7ch5A","@babel/runtime/helpers/objectWithoutPropertiesLoose":"5byko","@babel/runtime/helpers/extends":"5xz6u","./main.css":"2RL0m"}],"2RL0m":[function() {},{}],"5gJlM":[function(require,module,exports) {
var { useFormProps  } = require("@react-spectrum/form");
var { useCheckboxGroupState  } = require("@react-stately/checkbox");
var { Label  } = require("@react-spectrum/label");
var { useToggleState  } = require("@react-stately/toggle");
var { useProviderProps , Provider  } = require("@react-spectrum/provider");
var { useHover  } = require("@react-aria/interactions");
var { useCheckbox , useCheckboxGroupItem , useCheckboxGroup  } = require("@react-aria/checkbox");
var { FocusRing  } = require("@react-aria/focus");
var _spectrumIconsUiDashSmall = $parcel$interopDefault(require("@spectrum-icons/ui/DashSmall"));
var { classNames , useFocusableRef , useStyleProps , useDOMRef  } = require("@react-spectrum/utils");
var _spectrumIconsUiCheckmarkSmall = $parcel$interopDefault(require("@spectrum-icons/ui/CheckmarkSmall"));
var _react2 = require("react");
var _react = $parcel$interopDefault(_react2);
var { forwardRef , useContext , useRef  } = _react2;
var _babelRuntimeHelpersObjectWithoutPropertiesLoose = $parcel$interopDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
require("./main.css");
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
const $d758342572ac6f9b277258e54c98$export$CheckboxGroupContext = /*#__PURE__*/ _react.createContext(null);
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/checkbox/vars.css
var $f422de1cb0c29c9cbeca4791adca989$exports = {
};
$f422de1cb0c29c9cbeca4791adca989$exports = {
    "spectrum-Checkbox": "_spectrum-Checkbox_0ffa4",
    "spectrum-Checkbox-input": "_spectrum-Checkbox-input_0ffa4",
    "focus-ring": "_focus-ring_0ffa4",
    "spectrum-Checkbox-box": "_spectrum-Checkbox-box_0ffa4",
    "is-indeterminate": "_is-indeterminate_0ffa4",
    "spectrum-Checkbox-checkmark": "_spectrum-Checkbox-checkmark_0ffa4",
    "spectrum-Checkbox-partialCheckmark": "_spectrum-Checkbox-partialCheckmark_0ffa4",
    "is-checked": "_is-checked_0ffa4",
    "spectrum-Checkbox-label": "_spectrum-Checkbox-label_0ffa4",
    "is-hovered": "_is-hovered_0ffa4",
    "spectrum-Checkbox--quiet": "_spectrum-Checkbox--quiet_0ffa4",
    "is-invalid": "_is-invalid_0ffa4"
};
var $f422de1cb0c29c9cbeca4791adca989$$interop$default = $parcel$interopDefault($f422de1cb0c29c9cbeca4791adca989$exports);
function $c3b2eaa0f618cced51a19c0a61137bb$var$Checkbox(props, ref) {
    let originalProps = props;
    props = useProviderProps(props);
    let { isIndeterminate =false , isEmphasized =false , isDisabled =false , autoFocus , children , validationState  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "isIndeterminate",
        "isEmphasized",
        "isDisabled",
        "autoFocus",
        "children",
        "validationState"
    ]);
    let { styleProps  } = useStyleProps(otherProps);
    let { hoverProps , isHovered  } = useHover({
        isDisabled
    });
    let inputRef = useRef(null);
    let domRef = useFocusableRef(ref, inputRef); // Swap hooks depending on whether this checkbox is inside a CheckboxGroup.
    // This is a bit unorthodox. Typically, hooks cannot be called in a conditional,
    // but since the checkbox won't move in and out of a group, it should be safe.
    let groupState = useContext($d758342572ac6f9b277258e54c98$export$CheckboxGroupContext);
    let { inputProps  } = groupState ? useCheckboxGroupItem(_babelRuntimeHelpersExtends({
    }, props, {
        // Value is optional for standalone checkboxes, but required for CheckboxGroup items;
        // it's passed explicitly here to avoid typescript error (requires strictNullChecks disabled).
        value: props.value,
        // Only pass isRequired and validationState to react-aria if they came from
        // the props for this individual checkbox, and not from the group via context.
        isRequired: originalProps.isRequired,
        validationState: originalProps.validationState
    }), groupState, inputRef) : useCheckbox(props, useToggleState(props), inputRef);
    let markIcon = isIndeterminate ? /*#__PURE__*/ _react.createElement(_spectrumIconsUiDashSmall, {
        UNSAFE_className: classNames($f422de1cb0c29c9cbeca4791adca989$$interop$default, 'spectrum-Checkbox-partialCheckmark')
    }) : /*#__PURE__*/ _react.createElement(_spectrumIconsUiCheckmarkSmall, {
        UNSAFE_className: classNames($f422de1cb0c29c9cbeca4791adca989$$interop$default, 'spectrum-Checkbox-checkmark')
    });
    if (groupState) {
        for (let key of [
            'isSelected',
            'defaultSelected',
            'isEmphasized'
        ])if (originalProps[key] != null) console.warn(key + " is unsupported on individual <Checkbox> elements within a <CheckboxGroup>. Please apply these props to the group instead.");
        if (props.value == null) console.warn('A <Checkbox> element within a <CheckboxGroup> requires a `value` property.');
    }
    return(/*#__PURE__*/ _react.createElement("label", _babelRuntimeHelpersExtends({
    }, styleProps, hoverProps, {
        ref: domRef,
        className: classNames($f422de1cb0c29c9cbeca4791adca989$$interop$default, 'spectrum-Checkbox', {
            'is-checked': inputProps.checked,
            'is-indeterminate': isIndeterminate,
            'spectrum-Checkbox--quiet': !isEmphasized,
            'is-invalid': validationState === 'invalid',
            'is-disabled': isDisabled,
            'is-hovered': isHovered
        }, styleProps.className)
    }), /*#__PURE__*/ _react.createElement(FocusRing, {
        focusRingClass: classNames($f422de1cb0c29c9cbeca4791adca989$$interop$default, 'focus-ring'),
        autoFocus: autoFocus
    }, /*#__PURE__*/ _react.createElement("input", _babelRuntimeHelpersExtends({
    }, inputProps, {
        ref: inputRef,
        className: classNames($f422de1cb0c29c9cbeca4791adca989$$interop$default, 'spectrum-Checkbox-input')
    }))), /*#__PURE__*/ _react.createElement("span", {
        className: classNames($f422de1cb0c29c9cbeca4791adca989$$interop$default, 'spectrum-Checkbox-box')
    }, markIcon), children && /*#__PURE__*/ _react.createElement("span", {
        className: classNames($f422de1cb0c29c9cbeca4791adca989$$interop$default, 'spectrum-Checkbox-label')
    }, children)));
}
/**
 * Checkboxes allow users to select multiple items from a list of individual items,
 * or to mark one individual item as selected.
 */ let Checkbox = /*#__PURE__*/ forwardRef($c3b2eaa0f618cced51a19c0a61137bb$var$Checkbox);
exports.Checkbox = Checkbox;
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/fieldlabel/vars.css
var $a0bedb1888ff92cb3407d1a60d76e$exports = {
};
$a0bedb1888ff92cb3407d1a60d76e$exports = {
    "spectrum-FieldLabel": "_spectrum-FieldLabel_36b9b",
    "spectrum-FieldLabel--positionSide": "_spectrum-FieldLabel--positionSide_36b9b",
    "spectrum-FieldLabel-requiredIcon": "_spectrum-FieldLabel-requiredIcon_36b9b",
    "spectrum-FieldLabel--alignEnd": "_spectrum-FieldLabel--alignEnd_36b9b",
    "spectrum-Field": "_spectrum-Field_36b9b",
    "spectrum-Field--positionTop": "_spectrum-Field--positionTop_36b9b",
    "spectrum-Field-field": "_spectrum-Field-field_36b9b",
    "spectrum-Field-field--multiline": "_spectrum-Field-field--multiline_36b9b",
    "spectrum-Field--positionSide": "_spectrum-Field--positionSide_36b9b",
    "spectrum-Form": "_spectrum-Form_36b9b",
    "spectrum-Form--positionSide": "_spectrum-Form--positionSide_36b9b",
    "spectrum-Form--positionTop": "_spectrum-Form--positionTop_36b9b",
    "spectrum-Form-itemLabel": "_spectrum-Form-itemLabel_36b9b",
    "is-disabled": "_is-disabled_36b9b"
};
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/fieldgroup/vars.css
var $ddc491461af2b6836404526ae99891$exports = {
};
$ddc491461af2b6836404526ae99891$exports = {
    "spectrum-FieldGroup": "_spectrum-FieldGroup_8cb9b",
    "spectrum-FieldGroup--positionSide": "_spectrum-FieldGroup--positionSide_8cb9b",
    "spectrum-FieldGroup-group": "_spectrum-FieldGroup-group_8cb9b",
    "spectrum-FieldGroup-group--horizontal": "_spectrum-FieldGroup-group--horizontal_8cb9b"
};
var $ddc491461af2b6836404526ae99891$$interop$default = $parcel$interopDefault($ddc491461af2b6836404526ae99891$exports);
var $a0bedb1888ff92cb3407d1a60d76e$$interop$default = $parcel$interopDefault($a0bedb1888ff92cb3407d1a60d76e$exports);
function $bf1a119e1eaf6ba1863e010f786bdc$var$CheckboxGroup(props, ref) {
    props = useProviderProps(props);
    props = useFormProps(props);
    let { isEmphasized , isRequired , necessityIndicator , label , labelPosition ='top' , labelAlign , children , orientation ='vertical' , validationState  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "isEmphasized",
        "isRequired",
        "necessityIndicator",
        "label",
        "labelPosition",
        "labelAlign",
        "children",
        "orientation",
        "validationState"
    ]);
    let domRef = useDOMRef(ref);
    let { styleProps  } = useStyleProps(otherProps);
    let state = useCheckboxGroupState(props);
    let { labelProps , groupProps  } = useCheckboxGroup(props, state);
    return(/*#__PURE__*/ _react.createElement("div", _babelRuntimeHelpersExtends({
    }, styleProps, groupProps, {
        className: classNames($ddc491461af2b6836404526ae99891$$interop$default, 'spectrum-FieldGroup', {
            'spectrum-FieldGroup--positionSide': labelPosition === 'side'
        }, classNames($a0bedb1888ff92cb3407d1a60d76e$$interop$default, 'spectrum-Field'), styleProps.className),
        ref: domRef
    }), label && /*#__PURE__*/ _react.createElement(Label, _babelRuntimeHelpersExtends({
    }, labelProps, {
        elementType: "span",
        labelPosition: labelPosition,
        labelAlign: labelAlign,
        isRequired: isRequired,
        necessityIndicator: necessityIndicator,
        includeNecessityIndicatorInAccessibilityName: true
    }), label), /*#__PURE__*/ _react.createElement("div", {
        role: "presentation",
        className: classNames($ddc491461af2b6836404526ae99891$$interop$default, 'spectrum-FieldGroup-group', {
            'spectrum-FieldGroup-group--horizontal': orientation === 'horizontal'
        })
    }, /*#__PURE__*/ _react.createElement(Provider, {
        isEmphasized: isEmphasized,
        validationState: validationState
    }, /*#__PURE__*/ _react.createElement($d758342572ac6f9b277258e54c98$export$CheckboxGroupContext.Provider, {
        value: state
    }, children)))));
}
/**
 * A CheckboxGroup allows users to select one or more items from a list of choices.
 */ const CheckboxGroup = /*#__PURE__*/ _react.forwardRef($bf1a119e1eaf6ba1863e010f786bdc$var$CheckboxGroup);
exports.CheckboxGroup = CheckboxGroup;

},{"@react-spectrum/form":"6qmvm","@react-stately/checkbox":"3oj6t","@react-spectrum/label":"4HKfm","@react-stately/toggle":"1L9xd","@react-spectrum/provider":"3Y6zE","@react-aria/interactions":"3irYN","@react-aria/checkbox":"qsolJ","@react-aria/focus":"76fMY","@spectrum-icons/ui/DashSmall":"9Vd5t","@react-spectrum/utils":"7ch5A","@spectrum-icons/ui/CheckmarkSmall":"6iC54","react":"a6qBW","@babel/runtime/helpers/objectWithoutPropertiesLoose":"5byko","@babel/runtime/helpers/extends":"5xz6u","./main.css":"7FCQc"}],"6qmvm":[function(require,module,exports) {
var _react2 = require("react");
var _react = $parcel$interopDefault(_react2);
var { useContext  } = _react2;
var { Provider , useProviderProps  } = require("@react-spectrum/provider");
var { filterDOMProps  } = require("@react-aria/utils");
var { classNames , useDOMRef , useStyleProps  } = require("@react-spectrum/utils");
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
var _babelRuntimeHelpersObjectWithoutPropertiesLoose = $parcel$interopDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
require("./main.css");
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/fieldlabel/vars.css
var $a0bedb1888ff92cb3407d1a60d76e$exports = {
};
$a0bedb1888ff92cb3407d1a60d76e$exports = {
    "spectrum-FieldLabel": "_spectrum-FieldLabel_36b9b",
    "spectrum-FieldLabel--positionSide": "_spectrum-FieldLabel--positionSide_36b9b",
    "spectrum-FieldLabel-requiredIcon": "_spectrum-FieldLabel-requiredIcon_36b9b",
    "spectrum-FieldLabel--alignEnd": "_spectrum-FieldLabel--alignEnd_36b9b",
    "spectrum-Field": "_spectrum-Field_36b9b",
    "spectrum-Field--positionTop": "_spectrum-Field--positionTop_36b9b",
    "spectrum-Field-field": "_spectrum-Field-field_36b9b",
    "spectrum-Field-field--multiline": "_spectrum-Field-field--multiline_36b9b",
    "spectrum-Field--positionSide": "_spectrum-Field--positionSide_36b9b",
    "spectrum-Form": "_spectrum-Form_36b9b",
    "spectrum-Form--positionSide": "_spectrum-Form--positionSide_36b9b",
    "spectrum-Form--positionTop": "_spectrum-Form--positionTop_36b9b",
    "spectrum-Form-itemLabel": "_spectrum-Form-itemLabel_36b9b",
    "is-disabled": "_is-disabled_36b9b"
};
let $a04c1031b5e1cab168e087a6837ba8be$var$FormContext = /*#__PURE__*/ _react.createContext({
});
function useFormProps(props) {
    let ctx = useContext($a04c1031b5e1cab168e087a6837ba8be$var$FormContext);
    return _babelRuntimeHelpersExtends({
    }, ctx, props);
}
exports.useFormProps = useFormProps;
const $a04c1031b5e1cab168e087a6837ba8be$var$formPropNames = new Set([
    'action',
    'autoComplete',
    'encType',
    'method',
    'target',
    'onSubmit'
]);
var $a0bedb1888ff92cb3407d1a60d76e$$interop$default = $parcel$interopDefault($a0bedb1888ff92cb3407d1a60d76e$exports);
function $a04c1031b5e1cab168e087a6837ba8be$var$Form(props, ref) {
    props = useProviderProps(props);
    let { children , labelPosition ='top' , labelAlign ='start' , isRequired , necessityIndicator , isQuiet , isEmphasized , isDisabled , isReadOnly , validationState  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "children",
        "labelPosition",
        "labelAlign",
        "isRequired",
        "necessityIndicator",
        "isQuiet",
        "isEmphasized",
        "isDisabled",
        "isReadOnly",
        "validationState"
    ]);
    let { styleProps  } = useStyleProps(otherProps);
    let domRef = useDOMRef(ref);
    let ctx = {
        labelPosition,
        labelAlign,
        necessityIndicator
    };
    return(/*#__PURE__*/ _react.createElement("form", _babelRuntimeHelpersExtends({
    }, filterDOMProps(otherProps, {
        labelable: true,
        propNames: $a04c1031b5e1cab168e087a6837ba8be$var$formPropNames
    }), styleProps, {
        ref: domRef,
        className: classNames($a0bedb1888ff92cb3407d1a60d76e$$interop$default, 'spectrum-Form', {
            'spectrum-Form--positionSide': labelPosition === 'side',
            'spectrum-Form--positionTop': labelPosition === 'top'
        }, styleProps.className)
    }), /*#__PURE__*/ _react.createElement($a04c1031b5e1cab168e087a6837ba8be$var$FormContext.Provider, {
        value: ctx
    }, /*#__PURE__*/ _react.createElement(Provider, {
        isQuiet: isQuiet,
        isEmphasized: isEmphasized,
        isDisabled: isDisabled,
        isReadOnly: isReadOnly,
        isRequired: isRequired,
        validationState: validationState
    }, children))));
}
/**
 * Forms allow users to enter data that can be submitted while providing alignment and styling for form fields.
 */ const Form = /*#__PURE__*/ _react.forwardRef($a04c1031b5e1cab168e087a6837ba8be$var$Form);
exports.Form = Form;

},{"react":"a6qBW","@react-spectrum/provider":"3Y6zE","@react-aria/utils":"d8qxy","@react-spectrum/utils":"7ch5A","@babel/runtime/helpers/extends":"5xz6u","@babel/runtime/helpers/objectWithoutPropertiesLoose":"5byko","./main.css":"1vPzX"}],"1vPzX":[function() {},{}],"3oj6t":[function(require,module,exports) {
var { useControlledState  } = require("@react-stately/utils");
/**
 * Provides state management for a checkbox group component. Provides a name for the group,
 * and manages selection and focus state.
 */ function useCheckboxGroupState(props) {
    if (props === void 0) props = {
    };
    let [selectedValues, setValue] = useControlledState(props.value, props.defaultValue || [], props.onChange);
    const state = {
        value: selectedValues,
        setValue (value) {
            if (props.isReadOnly || props.isDisabled) return;
            setValue(value);
        },
        isDisabled: props.isDisabled || false,
        isReadOnly: props.isReadOnly || false,
        isSelected (value) {
            return selectedValues.includes(value);
        },
        addValue (value) {
            if (props.isReadOnly || props.isDisabled) return;
            setValue((values)=>{
                if (!values.includes(value)) return values.concat(value);
                return values;
            });
        },
        removeValue (value) {
            if (props.isReadOnly || props.isDisabled) return;
            setValue((values)=>{
                if (values.includes(value)) return values.filter((existingValue)=>existingValue !== value
                );
                return values;
            });
        },
        toggleValue (value) {
            if (props.isReadOnly || props.isDisabled) return;
            setValue((values)=>{
                if (values.includes(value)) return values.filter((existingValue)=>existingValue !== value
                );
                return values.concat(value);
            });
        }
    };
    return state;
}
exports.useCheckboxGroupState = useCheckboxGroupState;

},{"@react-stately/utils":"7ILZk"}],"4HKfm":[function(require,module,exports) {
var { useProviderProps  } = require("@react-spectrum/provider");
var { useMessageFormatter  } = require("@react-aria/i18n");
var _react = $parcel$interopDefault(require("react"));
var { filterDOMProps , mergeProps  } = require("@react-aria/utils");
var { classNames , useDOMRef , useStyleProps  } = require("@react-spectrum/utils");
var _spectrumIconsUiAsterisk = $parcel$interopDefault(require("@spectrum-icons/ui/Asterisk"));
var _babelRuntimeHelpersInteropRequireDefault = $parcel$interopDefault(require("@babel/runtime/helpers/interopRequireDefault"));
var _babelRuntimeHelpersObjectWithoutPropertiesLoose = $parcel$interopDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
require("./main.css");
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/fieldlabel/vars.css
var $a0bedb1888ff92cb3407d1a60d76e$exports = {
};
$a0bedb1888ff92cb3407d1a60d76e$exports = {
    "spectrum-FieldLabel": "_spectrum-FieldLabel_36b9b",
    "spectrum-FieldLabel--positionSide": "_spectrum-FieldLabel--positionSide_36b9b",
    "spectrum-FieldLabel-requiredIcon": "_spectrum-FieldLabel-requiredIcon_36b9b",
    "spectrum-FieldLabel--alignEnd": "_spectrum-FieldLabel--alignEnd_36b9b",
    "spectrum-Field": "_spectrum-Field_36b9b",
    "spectrum-Field--positionTop": "_spectrum-Field--positionTop_36b9b",
    "spectrum-Field-field": "_spectrum-Field-field_36b9b",
    "spectrum-Field-field--multiline": "_spectrum-Field-field--multiline_36b9b",
    "spectrum-Field--positionSide": "_spectrum-Field--positionSide_36b9b",
    "spectrum-Form": "_spectrum-Form_36b9b",
    "spectrum-Form--positionSide": "_spectrum-Form--positionSide_36b9b",
    "spectrum-Form--positionTop": "_spectrum-Form--positionTop_36b9b",
    "spectrum-Form-itemLabel": "_spectrum-Form-itemLabel_36b9b",
    "is-disabled": "_is-disabled_36b9b"
};
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/label/intl/ar-AE.json
var $dba6f47c0633f1c62ae34bb5964884f$exports = {
};
$dba6f47c0633f1c62ae34bb5964884f$exports = JSON.parse("{\"(optional)\":\"(اختياري)\",\"(required)\":\"(مطلوب)\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/label/intl/bg-BG.json
var $ec854bcc80a78bd74516e0a3a8b2b7$exports = {
};
$ec854bcc80a78bd74516e0a3a8b2b7$exports = JSON.parse("{\"(optional)\":\"(незадължително)\",\"(required)\":\"(задължително)\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/label/intl/cs-CZ.json
var $f8483afc5cfa1f04e621a6293e6a96$exports = {
};
$f8483afc5cfa1f04e621a6293e6a96$exports = JSON.parse("{\"(optional)\":\"(volitelně)\",\"(required)\":\"(požadováno)\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/label/intl/da-DK.json
var $e5b3827f2f03fadf1c016232dac0c3b2$exports = {
};
$e5b3827f2f03fadf1c016232dac0c3b2$exports = JSON.parse("{\"(optional)\":\"(valgfrit)\",\"(required)\":\"(obligatorisk)\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/label/intl/de-DE.json
var $d0e804db48e4f5fde77f7104b72$exports = {
};
$d0e804db48e4f5fde77f7104b72$exports = JSON.parse("{\"(optional)\":\"(optional)\",\"(required)\":\"(erforderlich)\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/label/intl/el-GR.json
var $f9c7b13da02b8927c419d06284d4b105$exports = {
};
$f9c7b13da02b8927c419d06284d4b105$exports = JSON.parse("{\"(optional)\":\"(προαιρετικό)\",\"(required)\":\"(απαιτείται)\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/label/intl/en-US.json
var $dcdd35ccf2acfd323d25880f390$exports = {
};
$dcdd35ccf2acfd323d25880f390$exports = JSON.parse("{\"(required)\":\"(required)\",\"(optional)\":\"(optional)\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/label/intl/es-ES.json
var $e0efc741764ef2896de49d44c289435$exports = {
};
$e0efc741764ef2896de49d44c289435$exports = JSON.parse("{\"(optional)\":\"(opcional)\",\"(required)\":\"(necesario)\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/label/intl/et-EE.json
var $de127c611a61db2122448e80fd98fc13$exports = {
};
$de127c611a61db2122448e80fd98fc13$exports = JSON.parse("{\"(optional)\":\"(valikuline)\",\"(required)\":\"(nõutav)\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/label/intl/fi-FI.json
var $cb38bd33362e0f0fe327c171c4eab9$exports = {
};
$cb38bd33362e0f0fe327c171c4eab9$exports = JSON.parse("{\"(optional)\":\"(valinnainen)\",\"(required)\":\"(pakollinen)\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/label/intl/fr-FR.json
var $fcdbf24f0f4cf813342fda2f00ddda$exports = {
};
$fcdbf24f0f4cf813342fda2f00ddda$exports = JSON.parse("{\"(optional)\":\"(facultatif)\",\"(required)\":\"(requis)\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/label/intl/he-IL.json
var $eda0a7f43e99b0c012b8567fc855dca$exports = {
};
$eda0a7f43e99b0c012b8567fc855dca$exports = JSON.parse("{\"(optional)\":\"(אופציונלי)\",\"(required)\":\"(נדרש)\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/label/intl/hr-HR.json
var $ccf72352e8d12d5f6adacf7026672e22$exports = {
};
$ccf72352e8d12d5f6adacf7026672e22$exports = JSON.parse("{\"(optional)\":\"(opcionalno)\",\"(required)\":\"(obvezno)\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/label/intl/hu-HU.json
var $f20e7b4ba50ff083ba5799d653b7725$exports = {
};
$f20e7b4ba50ff083ba5799d653b7725$exports = JSON.parse("{\"(optional)\":\"(opcionális)\",\"(required)\":\"(kötelező)\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/label/intl/it-IT.json
var $f1bf56b9dfb5a809703ac27f6d3c0deb$exports = {
};
$f1bf56b9dfb5a809703ac27f6d3c0deb$exports = JSON.parse("{\"(optional)\":\"(facoltativo)\",\"(required)\":\"(obbligatorio)\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/label/intl/ja-JP.json
var $bdf130752329d55ead48593caac7801$exports = {
};
$bdf130752329d55ead48593caac7801$exports = JSON.parse("{\"(optional)\":\"（オプション）\",\"(required)\":\"（必須）\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/label/intl/ko-KR.json
var $e5c67d9575fffdb1cd33c16ae40$exports = {
};
$e5c67d9575fffdb1cd33c16ae40$exports = JSON.parse("{\"(optional)\":\"(선택 사항)\",\"(required)\":\"(필수 사항)\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/label/intl/lt-LT.json
var $d1dd6f8ede13eb746c519d1477de2$exports = {
};
$d1dd6f8ede13eb746c519d1477de2$exports = JSON.parse("{\"(optional)\":\"(pasirenkama)\",\"(required)\":\"(privaloma)\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/label/intl/lv-LV.json
var $f0accca6f214ebdeb7bf90909101fc8f$exports = {
};
$f0accca6f214ebdeb7bf90909101fc8f$exports = JSON.parse("{\"(optional)\":\"(neobligāti)\",\"(required)\":\"(obligāti)\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/label/intl/nb-NO.json
var $c1ebd04955fea44a089abdd2380dd159$exports = {
};
$c1ebd04955fea44a089abdd2380dd159$exports = JSON.parse("{\"(optional)\":\"(valgfritt)\",\"(required)\":\"(obligatorisk)\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/label/intl/nl-NL.json
var $f56b3e79b42eab836e82b69f4ec9d2$exports = {
};
$f56b3e79b42eab836e82b69f4ec9d2$exports = JSON.parse("{\"(optional)\":\"(optioneel)\",\"(required)\":\"(vereist)\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/label/intl/pl-PL.json
var $b57c6440c9dd3f974ec52c6fa08c67$exports = {
};
$b57c6440c9dd3f974ec52c6fa08c67$exports = JSON.parse("{\"(optional)\":\"(opcjonalne)\",\"(required)\":\"(wymagane)\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/label/intl/pt-BR.json
var $c1d24552d510e3832c7efc9e6046a9d$exports = {
};
$c1d24552d510e3832c7efc9e6046a9d$exports = JSON.parse("{\"(optional)\":\"(opcional)\",\"(required)\":\"(obrigatório)\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/label/intl/pt-PT.json
var $af5aa2c9128773e059f3725cb17e265$exports = {
};
$af5aa2c9128773e059f3725cb17e265$exports = JSON.parse("{\"(optional)\":\"(opcional)\",\"(required)\":\"(obrigatório)\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/label/intl/ro-RO.json
var $b5b96ca6a3bab0de882a15c596e3$exports = {
};
$b5b96ca6a3bab0de882a15c596e3$exports = JSON.parse("{\"(optional)\":\"(opţional)\",\"(required)\":\"(obligatoriu)\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/label/intl/ru-RU.json
var $c481e968c171059c1f6509044f1e$exports = {
};
$c481e968c171059c1f6509044f1e$exports = JSON.parse("{\"(optional)\":\"(дополнительно)\",\"(required)\":\"(обязательно)\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/label/intl/sk-SK.json
var $b9bc30f30bbf8ceb886ab83972b240f$exports = {
};
$b9bc30f30bbf8ceb886ab83972b240f$exports = JSON.parse("{\"(optional)\":\"(nepovinné)\",\"(required)\":\"(povinné)\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/label/intl/sl-SI.json
var $b4c770b8a90bd8ed63f7f4442924f1fe$exports = {
};
$b4c770b8a90bd8ed63f7f4442924f1fe$exports = JSON.parse("{\"(optional)\":\"(opcijsko)\",\"(required)\":\"(obvezno)\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/label/intl/sr-SP.json
var $bee29b58f9dc42b347812a00ea03da32$exports = {
};
$bee29b58f9dc42b347812a00ea03da32$exports = JSON.parse("{\"(optional)\":\"(opciono)\",\"(required)\":\"(obavezno)\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/label/intl/sv-SE.json
var $d9a29e08ea9a081b5ce6b0482244699$exports = {
};
$d9a29e08ea9a081b5ce6b0482244699$exports = JSON.parse("{\"(optional)\":\"(valfritt)\",\"(required)\":\"(krävs)\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/label/intl/tr-TR.json
var $f42175c318d2185cedf2534c9b9076e4$exports = {
};
$f42175c318d2185cedf2534c9b9076e4$exports = JSON.parse("{\"(optional)\":\"(isteğe bağlı)\",\"(required)\":\"(gerekli)\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/label/intl/uk-UA.json
var $de5f8b3e2620ea138a3d0d1724992$exports = {
};
$de5f8b3e2620ea138a3d0d1724992$exports = JSON.parse("{\"(optional)\":\"(необов’язково)\",\"(required)\":\"(обов’язково)\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/label/intl/zh-CN.json
var $acffc3b92a263a2c319dbb25be8dee24$exports = {
};
$acffc3b92a263a2c319dbb25be8dee24$exports = JSON.parse("{\"(optional)\":\"（可选）\",\"(required)\":\"（必填）\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/label/intl/zh-TW.json
var $d9e3772f23760bf9da6d02b8653c1bd5$exports = {
};
$d9e3772f23760bf9da6d02b8653c1bd5$exports = JSON.parse("{\"(optional)\":\"(選填)\",\"(required)\":\"(必填)\"}");
// @ts-ignore
const $cd06bbbaaaccc13eaa9045c$var$intlMessages = {
    "ar-AE": _babelRuntimeHelpersInteropRequireDefault($dba6f47c0633f1c62ae34bb5964884f$exports).default,
    "bg-BG": _babelRuntimeHelpersInteropRequireDefault($ec854bcc80a78bd74516e0a3a8b2b7$exports).default,
    "cs-CZ": _babelRuntimeHelpersInteropRequireDefault($f8483afc5cfa1f04e621a6293e6a96$exports).default,
    "da-DK": _babelRuntimeHelpersInteropRequireDefault($e5b3827f2f03fadf1c016232dac0c3b2$exports).default,
    "de-DE": _babelRuntimeHelpersInteropRequireDefault($d0e804db48e4f5fde77f7104b72$exports).default,
    "el-GR": _babelRuntimeHelpersInteropRequireDefault($f9c7b13da02b8927c419d06284d4b105$exports).default,
    "en-US": _babelRuntimeHelpersInteropRequireDefault($dcdd35ccf2acfd323d25880f390$exports).default,
    "es-ES": _babelRuntimeHelpersInteropRequireDefault($e0efc741764ef2896de49d44c289435$exports).default,
    "et-EE": _babelRuntimeHelpersInteropRequireDefault($de127c611a61db2122448e80fd98fc13$exports).default,
    "fi-FI": _babelRuntimeHelpersInteropRequireDefault($cb38bd33362e0f0fe327c171c4eab9$exports).default,
    "fr-FR": _babelRuntimeHelpersInteropRequireDefault($fcdbf24f0f4cf813342fda2f00ddda$exports).default,
    "he-IL": _babelRuntimeHelpersInteropRequireDefault($eda0a7f43e99b0c012b8567fc855dca$exports).default,
    "hr-HR": _babelRuntimeHelpersInteropRequireDefault($ccf72352e8d12d5f6adacf7026672e22$exports).default,
    "hu-HU": _babelRuntimeHelpersInteropRequireDefault($f20e7b4ba50ff083ba5799d653b7725$exports).default,
    "it-IT": _babelRuntimeHelpersInteropRequireDefault($f1bf56b9dfb5a809703ac27f6d3c0deb$exports).default,
    "ja-JP": _babelRuntimeHelpersInteropRequireDefault($bdf130752329d55ead48593caac7801$exports).default,
    "ko-KR": _babelRuntimeHelpersInteropRequireDefault($e5c67d9575fffdb1cd33c16ae40$exports).default,
    "lt-LT": _babelRuntimeHelpersInteropRequireDefault($d1dd6f8ede13eb746c519d1477de2$exports).default,
    "lv-LV": _babelRuntimeHelpersInteropRequireDefault($f0accca6f214ebdeb7bf90909101fc8f$exports).default,
    "nb-NO": _babelRuntimeHelpersInteropRequireDefault($c1ebd04955fea44a089abdd2380dd159$exports).default,
    "nl-NL": _babelRuntimeHelpersInteropRequireDefault($f56b3e79b42eab836e82b69f4ec9d2$exports).default,
    "pl-PL": _babelRuntimeHelpersInteropRequireDefault($b57c6440c9dd3f974ec52c6fa08c67$exports).default,
    "pt-BR": _babelRuntimeHelpersInteropRequireDefault($c1d24552d510e3832c7efc9e6046a9d$exports).default,
    "pt-PT": _babelRuntimeHelpersInteropRequireDefault($af5aa2c9128773e059f3725cb17e265$exports).default,
    "ro-RO": _babelRuntimeHelpersInteropRequireDefault($b5b96ca6a3bab0de882a15c596e3$exports).default,
    "ru-RU": _babelRuntimeHelpersInteropRequireDefault($c481e968c171059c1f6509044f1e$exports).default,
    "sk-SK": _babelRuntimeHelpersInteropRequireDefault($b9bc30f30bbf8ceb886ab83972b240f$exports).default,
    "sl-SI": _babelRuntimeHelpersInteropRequireDefault($b4c770b8a90bd8ed63f7f4442924f1fe$exports).default,
    "sr-SP": _babelRuntimeHelpersInteropRequireDefault($bee29b58f9dc42b347812a00ea03da32$exports).default,
    "sv-SE": _babelRuntimeHelpersInteropRequireDefault($d9a29e08ea9a081b5ce6b0482244699$exports).default,
    "tr-TR": _babelRuntimeHelpersInteropRequireDefault($f42175c318d2185cedf2534c9b9076e4$exports).default,
    "uk-UA": _babelRuntimeHelpersInteropRequireDefault($de5f8b3e2620ea138a3d0d1724992$exports).default,
    "zh-CN": _babelRuntimeHelpersInteropRequireDefault($acffc3b92a263a2c319dbb25be8dee24$exports).default,
    "zh-TW": _babelRuntimeHelpersInteropRequireDefault($d9e3772f23760bf9da6d02b8653c1bd5$exports).default
};
var $a0bedb1888ff92cb3407d1a60d76e$$interop$default = $parcel$interopDefault($a0bedb1888ff92cb3407d1a60d76e$exports);
function $cd06bbbaaaccc13eaa9045c$var$Label(props, ref) {
    props = useProviderProps(props);
    let { children , labelPosition ='top' , labelAlign =labelPosition === 'side' ? 'start' : null , isRequired , necessityIndicator =isRequired != null ? 'icon' : null , includeNecessityIndicatorInAccessibilityName =false , htmlFor , for: labelFor , elementType: ElementType = 'label' , onClick  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "children",
        "labelPosition",
        "labelAlign",
        "isRequired",
        "necessityIndicator",
        "includeNecessityIndicatorInAccessibilityName",
        "htmlFor",
        "for",
        "elementType",
        "onClick"
    ]);
    let domRef = useDOMRef(ref);
    let { styleProps  } = useStyleProps(otherProps);
    let formatMessage = useMessageFormatter($cd06bbbaaaccc13eaa9045c$var$intlMessages);
    let necessityLabel = isRequired ? formatMessage('(required)') : formatMessage('(optional)');
    let icon = /*#__PURE__*/ _react.createElement(_spectrumIconsUiAsterisk, {
        UNSAFE_className: classNames($a0bedb1888ff92cb3407d1a60d76e$$interop$default, 'spectrum-FieldLabel-requiredIcon'),
        "aria-label": includeNecessityIndicatorInAccessibilityName ? formatMessage('(required)') : undefined
    });
    let labelClassNames = classNames($a0bedb1888ff92cb3407d1a60d76e$$interop$default, 'spectrum-FieldLabel', {
        'spectrum-FieldLabel--positionSide': labelPosition === 'side',
        'spectrum-FieldLabel--alignEnd': labelAlign === 'end'
    }, styleProps.className);
    return(/*#__PURE__*/ _react.createElement(ElementType, _babelRuntimeHelpersExtends({
    }, filterDOMProps(otherProps), styleProps, {
        onClick: onClick,
        ref: domRef,
        className: labelClassNames,
        htmlFor: ElementType === 'label' ? labelFor || htmlFor : undefined
    }), children, (necessityIndicator === 'label' || necessityIndicator === 'icon' && isRequired) && ' \u200b', necessityIndicator === 'label' && /*#__PURE__*/ _react.createElement("span", {
        "aria-hidden": !includeNecessityIndicatorInAccessibilityName ? isRequired : undefined
    }, necessityLabel), necessityIndicator === 'icon' && isRequired && icon));
}
let Label = /*#__PURE__*/ _react.forwardRef($cd06bbbaaaccc13eaa9045c$var$Label);
exports.Label = Label;
function $d2ecd00afec46f6300dcc47dcdc8$var$Field(props, ref) {
    let { label , labelPosition ='top' , labelAlign , isRequired , necessityIndicator , includeNecessityIndicatorInAccessibilityName , children , labelProps , elementType , wrapperClassName  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "label",
        "labelPosition",
        "labelAlign",
        "isRequired",
        "necessityIndicator",
        "includeNecessityIndicatorInAccessibilityName",
        "children",
        "labelProps",
        "elementType",
        "wrapperClassName"
    ]);
    let { styleProps  } = useStyleProps(otherProps);
    if (label) {
        let labelWrapperClass = classNames($a0bedb1888ff92cb3407d1a60d76e$$interop$default, 'spectrum-Field', {
            'spectrum-Field--positionTop': labelPosition === 'top',
            'spectrum-Field--positionSide': labelPosition === 'side'
        }, styleProps.className, wrapperClassName);
        children = /*#__PURE__*/ _react.cloneElement(children, mergeProps(children.props, {
            className: classNames($a0bedb1888ff92cb3407d1a60d76e$$interop$default, 'spectrum-Field-field')
        }));
        return(/*#__PURE__*/ _react.createElement("div", _babelRuntimeHelpersExtends({
        }, styleProps, {
            ref: ref,
            className: labelWrapperClass
        }), /*#__PURE__*/ _react.createElement(Label, _babelRuntimeHelpersExtends({
        }, labelProps, {
            labelPosition: labelPosition,
            labelAlign: labelAlign,
            isRequired: isRequired,
            necessityIndicator: necessityIndicator,
            includeNecessityIndicatorInAccessibilityName: includeNecessityIndicatorInAccessibilityName,
            elementType: elementType
        }), label), children));
    }
    return(/*#__PURE__*/ _react.cloneElement(children, mergeProps(children.props, _babelRuntimeHelpersExtends({
    }, styleProps, {
        ref
    }))));
}
let Field = /*#__PURE__*/ _react.forwardRef($d2ecd00afec46f6300dcc47dcdc8$var$Field);
exports.Field = Field;

},{"@react-spectrum/provider":"3Y6zE","@react-aria/i18n":"6xZcx","react":"a6qBW","@react-aria/utils":"d8qxy","@react-spectrum/utils":"7ch5A","@spectrum-icons/ui/Asterisk":"4NBBX","@babel/runtime/helpers/interopRequireDefault":"5TvsK","@babel/runtime/helpers/objectWithoutPropertiesLoose":"5byko","@babel/runtime/helpers/extends":"5xz6u","./main.css":"3wiSr"}],"4NBBX":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = Asterisk;
var _Asterisk = require("@adobe/react-spectrum-ui/dist/Asterisk");
var _icon = require("@react-spectrum/icon");
var _react = _interopRequireDefault(require("react"));
function Asterisk(props) {
    return(/*#__PURE__*/ _react.default.createElement(_icon.UIIcon, props, /*#__PURE__*/ _react.default.createElement(_Asterisk.Asterisk, null)));
}

},{"@babel/runtime/helpers/interopRequireDefault":"5TvsK","@adobe/react-spectrum-ui/dist/Asterisk":"L2zhp","@react-spectrum/icon":"5ij4g","react":"a6qBW"}],"L2zhp":[function(require,module,exports) {
/**
* @adobe/react-spectrum-ui (c) by Adobe
* 
* @adobe/react-spectrum-ui is licensed under a
* Creative Commons Attribution-NoDerivatives 4.0 International License.
* 
* You should have received a copy of the license along with this
* work. If not, see <http://creativecommons.org/licenses/by-nd/4.0/>.
**/ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Asterisk = Asterisk;
var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutProperties(source, excluded) {
    if (source == null) return {
    };
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function Asterisk(_ref) {
    var _ref$scale = _ref.scale, scale = _ref$scale === void 0 ? 'M' : _ref$scale, props = _objectWithoutProperties(_ref, [
        "scale"
    ]);
    return _react["default"].createElement("svg", _extends({
    }, props, props), scale === 'L' && _react["default"].createElement("path", {
        d: "M7.867 7.872c.061.062.103.145 0 .228l-1.283.827c-.104.061-.145.02-.186-.083L4.804 6.07l-2.09 2.297c-.021.042-.083.083-.145 0l-.994-1.035c-.103-.062-.082-.124 0-.186l2.36-1.966-2.691-1.014c-.042 0-.104-.083-.062-.186l.703-1.41a.11.11 0 0 1 .187-.04L4.43 4.06l.145-3.02A.109.109 0 0 1 4.7.917l1.718.227c.104 0 .124.042.104.145l-.808 2.96 2.734-.828c.061-.042.124-.042.165.082l.27 1.532c.02.103 0 .145-.084.145l-2.856.227z"
    }), scale === 'M' && _react["default"].createElement("path", {
        d: "M6.573 6.558c.056.055.092.13 0 .204l-1.148.74c-.093.056-.13.02-.167-.073L3.832 4.947l-1.87 2.055c-.02.037-.075.074-.13 0l-.889-.926c-.092-.055-.074-.111 0-.167l2.111-1.76-2.408-.906c-.037 0-.092-.074-.055-.167l.63-1.259a.097.097 0 0 1 .166-.036l2.111 1.37.13-2.704a.097.097 0 0 1 .111-.11L5.277.54c.092 0 .11.037.092.13l-.722 2.647 2.444-.74c.056-.038.111-.038.148.073l.241 1.37c.019.093 0 .13-.074.13l-2.556.204z"
    }));
}
Asterisk.displayName = 'Asterisk';

},{"react":"a6qBW"}],"3wiSr":[function() {},{}],"qsolJ":[function(require,module,exports) {
var { useToggleState  } = require("@react-stately/toggle");
var { useLabel  } = require("@react-aria/label");
var { filterDOMProps , mergeProps  } = require("@react-aria/utils");
var { useToggle  } = require("@react-aria/toggle");
var { useEffect  } = require("react");
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
/**
 * Provides the behavior and accessibility implementation for a checkbox component.
 * Checkboxes allow users to select multiple items from a list of individual items, or
 * to mark one individual item as selected.
 * @param props - Props for the checkbox.
 * @param state - State for the checkbox, as returned by `useToggleState`.
 * @param inputRef - A ref for the HTML input element.
 */ function useCheckbox(props, state, inputRef) {
    let { inputProps  } = useToggle(props, state, inputRef);
    let { isSelected  } = state;
    let { isIndeterminate  } = props;
    useEffect(()=>{
        // indeterminate is a property, but it can only be set via javascript
        // https://css-tricks.com/indeterminate-checkboxes/
        if (inputRef.current) inputRef.current.indeterminate = isIndeterminate;
    });
    return {
        inputProps: _babelRuntimeHelpersExtends({
        }, inputProps, {
            checked: isSelected,
            'aria-checked': isIndeterminate ? 'mixed' : isSelected
        })
    };
}
exports.useCheckbox = useCheckbox;
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ const $f32b30d8fc9d5c8adba5193c65e11d$export$checkboxGroupNames = new WeakMap();
/**
 * Provides the behavior and accessibility implementation for a checkbox group component.
 * Checkbox groups allow users to select multiple items from a list of options.
 * @param props - Props for the checkbox group.
 * @param state - State for the checkbox group, as returned by `useCheckboxGroupState`.
 */ function useCheckboxGroup(props, state) {
    let { isDisabled , name  } = props;
    let { labelProps , fieldProps  } = useLabel(_babelRuntimeHelpersExtends({
    }, props, {
        // Checkbox group is not an HTML input element so it
        // shouldn't be labeled by a <label> element.
        labelElementType: 'span'
    }));
    let domProps = filterDOMProps(props, {
        labelable: true
    }); // Pass name prop from group to all items by attaching to the state.
    $f32b30d8fc9d5c8adba5193c65e11d$export$checkboxGroupNames.set(state, name);
    return {
        groupProps: mergeProps(domProps, _babelRuntimeHelpersExtends({
            role: 'group',
            'aria-disabled': isDisabled || undefined
        }, fieldProps)),
        labelProps
    };
}
exports.useCheckboxGroup = useCheckboxGroup;
/**
 * Provides the behavior and accessibility implementation for a checkbox component contained within a checkbox group.
 * Checkbox groups allow users to select multiple items from a list of options.
 * @param props - Props for the checkbox.
 * @param state - State for the checkbox, as returned by `useCheckboxGroupState`.
 * @param inputRef - A ref for the HTML input element.
 */ function useCheckboxGroupItem(props, state, inputRef) {
    const toggleState = useToggleState({
        isReadOnly: props.isReadOnly || state.isReadOnly,
        isSelected: state.isSelected(props.value),
        onChange (isSelected) {
            if (isSelected) state.addValue(props.value);
            else state.removeValue(props.value);
            if (props.onChange) props.onChange(isSelected);
        }
    });
    let { inputProps  } = useCheckbox(_babelRuntimeHelpersExtends({
    }, props, {
        isReadOnly: props.isReadOnly || state.isReadOnly,
        isDisabled: props.isDisabled || state.isDisabled,
        name: props.name || $f32b30d8fc9d5c8adba5193c65e11d$export$checkboxGroupNames.get(state)
    }), toggleState, inputRef);
    return {
        inputProps
    };
}
exports.useCheckboxGroupItem = useCheckboxGroupItem;

},{"@react-stately/toggle":"1L9xd","@react-aria/label":"2pFvL","@react-aria/utils":"d8qxy","@react-aria/toggle":"25Eje","react":"a6qBW","@babel/runtime/helpers/extends":"5xz6u"}],"2pFvL":[function(require,module,exports) {
var { useId , useLabels  } = require("@react-aria/utils");
/**
 * Provides the accessibility implementation for labels and their associated elements.
 * Labels provide context for user inputs.
 * @param props - The props for labels and fields.
 */ function useLabel(props) {
    let { id , label , 'aria-labelledby': ariaLabelledby , 'aria-label': ariaLabel , labelElementType ='label'  } = props;
    id = useId(id);
    let labelId = useId();
    let labelProps = {
    };
    if (label) {
        ariaLabelledby = ariaLabelledby ? ariaLabelledby + " " + labelId : labelId;
        labelProps = {
            id: labelId,
            htmlFor: labelElementType === 'label' ? id : undefined
        };
    } else if (!ariaLabelledby && !ariaLabel) console.warn('If you do not provide a visible label, you must specify an aria-label or aria-labelledby attribute for accessibility');
    let fieldProps = useLabels({
        id,
        'aria-label': ariaLabel,
        'aria-labelledby': ariaLabelledby
    });
    return {
        labelProps,
        fieldProps
    };
}
exports.useLabel = useLabel;

},{"@react-aria/utils":"d8qxy"}],"25Eje":[function(require,module,exports) {
var { usePress  } = require("@react-aria/interactions");
var { useFocusable  } = require("@react-aria/focus");
var { filterDOMProps , mergeProps  } = require("@react-aria/utils");
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
/**
 * Handles interactions for toggle elements, e.g. Checkboxes and Switches.
 */ function useToggle(props, state, ref) {
    let { isDisabled =false , isRequired , isReadOnly , value , name , children , 'aria-label': ariaLabel , 'aria-labelledby': ariaLabelledby , validationState ='valid'  } = props;
    let onChange = (e)=>{
        // since we spread props on label, onChange will end up there as well as in here.
        // so we have to stop propagation at the lowest level that we care about
        e.stopPropagation();
        state.setSelected(e.target.checked);
    };
    let hasChildren = children != null;
    let hasAriaLabel = ariaLabel != null || ariaLabelledby != null;
    if (!hasChildren && !hasAriaLabel) console.warn('If you do not provide children, you must specify an aria-label for accessibility');
     // This handles focusing the input on pointer down, which Safari does not do by default.
    let { pressProps  } = usePress({
        isDisabled
    });
    let { focusableProps  } = useFocusable(props, ref);
    let interactions = mergeProps(pressProps, focusableProps);
    let domProps = filterDOMProps(props, {
        labelable: true
    });
    return {
        inputProps: mergeProps(domProps, _babelRuntimeHelpersExtends({
            'aria-invalid': validationState === 'invalid' || undefined,
            'aria-errormessage': props['aria-errormessage'],
            'aria-controls': props['aria-controls'],
            'aria-readonly': isReadOnly || undefined,
            onChange,
            disabled: isDisabled,
            required: isRequired,
            value,
            name,
            type: 'checkbox'
        }, interactions))
    };
}
exports.useToggle = useToggle;

},{"@react-aria/interactions":"3irYN","@react-aria/focus":"76fMY","@react-aria/utils":"d8qxy","@babel/runtime/helpers/extends":"5xz6u"}],"9Vd5t":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = DashSmall;
var _DashSmall = require("@adobe/react-spectrum-ui/dist/DashSmall");
var _icon = require("@react-spectrum/icon");
var _react = _interopRequireDefault(require("react"));
function DashSmall(props) {
    return(/*#__PURE__*/ _react.default.createElement(_icon.UIIcon, props, /*#__PURE__*/ _react.default.createElement(_DashSmall.DashSmall, null)));
}

},{"@babel/runtime/helpers/interopRequireDefault":"5TvsK","@adobe/react-spectrum-ui/dist/DashSmall":"7dWfK","@react-spectrum/icon":"5ij4g","react":"a6qBW"}],"7dWfK":[function(require,module,exports) {
/**
* @adobe/react-spectrum-ui (c) by Adobe
* 
* @adobe/react-spectrum-ui is licensed under a
* Creative Commons Attribution-NoDerivatives 4.0 International License.
* 
* You should have received a copy of the license along with this
* work. If not, see <http://creativecommons.org/licenses/by-nd/4.0/>.
**/ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DashSmall = DashSmall;
var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutProperties(source, excluded) {
    if (source == null) return {
    };
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function DashSmall(_ref) {
    var _ref$scale = _ref.scale, scale = _ref$scale === void 0 ? 'M' : _ref$scale, props = _objectWithoutProperties(_ref, [
        "scale"
    ]);
    return _react["default"].createElement("svg", _extends({
    }, props, props), scale === 'L' && _react["default"].createElement("path", {
        d: "M10.99 5H1.01a1 1 0 0 0 0 2h9.98a1 1 0 1 0 0-2z"
    }), scale === 'M' && _react["default"].createElement("path", {
        d: "M8 4H2a1 1 0 0 0 0 2h6a1 1 0 0 0 0-2z"
    }));
}
DashSmall.displayName = 'DashSmall';

},{"react":"a6qBW"}],"6iC54":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = CheckmarkSmall;
var _CheckmarkSmall = require("@adobe/react-spectrum-ui/dist/CheckmarkSmall");
var _icon = require("@react-spectrum/icon");
var _react = _interopRequireDefault(require("react"));
function CheckmarkSmall(props) {
    return(/*#__PURE__*/ _react.default.createElement(_icon.UIIcon, props, /*#__PURE__*/ _react.default.createElement(_CheckmarkSmall.CheckmarkSmall, null)));
}

},{"@babel/runtime/helpers/interopRequireDefault":"5TvsK","@adobe/react-spectrum-ui/dist/CheckmarkSmall":"7L2hQ","@react-spectrum/icon":"5ij4g","react":"a6qBW"}],"7L2hQ":[function(require,module,exports) {
/**
* @adobe/react-spectrum-ui (c) by Adobe
* 
* @adobe/react-spectrum-ui is licensed under a
* Creative Commons Attribution-NoDerivatives 4.0 International License.
* 
* You should have received a copy of the license along with this
* work. If not, see <http://creativecommons.org/licenses/by-nd/4.0/>.
**/ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CheckmarkSmall = CheckmarkSmall;
var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutProperties(source, excluded) {
    if (source == null) return {
    };
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function CheckmarkSmall(_ref) {
    var _ref$scale = _ref.scale, scale = _ref$scale === void 0 ? 'M' : _ref$scale, props = _objectWithoutProperties(_ref, [
        "scale"
    ]);
    return _react["default"].createElement("svg", _extends({
    }, props, props), scale === 'L' && _react["default"].createElement("path", {
        d: "M4.5 11a.999.999 0 0 1-.788-.385l-3-4a1 1 0 1 1 1.576-1.23L4.5 8.376l5.212-6.99a1 1 0 1 1 1.576 1.23l-6 8A.999.999 0 0 1 4.5 11z"
    }), scale === 'M' && _react["default"].createElement("path", {
        d: "M3.788 9A.999.999 0 0 1 3 8.615l-2.288-3a1 1 0 1 1 1.576-1.23l1.5 1.991 3.924-4.991a1 1 0 1 1 1.576 1.23l-4.712 6A.999.999 0 0 1 3.788 9z"
    }));
}
CheckmarkSmall.displayName = 'CheckmarkSmall';

},{"react":"a6qBW"}],"7FCQc":[function() {},{}],"4XQwM":[function(require,module,exports) {
var { PressResponder  } = require("@react-aria/interactions");
var { useOverlayTriggerState  } = require("@react-stately/overlays");
var { Modal , Popover , Tray  } = require("@react-spectrum/overlays");
var { Heading  } = require("@react-spectrum/text");
var { Divider  } = require("@react-spectrum/divider");
var { useMessageFormatter  } = require("@react-aria/i18n");
var { useDialog  } = require("@react-aria/dialog");
var { Grid  } = require("@react-spectrum/layout");
var { FocusScope  } = require("@react-aria/focus");
var { DismissButton , useOverlayPosition , useOverlayTrigger  } = require("@react-aria/overlays");
var _react2 = require("react");
var _react = $parcel$interopDefault(_react2);
var { useContext , useRef , forwardRef , Fragment , useEffect  } = _react2;
var _spectrumIconsUiCrossLarge = $parcel$interopDefault(require("@spectrum-icons/ui/CrossLarge"));
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
var { Content  } = require("@react-spectrum/view");
var { classNames , useStyleProps , SlotProvider , unwrapDOMRef , useDOMRef , useHasChild , useMediaQuery  } = require("@react-spectrum/utils");
var { chain , mergeProps  } = require("@react-aria/utils");
var { ButtonGroup  } = require("@react-spectrum/buttongroup");
var { Button , ActionButton  } = require("@react-spectrum/button");
var _spectrumIconsUiAlertMedium = $parcel$interopDefault(require("@spectrum-icons/ui/AlertMedium"));
var _babelRuntimeHelpersInteropRequireDefault = $parcel$interopDefault(require("@babel/runtime/helpers/interopRequireDefault"));
var _babelRuntimeHelpersObjectWithoutPropertiesLoose = $parcel$interopDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
require("./main.css");
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
const $acaf784a76233553d69f87911a6848$export$DialogContext = /*#__PURE__*/ _react.createContext(null);
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/dialog/vars.css
var $fbfe205054a1d09dba6b25d1f1121e$exports = {
};
$fbfe205054a1d09dba6b25d1f1121e$exports = {
    "spectrum-Dialog": "_spectrum-Dialog_30293",
    "spectrum-Dialog--small": "_spectrum-Dialog--small_30293",
    "spectrum-Dialog--medium": "_spectrum-Dialog--medium_30293",
    "spectrum-Dialog--large": "_spectrum-Dialog--large_30293",
    "spectrum-Dialog-hero": "_spectrum-Dialog-hero_30293",
    "spectrum-Dialog-grid": "_spectrum-Dialog-grid_30293",
    "spectrum-Dialog-heading": "_spectrum-Dialog-heading_30293",
    "spectrum-Dialog-heading--noHeader": "_spectrum-Dialog-heading--noHeader_30293",
    "spectrum-Dialog-header": "_spectrum-Dialog-header_30293",
    "spectrum-Dialog-typeIcon": "_spectrum-Dialog-typeIcon_30293",
    "spectrum-Dialog-divider": "_spectrum-Dialog-divider_30293",
    "spectrum-Dialog--noDivider": "_spectrum-Dialog--noDivider_30293",
    "spectrum-Dialog-content": "_spectrum-Dialog-content_30293",
    "spectrum-Dialog-footer": "_spectrum-Dialog-footer_30293",
    "spectrum-Button": "_spectrum-Button_30293",
    "spectrum-Dialog-buttonGroup": "_spectrum-Dialog-buttonGroup_30293",
    "spectrum-Dialog-buttonGroup--noFooter": "_spectrum-Dialog-buttonGroup--noFooter_30293",
    "spectrum-Dialog--dismissable": "_spectrum-Dialog--dismissable_30293",
    "spectrum-Dialog-closeButton": "_spectrum-Dialog-closeButton_30293",
    "spectrum-Dialog--error": "_spectrum-Dialog--error_30293",
    "spectrum-Dialog--fullscreen": "_spectrum-Dialog--fullscreen_30293",
    "spectrum-Dialog--fullscreenTakeover": "_spectrum-Dialog--fullscreenTakeover_30293",
    "spectrum-Dialog--warning": "_spectrum-Dialog--warning_30293"
};
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/dialog/intl/ar-AE.json
var $f2edaf9535940dd293a1a150d42$exports = {
};
$f2edaf9535940dd293a1a150d42$exports = JSON.parse("{\"alert\":\"تنبيه\",\"dismiss\":\"تجاهل\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/dialog/intl/bg-BG.json
var $d47657a60dce6a446561e463337d2$exports = {
};
$d47657a60dce6a446561e463337d2$exports = JSON.parse("{\"alert\":\"Сигнал\",\"dismiss\":\"Отхвърляне\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/dialog/intl/cs-CZ.json
var $aaf41d86207773bd33a13b9c2fdefae$exports = {
};
$aaf41d86207773bd33a13b9c2fdefae$exports = JSON.parse("{\"alert\":\"Výstraha\",\"dismiss\":\"Odstranit\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/dialog/intl/da-DK.json
var $fada89492396f01795b6d8b9fc048c31$exports = {
};
$fada89492396f01795b6d8b9fc048c31$exports = JSON.parse("{\"alert\":\"Advarsel\",\"dismiss\":\"Luk\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/dialog/intl/de-DE.json
var $c2039f98a7a2414febd720ea9aa4dc2f$exports = {
};
$c2039f98a7a2414febd720ea9aa4dc2f$exports = JSON.parse("{\"alert\":\"Warnhinweis\",\"dismiss\":\"Schließen\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/dialog/intl/el-GR.json
var $f92c77e840e1d8faa1120faf4d27c4$exports = {
};
$f92c77e840e1d8faa1120faf4d27c4$exports = JSON.parse("{\"alert\":\"Ειδοποίηση\",\"dismiss\":\"Απόρριψη\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/dialog/intl/en-US.json
var $a56b0afce6e287db171a623c273f17$exports = {
};
$a56b0afce6e287db171a623c273f17$exports = JSON.parse("{\"dismiss\":\"Dismiss\",\"alert\":\"Alert\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/dialog/intl/es-ES.json
var $e013ca62a636e891abe4d8813d0fa63b$exports = {
};
$e013ca62a636e891abe4d8813d0fa63b$exports = JSON.parse("{\"alert\":\"Alerta\",\"dismiss\":\"Descartar\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/dialog/intl/et-EE.json
var $d9f24cb243acc68efd43118dac82e0$exports = {
};
$d9f24cb243acc68efd43118dac82e0$exports = JSON.parse("{\"alert\":\"Teade\",\"dismiss\":\"Lõpeta\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/dialog/intl/fi-FI.json
var $aaaee9140d3768cedf8e286877d9$exports = {
};
$aaaee9140d3768cedf8e286877d9$exports = JSON.parse("{\"alert\":\"Hälytys\",\"dismiss\":\"Hylkää\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/dialog/intl/fr-FR.json
var $a432d3ac150f27a29b3c5530a1df9$exports = {
};
$a432d3ac150f27a29b3c5530a1df9$exports = JSON.parse("{\"alert\":\"Alerte\",\"dismiss\":\"Rejeter\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/dialog/intl/he-IL.json
var $a81768068b9aa62104194470cc3f0654$exports = {
};
$a81768068b9aa62104194470cc3f0654$exports = JSON.parse("{\"alert\":\"התראה\",\"dismiss\":\"התעלם\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/dialog/intl/hr-HR.json
var $e5036b5739d845cfe9f6783a407$exports = {
};
$e5036b5739d845cfe9f6783a407$exports = JSON.parse("{\"alert\":\"Upozorenje\",\"dismiss\":\"Odbaci\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/dialog/intl/hu-HU.json
var $cc5a75ca5b505e558eed9c1835f94f1e$exports = {
};
$cc5a75ca5b505e558eed9c1835f94f1e$exports = JSON.parse("{\"alert\":\"Figyelmeztetés\",\"dismiss\":\"Elutasítás\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/dialog/intl/it-IT.json
var $c4a696abd1a16f20e2b4b003fbf6fbdb$exports = {
};
$c4a696abd1a16f20e2b4b003fbf6fbdb$exports = JSON.parse("{\"alert\":\"Avviso\",\"dismiss\":\"Ignora\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/dialog/intl/ja-JP.json
var $addaf646413c8be95a79f38e6345b8f2$exports = {
};
$addaf646413c8be95a79f38e6345b8f2$exports = JSON.parse("{\"alert\":\"アラート\",\"dismiss\":\"閉じる\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/dialog/intl/ko-KR.json
var $e3657a3eacf72d4741ea8f0b9$exports = {
};
$e3657a3eacf72d4741ea8f0b9$exports = JSON.parse("{\"alert\":\"경고\",\"dismiss\":\"무시\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/dialog/intl/lt-LT.json
var $c51dfe5990613a5f294275b6e13ecc$exports = {
};
$c51dfe5990613a5f294275b6e13ecc$exports = JSON.parse("{\"alert\":\"Įspėjimas\",\"dismiss\":\"Atmesti\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/dialog/intl/lv-LV.json
var $ce2aae655de1b6e293ec050756a5dcb$exports = {
};
$ce2aae655de1b6e293ec050756a5dcb$exports = JSON.parse("{\"alert\":\"Brīdinājums\",\"dismiss\":\"Nerādīt\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/dialog/intl/nb-NO.json
var $f61ed65bb5df99f0804c45d92ed2ab3e$exports = {
};
$f61ed65bb5df99f0804c45d92ed2ab3e$exports = JSON.parse("{\"alert\":\"Varsel\",\"dismiss\":\"Lukk\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/dialog/intl/nl-NL.json
var $f1cfa4f0ca509c1473646b05bba816a$exports = {
};
$f1cfa4f0ca509c1473646b05bba816a$exports = JSON.parse("{\"alert\":\"Melding\",\"dismiss\":\"Negeren\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/dialog/intl/pl-PL.json
var $c3a456ea785d7b1d4b0e87a09dbcaab4$exports = {
};
$c3a456ea785d7b1d4b0e87a09dbcaab4$exports = JSON.parse("{\"alert\":\"Ostrzeżenie\",\"dismiss\":\"Zignoruj\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/dialog/intl/pt-BR.json
var $c9f6f2f98f8796205b43b84ad72b916c$exports = {
};
$c9f6f2f98f8796205b43b84ad72b916c$exports = JSON.parse("{\"alert\":\"Alerta\",\"dismiss\":\"Descartar\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/dialog/intl/pt-PT.json
var $ddf8a9d40eed12ce095aa68902274da$exports = {
};
$ddf8a9d40eed12ce095aa68902274da$exports = JSON.parse("{\"alert\":\"Alerta\",\"dismiss\":\"Dispensar\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/dialog/intl/ro-RO.json
var $e44701ea63d9c73bbe297bd12d650f99$exports = {
};
$e44701ea63d9c73bbe297bd12d650f99$exports = JSON.parse("{\"alert\":\"Alertă\",\"dismiss\":\"Revocare\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/dialog/intl/ru-RU.json
var $c1caed8a35bc9ad3bcb054625de80$exports = {
};
$c1caed8a35bc9ad3bcb054625de80$exports = JSON.parse("{\"alert\":\"Предупреждение\",\"dismiss\":\"Пропустить\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/dialog/intl/sk-SK.json
var $d550e21bd881bd66512a8a38d56ac2af$exports = {
};
$d550e21bd881bd66512a8a38d56ac2af$exports = JSON.parse("{\"alert\":\"Upozornenie\",\"dismiss\":\"Zrušiť\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/dialog/intl/sl-SI.json
var $a41b4f2e1963020b3a952fcb7469da5d$exports = {
};
$a41b4f2e1963020b3a952fcb7469da5d$exports = JSON.parse("{\"alert\":\"Opozorilo\",\"dismiss\":\"Opusti\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/dialog/intl/sr-SP.json
var $b920d0a0d010e9dff65cb2996b08c573$exports = {
};
$b920d0a0d010e9dff65cb2996b08c573$exports = JSON.parse("{\"alert\":\"Upozorenje\",\"dismiss\":\"Odbaci\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/dialog/intl/sv-SE.json
var $bc2e864b27d5d33a55efa85d4c6d$exports = {
};
$bc2e864b27d5d33a55efa85d4c6d$exports = JSON.parse("{\"alert\":\"Varning\",\"dismiss\":\"Avvisa\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/dialog/intl/tr-TR.json
var $fd3766a3dabdd75be0640de4e2a917$exports = {
};
$fd3766a3dabdd75be0640de4e2a917$exports = JSON.parse("{\"alert\":\"Uyarı\",\"dismiss\":\"Kapat\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/dialog/intl/uk-UA.json
var $ff96347c2e8f1ff2c2f9ebfa4c1f3$exports = {
};
$ff96347c2e8f1ff2c2f9ebfa4c1f3$exports = JSON.parse("{\"alert\":\"Сигнал тривоги\",\"dismiss\":\"Скасувати\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/dialog/intl/zh-CN.json
var $f24d62a73ef94c1435318b9f95e0e1$exports = {
};
$f24d62a73ef94c1435318b9f95e0e1$exports = JSON.parse("{\"alert\":\"警报\",\"dismiss\":\"取消\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/dialog/intl/zh-TW.json
var $a102752d8d7f8dcfc276715c9d290294$exports = {
};
$a102752d8d7f8dcfc276715c9d290294$exports = JSON.parse("{\"alert\":\"警示\",\"dismiss\":\"關閉\"}");
// @ts-ignore
const $c24df1e30ea6d5a25486b1eedd756cd$var$intlMessages = {
    "ar-AE": _babelRuntimeHelpersInteropRequireDefault($f2edaf9535940dd293a1a150d42$exports).default,
    "bg-BG": _babelRuntimeHelpersInteropRequireDefault($d47657a60dce6a446561e463337d2$exports).default,
    "cs-CZ": _babelRuntimeHelpersInteropRequireDefault($aaf41d86207773bd33a13b9c2fdefae$exports).default,
    "da-DK": _babelRuntimeHelpersInteropRequireDefault($fada89492396f01795b6d8b9fc048c31$exports).default,
    "de-DE": _babelRuntimeHelpersInteropRequireDefault($c2039f98a7a2414febd720ea9aa4dc2f$exports).default,
    "el-GR": _babelRuntimeHelpersInteropRequireDefault($f92c77e840e1d8faa1120faf4d27c4$exports).default,
    "en-US": _babelRuntimeHelpersInteropRequireDefault($a56b0afce6e287db171a623c273f17$exports).default,
    "es-ES": _babelRuntimeHelpersInteropRequireDefault($e013ca62a636e891abe4d8813d0fa63b$exports).default,
    "et-EE": _babelRuntimeHelpersInteropRequireDefault($d9f24cb243acc68efd43118dac82e0$exports).default,
    "fi-FI": _babelRuntimeHelpersInteropRequireDefault($aaaee9140d3768cedf8e286877d9$exports).default,
    "fr-FR": _babelRuntimeHelpersInteropRequireDefault($a432d3ac150f27a29b3c5530a1df9$exports).default,
    "he-IL": _babelRuntimeHelpersInteropRequireDefault($a81768068b9aa62104194470cc3f0654$exports).default,
    "hr-HR": _babelRuntimeHelpersInteropRequireDefault($e5036b5739d845cfe9f6783a407$exports).default,
    "hu-HU": _babelRuntimeHelpersInteropRequireDefault($cc5a75ca5b505e558eed9c1835f94f1e$exports).default,
    "it-IT": _babelRuntimeHelpersInteropRequireDefault($c4a696abd1a16f20e2b4b003fbf6fbdb$exports).default,
    "ja-JP": _babelRuntimeHelpersInteropRequireDefault($addaf646413c8be95a79f38e6345b8f2$exports).default,
    "ko-KR": _babelRuntimeHelpersInteropRequireDefault($e3657a3eacf72d4741ea8f0b9$exports).default,
    "lt-LT": _babelRuntimeHelpersInteropRequireDefault($c51dfe5990613a5f294275b6e13ecc$exports).default,
    "lv-LV": _babelRuntimeHelpersInteropRequireDefault($ce2aae655de1b6e293ec050756a5dcb$exports).default,
    "nb-NO": _babelRuntimeHelpersInteropRequireDefault($f61ed65bb5df99f0804c45d92ed2ab3e$exports).default,
    "nl-NL": _babelRuntimeHelpersInteropRequireDefault($f1cfa4f0ca509c1473646b05bba816a$exports).default,
    "pl-PL": _babelRuntimeHelpersInteropRequireDefault($c3a456ea785d7b1d4b0e87a09dbcaab4$exports).default,
    "pt-BR": _babelRuntimeHelpersInteropRequireDefault($c9f6f2f98f8796205b43b84ad72b916c$exports).default,
    "pt-PT": _babelRuntimeHelpersInteropRequireDefault($ddf8a9d40eed12ce095aa68902274da$exports).default,
    "ro-RO": _babelRuntimeHelpersInteropRequireDefault($e44701ea63d9c73bbe297bd12d650f99$exports).default,
    "ru-RU": _babelRuntimeHelpersInteropRequireDefault($c1caed8a35bc9ad3bcb054625de80$exports).default,
    "sk-SK": _babelRuntimeHelpersInteropRequireDefault($d550e21bd881bd66512a8a38d56ac2af$exports).default,
    "sl-SI": _babelRuntimeHelpersInteropRequireDefault($a41b4f2e1963020b3a952fcb7469da5d$exports).default,
    "sr-SP": _babelRuntimeHelpersInteropRequireDefault($b920d0a0d010e9dff65cb2996b08c573$exports).default,
    "sv-SE": _babelRuntimeHelpersInteropRequireDefault($bc2e864b27d5d33a55efa85d4c6d$exports).default,
    "tr-TR": _babelRuntimeHelpersInteropRequireDefault($fd3766a3dabdd75be0640de4e2a917$exports).default,
    "uk-UA": _babelRuntimeHelpersInteropRequireDefault($ff96347c2e8f1ff2c2f9ebfa4c1f3$exports).default,
    "zh-CN": _babelRuntimeHelpersInteropRequireDefault($f24d62a73ef94c1435318b9f95e0e1$exports).default,
    "zh-TW": _babelRuntimeHelpersInteropRequireDefault($a102752d8d7f8dcfc276715c9d290294$exports).default
};
let $c24df1e30ea6d5a25486b1eedd756cd$var$sizeMap = {
    S: 'small',
    M: 'medium',
    L: 'large',
    fullscreen: 'fullscreen',
    fullscreenTakeover: 'fullscreenTakeover'
};
var $fbfe205054a1d09dba6b25d1f1121e$$interop$default = $parcel$interopDefault($fbfe205054a1d09dba6b25d1f1121e$exports);
function $c24df1e30ea6d5a25486b1eedd756cd$var$Dialog(props, ref) {
    let _ref = useContext($acaf784a76233553d69f87911a6848$export$DialogContext) || {
    }, { type ='modal'  } = _ref, contextProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(_ref, [
        "type"
    ]);
    let { children , isDismissable =contextProps.isDismissable , onDismiss =contextProps.onClose , size  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "children",
        "isDismissable",
        "onDismiss",
        "size"
    ]);
    let formatMessage = useMessageFormatter($c24df1e30ea6d5a25486b1eedd756cd$var$intlMessages);
    let { styleProps  } = useStyleProps(otherProps);
    size = type === 'popover' ? size || 'S' : size || 'L';
    let domRef = useDOMRef(ref);
    let gridRef = useRef();
    let sizeVariant = $c24df1e30ea6d5a25486b1eedd756cd$var$sizeMap[type] || $c24df1e30ea6d5a25486b1eedd756cd$var$sizeMap[size];
    let { dialogProps , titleProps  } = useDialog(mergeProps(contextProps, props), domRef);
    let hasHeader = useHasChild("." + $fbfe205054a1d09dba6b25d1f1121e$$interop$default['spectrum-Dialog-header'], unwrapDOMRef(gridRef));
    let hasFooter = useHasChild("." + $fbfe205054a1d09dba6b25d1f1121e$$interop$default['spectrum-Dialog-footer'], unwrapDOMRef(gridRef));
    let slots = {
        hero: {
            UNSAFE_className: $fbfe205054a1d09dba6b25d1f1121e$$interop$default['spectrum-Dialog-hero']
        },
        header: {
            UNSAFE_className: $fbfe205054a1d09dba6b25d1f1121e$$interop$default['spectrum-Dialog-header']
        },
        heading: _babelRuntimeHelpersExtends({
            UNSAFE_className: classNames($fbfe205054a1d09dba6b25d1f1121e$$interop$default, 'spectrum-Dialog-heading', {
                'spectrum-Dialog-heading--noHeader': !hasHeader
            })
        }, titleProps),
        typeIcon: {
            UNSAFE_className: $fbfe205054a1d09dba6b25d1f1121e$$interop$default['spectrum-Dialog-typeIcon']
        },
        divider: {
            UNSAFE_className: $fbfe205054a1d09dba6b25d1f1121e$$interop$default['spectrum-Dialog-divider'],
            size: 'M'
        },
        content: {
            UNSAFE_className: $fbfe205054a1d09dba6b25d1f1121e$$interop$default['spectrum-Dialog-content']
        },
        footer: {
            UNSAFE_className: $fbfe205054a1d09dba6b25d1f1121e$$interop$default['spectrum-Dialog-footer']
        },
        buttonGroup: {
            UNSAFE_className: classNames($fbfe205054a1d09dba6b25d1f1121e$$interop$default, 'spectrum-Dialog-buttonGroup', {
                'spectrum-Dialog-buttonGroup--noFooter': !hasFooter
            }),
            align: 'end'
        }
    }; // If rendered in a popover or tray there won't be a visible dismiss button,
    // so we render a hidden one for screen readers.
    let dismissButton;
    if (type === 'popover' || type === 'tray') dismissButton = /*#__PURE__*/ _react.createElement(DismissButton, {
        onDismiss: onDismiss
    });
    return(/*#__PURE__*/ _react.createElement(FocusScope, {
        contain: true,
        restoreFocus: true
    }, /*#__PURE__*/ _react.createElement("section", _babelRuntimeHelpersExtends({
    }, styleProps, dialogProps, {
        className: classNames($fbfe205054a1d09dba6b25d1f1121e$$interop$default, 'spectrum-Dialog', {
            ["spectrum-Dialog--" + sizeVariant]: sizeVariant,
            'spectrum-Dialog--dismissable': isDismissable
        }, styleProps.className),
        ref: domRef
    }), /*#__PURE__*/ _react.createElement(Grid, {
        ref: gridRef,
        UNSAFE_className: $fbfe205054a1d09dba6b25d1f1121e$$interop$default['spectrum-Dialog-grid']
    }, /*#__PURE__*/ _react.createElement(SlotProvider, {
        slots: slots
    }, children), isDismissable && /*#__PURE__*/ _react.createElement(ActionButton, {
        UNSAFE_className: $fbfe205054a1d09dba6b25d1f1121e$$interop$default['spectrum-Dialog-closeButton'],
        isQuiet: true,
        "aria-label": formatMessage('dismiss'),
        onPress: onDismiss
    }, /*#__PURE__*/ _react.createElement(_spectrumIconsUiCrossLarge, null))), dismissButton)));
}
/**
 * Dialogs are windows containing contextual information, tasks, or workflows that appear over the user interface.
 * Depending on the kind of Dialog, further interactions may be blocked until the Dialog is acknowledged.
 */ let Dialog = /*#__PURE__*/ _react.forwardRef($c24df1e30ea6d5a25486b1eedd756cd$var$Dialog);
exports.Dialog = Dialog;
// @ts-ignore
const $eab8b93d67846b9c7317cd8c3302e$var$intlMessages = {
    "ar-AE": _babelRuntimeHelpersInteropRequireDefault($f2edaf9535940dd293a1a150d42$exports).default,
    "bg-BG": _babelRuntimeHelpersInteropRequireDefault($d47657a60dce6a446561e463337d2$exports).default,
    "cs-CZ": _babelRuntimeHelpersInteropRequireDefault($aaf41d86207773bd33a13b9c2fdefae$exports).default,
    "da-DK": _babelRuntimeHelpersInteropRequireDefault($fada89492396f01795b6d8b9fc048c31$exports).default,
    "de-DE": _babelRuntimeHelpersInteropRequireDefault($c2039f98a7a2414febd720ea9aa4dc2f$exports).default,
    "el-GR": _babelRuntimeHelpersInteropRequireDefault($f92c77e840e1d8faa1120faf4d27c4$exports).default,
    "en-US": _babelRuntimeHelpersInteropRequireDefault($a56b0afce6e287db171a623c273f17$exports).default,
    "es-ES": _babelRuntimeHelpersInteropRequireDefault($e013ca62a636e891abe4d8813d0fa63b$exports).default,
    "et-EE": _babelRuntimeHelpersInteropRequireDefault($d9f24cb243acc68efd43118dac82e0$exports).default,
    "fi-FI": _babelRuntimeHelpersInteropRequireDefault($aaaee9140d3768cedf8e286877d9$exports).default,
    "fr-FR": _babelRuntimeHelpersInteropRequireDefault($a432d3ac150f27a29b3c5530a1df9$exports).default,
    "he-IL": _babelRuntimeHelpersInteropRequireDefault($a81768068b9aa62104194470cc3f0654$exports).default,
    "hr-HR": _babelRuntimeHelpersInteropRequireDefault($e5036b5739d845cfe9f6783a407$exports).default,
    "hu-HU": _babelRuntimeHelpersInteropRequireDefault($cc5a75ca5b505e558eed9c1835f94f1e$exports).default,
    "it-IT": _babelRuntimeHelpersInteropRequireDefault($c4a696abd1a16f20e2b4b003fbf6fbdb$exports).default,
    "ja-JP": _babelRuntimeHelpersInteropRequireDefault($addaf646413c8be95a79f38e6345b8f2$exports).default,
    "ko-KR": _babelRuntimeHelpersInteropRequireDefault($e3657a3eacf72d4741ea8f0b9$exports).default,
    "lt-LT": _babelRuntimeHelpersInteropRequireDefault($c51dfe5990613a5f294275b6e13ecc$exports).default,
    "lv-LV": _babelRuntimeHelpersInteropRequireDefault($ce2aae655de1b6e293ec050756a5dcb$exports).default,
    "nb-NO": _babelRuntimeHelpersInteropRequireDefault($f61ed65bb5df99f0804c45d92ed2ab3e$exports).default,
    "nl-NL": _babelRuntimeHelpersInteropRequireDefault($f1cfa4f0ca509c1473646b05bba816a$exports).default,
    "pl-PL": _babelRuntimeHelpersInteropRequireDefault($c3a456ea785d7b1d4b0e87a09dbcaab4$exports).default,
    "pt-BR": _babelRuntimeHelpersInteropRequireDefault($c9f6f2f98f8796205b43b84ad72b916c$exports).default,
    "pt-PT": _babelRuntimeHelpersInteropRequireDefault($ddf8a9d40eed12ce095aa68902274da$exports).default,
    "ro-RO": _babelRuntimeHelpersInteropRequireDefault($e44701ea63d9c73bbe297bd12d650f99$exports).default,
    "ru-RU": _babelRuntimeHelpersInteropRequireDefault($c1caed8a35bc9ad3bcb054625de80$exports).default,
    "sk-SK": _babelRuntimeHelpersInteropRequireDefault($d550e21bd881bd66512a8a38d56ac2af$exports).default,
    "sl-SI": _babelRuntimeHelpersInteropRequireDefault($a41b4f2e1963020b3a952fcb7469da5d$exports).default,
    "sr-SP": _babelRuntimeHelpersInteropRequireDefault($b920d0a0d010e9dff65cb2996b08c573$exports).default,
    "sv-SE": _babelRuntimeHelpersInteropRequireDefault($bc2e864b27d5d33a55efa85d4c6d$exports).default,
    "tr-TR": _babelRuntimeHelpersInteropRequireDefault($fd3766a3dabdd75be0640de4e2a917$exports).default,
    "uk-UA": _babelRuntimeHelpersInteropRequireDefault($ff96347c2e8f1ff2c2f9ebfa4c1f3$exports).default,
    "zh-CN": _babelRuntimeHelpersInteropRequireDefault($f24d62a73ef94c1435318b9f95e0e1$exports).default,
    "zh-TW": _babelRuntimeHelpersInteropRequireDefault($a102752d8d7f8dcfc276715c9d290294$exports).default
};
/**
 * AlertDialogs are a specific type of Dialog. They display important information that users need to acknowledge.
 */ function $eab8b93d67846b9c7317cd8c3302e$var$AlertDialog(props, ref) {
    let { onClose =()=>{
    }  } = useContext($acaf784a76233553d69f87911a6848$export$DialogContext) || {
    };
    let { variant , children , primaryActionLabel , secondaryActionLabel , cancelLabel , autoFocusButton , title , isPrimaryActionDisabled , isSecondaryActionDisabled , onCancel =()=>{
    } , onPrimaryAction =()=>{
    } , onSecondaryAction =()=>{
    }  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "variant",
        "children",
        "primaryActionLabel",
        "secondaryActionLabel",
        "cancelLabel",
        "autoFocusButton",
        "title",
        "isPrimaryActionDisabled",
        "isSecondaryActionDisabled",
        "onCancel",
        "onPrimaryAction",
        "onSecondaryAction"
    ]);
    let { styleProps  } = useStyleProps(otherProps);
    let formatMessage = useMessageFormatter($eab8b93d67846b9c7317cd8c3302e$var$intlMessages);
    let confirmVariant = 'primary';
    if (variant) {
        if (variant === 'confirmation') confirmVariant = 'cta';
        else if (variant === 'destructive') confirmVariant = 'negative';
    }
    return(/*#__PURE__*/ _react.createElement(Dialog, {
        UNSAFE_style: styleProps.style,
        UNSAFE_className: classNames($fbfe205054a1d09dba6b25d1f1121e$$interop$default, {
            ["spectrum-Dialog--" + variant]: variant
        }, styleProps.className),
        isHidden: styleProps.hidden,
        size: "M",
        role: "alertdialog",
        ref: ref
    }, /*#__PURE__*/ _react.createElement(Heading, null, title), (variant === 'error' || variant === 'warning') && /*#__PURE__*/ _react.createElement(_spectrumIconsUiAlertMedium, {
        slot: "typeIcon",
        "aria-label": formatMessage('alert')
    }), /*#__PURE__*/ _react.createElement(Divider, null), /*#__PURE__*/ _react.createElement(Content, null, children), /*#__PURE__*/ _react.createElement(ButtonGroup, {
        align: "end"
    }, cancelLabel && /*#__PURE__*/ _react.createElement(Button, {
        variant: "secondary",
        onPress: ()=>chain(onClose(), onCancel())
        ,
        autoFocus: autoFocusButton === 'cancel'
    }, cancelLabel), secondaryActionLabel && /*#__PURE__*/ _react.createElement(Button, {
        variant: "secondary",
        onPress: ()=>chain(onClose(), onSecondaryAction())
        ,
        isDisabled: isSecondaryActionDisabled,
        autoFocus: autoFocusButton === 'secondary'
    }, secondaryActionLabel), /*#__PURE__*/ _react.createElement(Button, {
        variant: confirmVariant,
        onPress: ()=>chain(onClose(), onPrimaryAction())
        ,
        isDisabled: isPrimaryActionDisabled,
        autoFocus: autoFocusButton === 'primary'
    }, primaryActionLabel))));
}
/**
 * AlertDialogs are a specific type of Dialog. They display important information that users need to acknowledge.
 */ let AlertDialog = /*#__PURE__*/ forwardRef($eab8b93d67846b9c7317cd8c3302e$var$AlertDialog);
exports.AlertDialog = AlertDialog;
function $e8eede229dc4bb152d31b6896bc207be$var$DialogTrigger(props) {
    let { children , type ='modal' , mobileType =type === 'popover' ? 'modal' : type , hideArrow , targetRef , isDismissable , isKeyboardDismissDisabled  } = props, positionProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "children",
        "type",
        "mobileType",
        "hideArrow",
        "targetRef",
        "isDismissable",
        "isKeyboardDismissDisabled"
    ]);
    if (!Array.isArray(children) || children.length > 2) throw new Error('DialogTrigger must have exactly 2 children');
     // if a function is passed as the second child, it won't appear in toArray
    let [trigger, content] = children; // On small devices, show a modal or tray instead of a popover.
    // TODO: DNA variable?
    let isMobile = useMediaQuery('(max-width: 700px)');
    if (isMobile) {
        // handle cases where desktop popovers need a close button for the mobile modal view
        if (type !== 'modal' && mobileType === 'modal') isDismissable = true;
        type = mobileType;
    }
    let state = useOverlayTriggerState(props);
    let wasOpen = useRef(false);
    wasOpen.current = state.isOpen;
    let isExiting = useRef(false);
    let onExiting = ()=>isExiting.current = true
    ;
    let onExited = ()=>isExiting.current = false
    ; // eslint-disable-next-line arrow-body-style
    useEffect(()=>{
        return ()=>{
            if ((wasOpen.current || isExiting.current) && type !== 'popover' && type !== 'tray') console.warn('A DialogTrigger unmounted while open. This is likely due to being placed within a trigger that unmounts or inside a conditional. Consider using a DialogContainer instead.');
        };
    }, []);
    if (type === 'popover') return(/*#__PURE__*/ _react.createElement($e8eede229dc4bb152d31b6896bc207be$var$PopoverTrigger, _babelRuntimeHelpersExtends({
    }, positionProps, {
        state: state,
        targetRef: targetRef,
        trigger: trigger,
        content: content,
        isKeyboardDismissDisabled: isKeyboardDismissDisabled,
        hideArrow: hideArrow
    })));
    let renderOverlay = ()=>{
        switch(type){
            case 'fullscreen':
            case 'fullscreenTakeover':
            case 'modal':
                return(/*#__PURE__*/ _react.createElement(Modal, {
                    isOpen: state.isOpen,
                    isDismissable: type === 'modal' ? isDismissable : false,
                    onClose: state.close,
                    type: type,
                    isKeyboardDismissDisabled: isKeyboardDismissDisabled,
                    onExiting: onExiting,
                    onExited: onExited
                }, typeof content === 'function' ? content(state.close) : content));
            case 'tray':
                return(/*#__PURE__*/ _react.createElement(Tray, {
                    isOpen: state.isOpen,
                    onClose: state.close,
                    isKeyboardDismissDisabled: isKeyboardDismissDisabled
                }, typeof content === 'function' ? content(state.close) : content));
        }
    };
    return(/*#__PURE__*/ _react.createElement($e8eede229dc4bb152d31b6896bc207be$var$DialogTriggerBase, {
        type: type,
        state: state,
        isDismissable: isDismissable,
        trigger: trigger,
        overlay: renderOverlay()
    }));
} // Support DialogTrigger inside components using CollectionBuilder.
$e8eede229dc4bb152d31b6896bc207be$var$DialogTrigger.getCollectionNode = function*(props) {
    let [trigger] = _react.Children.toArray(props.children);
    let [, content] = props.children;
    yield {
        element: trigger,
        wrapper: (element)=>/*#__PURE__*/ _react.createElement($e8eede229dc4bb152d31b6896bc207be$var$DialogTrigger, _babelRuntimeHelpersExtends({
                key: element.key
            }, props), element, content)
    };
};
/**
 * DialogTrigger serves as a wrapper around a Dialog and its associated trigger, linking the Dialog's
 * open state with the trigger's press state. Additionally, it allows you to customize the type and
 * positioning of the Dialog.
 */ // We don't want getCollectionNode to show up in the type definition
let DialogTrigger = $e8eede229dc4bb152d31b6896bc207be$var$DialogTrigger;
exports.DialogTrigger = DialogTrigger;
function $e8eede229dc4bb152d31b6896bc207be$var$PopoverTrigger(_ref) {
    let { state , targetRef , trigger , content , hideArrow , isKeyboardDismissDisabled  } = _ref, props = _babelRuntimeHelpersObjectWithoutPropertiesLoose(_ref, [
        "state",
        "targetRef",
        "trigger",
        "content",
        "hideArrow",
        "isKeyboardDismissDisabled"
    ]);
    let triggerRef = useRef();
    let overlayRef = useRef();
    let { overlayProps: popoverProps , placement , arrowProps  } = useOverlayPosition({
        targetRef: targetRef || triggerRef,
        overlayRef: unwrapDOMRef(overlayRef),
        placement: props.placement,
        containerPadding: props.containerPadding,
        offset: props.offset,
        crossOffset: props.crossOffset,
        shouldFlip: props.shouldFlip,
        isOpen: state.isOpen
    });
    let { triggerProps , overlayProps  } = useOverlayTrigger({
        type: 'dialog'
    }, state, triggerRef);
    let triggerPropsWithRef = _babelRuntimeHelpersExtends({
    }, triggerProps, {
        ref: targetRef ? undefined : triggerRef
    });
    let overlay = /*#__PURE__*/ _react.createElement(Popover, {
        isOpen: state.isOpen,
        UNSAFE_style: popoverProps.style,
        ref: overlayRef,
        onClose: state.close,
        placement: placement,
        arrowProps: arrowProps,
        isKeyboardDismissDisabled: isKeyboardDismissDisabled,
        hideArrow: hideArrow
    }, typeof content === 'function' ? content(state.close) : content);
    return(/*#__PURE__*/ _react.createElement($e8eede229dc4bb152d31b6896bc207be$var$DialogTriggerBase, {
        type: "popover",
        state: state,
        triggerProps: triggerPropsWithRef,
        dialogProps: overlayProps,
        trigger: trigger,
        overlay: overlay
    }));
}
function $e8eede229dc4bb152d31b6896bc207be$var$DialogTriggerBase(_ref2) {
    let { type , state , isDismissable , dialogProps ={
    } , triggerProps ={
    } , overlay , trigger  } = _ref2;
    let context = _babelRuntimeHelpersExtends({
        type,
        onClose: state.close,
        isDismissable
    }, dialogProps);
    return(/*#__PURE__*/ _react.createElement(Fragment, null, /*#__PURE__*/ _react.createElement(PressResponder, _babelRuntimeHelpersExtends({
    }, triggerProps, {
        onPress: state.toggle,
        isPressed: state.isOpen && type !== 'modal' && type !== 'fullscreen' && type !== 'fullscreenTakeover'
    }), trigger), /*#__PURE__*/ _react.createElement($acaf784a76233553d69f87911a6848$export$DialogContext.Provider, {
        value: context
    }, overlay)));
}
/**
 * A DialogContainer accepts a single Dialog as a child, and manages showing and hiding
 * it in a modal. Useful in cases where there is no trigger element
 * or when the trigger unmounts while the dialog is open.
 */ function DialogContainer(props) {
    let { children , type ='modal' , onDismiss , isDismissable , isKeyboardDismissDisabled  } = props;
    let childArray = _react.Children.toArray(children);
    if (childArray.length > 1) throw new Error('Only a single child can be passed to DialogContainer.');
    let lastChild = useRef(null);
    let child = /*#__PURE__*/ _react.isValidElement(childArray[0]) ? childArray[0] : null;
    if (child) lastChild.current = child;
    let context = {
        type,
        onClose: onDismiss,
        isDismissable
    };
    return(/*#__PURE__*/ _react.createElement(Modal, {
        isOpen: !!child,
        onClose: onDismiss,
        type: type,
        isDismissable: isDismissable,
        isKeyboardDismissDisabled: isKeyboardDismissDisabled
    }, /*#__PURE__*/ _react.createElement($acaf784a76233553d69f87911a6848$export$DialogContext.Provider, {
        value: context
    }, lastChild.current)));
}
exports.DialogContainer = DialogContainer;
function useDialogContainer() {
    let context = useContext($acaf784a76233553d69f87911a6848$export$DialogContext);
    if (!context) throw new Error('Cannot call useDialogContext outside a <DialogTrigger> or <DialogContainer>.');
    return {
        type: context.type,
        dismiss () {
            context.onClose();
        }
    };
}
exports.useDialogContainer = useDialogContainer;

},{"@react-aria/interactions":"3irYN","@react-stately/overlays":"XwYBm","@react-spectrum/overlays":"4hImP","@react-spectrum/text":"ib5WK","@react-spectrum/divider":"5qXIL","@react-aria/i18n":"6xZcx","@react-aria/dialog":"3y3lg","@react-spectrum/layout":"5dHqK","@react-aria/focus":"76fMY","@react-aria/overlays":"6I1ei","react":"a6qBW","@spectrum-icons/ui/CrossLarge":"7koUm","@babel/runtime/helpers/extends":"5xz6u","@react-spectrum/view":"UmtbT","@react-spectrum/utils":"7ch5A","@react-aria/utils":"d8qxy","@react-spectrum/buttongroup":"3AsKW","@react-spectrum/button":"7zChe","@spectrum-icons/ui/AlertMedium":"3zVMj","@babel/runtime/helpers/interopRequireDefault":"5TvsK","@babel/runtime/helpers/objectWithoutPropertiesLoose":"5byko","./main.css":"W7FTB"}],"5qXIL":[function(require,module,exports) {
var { useSeparator  } = require("@react-aria/separator");
var _react = $parcel$interopDefault(require("react"));
var { classNames , useDOMRef , useSlotProps , useStyleProps  } = require("@react-spectrum/utils");
var _babelRuntimeHelpersObjectWithoutPropertiesLoose = $parcel$interopDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
require("./main.css");
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/rule/vars.css
var $f071c3a3bba6252cdbc96ffd809c9e$exports = {
};
$f071c3a3bba6252cdbc96ffd809c9e$exports = {
    "spectrum-Rule": "_spectrum-Rule_3c70b",
    "spectrum-Rule--large": "_spectrum-Rule--large_3c70b",
    "spectrum-Rule--medium": "_spectrum-Rule--medium_3c70b",
    "spectrum-Rule--small": "_spectrum-Rule--small_3c70b",
    "spectrum-Rule--horizontal": "_spectrum-Rule--horizontal_3c70b",
    "spectrum-Rule--vertical": "_spectrum-Rule--vertical_3c70b"
};
let $e4a3649e5820982ed2d66266f2$var$sizeMap = {
    S: 'small',
    M: 'medium',
    L: 'large'
};
var $f071c3a3bba6252cdbc96ffd809c9e$$interop$default = $parcel$interopDefault($f071c3a3bba6252cdbc96ffd809c9e$exports);
function $e4a3649e5820982ed2d66266f2$var$Divider(props, ref) {
    props = useSlotProps(props, 'divider');
    let { size ='L' , orientation ='horizontal'  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "size",
        "orientation"
    ]);
    let domRef = useDOMRef(ref);
    let { styleProps  } = useStyleProps(otherProps);
    let weight = $e4a3649e5820982ed2d66266f2$var$sizeMap[size];
    let Element1 = 'hr';
    if (orientation === 'vertical') Element1 = 'div';
    let { separatorProps  } = useSeparator(_babelRuntimeHelpersExtends({
    }, props, {
        elementType: Element1
    }));
    return(/*#__PURE__*/ _react.createElement(Element1, _babelRuntimeHelpersExtends({
    }, styleProps, {
        className: classNames($f071c3a3bba6252cdbc96ffd809c9e$$interop$default, 'spectrum-Rule', "spectrum-Rule--" + weight, {
            'spectrum-Rule--vertical': orientation === 'vertical',
            'spectrum-Rule--horizontal': orientation === 'horizontal'
        }, styleProps.className),
        ref: domRef
    }, separatorProps)));
}
/**
 * Dividers bring clarity to a layout by grouping and dividing content in close proximity.
 * They can also be used to establish rhythm and hierarchy.
 */ let Divider = /*#__PURE__*/ _react.forwardRef($e4a3649e5820982ed2d66266f2$var$Divider);
exports.Divider = Divider;

},{"@react-aria/separator":"1gzBL","react":"a6qBW","@react-spectrum/utils":"7ch5A","@babel/runtime/helpers/objectWithoutPropertiesLoose":"5byko","@babel/runtime/helpers/extends":"5xz6u","./main.css":"u0dsm"}],"u0dsm":[function() {},{}],"3y3lg":[function(require,module,exports) {
var { useEffect  } = require("react");
var { focusSafely  } = require("@react-aria/focus");
var { filterDOMProps , useSlotId  } = require("@react-aria/utils");
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
/**
 * Provides the behavior and accessibility implementation for a dialog component.
 * A dialog is an overlay shown above other content in an application.
 */ function useDialog(props, ref) {
    let { role ='dialog'  } = props;
    let titleId = useSlotId();
    titleId = props['aria-label'] ? undefined : titleId; // Focus the dialog itself on mount, unless a child element is already focused.
    useEffect(()=>{
        if (ref.current && !ref.current.contains(document.activeElement)) {
            focusSafely(ref.current); // Safari on iOS does not move the VoiceOver cursor to the dialog
            // or announce that it has opened until it has rendered. A workaround
            // is to wait for half a second, then blur and re-focus the dialog.
            let timeout = setTimeout(()=>{
                if (document.activeElement === ref.current) {
                    ref.current.blur();
                    focusSafely(ref.current);
                }
            }, 500);
            return ()=>{
                clearTimeout(timeout);
            };
        }
    }, [
        ref
    ]); // We do not use aria-modal due to a Safari bug which forces the first focusable element to be focused
    // on mount when inside an iframe, no matter which element we programmatically focus.
    // See https://bugs.webkit.org/show_bug.cgi?id=211934.
    // useModal sets aria-hidden on all elements outside the dialog, so the dialog will behave as a modal
    // even without aria-modal on the dialog itself.
    return {
        dialogProps: _babelRuntimeHelpersExtends({
        }, filterDOMProps(props, {
            labelable: true
        }), {
            role,
            tabIndex: -1,
            'aria-labelledby': props['aria-labelledby'] || titleId
        }),
        titleProps: {
            id: titleId
        }
    };
}
exports.useDialog = useDialog;

},{"react":"a6qBW","@react-aria/focus":"76fMY","@react-aria/utils":"d8qxy","@babel/runtime/helpers/extends":"5xz6u"}],"7koUm":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = CrossLarge;
var _CrossLarge = require("@adobe/react-spectrum-ui/dist/CrossLarge");
var _icon = require("@react-spectrum/icon");
var _react = _interopRequireDefault(require("react"));
function CrossLarge(props) {
    return(/*#__PURE__*/ _react.default.createElement(_icon.UIIcon, props, /*#__PURE__*/ _react.default.createElement(_CrossLarge.CrossLarge, null)));
}

},{"@babel/runtime/helpers/interopRequireDefault":"5TvsK","@adobe/react-spectrum-ui/dist/CrossLarge":"3dYaR","@react-spectrum/icon":"5ij4g","react":"a6qBW"}],"3dYaR":[function(require,module,exports) {
/**
* @adobe/react-spectrum-ui (c) by Adobe
* 
* @adobe/react-spectrum-ui is licensed under a
* Creative Commons Attribution-NoDerivatives 4.0 International License.
* 
* You should have received a copy of the license along with this
* work. If not, see <http://creativecommons.org/licenses/by-nd/4.0/>.
**/ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CrossLarge = CrossLarge;
var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutProperties(source, excluded) {
    if (source == null) return {
    };
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function CrossLarge(_ref) {
    var _ref$scale = _ref.scale, scale = _ref$scale === void 0 ? 'M' : _ref$scale, props = _objectWithoutProperties(_ref, [
        "scale"
    ]);
    return _react["default"].createElement("svg", _extends({
    }, props, props), scale === 'L' && _react["default"].createElement("path", {
        d: "M15.697 14.283L9.414 8l6.283-6.283A1 1 0 1 0 14.283.303L8 6.586 1.717.303A1 1 0 1 0 .303 1.717L6.586 8 .303 14.283a1 1 0 1 0 1.414 1.414L8 9.414l6.283 6.283a1 1 0 1 0 1.414-1.414z"
    }), scale === 'M' && _react["default"].createElement("path", {
        d: "M11.697 10.283L7.414 6l4.283-4.283A1 1 0 1 0 10.283.303L6 4.586 1.717.303A1 1 0 1 0 .303 1.717L4.586 6 .303 10.283a1 1 0 1 0 1.414 1.414L6 7.414l4.283 4.283a1 1 0 1 0 1.414-1.414z"
    }));
}
CrossLarge.displayName = 'CrossLarge';

},{"react":"a6qBW"}],"UmtbT":[function(require,module,exports) {
var _react2 = require("react");
var _react = $parcel$interopDefault(_react2);
var { forwardRef  } = _react2;
var { filterDOMProps  } = require("@react-aria/utils");
var { ClearSlots , useDOMRef , useSlotProps , useStyleProps , viewStyleProps  } = require("@react-spectrum/utils");
var _babelRuntimeHelpersObjectWithoutPropertiesLoose = $parcel$interopDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
function $cb4e2cb36ae5e3ab01f62ab7d1672c67$var$View(props, ref) {
    props = useSlotProps(props);
    let { elementType: ElementType = 'div' , children  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "elementType",
        "children"
    ]);
    let { styleProps  } = useStyleProps(props, viewStyleProps);
    let domRef = useDOMRef(ref);
    return(/*#__PURE__*/ _react.createElement(ElementType, _babelRuntimeHelpersExtends({
    }, filterDOMProps(otherProps), styleProps, {
        ref: domRef
    }), /*#__PURE__*/ _react.createElement(ClearSlots, null, children)));
}
/**
 * View is a general purpose container with no specific semantics that can be used for custom styling purposes.
 * It supports Spectrum style props to ensure consistency with other Spectrum components.
 */ const View = /*#__PURE__*/ forwardRef($cb4e2cb36ae5e3ab01f62ab7d1672c67$var$View);
exports.View = View;
function $b1630a1ad5492629b7ba4ec7eeabf6d2$var$Content(props, ref) {
    props = useSlotProps(props, 'content');
    let { children  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "children"
    ]);
    let { styleProps  } = useStyleProps(otherProps);
    let domRef = useDOMRef(ref);
    return(/*#__PURE__*/ _react.createElement("section", _babelRuntimeHelpersExtends({
    }, filterDOMProps(otherProps), styleProps, {
        ref: domRef
    }), /*#__PURE__*/ _react.createElement(ClearSlots, null, children)));
}
/**
 * Content represents the primary content within a Spectrum container.
 */ const Content = /*#__PURE__*/ forwardRef($b1630a1ad5492629b7ba4ec7eeabf6d2$var$Content);
exports.Content = Content;
function $e94eeee6ece39151e8a4902927dc1d5c$var$Footer(props, ref) {
    props = useSlotProps(props, 'footer');
    let { children  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "children"
    ]);
    let { styleProps  } = useStyleProps(otherProps);
    let domRef = useDOMRef(ref);
    return(/*#__PURE__*/ _react.createElement("footer", _babelRuntimeHelpersExtends({
    }, filterDOMProps(otherProps), styleProps, {
        ref: domRef
    }), /*#__PURE__*/ _react.createElement(ClearSlots, null, children)));
}
/**
 * Footer represents a footer within a Spectrum container.
 */ const Footer = /*#__PURE__*/ forwardRef($e94eeee6ece39151e8a4902927dc1d5c$var$Footer);
exports.Footer = Footer;
function $fd6476b36977b4ef8b9643920fa5b3$var$Header(props, ref) {
    props = useSlotProps(props, 'header');
    let { children  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "children"
    ]);
    let { styleProps  } = useStyleProps(otherProps);
    let domRef = useDOMRef(ref);
    return(/*#__PURE__*/ _react.createElement("header", _babelRuntimeHelpersExtends({
    }, filterDOMProps(otherProps), styleProps, {
        ref: domRef
    }), /*#__PURE__*/ _react.createElement(ClearSlots, null, children)));
}
const Header = /*#__PURE__*/ forwardRef($fd6476b36977b4ef8b9643920fa5b3$var$Header);
exports.Header = Header;

},{"react":"a6qBW","@react-aria/utils":"d8qxy","@react-spectrum/utils":"7ch5A","@babel/runtime/helpers/objectWithoutPropertiesLoose":"5byko","@babel/runtime/helpers/extends":"5xz6u"}],"3zVMj":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = AlertMedium;
var _AlertMedium = require("@adobe/react-spectrum-ui/dist/AlertMedium");
var _icon = require("@react-spectrum/icon");
var _react = _interopRequireDefault(require("react"));
function AlertMedium(props) {
    return(/*#__PURE__*/ _react.default.createElement(_icon.UIIcon, props, /*#__PURE__*/ _react.default.createElement(_AlertMedium.AlertMedium, null)));
}

},{"@babel/runtime/helpers/interopRequireDefault":"5TvsK","@adobe/react-spectrum-ui/dist/AlertMedium":"7Alg9","@react-spectrum/icon":"5ij4g","react":"a6qBW"}],"7Alg9":[function(require,module,exports) {
/**
* @adobe/react-spectrum-ui (c) by Adobe
* 
* @adobe/react-spectrum-ui is licensed under a
* Creative Commons Attribution-NoDerivatives 4.0 International License.
* 
* You should have received a copy of the license along with this
* work. If not, see <http://creativecommons.org/licenses/by-nd/4.0/>.
**/ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AlertMedium = AlertMedium;
var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutProperties(source, excluded) {
    if (source == null) return {
    };
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function AlertMedium(_ref) {
    var _ref$scale = _ref.scale, scale = _ref$scale === void 0 ? 'M' : _ref$scale, props = _objectWithoutProperties(_ref, [
        "scale"
    ]);
    return _react["default"].createElement("svg", _extends({
    }, props, props), scale === 'L' && _react["default"].createElement("path", {
        d: "M10.563 2.206l-9.249 16.55a.5.5 0 0 0 .436.744h18.5a.5.5 0 0 0 .436-.744l-9.251-16.55a.5.5 0 0 0-.872 0zm1.436 15.044a.25.25 0 0 1-.25.25h-1.5a.25.25 0 0 1-.25-.25v-1.5a.25.25 0 0 1 .25-.25h1.5a.25.25 0 0 1 .25.25zm0-3.5a.25.25 0 0 1-.25.25h-1.5a.25.25 0 0 1-.25-.25v-6a.25.25 0 0 1 .25-.25h1.5a.25.25 0 0 1 .25.25z"
    }), scale === 'M' && _react["default"].createElement("path", {
        d: "M8.564 1.289L.2 16.256A.5.5 0 0 0 .636 17h16.728a.5.5 0 0 0 .436-.744L9.436 1.289a.5.5 0 0 0-.872 0zM10 14.75a.25.25 0 0 1-.25.25h-1.5a.25.25 0 0 1-.25-.25v-1.5a.25.25 0 0 1 .25-.25h1.5a.25.25 0 0 1 .25.25zm0-3a.25.25 0 0 1-.25.25h-1.5a.25.25 0 0 1-.25-.25v-6a.25.25 0 0 1 .25-.25h1.5a.25.25 0 0 1 .25.25z"
    }));
}
AlertMedium.displayName = 'AlertMedium';

},{"react":"a6qBW"}],"W7FTB":[function() {},{}],"5S9kZ":[function(require,module,exports) {
var _react2 = require("react");
var _react = $parcel$interopDefault(_react2);
var { forwardRef  } = _react2;
var { Flex  } = require("@react-spectrum/layout");
var { filterDOMProps  } = require("@react-aria/utils");
var { classNames , SlotProvider , useStyleProps  } = require("@react-spectrum/utils");
var _babelRuntimeHelpersObjectWithoutPropertiesLoose = $parcel$interopDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
require("./main.css");
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/illustratedmessage/vars.css
var $d60c55dd9275bfa835b7fd2144f842a$exports = {
};
$d60c55dd9275bfa835b7fd2144f842a$exports = {
    "spectrum-IllustratedMessage": "_spectrum-IllustratedMessage_5a24b",
    "spectrum-IllustratedMessage-heading": "_spectrum-IllustratedMessage-heading_5a24b",
    "spectrum-IllustratedMessage-description": "_spectrum-IllustratedMessage-description_5a24b",
    "spectrum-IllustratedMessage--cta": "_spectrum-IllustratedMessage--cta_5a24b"
};
var $d60c55dd9275bfa835b7fd2144f842a$$interop$default = $parcel$interopDefault($d60c55dd9275bfa835b7fd2144f842a$exports);
function $e32162d4bddfb5035ea02d99d070645$var$IllustratedMessage(props, ref) {
    let { children  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "children"
    ]);
    let { styleProps  } = useStyleProps(otherProps);
    let headingClassName = classNames($d60c55dd9275bfa835b7fd2144f842a$$interop$default, 'spectrum-IllustratedMessage-heading');
    let contentClassName = classNames($d60c55dd9275bfa835b7fd2144f842a$$interop$default, 'spectrum-IllustratedMessage-description');
    let slots = {
        heading: {
            UNSAFE_className: headingClassName
        },
        content: {
            UNSAFE_className: contentClassName
        }
    };
    return(/*#__PURE__*/ _react.createElement(Flex, _babelRuntimeHelpersExtends({
    }, filterDOMProps(otherProps), {
        UNSAFE_style: styleProps.style,
        isHidden: styleProps.hidden,
        UNSAFE_className: classNames($d60c55dd9275bfa835b7fd2144f842a$$interop$default, 'spectrum-IllustratedMessage', styleProps.className),
        ref: ref
    }), /*#__PURE__*/ _react.createElement(SlotProvider, {
        slots: slots
    }, children)));
}
/**
 * An IllustratedMessage displays an illustration and a message, usually
 * for an empty state or an error page.
 */ let IllustratedMessage = /*#__PURE__*/ forwardRef($e32162d4bddfb5035ea02d99d070645$var$IllustratedMessage);
exports.IllustratedMessage = IllustratedMessage;

},{"react":"a6qBW","@react-spectrum/layout":"5dHqK","@react-aria/utils":"d8qxy","@react-spectrum/utils":"7ch5A","@babel/runtime/helpers/objectWithoutPropertiesLoose":"5byko","@babel/runtime/helpers/extends":"5xz6u","./main.css":"2vc15"}],"2vc15":[function() {},{}],"5jpBd":[function(require,module,exports) {
var { useProviderProps  } = require("@react-spectrum/provider");
var _react = $parcel$interopDefault(require("react"));
var { filterDOMProps  } = require("@react-aria/utils");
var { classNames , useDOMRef , useSlotProps , useStyleProps  } = require("@react-spectrum/utils");
var _babelRuntimeHelpersObjectWithoutPropertiesLoose = $parcel$interopDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
// incomplete component for show right now
function $cdebc9a3e4a86d825a45e81735fc19$var$Image(props, ref) {
    props = useSlotProps(props, 'image');
    let _useProviderProps = useProviderProps(props), { objectFit , src , alt  } = _useProviderProps, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(_useProviderProps, [
        "objectFit",
        "src",
        "alt"
    ]);
    let { styleProps  } = useStyleProps(otherProps);
    let domRef = useDOMRef(ref);
    if (alt == null) console.warn("The `alt` prop was not provided to an image. Add `alt` text for screen readers, or set `alt=\"\"` prop to indicate that the image is decorative or redundant with displayed text and should not be annouced by screen readers.");
    return(/*#__PURE__*/ _react.createElement("div", _babelRuntimeHelpersExtends({
    }, filterDOMProps(props), styleProps, {
        className: classNames({
        }, styleProps.className),
        style: _babelRuntimeHelpersExtends({
        }, styleProps.style, {
            overflow: 'hidden'
        }),
        ref: domRef
    }), /*#__PURE__*/ _react.createElement("img", {
        src: src,
        alt: alt,
        style: {
            objectFit,
            height: '100%',
            width: '100%'
        }
    })));
}
/**
 * Image is used to insert and display an image within a component.
 */ const Image1 = /*#__PURE__*/ _react.forwardRef($cdebc9a3e4a86d825a45e81735fc19$var$Image);
exports.Image = Image1;

},{"@react-spectrum/provider":"3Y6zE","react":"a6qBW","@react-aria/utils":"d8qxy","@react-spectrum/utils":"7ch5A","@babel/runtime/helpers/objectWithoutPropertiesLoose":"5byko","@babel/runtime/helpers/extends":"5xz6u"}],"7Gluf":[function(require,module,exports) {
var { useProviderProps  } = require("@react-spectrum/provider");
var { useLink  } = require("@react-aria/link");
var { useHover  } = require("@react-aria/interactions");
var _react2 = require("react");
var _react = $parcel$interopDefault(_react2);
var { useRef  } = _react2;
var { mergeProps  } = require("@react-aria/utils");
var { FocusRing  } = require("@react-aria/focus");
var { classNames , getWrappedElement , useStyleProps  } = require("@react-spectrum/utils");
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
require("./main.css");
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/link/vars.css
var $ab502cff6933f7953f496b5b8a9d9e20$exports = {
};
$ab502cff6933f7953f496b5b8a9d9e20$exports = {
    "spectrum-Link": "_spectrum-Link_f1e6e",
    "is-hovered": "_is-hovered_f1e6e",
    "focus-ring": "_focus-ring_f1e6e",
    "is-disabled": "_is-disabled_f1e6e",
    "spectrum-Link--secondary": "_spectrum-Link--secondary_f1e6e",
    "spectrum-Link--overBackground": "_spectrum-Link--overBackground_f1e6e",
    "spectrum-Link--quiet": "_spectrum-Link--quiet_f1e6e"
};
var $ab502cff6933f7953f496b5b8a9d9e20$$interop$default = $parcel$interopDefault($ab502cff6933f7953f496b5b8a9d9e20$exports);
/**
 * Links allow users to navigate to a different location.
 * They can be presented inline inside a paragraph or as standalone text.
 */ function Link(props) {
    props = useProviderProps(props);
    let { variant ='primary' , isQuiet , children , // @ts-ignore
    href  } = props;
    let { styleProps  } = useStyleProps(props);
    let { hoverProps , isHovered  } = useHover({
    });
    if (href) console.warn('href is deprecated, please use an anchor element as children');
    let ref = useRef();
    let { linkProps  } = useLink(_babelRuntimeHelpersExtends({
    }, props, {
        elementType: typeof children === 'string' ? 'span' : 'a'
    }), ref);
    return(/*#__PURE__*/ _react.createElement(FocusRing, {
        focusRingClass: classNames($ab502cff6933f7953f496b5b8a9d9e20$$interop$default, 'focus-ring')
    }, /*#__PURE__*/ _react.cloneElement(getWrappedElement(children), _babelRuntimeHelpersExtends({
    }, styleProps, mergeProps(linkProps, hoverProps), {
        ref,
        className: classNames($ab502cff6933f7953f496b5b8a9d9e20$$interop$default, 'spectrum-Link', {
            'spectrum-Link--quiet': isQuiet,
            ["spectrum-Link--" + variant]: variant,
            'is-hovered': isHovered
        }, styleProps.className)
    }))));
}
exports.Link = Link;

},{"@react-spectrum/provider":"3Y6zE","@react-aria/link":"awG4X","@react-aria/interactions":"3irYN","react":"a6qBW","@react-aria/utils":"d8qxy","@react-aria/focus":"76fMY","@react-spectrum/utils":"7ch5A","@babel/runtime/helpers/extends":"5xz6u","./main.css":"5ObGw"}],"5ObGw":[function() {},{}],"2fPzl":[function(require,module,exports) {
var { useListState  } = require("@react-stately/list");
var { useProvider  } = require("@react-spectrum/provider");
var { ProgressCircle  } = require("@react-spectrum/progress");
var { ListLayout  } = require("@react-stately/layout");
var { useSeparator  } = require("@react-aria/separator");
var { useLocale , useCollator , useMessageFormatter  } = require("@react-aria/i18n");
var { layoutInfoToStyle , useVirtualizerItem , Virtualizer , VirtualizerItem  } = require("@react-aria/virtualizer");
var { useOption , useListBoxSection , useListBox  } = require("@react-aria/listbox");
var { Text: Text1  } = require("@react-spectrum/text");
var { mergeProps  } = require("@react-aria/utils");
var { isFocusVisible , useHover  } = require("@react-aria/interactions");
var { Grid  } = require("@react-spectrum/layout");
var { FocusRing  } = require("@react-aria/focus");
var _spectrumIconsUiCheckmarkMedium = $parcel$interopDefault(require("@spectrum-icons/ui/CheckmarkMedium"));
var _react2 = require("react");
var _react = $parcel$interopDefault(_react2);
var { useContext , useRef , Fragment , useMemo  } = _react2;
var { classNames , useStyleProps , SlotProvider , useDOMRef  } = require("@react-spectrum/utils");
var _babelRuntimeHelpersInteropRequireDefault = $parcel$interopDefault(require("@babel/runtime/helpers/interopRequireDefault"));
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
var { Item , Section  } = require("@react-stately/collections");
exports.Section = Section;
exports.Item = Item;
require("./main.css");
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
const $ec3a4d143e5d0ec6923c3de55c68def5$export$ListBoxContext = /*#__PURE__*/ _react.createContext(null);
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/listbox/intl/ar-AE.json
var $a7c4ca3666c7dbafec57ede67bb06cfc$exports = {
};
$a7c4ca3666c7dbafec57ede67bb06cfc$exports = JSON.parse("{\"loading\":\"جار التحميل...\",\"loadingMore\":\"جار تحميل المزيد...\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/listbox/intl/bg-BG.json
var $fc29aff964e054928b9d09c07c5855ec$exports = {
};
$fc29aff964e054928b9d09c07c5855ec$exports = JSON.parse("{\"loading\":\"Зареждане...\",\"loadingMore\":\"Зареждане на още...\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/listbox/intl/cs-CZ.json
var $e8f80ec05c2d18b034fe363acd721b9c$exports = {
};
$e8f80ec05c2d18b034fe363acd721b9c$exports = JSON.parse("{\"loading\":\"Načítání...\",\"loadingMore\":\"Načítání dalších...\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/listbox/intl/da-DK.json
var $def518aaf3069293db83c5702421e10$exports = {
};
$def518aaf3069293db83c5702421e10$exports = JSON.parse("{\"loading\":\"Indlæser ...\",\"loadingMore\":\"Indlæser flere ...\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/listbox/intl/de-DE.json
var $fe8f21e9e2c1a93c8cb941d0e421f4$exports = {
};
$fe8f21e9e2c1a93c8cb941d0e421f4$exports = JSON.parse("{\"loading\":\"Laden...\",\"loadingMore\":\"Mehr laden ...\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/listbox/intl/el-GR.json
var $f3bd974b7decc2c925cac883747f7d9$exports = {
};
$f3bd974b7decc2c925cac883747f7d9$exports = JSON.parse("{\"loading\":\"Φόρτωση...\",\"loadingMore\":\"Φόρτωση περισσότερων...\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/listbox/intl/en-US.json
var $f9615e340042c491f70273dc5d7d799f$exports = {
};
$f9615e340042c491f70273dc5d7d799f$exports = JSON.parse("{\"loading\":\"Loading…\",\"loadingMore\":\"Loading more…\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/listbox/intl/es-ES.json
var $dc72df31f5907f7b99a7f310bcdcf$exports = {
};
$dc72df31f5907f7b99a7f310bcdcf$exports = JSON.parse("{\"loading\":\"Cargando…\",\"loadingMore\":\"Cargando más…\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/listbox/intl/et-EE.json
var $b516a2000bc36b2cf35d235bb86b464c$exports = {
};
$b516a2000bc36b2cf35d235bb86b464c$exports = JSON.parse("{\"loading\":\"Laadimine...\",\"loadingMore\":\"Laadi rohkem...\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/listbox/intl/fi-FI.json
var $b51125fbfd29f483ce27c8021bdf3$exports = {
};
$b51125fbfd29f483ce27c8021bdf3$exports = JSON.parse("{\"loading\":\"Ladataan…\",\"loadingMore\":\"Ladataan lisää…\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/listbox/intl/fr-FR.json
var $a35909637983cfccb5a6ca29e543d51a$exports = {
};
$a35909637983cfccb5a6ca29e543d51a$exports = JSON.parse("{\"loading\":\"Chargement...\",\"loadingMore\":\"Chargement supplémentaire...\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/listbox/intl/he-IL.json
var $d003d8383fd1b2ee26ce0b4fbf0b8133$exports = {
};
$d003d8383fd1b2ee26ce0b4fbf0b8133$exports = JSON.parse("{\"loading\":\"טוען...\",\"loadingMore\":\"טוען עוד...\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/listbox/intl/hr-HR.json
var $c871121a5b6db7b7f821a8361c2d007f$exports = {
};
$c871121a5b6db7b7f821a8361c2d007f$exports = JSON.parse("{\"loading\":\"Učitavam...\",\"loadingMore\":\"Učitavam još...\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/listbox/intl/hu-HU.json
var $a877bb1784d41b572a96c0af3d3d2f$exports = {
};
$a877bb1784d41b572a96c0af3d3d2f$exports = JSON.parse("{\"loading\":\"Betöltés folyamatban…\",\"loadingMore\":\"Továbbiak betöltése folyamatban…\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/listbox/intl/it-IT.json
var $ff93b4800765048fc92cd81c35dec2ad$exports = {
};
$ff93b4800765048fc92cd81c35dec2ad$exports = JSON.parse("{\"loading\":\"Caricamento...\",\"loadingMore\":\"Caricamento altri...\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/listbox/intl/ja-JP.json
var $aaf8e27c61fee0596f953bc229926428$exports = {
};
$aaf8e27c61fee0596f953bc229926428$exports = JSON.parse("{\"loading\":\"読み込み中...\",\"loadingMore\":\"さらに読み込み中...\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/listbox/intl/ko-KR.json
var $c04871f59f03b8f04e12b0b549762$exports = {
};
$c04871f59f03b8f04e12b0b549762$exports = JSON.parse("{\"loading\":\"로드 중\",\"loadingMore\":\"추가 로드 중\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/listbox/intl/lt-LT.json
var $c0902e55ab240816e3e9e570f310f3f6$exports = {
};
$c0902e55ab240816e3e9e570f310f3f6$exports = JSON.parse("{\"loading\":\"Įkeliama...\",\"loadingMore\":\"Įkeliama daugiau...\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/listbox/intl/lv-LV.json
var $c94f13261126323f9a55896b45d1$exports = {
};
$c94f13261126323f9a55896b45d1$exports = JSON.parse("{\"loading\":\"Notiek ielāde...\",\"loadingMore\":\"Tiek ielādēts vēl...\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/listbox/intl/nb-NO.json
var $a7a01f4af867fa5385f47454ed$exports = {
};
$a7a01f4af867fa5385f47454ed$exports = JSON.parse("{\"loading\":\"Laster inn ...\",\"loadingMore\":\"Laster inn flere ...\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/listbox/intl/nl-NL.json
var $f9a9a64a1e6b3f695e43f8fa88af5ba$exports = {
};
$f9a9a64a1e6b3f695e43f8fa88af5ba$exports = JSON.parse("{\"loading\":\"Laden...\",\"loadingMore\":\"Meer laden...\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/listbox/intl/pl-PL.json
var $da4c8d5861f8a2ff809b204e1c393$exports = {
};
$da4c8d5861f8a2ff809b204e1c393$exports = JSON.parse("{\"loading\":\"Ładowanie...\",\"loadingMore\":\"Wczytywanie większej liczby...\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/listbox/intl/pt-BR.json
var $f4848a8cc2acccccaa002fbc64a9cd$exports = {
};
$f4848a8cc2acccccaa002fbc64a9cd$exports = JSON.parse("{\"loading\":\"Carregando...\",\"loadingMore\":\"Carregando mais...\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/listbox/intl/pt-PT.json
var $fce7e6aee16a5254c3470cbbe8a1908$exports = {
};
$fce7e6aee16a5254c3470cbbe8a1908$exports = JSON.parse("{\"loading\":\"A carregar...\",\"loadingMore\":\"A carregar mais...\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/listbox/intl/ro-RO.json
var $ce3520b62d16a1ae19db2856f7fc586$exports = {
};
$ce3520b62d16a1ae19db2856f7fc586$exports = JSON.parse("{\"loading\":\"Se încarcă...\",\"loadingMore\":\"Se încarcă mai multe...\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/listbox/intl/ru-RU.json
var $ce9b8395744654f83babf$exports = {
};
$ce9b8395744654f83babf$exports = JSON.parse("{\"loading\":\"Загрузка...\",\"loadingMore\":\"Дополнительная загрузка...\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/listbox/intl/sk-SK.json
var $d588e26b86ad9e592a1a9ce2c82be2$exports = {
};
$d588e26b86ad9e592a1a9ce2c82be2$exports = JSON.parse("{\"loading\":\"Načítava sa...\",\"loadingMore\":\"Načítava sa viac...\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/listbox/intl/sl-SI.json
var $ba47e84ff8c2147622e9c711878dc539$exports = {
};
$ba47e84ff8c2147622e9c711878dc539$exports = JSON.parse("{\"loading\":\"Nalaganje...\",\"loadingMore\":\"Nalaganje več vsebine...\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/listbox/intl/sr-SP.json
var $fb1103a7932b7b0e12cee2d0697$exports = {
};
$fb1103a7932b7b0e12cee2d0697$exports = JSON.parse("{\"loading\":\"Učitavam...\",\"loadingMore\":\"Učitavam još...\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/listbox/intl/sv-SE.json
var $c36c7a891141f341531e519174d4$exports = {
};
$c36c7a891141f341531e519174d4$exports = JSON.parse("{\"loading\":\"Läser in...\",\"loadingMore\":\"Läser in mer...\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/listbox/intl/tr-TR.json
var $aed39575b05ecc1e3ec3670fdd466610$exports = {
};
$aed39575b05ecc1e3ec3670fdd466610$exports = JSON.parse("{\"loading\":\"Yükleniyor...\",\"loadingMore\":\"Daha fazla yükleniyor...\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/listbox/intl/uk-UA.json
var $d40ebb7fe334b314e29e5a504af63b9d$exports = {
};
$d40ebb7fe334b314e29e5a504af63b9d$exports = JSON.parse("{\"loading\":\"Завантаження…\",\"loadingMore\":\"Завантаження інших об’єктів...\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/listbox/intl/zh-CN.json
var $ea552550f7ca6a4e44acf8ac252496c$exports = {
};
$ea552550f7ca6a4e44acf8ac252496c$exports = JSON.parse("{\"loading\":\"正在加载...\",\"loadingMore\":\"正在加载更多...\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/listbox/intl/zh-TW.json
var $e288f80d4cdaa8e2ea356e0b162cde52$exports = {
};
$e288f80d4cdaa8e2ea356e0b162cde52$exports = JSON.parse("{\"loading\":\"正在載入\",\"loadingMore\":\"正在載入更多…\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/menu/vars.css
var $bfbcd6bc836614813c70085787fd$exports = {
};
$bfbcd6bc836614813c70085787fd$exports = {
    "spectrum-Menu-popover": "_spectrum-Menu-popover_7c360",
    "spectrum-Menu": "_spectrum-Menu_7c360",
    "spectrum-Menu-sectionHeading": "_spectrum-Menu-sectionHeading_7c360",
    "spectrum-Menu-checkmark": "_spectrum-Menu-checkmark_7c360",
    "spectrum-Menu-item": "_spectrum-Menu-item_7c360",
    "is-selected": "_is-selected_7c360",
    "spectrum-Icon": "_spectrum-Icon_7c360",
    "spectrum-Menu-itemLabel": "_spectrum-Menu-itemLabel_7c360",
    "spectrum-Menu-itemIcon": "_spectrum-Menu-itemIcon_7c360",
    "spectrum-Menu-itemLabel--wrapping": "_spectrum-Menu-itemLabel--wrapping_7c360",
    "spectrum-Menu-divider": "_spectrum-Menu-divider_7c360",
    "spectrum-Menu-itemGrid": "_spectrum-Menu-itemGrid_7c360",
    "is-selectable": "_is-selectable_7c360",
    "spectrum-Menu-end": "_spectrum-Menu-end_7c360",
    "spectrum-Menu-icon": "_spectrum-Menu-icon_7c360",
    "spectrum-Menu-description": "_spectrum-Menu-description_7c360",
    "spectrum-Menu-keyboard": "_spectrum-Menu-keyboard_7c360",
    "focus-ring": "_focus-ring_7c360",
    "is-focused": "_is-focused_7c360",
    "is-hovered": "_is-hovered_7c360",
    "is-highlighted": "_is-highlighted_7c360",
    "is-open": "_is-open_7c360",
    "is-active": "_is-active_7c360",
    "is-disabled": "_is-disabled_7c360"
};
var $bfbcd6bc836614813c70085787fd$$interop$default = $parcel$interopDefault($bfbcd6bc836614813c70085787fd$exports);
/** @private */ function $f7ecb6637be10ee8759d744db61d91b$export$ListBoxOption(props) {
    let { item , shouldSelectOnPressUp , shouldFocusOnHover , shouldUseVirtualFocus  } = props;
    let { rendered , key  } = item;
    let state = useContext($ec3a4d143e5d0ec6923c3de55c68def5$export$ListBoxContext);
    let isSelected = state.selectionManager.isSelected(key);
    let isDisabled = state.disabledKeys.has(key);
    let isFocused = state.selectionManager.focusedKey === key;
    let ref = useRef();
    let { optionProps , labelProps , descriptionProps  } = useOption({
        isSelected,
        isDisabled,
        'aria-label': item['aria-label'],
        key,
        shouldSelectOnPressUp,
        shouldFocusOnHover,
        isVirtualized: true,
        shouldUseVirtualFocus
    }, state, ref);
    let { hoverProps , isHovered  } = useHover(_babelRuntimeHelpersExtends({
    }, props, {
        isDisabled
    }));
    let contents = typeof rendered === 'string' ? /*#__PURE__*/ _react.createElement(Text1, null, rendered) : rendered;
    let isKeyboardModality = isFocusVisible();
    return(/*#__PURE__*/ _react.createElement(FocusRing, {
        focusRingClass: classNames($bfbcd6bc836614813c70085787fd$$interop$default, 'focus-ring')
    }, /*#__PURE__*/ _react.createElement("div", _babelRuntimeHelpersExtends({
    }, mergeProps(optionProps, shouldFocusOnHover ? {
    } : hoverProps), {
        ref: ref,
        className: classNames($bfbcd6bc836614813c70085787fd$$interop$default, 'spectrum-Menu-item', {
            // If using virtual focus, apply focused styles to the item when the user is interacting with keyboard modality
            'is-focused': shouldUseVirtualFocus && isFocused && isKeyboardModality,
            'is-disabled': isDisabled,
            'is-selected': isSelected,
            'is-selectable': state.selectionManager.selectionMode !== 'none',
            // When shouldFocusOnHover is false, apply hover styles both when hovered with the mouse.
            // Otherwise, apply hover styles when focused using non-keyboard modality.
            'is-hovered': isHovered && !shouldFocusOnHover || isFocused && !isKeyboardModality
        })
    }), /*#__PURE__*/ _react.createElement(Grid, {
        UNSAFE_className: classNames($bfbcd6bc836614813c70085787fd$$interop$default, 'spectrum-Menu-itemGrid')
    }, /*#__PURE__*/ _react.createElement(SlotProvider, {
        slots: {
            text: _babelRuntimeHelpersExtends({
                UNSAFE_className: $bfbcd6bc836614813c70085787fd$$interop$default['spectrum-Menu-itemLabel']
            }, labelProps),
            icon: {
                size: 'S',
                UNSAFE_className: $bfbcd6bc836614813c70085787fd$$interop$default['spectrum-Menu-icon']
            },
            description: _babelRuntimeHelpersExtends({
                UNSAFE_className: $bfbcd6bc836614813c70085787fd$$interop$default['spectrum-Menu-description']
            }, descriptionProps)
        }
    }, contents, isSelected && /*#__PURE__*/ _react.createElement(_spectrumIconsUiCheckmarkMedium, {
        slot: "checkmark",
        UNSAFE_className: classNames($bfbcd6bc836614813c70085787fd$$interop$default, 'spectrum-Menu-checkmark')
    }))))));
}
/** @private */ function $d46d1c2ed33b171440f8507f$export$ListBoxSection(props) {
    let { children , reusableView , header  } = props;
    let item = reusableView.content;
    let { headingProps , groupProps  } = useListBoxSection({
        heading: item.rendered,
        'aria-label': item['aria-label']
    });
    let { separatorProps  } = useSeparator({
        elementType: 'li'
    });
    let headerRef = useRef();
    useVirtualizerItem({
        reusableView: header,
        ref: headerRef
    });
    let { direction  } = useLocale();
    let state = useContext($ec3a4d143e5d0ec6923c3de55c68def5$export$ListBoxContext);
    return(/*#__PURE__*/ _react.createElement(Fragment, null, /*#__PURE__*/ _react.createElement("div", {
        role: "presentation",
        ref: headerRef,
        style: layoutInfoToStyle(header.layoutInfo, direction)
    }, item.key !== state.collection.getFirstKey() && /*#__PURE__*/ _react.createElement("div", _babelRuntimeHelpersExtends({
    }, separatorProps, {
        className: classNames($bfbcd6bc836614813c70085787fd$$interop$default, 'spectrum-Menu-divider')
    })), item.rendered && /*#__PURE__*/ _react.createElement("div", _babelRuntimeHelpersExtends({
    }, headingProps, {
        className: classNames($bfbcd6bc836614813c70085787fd$$interop$default, 'spectrum-Menu-sectionHeading')
    }), item.rendered)), /*#__PURE__*/ _react.createElement("div", _babelRuntimeHelpersExtends({
    }, groupProps, {
        style: layoutInfoToStyle(reusableView.layoutInfo, direction),
        className: classNames($bfbcd6bc836614813c70085787fd$$interop$default, 'spectrum-Menu')
    }), children)));
}
// @ts-ignore
const $eea4395fe687d66cd6f9a8dc8982e743$var$intlMessages = {
    "ar-AE": _babelRuntimeHelpersInteropRequireDefault($a7c4ca3666c7dbafec57ede67bb06cfc$exports).default,
    "bg-BG": _babelRuntimeHelpersInteropRequireDefault($fc29aff964e054928b9d09c07c5855ec$exports).default,
    "cs-CZ": _babelRuntimeHelpersInteropRequireDefault($e8f80ec05c2d18b034fe363acd721b9c$exports).default,
    "da-DK": _babelRuntimeHelpersInteropRequireDefault($def518aaf3069293db83c5702421e10$exports).default,
    "de-DE": _babelRuntimeHelpersInteropRequireDefault($fe8f21e9e2c1a93c8cb941d0e421f4$exports).default,
    "el-GR": _babelRuntimeHelpersInteropRequireDefault($f3bd974b7decc2c925cac883747f7d9$exports).default,
    "en-US": _babelRuntimeHelpersInteropRequireDefault($f9615e340042c491f70273dc5d7d799f$exports).default,
    "es-ES": _babelRuntimeHelpersInteropRequireDefault($dc72df31f5907f7b99a7f310bcdcf$exports).default,
    "et-EE": _babelRuntimeHelpersInteropRequireDefault($b516a2000bc36b2cf35d235bb86b464c$exports).default,
    "fi-FI": _babelRuntimeHelpersInteropRequireDefault($b51125fbfd29f483ce27c8021bdf3$exports).default,
    "fr-FR": _babelRuntimeHelpersInteropRequireDefault($a35909637983cfccb5a6ca29e543d51a$exports).default,
    "he-IL": _babelRuntimeHelpersInteropRequireDefault($d003d8383fd1b2ee26ce0b4fbf0b8133$exports).default,
    "hr-HR": _babelRuntimeHelpersInteropRequireDefault($c871121a5b6db7b7f821a8361c2d007f$exports).default,
    "hu-HU": _babelRuntimeHelpersInteropRequireDefault($a877bb1784d41b572a96c0af3d3d2f$exports).default,
    "it-IT": _babelRuntimeHelpersInteropRequireDefault($ff93b4800765048fc92cd81c35dec2ad$exports).default,
    "ja-JP": _babelRuntimeHelpersInteropRequireDefault($aaf8e27c61fee0596f953bc229926428$exports).default,
    "ko-KR": _babelRuntimeHelpersInteropRequireDefault($c04871f59f03b8f04e12b0b549762$exports).default,
    "lt-LT": _babelRuntimeHelpersInteropRequireDefault($c0902e55ab240816e3e9e570f310f3f6$exports).default,
    "lv-LV": _babelRuntimeHelpersInteropRequireDefault($c94f13261126323f9a55896b45d1$exports).default,
    "nb-NO": _babelRuntimeHelpersInteropRequireDefault($a7a01f4af867fa5385f47454ed$exports).default,
    "nl-NL": _babelRuntimeHelpersInteropRequireDefault($f9a9a64a1e6b3f695e43f8fa88af5ba$exports).default,
    "pl-PL": _babelRuntimeHelpersInteropRequireDefault($da4c8d5861f8a2ff809b204e1c393$exports).default,
    "pt-BR": _babelRuntimeHelpersInteropRequireDefault($f4848a8cc2acccccaa002fbc64a9cd$exports).default,
    "pt-PT": _babelRuntimeHelpersInteropRequireDefault($fce7e6aee16a5254c3470cbbe8a1908$exports).default,
    "ro-RO": _babelRuntimeHelpersInteropRequireDefault($ce3520b62d16a1ae19db2856f7fc586$exports).default,
    "ru-RU": _babelRuntimeHelpersInteropRequireDefault($ce9b8395744654f83babf$exports).default,
    "sk-SK": _babelRuntimeHelpersInteropRequireDefault($d588e26b86ad9e592a1a9ce2c82be2$exports).default,
    "sl-SI": _babelRuntimeHelpersInteropRequireDefault($ba47e84ff8c2147622e9c711878dc539$exports).default,
    "sr-SP": _babelRuntimeHelpersInteropRequireDefault($fb1103a7932b7b0e12cee2d0697$exports).default,
    "sv-SE": _babelRuntimeHelpersInteropRequireDefault($c36c7a891141f341531e519174d4$exports).default,
    "tr-TR": _babelRuntimeHelpersInteropRequireDefault($aed39575b05ecc1e3ec3670fdd466610$exports).default,
    "uk-UA": _babelRuntimeHelpersInteropRequireDefault($d40ebb7fe334b314e29e5a504af63b9d$exports).default,
    "zh-CN": _babelRuntimeHelpersInteropRequireDefault($ea552550f7ca6a4e44acf8ac252496c$exports).default,
    "zh-TW": _babelRuntimeHelpersInteropRequireDefault($e288f80d4cdaa8e2ea356e0b162cde52$exports).default
};
/** @private */ function useListBoxLayout(state) {
    let { scale  } = useProvider();
    let collator = useCollator({
        usage: 'search',
        sensitivity: 'base'
    });
    let layout = useMemo(()=>new ListLayout({
            estimatedRowHeight: scale === 'large' ? 48 : 32,
            estimatedHeadingHeight: scale === 'large' ? 33 : 26,
            padding: scale === 'large' ? 5 : 4,
            // TODO: get from DNA
            loaderHeight: 40,
            placeholderHeight: scale === 'large' ? 48 : 32,
            collator
        })
    , [
        collator,
        scale
    ]);
    layout.collection = state.collection;
    layout.disabledKeys = state.disabledKeys;
    return layout;
}
/** @private */ exports.useListBoxLayout = useListBoxLayout;
function $eea4395fe687d66cd6f9a8dc8982e743$var$ListBoxBase(props, ref) {
    let { layout , state , shouldSelectOnPressUp , focusOnPointerEnter , shouldUseVirtualFocus , domProps ={
    } , transitionDuration =0 , onScroll  } = props;
    let { listBoxProps  } = useListBox(_babelRuntimeHelpersExtends({
    }, props, domProps, {
        keyboardDelegate: layout,
        isVirtualized: true
    }), state, ref);
    let { styleProps  } = useStyleProps(props);
    let formatMessage = useMessageFormatter($eea4395fe687d66cd6f9a8dc8982e743$var$intlMessages); // Sync loading state into the layout.
    layout.isLoading = props.isLoading; // This overrides collection view's renderWrapper to support heirarchy of items in sections.
    // The header is extracted from the children so it can receive ARIA labeling properties.
    let renderWrapper = (parent, reusableView, children, renderChildren)=>{
        if (reusableView.viewType === 'section') return(/*#__PURE__*/ _react.createElement($d46d1c2ed33b171440f8507f$export$ListBoxSection, {
            key: reusableView.key,
            reusableView: reusableView,
            header: children.find((c)=>c.viewType === 'header'
            )
        }, renderChildren(children.filter((c)=>c.viewType === 'item'
        ))));
        return(/*#__PURE__*/ _react.createElement(VirtualizerItem, {
            key: reusableView.key,
            reusableView: reusableView,
            parent: parent
        }));
    };
    return(/*#__PURE__*/ _react.createElement($ec3a4d143e5d0ec6923c3de55c68def5$export$ListBoxContext.Provider, {
        value: state
    }, /*#__PURE__*/ _react.createElement(Virtualizer, _babelRuntimeHelpersExtends({
    }, styleProps, mergeProps(listBoxProps, domProps), {
        ref: ref,
        focusedKey: state.selectionManager.focusedKey,
        sizeToFit: "height",
        scrollDirection: "vertical",
        className: classNames($bfbcd6bc836614813c70085787fd$$interop$default, 'spectrum-Menu', styleProps.className),
        layout: layout,
        collection: state.collection,
        renderWrapper: renderWrapper,
        transitionDuration: transitionDuration,
        isLoading: props.isLoading,
        onLoadMore: props.onLoadMore,
        shouldUseVirtualFocus: shouldUseVirtualFocus,
        onScroll: onScroll
    }), (type, item)=>{
        if (type === 'item') return(/*#__PURE__*/ _react.createElement($f7ecb6637be10ee8759d744db61d91b$export$ListBoxOption, {
            item: item,
            shouldSelectOnPressUp: shouldSelectOnPressUp,
            shouldFocusOnHover: focusOnPointerEnter,
            shouldUseVirtualFocus: shouldUseVirtualFocus
        }));
        else if (type === 'loader') return(/*#__PURE__*/ // aria-selected isn't needed here since this option is not selectable.
        // eslint-disable-next-line jsx-a11y/role-has-required-aria-props
        _react.createElement("div", {
            role: "option",
            style: {
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                height: '100%'
            }
        }, /*#__PURE__*/ _react.createElement(ProgressCircle, {
            isIndeterminate: true,
            size: "S",
            "aria-label": state.collection.size > 0 ? formatMessage('loadingMore') : formatMessage('loading'),
            UNSAFE_className: classNames($bfbcd6bc836614813c70085787fd$$interop$default, 'spectrum-Dropdown-progressCircle')
        })));
        else if (type === 'placeholder') {
            let emptyState = props.renderEmptyState ? props.renderEmptyState() : null;
            if (emptyState == null) return null;
            return(/*#__PURE__*/ _react.createElement("div", {
                // aria-selected isn't needed here since this option is not selectable.
                // eslint-disable-next-line jsx-a11y/role-has-required-aria-props
                role: "option"
            }, emptyState));
        }
    })));
} // forwardRef doesn't support generic parameters, so cast the result to the correct type
// https://stackoverflow.com/questions/58469229/react-with-typescript-generics-while-using-react-forwardref
const ListBoxBase = /*#__PURE__*/ _react.forwardRef($eea4395fe687d66cd6f9a8dc8982e743$var$ListBoxBase);
exports.ListBoxBase = ListBoxBase;
function $d7bed7a2c355f41f894fc99183feda6e$var$ListBox(props, ref) {
    let state = useListState(props);
    let layout = useListBoxLayout(state);
    let domRef = useDOMRef(ref);
    return(/*#__PURE__*/ _react.createElement(ListBoxBase, _babelRuntimeHelpersExtends({
    }, props, {
        ref: domRef,
        state: state,
        layout: layout
    })));
} // forwardRef doesn't support generic parameters, so cast the result to the correct type
// https://stackoverflow.com/questions/58469229/react-with-typescript-generics-while-using-react-forwardref
/**
 * A list of options that can allow selection of one or more.
 */ const ListBox = /*#__PURE__*/ _react.forwardRef($d7bed7a2c355f41f894fc99183feda6e$var$ListBox);
exports.ListBox = ListBox;

},{"@react-stately/list":"6jXbK","@react-spectrum/provider":"3Y6zE","@react-spectrum/progress":"4593I","@react-stately/layout":"6sDHZ","@react-aria/separator":"1gzBL","@react-aria/i18n":"6xZcx","@react-aria/virtualizer":"2bCXx","@react-aria/listbox":"2gyNR","@react-spectrum/text":"ib5WK","@react-aria/utils":"d8qxy","@react-aria/interactions":"3irYN","@react-spectrum/layout":"5dHqK","@react-aria/focus":"76fMY","@spectrum-icons/ui/CheckmarkMedium":"6ue5E","react":"a6qBW","@react-spectrum/utils":"7ch5A","@babel/runtime/helpers/interopRequireDefault":"5TvsK","@babel/runtime/helpers/extends":"5xz6u","@react-stately/collections":"4IPbJ","./main.css":"2jJRV"}],"4593I":[function(require,module,exports) {
var { useProgressBar  } = require("@react-aria/progress");
var _react = $parcel$interopDefault(require("react"));
var { clamp  } = require("@react-aria/utils");
var { classNames , useDOMRef , useStyleProps  } = require("@react-spectrum/utils");
var _babelRuntimeHelpersObjectWithoutPropertiesLoose = $parcel$interopDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
require("./main.css");
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/barloader/vars.css
var $b76be3b356c6ec92c2715ea3e4dc0e69$exports = {
};
$b76be3b356c6ec92c2715ea3e4dc0e69$exports = {
    "spectrum-BarLoader": "_spectrum-BarLoader_c74d2",
    "spectrum-BarLoader--indeterminate": "_spectrum-BarLoader--indeterminate_c74d2",
    "spectrum-BarLoader--sideLabel": "_spectrum-BarLoader--sideLabel_c74d2",
    "spectrum-BarLoader-track": "_spectrum-BarLoader-track_c74d2",
    "spectrum-BarLoader-fill": "_spectrum-BarLoader-fill_c74d2",
    "spectrum-BarLoader-label": "_spectrum-BarLoader-label_c74d2",
    "spectrum-BarLoader-percentage": "_spectrum-BarLoader-percentage_c74d2",
    "spectrum-BarLoader--small": "_spectrum-BarLoader--small_c74d2",
    "indeterminate-loop-ltr": "_indeterminate-loop-ltr_c74d2",
    "indeterminate-loop-rtl": "_indeterminate-loop-rtl_c74d2",
    "spectrum-BarLoader--overBackground": "_spectrum-BarLoader--overBackground_c74d2",
    "is-positive": "_is-positive_c74d2",
    "is-warning": "_is-warning_c74d2",
    "is-critical": "_is-critical_c74d2"
};
var $b76be3b356c6ec92c2715ea3e4dc0e69$$interop$default = $parcel$interopDefault($b76be3b356c6ec92c2715ea3e4dc0e69$exports);
// Base ProgressBar component shared with Meter.
function $b0d2f47ae3a8238ab2360be8fc837fc$var$ProgressBarBase(props, ref) {
    let { value =0 , minValue =0 , maxValue =100 , size ='L' , label , barClassName , showValueLabel =!!label , labelPosition ='top' , isIndeterminate =false , barProps , labelProps , 'aria-label': ariaLabel , 'aria-labelledby': ariaLabelledby  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "value",
        "minValue",
        "maxValue",
        "size",
        "label",
        "barClassName",
        "showValueLabel",
        "labelPosition",
        "isIndeterminate",
        "barProps",
        "labelProps",
        "aria-label",
        "aria-labelledby"
    ]);
    let domRef = useDOMRef(ref);
    let { styleProps  } = useStyleProps(otherProps);
    value = clamp(value, minValue, maxValue);
    let barStyle = {
    };
    if (!isIndeterminate) {
        let percentage = (value - minValue) / (maxValue - minValue);
        barStyle.width = Math.round(percentage * 100) + "%";
    } // Ideally this should be in useProgressBar, but children
    // are not supported in ProgressCircle which shares that hook...
    if (!label && !ariaLabel && !ariaLabelledby) console.warn('If you do not provide a visible label via children, you must specify an aria-label or aria-labelledby attribute for accessibility');
     // use inline style for fit-content because cssnano is too smart for us and will strip out the -moz prefix in css files
    return(/*#__PURE__*/ _react.createElement("div", _babelRuntimeHelpersExtends({
    }, barProps, {
        ref: domRef,
        className: classNames($b76be3b356c6ec92c2715ea3e4dc0e69$$interop$default, 'spectrum-BarLoader', {
            'spectrum-BarLoader--small': size === 'S',
            'spectrum-BarLoader--large': size === 'L',
            'spectrum-BarLoader--indeterminate': isIndeterminate,
            'spectrum-BarLoader--sideLabel': labelPosition === 'side'
        }, barClassName, styleProps.className),
        style: _babelRuntimeHelpersExtends({
            minWidth: '-moz-fit-content'
        }, styleProps.style)
    }), label && /*#__PURE__*/ _react.createElement("span", _babelRuntimeHelpersExtends({
    }, labelProps, {
        className: classNames($b76be3b356c6ec92c2715ea3e4dc0e69$$interop$default, 'spectrum-BarLoader-label')
    }), label), showValueLabel && /*#__PURE__*/ _react.createElement("div", {
        className: classNames($b76be3b356c6ec92c2715ea3e4dc0e69$$interop$default, 'spectrum-BarLoader-percentage')
    }, barProps['aria-valuetext']), /*#__PURE__*/ _react.createElement("div", {
        className: classNames($b76be3b356c6ec92c2715ea3e4dc0e69$$interop$default, 'spectrum-BarLoader-track')
    }, /*#__PURE__*/ _react.createElement("div", {
        className: classNames($b76be3b356c6ec92c2715ea3e4dc0e69$$interop$default, 'spectrum-BarLoader-fill'),
        style: barStyle
    }))));
}
let ProgressBarBase = /*#__PURE__*/ _react.forwardRef($b0d2f47ae3a8238ab2360be8fc837fc$var$ProgressBarBase);
exports.ProgressBarBase = ProgressBarBase;
function $e05519d83e80e24bd20eae11a34f5$var$ProgressBar(props, ref) {
    let { variant  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "variant"
    ]);
    const { progressBarProps , labelProps  } = useProgressBar(props);
    return(/*#__PURE__*/ _react.createElement(ProgressBarBase, _babelRuntimeHelpersExtends({
    }, otherProps, {
        ref: ref,
        barProps: progressBarProps,
        labelProps: labelProps,
        barClassName: classNames($b76be3b356c6ec92c2715ea3e4dc0e69$$interop$default, {
            'spectrum-BarLoader--overBackground': variant === 'overBackground'
        })
    })));
}
/**
 * ProgressBars show the progression of a system operation: downloading, uploading, processing, etc., in a visual way.
 * They can represent either determinate or indeterminate progress.
 */ let ProgressBar = /*#__PURE__*/ _react.forwardRef($e05519d83e80e24bd20eae11a34f5$var$ProgressBar);
exports.ProgressBar = ProgressBar;
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/circleloader/vars.css
var $ce5c1c4924ad667e9635506d931397c8$exports = {
};
$ce5c1c4924ad667e9635506d931397c8$exports = {
    "spectrum-CircleLoader--indeterminate-fill-submask-2": "_spectrum-CircleLoader--indeterminate-fill-submask-2_40b43",
    "spectrum-fill-mask-2": "_spectrum-fill-mask-2_40b43",
    "spectrum-CircleLoader": "_spectrum-CircleLoader_40b43",
    "spectrum-CircleLoader-track": "_spectrum-CircleLoader-track_40b43",
    "spectrum-CircleLoader-fills": "_spectrum-CircleLoader-fills_40b43",
    "spectrum-CircleLoader-fill": "_spectrum-CircleLoader-fill_40b43",
    "spectrum-CircleLoader-fillMask1": "_spectrum-CircleLoader-fillMask1_40b43",
    "spectrum-CircleLoader-fillMask2": "_spectrum-CircleLoader-fillMask2_40b43",
    "spectrum-CircleLoader-fillSubMask1": "_spectrum-CircleLoader-fillSubMask1_40b43",
    "spectrum-CircleLoader-fillSubMask2": "_spectrum-CircleLoader-fillSubMask2_40b43",
    "spectrum-CircleLoader--small": "_spectrum-CircleLoader--small_40b43",
    "spectrum-CircleLoader--large": "_spectrum-CircleLoader--large_40b43",
    "spectrum-CircleLoader--indeterminate": "_spectrum-CircleLoader--indeterminate_40b43",
    "spectrum-fills-rotate": "_spectrum-fills-rotate_40b43",
    "spectrum-fill-mask-1": "_spectrum-fill-mask-1_40b43",
    "spectrum-CircleLoader--overBackground": "_spectrum-CircleLoader--overBackground_40b43"
};
var $ce5c1c4924ad667e9635506d931397c8$$interop$default = $parcel$interopDefault($ce5c1c4924ad667e9635506d931397c8$exports);
function $afa84cf894ccc20de32ae773d8878b79$var$ProgressCircle(props, ref) {
    let { value =0 , minValue =0 , maxValue =100 , size ='M' , variant , isIndeterminate =false , 'aria-label': ariaLabel , 'aria-labelledby': ariaLabelledby  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "value",
        "minValue",
        "maxValue",
        "size",
        "variant",
        "isIndeterminate",
        "aria-label",
        "aria-labelledby"
    ]);
    let domRef = useDOMRef(ref);
    let { styleProps  } = useStyleProps(otherProps);
    value = clamp(value, minValue, maxValue);
    let { progressBarProps  } = useProgressBar(_babelRuntimeHelpersExtends({
    }, props, {
        value
    }));
    let subMask1Style = {
    };
    let subMask2Style = {
    };
    if (!isIndeterminate) {
        let percentage = (value - minValue) / (maxValue - minValue) * 100;
        let angle;
        if (percentage > 0 && percentage <= 50) {
            angle = -180 + percentage / 50 * 180;
            subMask1Style.transform = "rotate(" + angle + "deg)";
            subMask2Style.transform = 'rotate(-180deg)';
        } else if (percentage > 50) {
            angle = -180 + (percentage - 50) / 50 * 180;
            subMask1Style.transform = 'rotate(0deg)';
            subMask2Style.transform = "rotate(" + angle + "deg)";
        }
    }
    if (!ariaLabel && !ariaLabelledby) console.warn('ProgressCircle requires an aria-label or aria-labelledby attribute for accessibility');
    return(/*#__PURE__*/ _react.createElement("div", _babelRuntimeHelpersExtends({
    }, styleProps, progressBarProps, {
        ref: domRef,
        className: classNames($ce5c1c4924ad667e9635506d931397c8$$interop$default, 'spectrum-CircleLoader', {
            'spectrum-CircleLoader--indeterminate': isIndeterminate,
            'spectrum-CircleLoader--small': size === 'S',
            'spectrum-CircleLoader--large': size === 'L',
            'spectrum-CircleLoader--overBackground': variant === 'overBackground'
        }, styleProps.className)
    }), /*#__PURE__*/ _react.createElement("div", {
        className: classNames($ce5c1c4924ad667e9635506d931397c8$$interop$default, 'spectrum-CircleLoader-track')
    }), /*#__PURE__*/ _react.createElement("div", {
        className: classNames($ce5c1c4924ad667e9635506d931397c8$$interop$default, 'spectrum-CircleLoader-fills')
    }, /*#__PURE__*/ _react.createElement("div", {
        className: classNames($ce5c1c4924ad667e9635506d931397c8$$interop$default, 'spectrum-CircleLoader-fillMask1')
    }, /*#__PURE__*/ _react.createElement("div", {
        className: classNames($ce5c1c4924ad667e9635506d931397c8$$interop$default, 'spectrum-CircleLoader-fillSubMask1'),
        style: subMask1Style
    }, /*#__PURE__*/ _react.createElement("div", {
        className: classNames($ce5c1c4924ad667e9635506d931397c8$$interop$default, 'spectrum-CircleLoader-fill')
    }))), /*#__PURE__*/ _react.createElement("div", {
        className: classNames($ce5c1c4924ad667e9635506d931397c8$$interop$default, 'spectrum-CircleLoader-fillMask2')
    }, /*#__PURE__*/ _react.createElement("div", {
        className: classNames($ce5c1c4924ad667e9635506d931397c8$$interop$default, 'spectrum-CircleLoader-fillSubMask2'),
        style: subMask2Style
    }, /*#__PURE__*/ _react.createElement("div", {
        className: classNames($ce5c1c4924ad667e9635506d931397c8$$interop$default, 'spectrum-CircleLoader-fill')
    }))))));
}
/**
 * ProgressCircles show the progression of a system operation such as downloading, uploading, processing, etc. in a visual way.
 * They can represent determinate or indeterminate progress.
 */ let ProgressCircle = /*#__PURE__*/ _react.forwardRef($afa84cf894ccc20de32ae773d8878b79$var$ProgressCircle);
exports.ProgressCircle = ProgressCircle;

},{"@react-aria/progress":"3H4Bc","react":"a6qBW","@react-aria/utils":"d8qxy","@react-spectrum/utils":"7ch5A","@babel/runtime/helpers/objectWithoutPropertiesLoose":"5byko","@babel/runtime/helpers/extends":"5xz6u","./main.css":"2zngs"}],"3H4Bc":[function(require,module,exports) {
var { useNumberFormatter  } = require("@react-aria/i18n");
var { useLabel  } = require("@react-aria/label");
var { clamp , filterDOMProps , mergeProps  } = require("@react-aria/utils");
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
/**
 * Provides the accessibility implementation for a progress bar component.
 * Progress bars show either determinate or indeterminate progress of an operation
 * over time.
 */ function useProgressBar(props) {
    let { value =0 , minValue =0 , maxValue =100 , valueLabel , isIndeterminate , formatOptions ={
        style: 'percent'
    }  } = props;
    let domProps = filterDOMProps(props, {
        labelable: true
    });
    let { labelProps , fieldProps  } = useLabel(_babelRuntimeHelpersExtends({
    }, props, {
        // Progress bar is not an HTML input element so it
        // shouldn't be labeled by a <label> element.
        labelElementType: 'span'
    }));
    value = clamp(value, minValue, maxValue);
    let percentage = (value - minValue) / (maxValue - minValue);
    let formatter = useNumberFormatter(formatOptions);
    if (!isIndeterminate && !valueLabel) {
        let valueToFormat = formatOptions.style === 'percent' ? percentage : value;
        valueLabel = formatter.format(valueToFormat);
    }
    return {
        progressBarProps: mergeProps(domProps, _babelRuntimeHelpersExtends({
        }, fieldProps, {
            'aria-valuenow': isIndeterminate ? undefined : value,
            'aria-valuemin': minValue,
            'aria-valuemax': maxValue,
            'aria-valuetext': isIndeterminate ? undefined : valueLabel,
            role: 'progressbar'
        })),
        labelProps
    };
}
exports.useProgressBar = useProgressBar;

},{"@react-aria/i18n":"6xZcx","@react-aria/label":"2pFvL","@react-aria/utils":"d8qxy","@babel/runtime/helpers/extends":"5xz6u"}],"2zngs":[function() {},{}],"6sDHZ":[function(require,module,exports) {
var { Layout , LayoutInfo , Rect , Size  } = require("@react-stately/virtualizer");
const $da979b46fc00f04fc945a444d6278293$var$DEFAULT_HEIGHT = 48;
/**
 * The ListLayout class is an implementation of a collection view {@link Layout}
 * it is used for creating lists and lists with indented sub-lists.
 *
 * To configure a ListLayout, you can use the properties to define the
 * layouts and/or use the method for defining indentation.
 * The {@link ListKeyboardDelegate} extends the existing collection view
 * delegate with an additional method to do this (it uses the same delegate object as
 * the collection view itself).
 */ class ListLayout extends Layout {
    /**
   * Creates a new ListLayout with options. See the list of properties below for a description
   * of the options that can be provided.
   */ constructor(options){
        if (options === void 0) options = {
        };
        super();
        this.rowHeight = void 0;
        this.estimatedRowHeight = void 0;
        this.headingHeight = void 0;
        this.estimatedHeadingHeight = void 0;
        this.padding = void 0;
        this.indentationForItem = void 0;
        this.layoutInfos = void 0;
        this.layoutNodes = void 0;
        this.contentSize = void 0;
        this.collection = void 0;
        this.disabledKeys = new Set();
        this.isLoading = void 0;
        this.lastWidth = void 0;
        this.lastCollection = void 0;
        this.rootNodes = void 0;
        this.collator = void 0;
        this.invalidateEverything = void 0;
        this.loaderHeight = void 0;
        this.placeholderHeight = void 0;
        this.rowHeight = options.rowHeight;
        this.estimatedRowHeight = options.estimatedRowHeight;
        this.headingHeight = options.headingHeight;
        this.estimatedHeadingHeight = options.estimatedHeadingHeight;
        this.padding = options.padding || 0;
        this.indentationForItem = options.indentationForItem;
        this.collator = options.collator;
        this.loaderHeight = options.loaderHeight;
        this.placeholderHeight = options.placeholderHeight;
        this.layoutInfos = new Map();
        this.layoutNodes = new Map();
        this.rootNodes = [];
        this.lastWidth = 0;
        this.lastCollection = null;
    }
    getLayoutInfo(key) {
        return this.layoutInfos.get(key);
    }
    getVisibleLayoutInfos(rect) {
        let res = [];
        let addNodes = (nodes)=>{
            for (let node of nodes)if (this.isVisible(node, rect)) {
                res.push(node.layoutInfo);
                if (node.header) res.push(node.header);
                if (node.children) addNodes(node.children);
            }
        };
        addNodes(this.rootNodes);
        return res;
    }
    isVisible(node, rect) {
        return node.layoutInfo.rect.intersects(rect) || node.layoutInfo.isSticky;
    }
    validate(invalidationContext) {
        // Invalidate cache if the size of the collection changed.
        // In this case, we need to recalculate the entire layout.
        this.invalidateEverything = invalidationContext.sizeChanged;
        this.collection = this.virtualizer.collection;
        this.rootNodes = this.buildCollection();
        this.lastWidth = this.virtualizer.visibleRect.width;
        this.lastCollection = this.collection;
    }
    buildCollection() {
        let y = this.padding;
        let nodes = [];
        for (let node of this.collection){
            let layoutNode = this.buildChild(node, 0, y);
            y = layoutNode.layoutInfo.rect.maxY;
            nodes.push(layoutNode);
        }
        if (this.isLoading) {
            var _this$loaderHeight;
            let rect = new Rect(0, y, this.virtualizer.visibleRect.width, (_this$loaderHeight = this.loaderHeight) != null ? _this$loaderHeight : this.virtualizer.visibleRect.height);
            let loader = new LayoutInfo('loader', 'loader', rect);
            this.layoutInfos.set('loader', loader);
            nodes.push({
                layoutInfo: loader
            });
            y = loader.rect.maxY;
        }
        if (nodes.length === 0) {
            var _this$placeholderHeig;
            let rect = new Rect(0, y, this.virtualizer.visibleRect.width, (_this$placeholderHeig = this.placeholderHeight) != null ? _this$placeholderHeig : this.virtualizer.visibleRect.height);
            let placeholder = new LayoutInfo('placeholder', 'placeholder', rect);
            this.layoutInfos.set('placeholder', placeholder);
            nodes.push({
                layoutInfo: placeholder
            });
            y = placeholder.rect.maxY;
        }
        this.contentSize = new Size(this.virtualizer.visibleRect.width, y + this.padding);
        return nodes;
    }
    buildChild(node, x, y) {
        let cached = this.layoutNodes.get(node.key);
        if (!this.invalidateEverything && cached && cached.node === node && y === (cached.header || cached.layoutInfo).rect.y) return cached;
        let layoutNode = this.buildNode(node, x, y);
        layoutNode.node = node;
        layoutNode.layoutInfo.parentKey = node.parentKey || null;
        this.layoutInfos.set(layoutNode.layoutInfo.key, layoutNode.layoutInfo);
        if (layoutNode.header) this.layoutInfos.set(layoutNode.header.key, layoutNode.header);
         // Remove deleted child layout nodes from key mapping.
        if (cached) {
            let childKeys = new Set();
            if (layoutNode.children) for (let child of layoutNode.children)childKeys.add(child.layoutInfo.key);
            if (cached.children) {
                for (let child1 of cached.children)if (!childKeys.has(child1.layoutInfo.key)) this.removeLayoutNode(child1);
            }
        }
        this.layoutNodes.set(node.key, layoutNode);
        return layoutNode;
    }
    removeLayoutNode(layoutNode) {
        this.layoutNodes.delete(layoutNode.layoutInfo.key);
        this.layoutInfos.delete(layoutNode.layoutInfo.key);
        if (layoutNode.header) this.layoutInfos.delete(layoutNode.header.key);
        if (layoutNode.children) {
            for (let child of layoutNode.children)if (this.layoutNodes.get(child.layoutInfo.key) === child) this.removeLayoutNode(child);
        }
    }
    buildNode(node, x, y) {
        switch(node.type){
            case 'section':
                return this.buildSection(node, x, y);
            case 'item':
                return this.buildItem(node, x, y);
        }
    }
    buildSection(node, x, y) {
        let width = this.virtualizer.visibleRect.width;
        let rectHeight = this.headingHeight;
        let isEstimated = false; // If no explicit height is available, use an estimated height.
        if (rectHeight == null) {
            // If a previous version of this layout info exists, reuse its height.
            // Mark as estimated if the size of the overall collection view changed,
            // or the content of the item changed.
            let previousLayoutNode = this.layoutNodes.get(node.key);
            if (previousLayoutNode && previousLayoutNode.header) {
                let curNode = this.collection.getItem(node.key);
                let lastNode = this.lastCollection ? this.lastCollection.getItem(node.key) : null;
                rectHeight = previousLayoutNode.header.rect.height;
                isEstimated = width !== this.lastWidth || curNode !== lastNode || previousLayoutNode.header.estimatedSize;
            } else {
                rectHeight = node.rendered ? this.estimatedHeadingHeight : 0;
                isEstimated = true;
            }
        }
        if (rectHeight == null) rectHeight = $da979b46fc00f04fc945a444d6278293$var$DEFAULT_HEIGHT;
        let headerRect = new Rect(0, y, width, rectHeight);
        let header = new LayoutInfo('header', node.key + ':header', headerRect);
        header.estimatedSize = isEstimated;
        header.parentKey = node.key;
        y += header.rect.height;
        let rect = new Rect(0, y, width, 0);
        let layoutInfo = new LayoutInfo(node.type, node.key, rect);
        let startY = y;
        let children = [];
        for (let child of node.childNodes){
            let layoutNode = this.buildChild(child, x, y);
            y = layoutNode.layoutInfo.rect.maxY;
            children.push(layoutNode);
        }
        rect.height = y - startY;
        return {
            header,
            layoutInfo,
            children
        };
    }
    buildItem(node, x, y) {
        let width = this.virtualizer.visibleRect.width;
        let rectHeight = this.rowHeight;
        let isEstimated = false; // If no explicit height is available, use an estimated height.
        if (rectHeight == null) {
            // If a previous version of this layout info exists, reuse its height.
            // Mark as estimated if the size of the overall collection view changed,
            // or the content of the item changed.
            let previousLayoutNode = this.layoutNodes.get(node.key);
            if (previousLayoutNode) {
                let curNode = this.collection.getItem(node.key);
                let lastNode = this.lastCollection ? this.lastCollection.getItem(node.key) : null;
                rectHeight = previousLayoutNode.layoutInfo.rect.height;
                isEstimated = width !== this.lastWidth || curNode !== lastNode || previousLayoutNode.layoutInfo.estimatedSize;
            } else {
                rectHeight = this.estimatedRowHeight;
                isEstimated = true;
            }
        }
        if (rectHeight == null) rectHeight = $da979b46fc00f04fc945a444d6278293$var$DEFAULT_HEIGHT;
        if (typeof this.indentationForItem === 'function') x += this.indentationForItem(this.collection, node.key) || 0;
        let rect = new Rect(x, y, width - x, rectHeight);
        let layoutInfo = new LayoutInfo(node.type, node.key, rect);
        layoutInfo.estimatedSize = isEstimated;
        return {
            layoutInfo
        };
    }
    updateItemSize(key, size) {
        let layoutInfo = this.layoutInfos.get(key); // If no layoutInfo, item has been deleted/removed.
        if (!layoutInfo) return false;
        layoutInfo.estimatedSize = false;
        if (layoutInfo.rect.height !== size.height) {
            // Copy layout info rather than mutating so that later caches are invalidated.
            let newLayoutInfo = layoutInfo.copy();
            newLayoutInfo.rect.height = size.height;
            this.layoutInfos.set(key, newLayoutInfo); // Invalidate layout for this layout node and all parents
            this.updateLayoutNode(key, layoutInfo, newLayoutInfo);
            let node = this.collection.getItem(layoutInfo.parentKey);
            while(node){
                this.updateLayoutNode(node.key, layoutInfo, newLayoutInfo);
                node = this.collection.getItem(node.parentKey);
            }
            return true;
        }
        return false;
    }
    updateLayoutNode(key, oldLayoutInfo, newLayoutInfo) {
        let n = this.layoutNodes.get(key);
        if (n) {
            // Invalidate by clearing node.
            n.node = null; // Replace layout info in LayoutNode
            if (n.header === oldLayoutInfo) n.header = newLayoutInfo;
            else if (n.layoutInfo === oldLayoutInfo) n.layoutInfo = newLayoutInfo;
        }
    }
    getContentSize() {
        return this.contentSize;
    }
    getKeyAbove(key) {
        let collection = this.collection;
        key = collection.getKeyBefore(key);
        while(key != null){
            let item = collection.getItem(key);
            if (item.type === 'item' && !this.disabledKeys.has(item.key)) return key;
            key = collection.getKeyBefore(key);
        }
    }
    getKeyBelow(key) {
        let collection = this.collection;
        key = collection.getKeyAfter(key);
        while(key != null){
            let item = collection.getItem(key);
            if (item.type === 'item' && !this.disabledKeys.has(item.key)) return key;
            key = collection.getKeyAfter(key);
        }
    }
    getKeyPageAbove(key) {
        let layoutInfo = this.getLayoutInfo(key);
        if (layoutInfo) {
            let pageY = Math.max(0, layoutInfo.rect.y + layoutInfo.rect.height - this.virtualizer.visibleRect.height);
            while(layoutInfo && layoutInfo.rect.y > pageY){
                let keyAbove = this.getKeyAbove(layoutInfo.key);
                layoutInfo = this.getLayoutInfo(keyAbove);
            }
            if (layoutInfo) return layoutInfo.key;
        }
        return this.getFirstKey();
    }
    getKeyPageBelow(key) {
        let layoutInfo = this.getLayoutInfo(key != null ? key : this.getFirstKey());
        if (layoutInfo) {
            let pageY = Math.min(this.virtualizer.contentSize.height, layoutInfo.rect.y - layoutInfo.rect.height + this.virtualizer.visibleRect.height);
            while(layoutInfo && layoutInfo.rect.y < pageY){
                let keyBelow = this.getKeyBelow(layoutInfo.key);
                layoutInfo = this.getLayoutInfo(keyBelow);
            }
            if (layoutInfo) return layoutInfo.key;
        }
        return this.getLastKey();
    }
    getFirstKey() {
        let collection = this.collection;
        let key = collection.getFirstKey();
        while(key != null){
            let item = collection.getItem(key);
            if (item.type === 'item' && !this.disabledKeys.has(item.key)) return key;
            key = collection.getKeyAfter(key);
        }
    }
    getLastKey() {
        let collection = this.collection;
        let key = collection.getLastKey();
        while(key != null){
            let item = collection.getItem(key);
            if (item.type === 'item' && !this.disabledKeys.has(item.key)) return key;
            key = collection.getKeyBefore(key);
        }
    }
    getKeyForSearch(search, fromKey) {
        if (!this.collator) return null;
        let collection = this.collection;
        let key = fromKey || this.getFirstKey();
        while(key != null){
            let item = collection.getItem(key);
            let substring = item.textValue.slice(0, search.length);
            if (item.textValue && this.collator.compare(substring, search) === 0) return key;
            key = this.getKeyBelow(key);
        }
        return null;
    }
    //   let visible = this.getVisibleLayoutInfos(new Rect(point.x, point.y, 1, 1));
    //   if (visible.length > 0) {
    //     visible = visible.sort((a, b) => b.zIndex - a.zIndex);
    //     return {
    //       type: 'item',
    //       key: visible[0].key
    //     };
    //   }
    //   return null;
    // }
    // getDropTarget(point: Point): DropTarget {
    //   let key = this.virtualizer.keyAtPoint(point);
    //   if (key) {
    //     return {
    //       type: 'item',
    //       key,
    //       dropPosition: DropPosition.ON
    //     };
    //   }
    //   return null;
    // }
    getInitialLayoutInfo(layoutInfo) {
        layoutInfo.opacity = 0;
        layoutInfo.transform = 'scale3d(0.8, 0.8, 0.8)';
        return layoutInfo;
    }
    getFinalLayoutInfo(layoutInfo) {
        layoutInfo.opacity = 0;
        layoutInfo.transform = 'scale3d(0.8, 0.8, 0.8)';
        return layoutInfo;
    }
}
exports.ListLayout = ListLayout;
class TableLayout extends ListLayout {
    constructor(options1){
        super(options1);
        this.collection = void 0;
        this.lastCollection = void 0;
        this.columnWidths = void 0;
        this.stickyColumnIndices = void 0;
        this.getDefaultWidth = void 0;
        this.wasLoading = false;
        this.isLoading = false;
        this.getDefaultWidth = options1.getDefaultWidth;
    }
    buildCollection() {
        // If columns changed, clear layout cache.
        if (!this.lastCollection || this.collection.columns.length !== this.lastCollection.columns.length || this.collection.columns.some((c, i)=>c.key !== this.lastCollection.columns[i].key
        )) // Invalidate everything in this layout pass. Will be reset in ListLayout on the next pass.
        this.invalidateEverything = true;
         // Track whether we were previously loading. This is used to adjust the animations of async loading vs inserts.
        let loadingState = this.collection.body.props.loadingState;
        this.wasLoading = this.isLoading;
        this.isLoading = loadingState === 'loading' || loadingState === 'loadingMore';
        this.buildColumnWidths();
        let header = this.buildHeader();
        let body = this.buildBody(0);
        body.layoutInfo.rect.width = Math.max(header.layoutInfo.rect.width, body.layoutInfo.rect.width);
        this.contentSize = new Size(body.layoutInfo.rect.width, body.layoutInfo.rect.maxY);
        return [
            header,
            body
        ];
    }
    buildColumnWidths() {
        this.columnWidths = new Map();
        this.stickyColumnIndices = []; // Pass 1: set widths for all explicitly defined columns.
        let remainingColumns = new Set();
        let remainingSpace = this.virtualizer.visibleRect.width;
        for (let column of this.collection.columns){
            var _props$width;
            let props = column.props;
            let width = (_props$width = props.width) != null ? _props$width : this.getDefaultWidth(props);
            if (width != null) {
                let w = this.parseWidth(width);
                this.columnWidths.set(column.key, w);
                remainingSpace -= w;
            } else remainingColumns.add(column);
             // The selection cell and any other sticky columns always need to be visible.
            // In addition, row headers need to be in the DOM for accessibility labeling.
            if (column.props.isSelectionCell || this.collection.rowHeaderColumnKeys.has(column.key)) this.stickyColumnIndices.push(column.index);
        } // Pass 2: if there are remaining columns, then distribute the remaining space evenly.
        if (remainingColumns.size > 0) {
            let columnWidth = remainingSpace / (this.collection.columns.length - this.columnWidths.size);
            for (let column1 of remainingColumns){
                let props = column1.props;
                let minWidth = props.minWidth != null ? this.parseWidth(props.minWidth) : 75;
                let maxWidth = props.maxWidth != null ? this.parseWidth(props.maxWidth) : Infinity;
                let width = Math.max(minWidth, Math.min(maxWidth, columnWidth));
                this.columnWidths.set(column1.key, width);
                remainingSpace -= width;
                if (width !== columnWidth) columnWidth = remainingSpace / (this.collection.columns.length - this.columnWidths.size);
            }
        }
    }
    parseWidth(width) {
        if (typeof width === 'string') {
            let match = width.match(/^(\d+)%$/);
            if (!match) throw new Error('Only percentages are supported as column widths');
            return this.virtualizer.visibleRect.width * (parseInt(match[1], 10) / 100);
        }
        return width;
    }
    buildHeader() {
        let rect = new Rect(0, 0, 0, 0);
        let layoutInfo = new LayoutInfo('header', 'header', rect);
        let y = 0;
        let width = 0;
        let children = [];
        for (let headerRow of this.collection.headerRows){
            let layoutNode = this.buildChild(headerRow, 0, y);
            layoutNode.layoutInfo.parentKey = 'header';
            y = layoutNode.layoutInfo.rect.maxY;
            width = Math.max(width, layoutNode.layoutInfo.rect.width);
            children.push(layoutNode);
        }
        rect.width = width;
        rect.height = y;
        this.layoutInfos.set('header', layoutInfo);
        return {
            layoutInfo,
            children
        };
    }
    buildHeaderRow(headerRow, x, y) {
        let rect = new Rect(0, y, 0, 0);
        let row = new LayoutInfo('headerrow', headerRow.key, rect);
        let height = 0;
        let columns = [];
        for (let cell of headerRow.childNodes){
            let layoutNode = this.buildChild(cell, x, y);
            layoutNode.layoutInfo.parentKey = row.key;
            x = layoutNode.layoutInfo.rect.maxX;
            height = Math.max(height, layoutNode.layoutInfo.rect.height);
            columns.push(layoutNode);
        }
        this.setChildHeights(columns, height);
        rect.height = height;
        rect.width = x;
        return {
            layoutInfo: row,
            children: columns
        };
    }
    setChildHeights(children, height) {
        for (let child of children)if (child.layoutInfo.rect.height !== height) {
            // Need to copy the layout info before we mutate it.
            child.layoutInfo = child.layoutInfo.copy();
            this.layoutInfos.set(child.layoutInfo.key, child.layoutInfo);
            child.layoutInfo.rect.height = height;
        }
    }
    getColumnWidth(node) {
        var _node$colspan;
        let colspan = (_node$colspan = node.colspan) != null ? _node$colspan : 1;
        let width = 0;
        for(let i = 0; i < colspan; i++){
            let column = this.collection.columns[node.index + i];
            width += this.columnWidths.get(column.key);
        }
        return width;
    }
    getEstimatedHeight(node, width, height, estimatedHeight) {
        let isEstimated = false; // If no explicit height is available, use an estimated height.
        if (height == null) {
            // If a previous version of this layout info exists, reuse its height.
            // Mark as estimated if the size of the overall collection view changed,
            // or the content of the item changed.
            let previousLayoutNode = this.layoutNodes.get(node.key);
            if (previousLayoutNode) {
                let curNode = this.collection.getItem(node.key);
                let lastNode = this.lastCollection ? this.lastCollection.getItem(node.key) : null;
                height = previousLayoutNode.layoutInfo.rect.height;
                isEstimated = curNode !== lastNode || width !== previousLayoutNode.layoutInfo.rect.width || previousLayoutNode.layoutInfo.estimatedSize;
            } else {
                height = estimatedHeight;
                isEstimated = true;
            }
        }
        return {
            height,
            isEstimated
        };
    }
    buildColumn(node, x, y) {
        var _node$props;
        let width = this.getColumnWidth(node);
        let { height , isEstimated  } = this.getEstimatedHeight(node, width, this.headingHeight, this.estimatedHeadingHeight);
        let rect = new Rect(x, y, width, height);
        let layoutInfo = new LayoutInfo(node.type, node.key, rect);
        layoutInfo.isSticky = (_node$props = node.props) == null ? void 0 : _node$props.isSelectionCell;
        layoutInfo.zIndex = layoutInfo.isSticky ? 2 : 1;
        layoutInfo.estimatedSize = isEstimated;
        return {
            layoutInfo
        };
    }
    buildBody(y) {
        let rect = new Rect(0, y, 0, 0);
        let layoutInfo = new LayoutInfo('rowgroup', 'body', rect);
        let startY = y;
        let width = 0;
        let children = [];
        for (let node of this.collection.body.childNodes){
            let layoutNode = this.buildChild(node, 0, y);
            layoutNode.layoutInfo.parentKey = 'body';
            y = layoutNode.layoutInfo.rect.maxY;
            width = Math.max(width, layoutNode.layoutInfo.rect.width);
            children.push(layoutNode);
        }
        if (this.isLoading) {
            let rect1 = new Rect(0, y, width || this.virtualizer.visibleRect.width, children.length === 0 ? this.virtualizer.visibleRect.height : 60);
            let loader = new LayoutInfo('loader', 'loader', rect1);
            loader.parentKey = 'body';
            loader.isSticky = children.length === 0;
            this.layoutInfos.set('loader', loader);
            children.push({
                layoutInfo: loader
            });
            y = loader.rect.maxY;
            width = Math.max(width, rect1.width);
        } else if (children.length === 0) {
            let rect1 = new Rect(0, y, this.virtualizer.visibleRect.width, this.virtualizer.visibleRect.height);
            let empty = new LayoutInfo('empty', 'empty', rect1);
            empty.parentKey = 'body';
            empty.isSticky = true;
            this.layoutInfos.set('empty', empty);
            children.push({
                layoutInfo: empty
            });
            y = empty.rect.maxY;
            width = Math.max(width, rect1.width);
        }
        rect.width = width;
        rect.height = y - startY;
        this.layoutInfos.set('body', layoutInfo);
        return {
            layoutInfo,
            children
        };
    }
    buildNode(node, x, y) {
        switch(node.type){
            case 'headerrow':
                return this.buildHeaderRow(node, x, y);
            case 'item':
                return this.buildRow(node, x, y);
            case 'column':
            case 'placeholder':
                return this.buildColumn(node, x, y);
            case 'cell':
                return this.buildCell(node, x, y);
            default:
                throw new Error('Unknown node type ' + node.type);
        }
    }
    buildRow(node, x, y) {
        let rect = new Rect(x, y, 0, 0);
        let layoutInfo = new LayoutInfo('row', node.key, rect);
        let children = [];
        let height = 0;
        for (let child of node.childNodes){
            let layoutNode = this.buildChild(child, x, y);
            x = layoutNode.layoutInfo.rect.maxX;
            height = Math.max(height, layoutNode.layoutInfo.rect.height);
            children.push(layoutNode);
        }
        this.setChildHeights(children, height);
        rect.width = x;
        rect.height = height + 1; // +1 for bottom border
        return {
            layoutInfo,
            children
        };
    }
    buildCell(node, x, y) {
        var _node$props2;
        let width = this.getColumnWidth(node);
        let { height , isEstimated  } = this.getEstimatedHeight(node, width, this.rowHeight, this.estimatedRowHeight);
        let rect = new Rect(x, y, width, height);
        let layoutInfo = new LayoutInfo(node.type, node.key, rect);
        layoutInfo.isSticky = (_node$props2 = node.props) == null ? void 0 : _node$props2.isSelectionCell;
        layoutInfo.zIndex = layoutInfo.isSticky ? 2 : 1;
        layoutInfo.estimatedSize = isEstimated;
        return {
            layoutInfo
        };
    }
    getVisibleLayoutInfos(rect) {
        let res = [];
        for (let node of this.rootNodes){
            res.push(node.layoutInfo);
            this.addVisibleLayoutInfos(res, node, rect);
        }
        return res;
    }
    addVisibleLayoutInfos(res, node, rect) {
        if (!node.children || node.children.length === 0) return;
        switch(node.layoutInfo.type){
            case 'header':
                for (let child of node.children){
                    res.push(child.layoutInfo);
                    this.addVisibleLayoutInfos(res, child, rect);
                }
                break;
            case 'rowgroup':
                {
                    let firstVisibleRow = this.binarySearch(node.children, rect.topLeft, 'y');
                    let lastVisibleRow = this.binarySearch(node.children, rect.bottomRight, 'y');
                    for(let i = firstVisibleRow; i <= lastVisibleRow; i++){
                        res.push(node.children[i].layoutInfo);
                        this.addVisibleLayoutInfos(res, node.children[i], rect);
                    }
                    break;
                }
            case 'headerrow':
            case 'row':
                {
                    let firstVisibleCell = this.binarySearch(node.children, rect.topLeft, 'x');
                    let lastVisibleCell = this.binarySearch(node.children, rect.topRight, 'x');
                    let stickyIndex = 0;
                    for(let i = firstVisibleCell; i <= lastVisibleCell; i++){
                        // Sticky columns and row headers are always in the DOM. Interleave these
                        // with the visible range so that they are in the right order.
                        if (stickyIndex < this.stickyColumnIndices.length) {
                            let idx = this.stickyColumnIndices[stickyIndex];
                            while(idx < i){
                                res.push(node.children[idx].layoutInfo);
                                idx = this.stickyColumnIndices[stickyIndex++];
                            }
                        }
                        res.push(node.children[i].layoutInfo);
                    }
                    while(stickyIndex < this.stickyColumnIndices.length){
                        let idx = this.stickyColumnIndices[stickyIndex++];
                        res.push(node.children[idx].layoutInfo);
                    }
                    break;
                }
            default:
                throw new Error('Unknown node type ' + node.layoutInfo.type);
        }
    }
    binarySearch(items, point, axis) {
        let low = 0;
        let high = items.length - 1;
        while(low <= high){
            let mid = low + high >> 1;
            let item = items[mid];
            if (axis === 'x' && item.layoutInfo.rect.maxX < point.x || axis === 'y' && item.layoutInfo.rect.maxY < point.y) low = mid + 1;
            else if (axis === 'x' && item.layoutInfo.rect.x > point.x || axis === 'y' && item.layoutInfo.rect.y > point.y) high = mid - 1;
            else return mid;
        }
        return Math.max(0, Math.min(items.length - 1, low));
    }
    getInitialLayoutInfo(layoutInfo) {
        let res = super.getInitialLayoutInfo(layoutInfo); // If this insert was the result of async loading, remove the zoom effect and just keep the fade in.
        if (this.wasLoading) res.transform = null;
        return res;
    }
}
exports.TableLayout = TableLayout;

},{"@react-stately/virtualizer":"4QY66"}],"4QY66":[function(require,module,exports) {
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
var { useLayoutEffect  } = require("@react-aria/utils");
var { useCallback , useEffect , useMemo , useState  } = require("react");
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // import {Point} from './Point';
// import { DragTarget, DropTarget } from '@react-types/shared';
/**
 * [CollectionView]{@link CollectionView} supports arbitrary layout objects, which compute what views are visible, and how
 * to position and style them. However, layouts do not create the views themselves directly. Instead,
 * layouts produce lightweight {@link LayoutInfo} objects which describe various properties of a view,
 * such as its position and size. The {@link CollectionView} is then responsible for creating the actual
 * views as needed, based on this layout information.
 *
 * Every layout extends from the {@link Layout} abstract base class. Layouts must implement a minimum of the
 * two methods listed below. All other methods can be optionally overridden to implement custom behavior.
 *
 * @see {@link getVisibleLayoutInfos}
 * @see {@link getLayoutInfo}
 */ class Layout {
    constructor(){
        this.virtualizer = void 0;
    }
    /**
   * Returns whether the layout should invalidate in response to
   * visible rectangle changes. By default, it only invalidates
   * when the collection view's size changes. Return true always
   * to make the layout invalidate while scrolling (e.g. sticky headers).
   */ shouldInvalidate(newRect, oldRect) {
        // By default, invalidate when the size changes
        return newRect.width !== oldRect.width || newRect.height !== oldRect.height;
    }
    /**
   * This method allows the layout to perform any pre-computation
   * it needs to in order to prepare {@link LayoutInfo}s for retrieval.
   * Called by the collection view before {@link getVisibleLayoutInfos}
   * or {@link getLayoutInfo} are called.
   */ validate(invalidationContext) {
    }
    /**
   * Returns an array of {@link LayoutInfo} objects which are inside the given rectangle.
   * Should be implemented by subclasses.
   * @param rect The rectangle that should contain the returned LayoutInfo objects.
   */ /**
   * Returns a {@link DragTarget} describing a view at the given point to be dragged.
   * Return `null` to cancel the drag. The default implementation returns the view at the given point.
   * @param point The point at which the drag occurred.
   */ // getDragTarget(point: Point): DragTarget | null {
    //   let target = this.virtualizer.keyAtPoint(point);
    //   if (!target) {
    //     return null;
    //   }
    //   return {
    //     type: 'item',
    //     key: target
    //   };
    // }
    /**
   * Returns a {@link DragTarget} object describing where a drop should occur. Return `null`
   * to reject the drop. The dropped items will be inserted before the resulting target.
   * @param point The point at which the drop occurred.
   */ // getDropTarget(point: Point): DropTarget | null {
    //   return null;
    // }
    /**
   * Returns the starting attributes for an animated insertion.
   * The view is animated from this {@link LayoutInfo} to the one returned by {@link getLayoutInfo}.
   * The default implementation just returns its input.
   *
   * @param layoutInfo The proposed LayoutInfo for this view.
   */ getInitialLayoutInfo(layoutInfo) {
        return layoutInfo;
    }
    /**
   * Returns the ending attributes for an animated removal.
   * The view is animated from the {@link LayoutInfo} returned by {@link getLayoutInfo}
   * to the one returned by this method. The default implementation returns its input.
   *
   * @param layoutInfo The original LayoutInfo for this view.
   */ getFinalLayoutInfo(layoutInfo) {
        return layoutInfo;
    }
}
exports.Layout = Layout;
/**
 * Instances of this lightweight class are created by {@link Layout} subclasses
 * to represent each view in the {@link CollectionView}. LayoutInfo objects describe
 * various properties of a view, such as its position and size, and style information.
 * The collection view uses this information when creating actual views to display.
 */ class LayoutInfo {
    /**
   * A string representing the view type. Should be `'item'` for item views.
   * Other types are used by supplementary views.
   */ /**
   * A unique key for this view. For item views, it should match the content key.
   */ /**
   * The key for a parent layout info, if any.
   */ /**
   * The rectangle describing the size and position of this view.
   */ /**
   * Whether the size is estimated. `false` by default.
   */ /**
   * Whether the layout info sticks to the viewport when scrolling.
   */ /**
   * The view's opacity. 1 by default.
   */ /**
   * A CSS transform string to apply to the view. `null` by default.
   */ /**
   * The z-index of the view. 0 by default.
   */ /**
   * @param type A string representing the view type. Should be `'item'` for item views.
                            Other types are used by supplementary views.
   * @param key The unique key for this view.
   * @param rect The rectangle describing the size and position of this view.
   */ constructor(type1, key2, rect1){
        this.type = void 0;
        this.key = void 0;
        this.parentKey = void 0;
        this.rect = void 0;
        this.estimatedSize = void 0;
        this.isSticky = void 0;
        this.opacity = void 0;
        this.transform = void 0;
        this.zIndex = void 0;
        this.type = type1;
        this.key = key2;
        this.parentKey = null;
        this.rect = rect1;
        this.estimatedSize = false;
        this.isSticky = false;
        this.opacity = 1;
        this.transform = null;
        this.zIndex = 0;
    }
    /**
   * Returns a copy of the LayoutInfo.
   */ copy() {
        let res = new LayoutInfo(this.type, this.key, this.rect.copy());
        res.estimatedSize = this.estimatedSize;
        res.opacity = this.opacity;
        res.transform = this.transform;
        res.parentKey = this.parentKey;
        res.isSticky = this.isSticky;
        return res;
    }
}
exports.LayoutInfo = LayoutInfo;
class Point {
    /** The x-coordinate of the point. */ /** The y-coordinate of the point. */ constructor(x, y){
        if (x === void 0) x = 0;
        if (y === void 0) y = 0;
        this.x = void 0;
        this.y = void 0;
        this.x = x;
        this.y = y;
    }
    /**
   * Returns a copy of this point.
   */ copy() {
        return new Point(this.x, this.y);
    }
    /**
   * Checks if two points are equal.
   */ equals(point) {
        return this.x === point.x && this.y === point.y;
    }
    /**
   * Returns true if this point is the origin.
   */ isOrigin() {
        return this.x === 0 && this.y === 0;
    }
}
exports.Point = Point;
/**
 * Represents a rectangle.
 */ class Rect {
    /** The x-coordinate of the rectangle. */ /** The y-coordinate of the rectangle. */ /** The width of the rectangle. */ /** The height of the rectangle. */ constructor(x1, y1, width, height){
        if (x1 === void 0) x1 = 0;
        if (y1 === void 0) y1 = 0;
        if (width === void 0) width = 0;
        if (height === void 0) height = 0;
        this.x = void 0;
        this.y = void 0;
        this.width = void 0;
        this.height = void 0;
        this.x = x1;
        this.y = y1;
        this.width = width;
        this.height = height;
    }
    /**
   * The maximum x-coordinate in the rectangle.
   */ get maxX() {
        return this.x + this.width;
    }
    /**
   * The maximum y-coordinate in the rectangle.
   */ get maxY() {
        return this.y + this.height;
    }
    /**
   * The area of the rectangle.
   */ get area() {
        return this.width * this.height;
    }
    /**
   * The top left corner of the rectangle.
   */ get topLeft() {
        return new Point(this.x, this.y);
    }
    /**
   * The top right corner of the rectangle.
   */ get topRight() {
        return new Point(this.maxX, this.y);
    }
    /**
   * The bottom left corner of the rectangle.
   */ get bottomLeft() {
        return new Point(this.x, this.maxY);
    }
    /**
   * The bottom right corner of the rectangle.
   */ get bottomRight() {
        return new Point(this.maxX, this.maxY);
    }
    /**
   * Returns whether this rectangle intersects another rectangle.
   * @param rect - The rectangle to check.
   */ intersects(rect) {
        return this.x <= rect.x + rect.width && rect.x <= this.x + this.width && this.y <= rect.y + rect.height && rect.y <= this.y + this.height;
    }
    /**
   * Returns whether this rectangle fully contains another rectangle.
   * @param rect - The rectangle to check.
   */ containsRect(rect) {
        return this.x <= rect.x && this.y <= rect.y && this.maxX >= rect.maxX && this.maxY >= rect.maxY;
    }
    /**
   * Returns whether the rectangle contains the given point.
   * @param point - The point to check.
   */ containsPoint(point) {
        return this.x <= point.x && this.y <= point.y && this.maxX >= point.x && this.maxY >= point.y;
    }
    /**
   * Returns the first corner of this rectangle (from top to bottom, left to right)
   * that is contained in the given rectangle, or null of the rectangles do not intersect.
   * @param rect - The rectangle to check.
   */ getCornerInRect(rect) {
        for (let key1 of [
            'topLeft',
            'topRight',
            'bottomLeft',
            'bottomRight'
        ]){
            if (rect.containsPoint(this[key1])) return key1;
        }
        return null;
    }
    equals(rect) {
        return rect.x === this.x && rect.y === this.y && rect.width === this.width && rect.height === this.height;
    }
    pointEquals(point) {
        return this.x === point.x && this.y === point.y;
    }
    sizeEquals(size) {
        return this.width === size.width && this.height === size.height;
    }
    /**
   * Returns a copy of this rectangle.
   */ copy() {
        return new Rect(this.x, this.y, this.width, this.height);
    }
}
exports.Rect = Rect;
class Size {
    constructor(width1, height1){
        if (width1 === void 0) width1 = 0;
        if (height1 === void 0) height1 = 0;
        this.width = void 0;
        this.height = void 0;
        this.width = width1;
        this.height = height1;
    }
    /**
   * Returns a copy of this size.
   */ copy() {
        return new Size(this.width, this.height);
    }
    /**
   * Returns whether this size is equal to another one.
   */ equals(other) {
        return this.width === other.width && this.height === other.height;
    }
}
exports.Size = Size;
let $c725352f87b2e3c40c7fcea17c35c2a$var$KEY = 0;
/**
 * [CollectionView]{@link CollectionView} creates instances of the [ReusableView]{@link ReusableView} class to
 * represent views currently being displayed. ReusableViews manage a DOM node, handle
 * applying {@link LayoutInfo} objects to the view, and render content
 * as needed. Subclasses must implement the {@link render} method at a
 * minimum. Other methods can be overridden to customize behavior.
 */ class ReusableView {
    /** The CollectionVirtualizer this view is a part of. */ /** The LayoutInfo this view is currently representing. */ /** The content currently being displayed by this view, set by the collection view. */ constructor(virtualizer){
        this.virtualizer = void 0;
        this.layoutInfo = void 0;
        this.content = void 0;
        this.rendered = void 0;
        this.viewType = void 0;
        this.key = void 0;
        this.virtualizer = virtualizer;
        this.key = ++$c725352f87b2e3c40c7fcea17c35c2a$var$KEY;
    }
    /**
   * Prepares the view for reuse. Called just before the view is removed from the DOM.
   */ prepareForReuse() {
        this.content = null;
        this.rendered = null;
        this.layoutInfo = null;
    }
}
exports.ReusableView = ReusableView;
// use high res timer if available
let $c2209bcf49cd606639597eb5ee44c7c1$var$perf = typeof window !== 'undefined' ? window.performance : null; // @ts-ignore
let $c2209bcf49cd606639597eb5ee44c7c1$var$perfNow = $c2209bcf49cd606639597eb5ee44c7c1$var$perf && ($c2209bcf49cd606639597eb5ee44c7c1$var$perf.now || $c2209bcf49cd606639597eb5ee44c7c1$var$perf.webkitNow || $c2209bcf49cd606639597eb5ee44c7c1$var$perf.msNow || $c2209bcf49cd606639597eb5ee44c7c1$var$perf.mozNow);
let $c2209bcf49cd606639597eb5ee44c7c1$var$getTime = $c2209bcf49cd606639597eb5ee44c7c1$var$perfNow ? $c2209bcf49cd606639597eb5ee44c7c1$var$perfNow.bind($c2209bcf49cd606639597eb5ee44c7c1$var$perf) : function() {
    return Date.now ? Date.now() : new Date().getTime();
};
let $c2209bcf49cd606639597eb5ee44c7c1$var$fixTs;
function $c2209bcf49cd606639597eb5ee44c7c1$export$tween(begin, end, duration, ease, fn) {
    let canceled = false;
    let raf_id;
    let promise = new Promise((resolve)=>{
        let start = $c2209bcf49cd606639597eb5ee44c7c1$var$getTime();
        let diffX = end.x - begin.x;
        let diffY = end.y - begin.y;
        raf_id = requestAnimationFrame(function run(t) {
            // if we're using a high res timer, make sure timestamp is not the old epoch-based value.
            // http://updates.html5rocks.com/2012/05/requestAnimationFrame-API-now-with-sub-millisecond-precision
            if ($c2209bcf49cd606639597eb5ee44c7c1$var$fixTs == null) $c2209bcf49cd606639597eb5ee44c7c1$var$fixTs = t > 1000000000000 !== $c2209bcf49cd606639597eb5ee44c7c1$var$getTime() > 1000000000000;
            if ($c2209bcf49cd606639597eb5ee44c7c1$var$fixTs) t = $c2209bcf49cd606639597eb5ee44c7c1$var$getTime();
             // check if we're done
            let delta = t - start;
            if (delta > duration) {
                fn(end);
                resolve();
            } else {
                // call frame callback after computing eased time and get the next frame
                let proceed = fn(new Point(begin.x + diffX * ease(delta / duration), begin.y + diffY * ease(delta / duration)));
                if (proceed !== false && !canceled) raf_id = requestAnimationFrame(run);
            }
        });
    });
    promise.cancel = function() {
        canceled = true;
        cancelAnimationFrame(raf_id);
    };
    return promise;
} // easing functions
function $c2209bcf49cd606639597eb5ee44c7c1$export$easeOut(t) {
    return Math.sin(t * Math.PI / 2);
}
function $eb5c48b3196adea28b2a65513c55f96$export$keyDiff(a, b) {
    let res = new Set();
    for (let key1 of a.keys())if (!b.has(key1)) res.add(key1);
    return res;
}
/**
 * Returns the key difference between two maps. Returns a set of
 * keys to add to and remove from a to make it equal to b.
 * @private
 */ function $eb5c48b3196adea28b2a65513c55f96$export$difference(a, b) {
    let toRemove = $eb5c48b3196adea28b2a65513c55f96$export$keyDiff(a, b);
    let toAdd = $eb5c48b3196adea28b2a65513c55f96$export$keyDiff(b, a);
    let toUpdate = new Set();
    for (let key1 of a.keys())if (b.has(key1)) toUpdate.add(key1);
    return {
        toRemove,
        toAdd,
        toUpdate
    };
}
/**
 * Returns an iterator that yields the items in all of the given iterators.
 * @private
 */ function* $eb5c48b3196adea28b2a65513c55f96$export$concatIterators() {
    for(var _len = arguments.length, iterators = new Array(_len), _key = 0; _key < _len; _key++)iterators[_key] = arguments[_key];
    for (let iterator of iterators)yield* iterator;
}
/**
 * Inverts the keys and values of an object.
 * @private
 */ class $d4638270963df552e2a603f0288c7$var$RollingAverage {
    constructor(){
        this.count = 0;
        this.value = 0;
    }
    addSample(sample) {
        this.count++;
        this.value += (sample - this.value) / this.count;
    }
}
class $d4638270963df552e2a603f0288c7$export$OverscanManager {
    constructor(){
        this.startTime = 0;
        this.averagePerf = new $d4638270963df552e2a603f0288c7$var$RollingAverage();
        this.averageTime = new $d4638270963df552e2a603f0288c7$var$RollingAverage();
        this.velocity = new Point(5, 5);
        this.overscanX = new $d4638270963df552e2a603f0288c7$var$RollingAverage();
        this.overscanY = new $d4638270963df552e2a603f0288c7$var$RollingAverage();
        this.visibleRect = new Rect();
    }
    setVisibleRect(rect) {
        let time = performance.now() - this.startTime;
        if (time < 500) {
            this.averageTime.addSample(time);
            if (rect.x !== this.visibleRect.x && time > 0) this.velocity.x = (rect.x - this.visibleRect.x) / time;
            if (rect.y !== this.visibleRect.y && time > 0) this.velocity.y = (rect.y - this.visibleRect.y) / time;
        }
        this.startTime = performance.now();
        this.visibleRect = rect;
    }
    collectMetrics() {
        let time = performance.now() - this.startTime;
        if (time < 500) this.averagePerf.addSample(time);
        if (this.visibleRect.height > 0) {
            let o = Math.abs(this.velocity.y * (this.averageTime.value + this.averagePerf.value));
            this.overscanY.addSample(o);
        }
        if (this.visibleRect.width > 0) {
            let o = Math.abs(this.velocity.x * (this.averageTime.value + this.averagePerf.value));
            this.overscanX.addSample(o);
        }
    }
    getOverscannedRect() {
        let overscanned = this.visibleRect.copy();
        let overscanY = Math.round(Math.min(this.visibleRect.height * 2, this.overscanY.value) / 100) * 100;
        if (this.velocity.y > 0) {
            overscanned.y -= overscanY * 0.2;
            overscanned.height += overscanY + overscanY * 0.2;
        } else {
            overscanned.y -= overscanY;
            overscanned.height += overscanY + overscanY * 0.2;
        }
        let overscanX = Math.round(Math.min(this.visibleRect.width * 2, this.overscanX.value) / 100) * 100;
        if (this.velocity.x > 0) {
            overscanned.x -= overscanX * 0.2;
            overscanned.width += overscanX + overscanX * 0.2;
        } else {
            overscanned.x -= overscanX;
            overscanned.width += overscanX + overscanX * 0.2;
        }
        return overscanned;
    }
}
class $b8a692491eed0a311c18a0d64051b3$export$Transaction {
    constructor(){
        this.level = 0;
        this.actions = [];
        this.animated = true;
        this.initialMap = new Map();
        this.finalMap = new Map();
        this.initialLayoutInfo = new Map();
        this.finalLayoutInfo = new Map();
        this.removed = new Map();
        this.toRemove = new Map();
    }
}
/**
 * The CollectionView class renders a scrollable collection of data using customizable layouts,
 * and manages animated updates to the data over time. It supports very large collections by
 * only rendering visible views to the DOM, reusing them as you scroll. Collection views can
 * present any type of view, including non-item views such as section headers and footers.
 * Optionally, the {@link EditableCollectionView} subclass can be used to enable user interaction
 * with the collection, including drag and drop, multiple selection, and keyboard interacton.
 *
 * Collection views get their data from a {@link DataSource} object that you provide. Items are
 * grouped into sections by the data source, and the collection view calls its methods to retrieve
 * the data. When data changes, the data source emits change events, and the collection view
 * updates as appropriate, optionally with an animated transition. There is one built-in data source
 * implementation, {@link ArrayDataSource}, which renders content from a 2d array.
 *
 * Collection views use {@link Layout} objects to compute what views should be visible, and how
 * to position and style them. This means that collection views can have their items arranged in
 * a stack, a grid, a circle, or any other layout you can think of. The layout can be changed
 * dynamically at runtime as well, optionally with an animated transition between the layouts.
 *
 * Layouts produce information on what views should appear in the collection view, but do not create
 * the views themselves directly. It is the responsibility of the {@link CollectionViewDelegate} object
 * to create instances of {@link ReusableView} subclasses which render the items into DOM nodes.
 * The delegate determines what type of view to display for each item, and creates instances of
 * views as needed by the collection view. Those views are then reused by the collection view as
 * the user scrolls through the content.
 */ class $c28d52c9ae86344e9273f2344f3d5a45$export$Virtualizer {
    /**
   * The collection view delegate. The delegate is used by the collection view
   * to create and configure views.
   */ /** The duration of animated layout changes, in milliseconds. Default is 500ms. */ /**
   * Whether to enable scroll anchoring. This will attempt to restore the scroll position
   * after layout changes outside the viewport. Default is off.
   */ /** Whether to anchor the scroll position when at the top of the content. Default is off. */ /**
   * Whether to overscan the visible area to pre-render items slightly outside and
   * improve performance. Default is on.
   */ constructor(options1){
        var _options$transitionDu;
        if (options1 === void 0) options1 = {
        };
        this.delegate = void 0;
        this.transitionDuration = void 0;
        this.anchorScrollPosition = void 0;
        this.anchorScrollPositionAtTop = void 0;
        this.shouldOverscan = void 0;
        this._collection = void 0;
        this._layout = void 0;
        this._contentSize = void 0;
        this._visibleRect = void 0;
        this._visibleLayoutInfos = void 0;
        this._reusableViews = void 0;
        this._visibleViews = void 0;
        this._renderedContent = void 0;
        this._children = void 0;
        this._invalidationContext = void 0;
        this._overscanManager = void 0;
        this._relayoutRaf = void 0;
        this._scrollAnimation = void 0;
        this._isScrolling = void 0;
        this._sizeUpdateQueue = void 0;
        this._animatedContentOffset = void 0;
        this._transaction = void 0;
        this._nextTransaction = void 0;
        this._transactionQueue = void 0;
        this._contentSize = new Size();
        this._visibleRect = new Rect();
        this._reusableViews = {
        };
        this._visibleLayoutInfos = new Map();
        this._visibleViews = new Map();
        this._renderedContent = new WeakMap();
        this._children = new Set();
        this._invalidationContext = null;
        this._overscanManager = new $d4638270963df552e2a603f0288c7$export$OverscanManager();
        this._scrollAnimation = null;
        this._isScrolling = false;
        this._sizeUpdateQueue = new Map();
        this._animatedContentOffset = new Point(0, 0);
        this._transaction = null;
        this._nextTransaction = null;
        this._transactionQueue = []; // Set options from passed object if given
        this.transitionDuration = (_options$transitionDu = options1.transitionDuration) != null ? _options$transitionDu : 500;
        this.anchorScrollPosition = options1.anchorScrollPosition || false;
        this.anchorScrollPositionAtTop = options1.anchorScrollPositionAtTop || false;
        this.shouldOverscan = options1.shouldOverscan !== false;
        for (let key1 of [
            'delegate',
            'size',
            'layout',
            'collection'
        ])if (options1[key1]) this[key1] = options1[key1];
    }
    _setContentSize(size) {
        this._contentSize = size;
        this.delegate.setContentSize(size);
    }
    _setContentOffset(offset) {
        let rect2 = new Rect(offset.x, offset.y, this._visibleRect.width, this._visibleRect.height);
        this.delegate.setVisibleRect(rect2);
    }
    /**
   * Get the size of the scrollable content.
   */ get contentSize() {
        return this._contentSize;
    }
    /**
   * Get the collection view's currently visible rectangle.
   */ get visibleRect() {
        return this._visibleRect;
    }
    /**
   * Set the collection view's currently visible rectangle.
   */ set visibleRect(rect) {
        this._setVisibleRect(rect);
    }
    _setVisibleRect(rect, forceUpdate) {
        if (forceUpdate === void 0) forceUpdate = false;
        let current = this._visibleRect; // Ignore if the rects are equal
        if (rect.equals(current)) return;
        if (this.shouldOverscan) this._overscanManager.setVisibleRect(rect);
        let shouldInvalidate = this.layout && this.layout.shouldInvalidate(rect, this._visibleRect);
        this._resetAnimatedContentOffset();
        this._visibleRect = rect;
        if (shouldInvalidate) this.relayout({
            offsetChanged: !rect.pointEquals(current),
            sizeChanged: !rect.sizeEquals(current)
        });
        else this.updateSubviews(forceUpdate);
    }
    get collection() {
        return this._collection;
    }
    set collection(data) {
        this._setData(data);
    }
    _setData(data) {
        if (data === this._collection) return;
        if (this._collection) this._runTransaction(()=>{
            this._collection = data;
        }, this.transitionDuration > 0);
        else {
            this._collection = data;
            this.reloadData();
        }
    }
    /**
   * Reloads the data from the data source and relayouts the collection view.
   * Does not animate any changes. Equivalent to re-assigning the same data source
   * to the collection view.
   */ reloadData() {
        this.relayout({
            contentChanged: true
        });
    }
    /**
   * Returns the item with the given key.
   */ getItem(key) {
        return this._collection ? this._collection.getItem(key) : null;
    }
    /**
   * Get the collection view's layout.
   */ get layout() {
        return this._layout;
    }
    /**
   * Set the collection view's layout.
   */ set layout(layout) {
        this.setLayout(layout);
    }
    /**
   * Sets the collection view's layout, optionally with an animated transition
   * from the current layout to the new layout.
   * @param layout The layout to switch to.
   * @param animated Whether to animate the layout change.
   */ setLayout(layout, animated) {
        if (animated === void 0) animated = false;
        if (layout === this._layout) return;
        let applyLayout = ()=>{
            if (this._layout) // @ts-ignore
            this._layout.virtualizer = null;
            layout.virtualizer = this;
            this._layout = layout;
        };
        if (animated) // Animated layout transitions are really simple, thanks to our transaction support.
        // We just set the layout inside a transaction action, which runs after the initial
        // layout infos for the animation are retrieved from the previous layout. Then, the
        // final layout infos are retrieved from the new layout, and animations occur.
        this._runTransaction(applyLayout);
        else {
            applyLayout();
            this.relayout();
        }
    }
    _getReuseType(layoutInfo, content) {
        if (layoutInfo.type === 'item' && content) {
            let type1 = this.delegate.getType ? this.delegate.getType(content) : 'item';
            let reuseType = type1 === 'item' ? 'item' : layoutInfo.type + '_' + type1;
            return {
                type: type1,
                reuseType
            };
        }
        return {
            type: layoutInfo.type,
            reuseType: layoutInfo.type
        };
    }
    getReusableView(layoutInfo) {
        let content = this.getItem(layoutInfo.key);
        let { reuseType  } = this._getReuseType(layoutInfo, content);
        if (!this._reusableViews[reuseType]) this._reusableViews[reuseType] = [];
        let reusable = this._reusableViews[reuseType];
        let view = reusable.length > 0 ? reusable.pop() : new ReusableView(this);
        view.viewType = reuseType;
        if (!this._animatedContentOffset.isOrigin()) {
            layoutInfo = layoutInfo.copy();
            layoutInfo.rect.x += this._animatedContentOffset.x;
            layoutInfo.rect.y += this._animatedContentOffset.y;
        }
        view.layoutInfo = layoutInfo;
        this._renderView(view);
        return view;
    }
    _renderView(reusableView) {
        let { type: type1 , key: key3  } = reusableView.layoutInfo;
        reusableView.content = this.getItem(key3);
        reusableView.rendered = this._renderContent(type1, reusableView.content);
    }
    _renderContent(type, content) {
        let cached = this._renderedContent.get(content);
        if (cached != null) return cached;
        let rendered = this.delegate.renderView(type, content);
        if (content) this._renderedContent.set(content, rendered);
        return rendered;
    }
    /**
   * Returns an array of all currently visible views, including both
   * item views and supplementary views.
   */ get visibleViews() {
        return Array.from(this._visibleViews.values());
    }
    /**
   * Gets the visible view for the given type and key. Returns null if
   * the view is not currently visible.
   *
   * @param key The key of the view to retrieve.
   */ getView(key) {
        return this._visibleViews.get(key) || null;
    }
    /**
   * Returns an array of visible views matching the given type.
   * @param type The view type to find.
   */ getViewsOfType(type) {
        return this.visibleViews.filter((v)=>v.layoutInfo && v.layoutInfo.type === type
        );
    }
    /**
   * Returns the key for the given view. Returns null
   * if the view is not currently visible.
   */ keyForView(view) {
        if (view && view.layoutInfo) return view.layoutInfo.key;
        return null;
    }
    /**
   * Returns the key for the item view currently at the given point.
   */ keyAtPoint(point) {
        let rect2 = new Rect(point.x, point.y, 1, 1);
        let layoutInfos = this.layout.getVisibleLayoutInfos(rect2);
        let layoutInfo = layoutInfos[0];
        if (!layoutInfo) return null;
        return layoutInfo.key;
    }
    /**
   * Cleanup for when the Virtualizer will be unmounted.
   */ willUnmount() {
        cancelAnimationFrame(this._relayoutRaf);
    }
    /**
   * Triggers a layout invalidation, and updates the visible subviews.
   */ relayout(context) {
        if (context === void 0) context = {
        };
        // Ignore relayouts while animating the scroll position
        if (this._scrollAnimation || typeof requestAnimationFrame === 'undefined') return;
         // If we already scheduled a relayout, extend the invalidation
        // context so we coalesce multiple relayouts in the same frame.
        if (this._invalidationContext) {
            Object.assign(this._invalidationContext, context);
            return;
        }
        this._invalidationContext = context;
        this._relayoutRaf = requestAnimationFrame(()=>{
            this._relayoutRaf = null;
            this.relayoutNow();
        });
    }
    /**
   * Performs a relayout immediately. Prefer {@link relayout} over this method
   * where possible, since it coalesces multiple layout passes in the same tick.
   */ relayoutNow(context) {
        if (context === void 0) context = this._invalidationContext || {
        };
        // Cancel the scheduled relayout, since we're doing it now.
        if (this._relayoutRaf) {
            cancelAnimationFrame(this._relayoutRaf);
            this._relayoutRaf = null; // Update the provided context with the current invalidationContext since we are cancelling
            // a scheduled relayoutNow call that has this._invalidationContext set as its default context arg (relayoutNow() in relayout)
            context = _babelRuntimeHelpersExtends({
            }, this._invalidationContext, context);
        } // Reset the invalidation context
        this._invalidationContext = null; // Do nothing if we don't have a layout or content, or we are
        // in the middle of an animated scroll transition.
        if (!this.layout || !this._collection || this._scrollAnimation) return;
        let scrollAnchor = this._getScrollAnchor(); // Trigger the beforeLayout hook, if provided
        if (typeof context.beforeLayout === 'function') context.beforeLayout();
         // Validate the layout
        this.layout.validate(context);
        this._setContentSize(this.layout.getContentSize()); // Trigger the afterLayout hook, if provided
        if (typeof context.afterLayout === 'function') context.afterLayout();
         // Adjust scroll position based on scroll anchor, and constrain.
        // If the content changed, scroll to the top.
        let visibleRect = this.getVisibleRect();
        let restoredScrollAnchor = this._restoreScrollAnchor(scrollAnchor, context);
        let contentOffsetX = context.contentChanged ? 0 : restoredScrollAnchor.x;
        let contentOffsetY = context.contentChanged ? 0 : restoredScrollAnchor.y;
        contentOffsetX = Math.max(0, Math.min(this.contentSize.width - visibleRect.width, contentOffsetX));
        contentOffsetY = Math.max(0, Math.min(this.contentSize.height - visibleRect.height, contentOffsetY));
        let hasLayoutUpdates = false;
        if (contentOffsetX !== visibleRect.x || contentOffsetY !== visibleRect.y) {
            // If this is an animated relayout, we do not immediately scroll because it would be jittery.
            // Save the difference between the current and new content offsets, and apply it to the
            // individual content items instead. At the end of the animation, we'll reset and set the
            // scroll offset for real. This ensures jitter-free animation since we don't need to sync
            // the scroll animation and the content animation.
            if (context.animated || !this._animatedContentOffset.isOrigin()) {
                this._animatedContentOffset.x += visibleRect.x - contentOffsetX;
                this._animatedContentOffset.y += visibleRect.y - contentOffsetY;
                hasLayoutUpdates = this.updateSubviews(context.contentChanged);
            } else this._setContentOffset(new Point(contentOffsetX, contentOffsetY));
        } else hasLayoutUpdates = this.updateSubviews(context.contentChanged);
         // Apply layout infos, unless this is coming from an animated transaction
        if (!(context.transaction && context.animated)) this._applyLayoutInfos();
         // Wait for animations, and apply the afterAnimation hook, if provided
        if (context.animated && hasLayoutUpdates) {
            this._enableTransitions();
            let done = ()=>{
                this._disableTransitions(); // Reset scroll position after animations (see above comment).
                if (!this._animatedContentOffset.isOrigin()) {
                    // Get the content offset to scroll to, taking _animatedContentOffset into account.
                    let { x: x2 , y: y2  } = this.getVisibleRect();
                    this._resetAnimatedContentOffset();
                    this._setContentOffset(new Point(x2, y2));
                }
                if (typeof context.afterAnimation === 'function') context.afterAnimation();
            }; // Sometimes the animation takes slightly longer than expected.
            setTimeout(done, this.transitionDuration + 100);
            return;
        } else if (typeof context.afterAnimation === 'function') context.afterAnimation();
    }
    /**
   * Corrects DOM order of visible views to match item order of collection.
   */ _correctItemOrder() {
        // Defer until after scrolling and animated transactions are complete
        if (this._isScrolling || this._transaction) return;
        for (let key3 of this._visibleLayoutInfos.keys()){
            let view = this._visibleViews.get(key3);
            this._children.delete(view);
            this._children.add(view);
        }
    }
    _enableTransitions() {
        this.delegate.beginAnimations();
    }
    _disableTransitions() {
        this.delegate.endAnimations();
    }
    _getScrollAnchor() {
        if (!this.anchorScrollPosition) return null;
        let visibleRect = this.getVisibleRect(); // Ask the delegate to provide a scroll anchor, if possible
        if (this.delegate.getScrollAnchor) {
            let key3 = this.delegate.getScrollAnchor(visibleRect);
            if (key3) {
                let layoutInfo = this.layout.getLayoutInfo(key3);
                let corner = layoutInfo.rect.getCornerInRect(visibleRect);
                if (corner) {
                    let key4 = layoutInfo.key;
                    let offset = layoutInfo.rect[corner].y - visibleRect.y;
                    return {
                        key: key4,
                        layoutInfo,
                        corner,
                        offset
                    };
                }
            }
        } // No need to anchor the scroll position if it is at the top
        if (visibleRect.y === 0 && !this.anchorScrollPositionAtTop) return null;
         // Find a view with a visible corner that has the smallest distance to the top of the collection view
        let cornerAnchor = null;
        for (let [key3, view] of this._visibleViews){
            let layoutInfo = view.layoutInfo;
            if (layoutInfo && layoutInfo.rect.area > 0) {
                let corner = layoutInfo.rect.getCornerInRect(visibleRect);
                if (corner) {
                    let offset = layoutInfo.rect[corner].y - visibleRect.y;
                    if (!cornerAnchor || offset < cornerAnchor.offset) cornerAnchor = {
                        key: key3,
                        layoutInfo,
                        corner,
                        offset
                    };
                }
            }
        }
        return cornerAnchor;
    }
    _restoreScrollAnchor(scrollAnchor, context) {
        let contentOffset = this.getVisibleRect();
        if (scrollAnchor) {
            var _context$transaction;
            let finalAnchor = ((_context$transaction = context.transaction) == null ? void 0 : _context$transaction.animated) ? context.transaction.finalMap.get(scrollAnchor.key) : this.layout.getLayoutInfo(scrollAnchor.layoutInfo.key);
            if (finalAnchor) {
                let adjustment = finalAnchor.rect[scrollAnchor.corner].y - contentOffset.y - scrollAnchor.offset;
                contentOffset.y += adjustment;
            }
        }
        return contentOffset;
    }
    getVisibleRect() {
        let v = this.visibleRect;
        let x2 = v.x - this._animatedContentOffset.x;
        let y2 = v.y - this._animatedContentOffset.y;
        return new Rect(x2, y2, v.width, v.height);
    }
    getVisibleLayoutInfos() {
        let rect2 = this.shouldOverscan ? this._overscanManager.getOverscannedRect() : this.getVisibleRect();
        this._visibleLayoutInfos = this._getLayoutInfoMap(rect2);
        return this._visibleLayoutInfos;
    }
    _getLayoutInfoMap(rect, copy) {
        if (copy === void 0) copy = false;
        let layoutInfos = this.layout.getVisibleLayoutInfos(rect);
        let map = new Map();
        for (let layoutInfo of layoutInfos){
            if (copy) layoutInfo = layoutInfo.copy();
            map.set(layoutInfo.key, layoutInfo);
        }
        return map;
    }
    updateSubviews(forceUpdate) {
        if (forceUpdate === void 0) forceUpdate = false;
        if (!this._collection) return;
        let visibleLayoutInfos = this.getVisibleLayoutInfos();
        let currentlyVisible = this._visibleViews;
        let toAdd, toRemove, toUpdate; // If this is a force update, remove and re-add all views.
        // Otherwise, find and update the diff.
        if (forceUpdate) {
            toAdd = visibleLayoutInfos;
            toRemove = currentlyVisible;
            toUpdate = new Set();
        } else {
            ({ toAdd , toRemove , toUpdate  } = $eb5c48b3196adea28b2a65513c55f96$export$difference(currentlyVisible, visibleLayoutInfos));
            for (let key3 of toUpdate){
                let view = currentlyVisible.get(key3);
                if (!view || !view.layoutInfo) continue;
                let item = this.getItem(visibleLayoutInfos.get(key3).key);
                if (view.content === item) toUpdate.delete(key3);
                else {
                    // If the view type changes, delete and recreate the view instead of updating
                    let { reuseType  } = this._getReuseType(view.layoutInfo, item);
                    if (view.viewType !== reuseType) {
                        toUpdate.delete(key3);
                        toAdd.add(key3);
                        toRemove.add(key3);
                    }
                }
            } // We are done if the sets are equal
            if (toAdd.size === 0 && toRemove.size === 0 && toUpdate.size === 0) {
                if (this._transaction) this._applyLayoutInfos();
                return;
            }
        } // Track views that should be removed. They are not removed from
        // the DOM immediately, since we may reuse and need to re-insert
        // them back into the DOM anyway.
        let removed = new Set();
        for (let key3 of toRemove.keys()){
            let view = this._visibleViews.get(key3);
            if (view) {
                removed.add(view);
                this._visibleViews.delete(key3); // If we are in the middle of a transaction, wait until the end
                // of the animations to remove the views from the DOM. Also means
                // we can't reuse those views immediately.
                if (this._transaction) this._transaction.toRemove.set(key3, view);
                else this.reuseView(view);
            }
        }
        for (let key4 of toAdd.keys()){
            let layoutInfo = visibleLayoutInfos.get(key4);
            let view; // If we're in a transaction, and a layout change happens
            // during the animations such that a view that was going
            // to be removed is now not, we don't create a new view
            // since the old one is still in the DOM, marked as toRemove.
            if (this._transaction) {
                // if transaction, get initial layout attributes for the animation
                if (this._transaction.initialLayoutInfo.has(key4)) layoutInfo = this._transaction.initialLayoutInfo.get(key4);
                view = this._transaction.toRemove.get(key4);
                if (view) {
                    this._transaction.toRemove.delete(key4);
                    this._applyLayoutInfo(view, layoutInfo);
                }
            }
            if (!view) {
                // Create or reuse a view for this row
                view = this.getReusableView(layoutInfo); // Add the view to the DOM if needed
                if (!removed.has(view)) this._children.add(view);
            }
            this._visibleViews.set(key4, view);
            removed.delete(view);
        }
        for (let key5 of toUpdate){
            let view = currentlyVisible.get(key5);
            this._renderedContent.delete(key5);
            this._renderView(view);
        } // Remove the remaining rows to delete from the DOM
        if (!this._transaction) this.removeViews(removed);
        this._correctItemOrder();
        this._flushVisibleViews();
        let hasLayoutUpdates = this._transaction && (toAdd.size > 0 || toRemove.size > 0 || this._hasLayoutUpdates());
        if (hasLayoutUpdates) requestAnimationFrame(()=>{
            // If we're in a transaction, apply animations to visible views
            // and "to be removed" views, which animate off screen.
            if (this._transaction) requestAnimationFrame(()=>this._applyLayoutInfos()
            );
        });
        return hasLayoutUpdates;
    }
    afterRender() {
        if (this.shouldOverscan) this._overscanManager.collectMetrics();
    }
    _flushVisibleViews() {
        // CollectionVirtualizer deals with a flattened set of LayoutInfos, but they can represent heirarchy
        // by referencing a parentKey. Just before rendering the visible views, we rebuild this heirarchy
        // by creating a mapping of views by parent key and recursively calling the delegate's renderWrapper
        // method to build the final tree.
        let viewsByParentKey = new Map([
            [
                null,
                []
            ]
        ]);
        for (let view of this._children){
            if (!viewsByParentKey.has(view.layoutInfo.parentKey)) viewsByParentKey.set(view.layoutInfo.parentKey, []);
            viewsByParentKey.get(view.layoutInfo.parentKey).push(view);
            if (!viewsByParentKey.has(view.layoutInfo.key)) viewsByParentKey.set(view.layoutInfo.key, []);
        }
        let buildTree = (parent, views)=>views.map((view1)=>{
                let children = viewsByParentKey.get(view1.layoutInfo.key);
                return this.delegate.renderWrapper(parent, view1, children, (childViews)=>buildTree(view1, childViews)
                );
            })
        ;
        let children = buildTree(null, viewsByParentKey.get(null));
        this.delegate.setVisibleViews(children);
    }
    _applyLayoutInfo(view, layoutInfo) {
        if (view.layoutInfo === layoutInfo) return false;
        view.layoutInfo = layoutInfo;
        return true;
    }
    _applyLayoutInfos() {
        let updated = false; // Apply layout infos to visible views
        for (let view of this._visibleViews.values()){
            let cur = view.layoutInfo;
            if (cur) {
                let layoutInfo = this.layout.getLayoutInfo(cur.key);
                if (this._applyLayoutInfo(view, layoutInfo)) updated = true;
            }
        } // Apply final layout infos for views that will be removed
        if (this._transaction) {
            for (let view1 of this._transaction.toRemove.values()){
                let cur = view1.layoutInfo;
                let layoutInfo = this.layout.getLayoutInfo(cur.key);
                if (this._applyLayoutInfo(view1, layoutInfo)) updated = true;
            }
            for (let view2 of this._transaction.removed.values()){
                let cur = view2.layoutInfo;
                let layoutInfo = this._transaction.finalLayoutInfo.get(cur.key) || cur;
                layoutInfo = this.layout.getFinalLayoutInfo(layoutInfo.copy());
                if (this._applyLayoutInfo(view2, layoutInfo)) updated = true;
            }
        }
        if (updated) this._flushVisibleViews();
    }
    _hasLayoutUpdates() {
        if (!this._transaction) return false;
        for (let view of this._visibleViews.values()){
            let cur = view.layoutInfo;
            if (!cur) return true;
            let layoutInfo = this.layout.getLayoutInfo(cur.key);
            if (!cur.rect.pointEquals(layoutInfo.rect) || cur.opacity !== layoutInfo.opacity || cur.transform !== layoutInfo.transform) return true;
        }
        return false;
    }
    reuseView(view) {
        view.prepareForReuse();
        this._reusableViews[view.viewType].push(view);
    }
    removeViews(toRemove) {
        for (let view of toRemove)this._children.delete(view);
    }
    updateItemSize(key, size) {
        // TODO: we should be able to invalidate a single index path
        // @ts-ignore
        if (!this.layout.updateItemSize) return;
         // If the scroll position is currently animating, add the update
        // to a queue to be processed after the animation is complete.
        if (this._scrollAnimation) {
            this._sizeUpdateQueue.set(key, size);
            return;
        } // @ts-ignore
        let changed = this.layout.updateItemSize(key, size);
        if (changed) this.relayout();
    }
    startScrolling() {
        this._isScrolling = true;
    }
    endScrolling() {
        this._isScrolling = false;
        this._correctItemOrder();
        this._flushVisibleViews();
    }
    _resetAnimatedContentOffset() {
        // Reset the animated content offset of subviews. See comment in relayoutNow for details.
        if (!this._animatedContentOffset.isOrigin()) {
            this._animatedContentOffset = new Point(0, 0);
            this._applyLayoutInfos();
        }
    }
    /**
   * Scrolls the item with the given key into view, optionally with an animation.
   * @param key The key of the item to scroll into view.
   * @param duration The duration of the scroll animation.
   */ scrollToItem(key, options) {
        if (!key) return;
        let layoutInfo = this.layout.getLayoutInfo(key);
        if (!layoutInfo) return;
        let { duration =300 , shouldScrollX =true , shouldScrollY =true , offsetX =0 , offsetY =0  } = options;
        let x2 = this.visibleRect.x;
        let y2 = this.visibleRect.y;
        let minX = layoutInfo.rect.x - offsetX;
        let minY = layoutInfo.rect.y - offsetY;
        let maxX = x2 + this.visibleRect.width;
        let maxY = y2 + this.visibleRect.height;
        if (shouldScrollX) {
            if (minX <= x2 || maxX === 0) x2 = minX;
            else if (layoutInfo.rect.maxX > maxX) x2 += layoutInfo.rect.maxX - maxX;
        }
        if (shouldScrollY) {
            if (minY <= y2 || maxY === 0) y2 = minY;
            else if (layoutInfo.rect.maxY > maxY) y2 += layoutInfo.rect.maxY - maxY;
        }
        return this.scrollTo(new Point(x2, y2), duration);
    }
    /**
   * Performs an animated scroll to the given offset.
   * @param offset - The offset to scroll to.
   * @param duration The duration of the animation.
   * @returns A promise that resolves when the animation is complete.
   */ scrollTo(offset, duration) {
        if (duration === void 0) duration = 300;
        // Cancel the current scroll animation
        if (this._scrollAnimation) {
            this._scrollAnimation.cancel();
            this._scrollAnimation = null;
        } // Set the content offset synchronously if the duration is zero
        if (duration <= 0 || this.visibleRect.pointEquals(offset)) {
            this._setContentOffset(offset);
            return Promise.resolve();
        }
        this.startScrolling();
        this._scrollAnimation = $c2209bcf49cd606639597eb5ee44c7c1$export$tween(this.visibleRect, offset, duration, $c2209bcf49cd606639597eb5ee44c7c1$export$easeOut, (offset)=>{
            this._setContentOffset(offset);
        });
        this._scrollAnimation.then(()=>{
            this._scrollAnimation = null; // Process view size updates that occurred during the animation.
            // Only views that are still visible will be actually updated.
            for (let [key3, size] of this._sizeUpdateQueue)this.updateItemSize(key3, size);
            this._sizeUpdateQueue.clear();
            this.relayout();
            this._processTransactionQueue();
            this.endScrolling();
        });
        return this._scrollAnimation;
    }
    _runTransaction(action, animated) {
        this._startTransaction();
        if (this._nextTransaction) this._nextTransaction.actions.push(action);
        this._endTransaction(animated);
    }
    _startTransaction() {
        if (!this._nextTransaction) this._nextTransaction = new $b8a692491eed0a311c18a0d64051b3$export$Transaction();
        this._nextTransaction.level++;
    }
    _endTransaction(animated) {
        if (!this._nextTransaction) return false;
         // Save whether the transaction should be animated.
        if (animated != null) this._nextTransaction.animated = animated;
         // If we haven't reached level 0, we are still in a
        // nested transaction. Wait for the parent to end.
        if ((--this._nextTransaction.level) > 0) return false;
         // Do nothing for empty transactions
        if (this._nextTransaction.actions.length === 0) {
            this._nextTransaction = null;
            return false;
        } // Default animations to true
        if (this._nextTransaction.animated == null) this._nextTransaction.animated = true;
         // Enqueue the transaction
        this._transactionQueue.push(this._nextTransaction);
        this._nextTransaction = null;
        this._processTransactionQueue();
        return true;
    }
    _processTransactionQueue() {
        // If the current transaction is animating, wait until the end
        // to process the next transaction.
        if (this._transaction || this._scrollAnimation) return;
        let next = this._transactionQueue.shift();
        if (next) this._performTransaction(next);
    }
    _getContentRect() {
        return new Rect(0, 0, this.contentSize.width, this.contentSize.height);
    }
    _performTransaction(transaction) {
        this._transaction = transaction;
        this.relayoutNow({
            transaction: transaction,
            animated: transaction.animated,
            beforeLayout: ()=>{
                // Get the initial layout infos for all views before the updates
                // so we can figure out which views to add and remove.
                if (transaction.animated) transaction.initialMap = this._getLayoutInfoMap(this._getContentRect(), true);
                 // Apply the actions that occurred during this transaction
                for (let action of transaction.actions)action();
            },
            afterLayout: ()=>{
                // Get the final layout infos after the updates
                if (transaction.animated) {
                    transaction.finalMap = this._getLayoutInfoMap(this._getContentRect());
                    this._setupTransactionAnimations(transaction);
                } else this._transaction = null;
            },
            afterAnimation: ()=>{
                // Remove and reuse views when animations are done
                if (transaction.toRemove.size > 0 || transaction.removed.size > 0) for (let view of $eb5c48b3196adea28b2a65513c55f96$export$concatIterators(transaction.toRemove.values(), transaction.removed.values())){
                    this._children.delete(view);
                    this.reuseView(view);
                }
                this._transaction = null; // Ensure DOM order is correct for accessibility after animations are complete
                this._correctItemOrder();
                this._flushVisibleViews();
                this._processTransactionQueue();
            }
        });
    }
    _setupTransactionAnimations(transaction) {
        let { initialMap , finalMap  } = transaction; // Store initial and final layout infos for animations
        for (let [key3, layoutInfo] of initialMap)if (finalMap.has(key3)) // Store the initial layout info for use during animations.
        transaction.initialLayoutInfo.set(key3, layoutInfo);
        else // This view was removed. Store the layout info for use
        // in Layout#getFinalLayoutInfo during animations.
        transaction.finalLayoutInfo.set(layoutInfo.key, layoutInfo);
         // Get initial layout infos for views that were added
        for (let [key4, layoutInfo1] of finalMap)if (!initialMap.has(key4)) {
            let initialLayoutInfo = this.layout.getInitialLayoutInfo(layoutInfo1.copy());
            transaction.initialLayoutInfo.set(key4, initialLayoutInfo);
        }
         // Figure out which views were removed.
        for (let [key5, view] of this._visibleViews)if (!finalMap.has(key5)) {
            transaction.removed.set(key5, view);
            this._visibleViews.delete(key5); // In case something weird happened, where we have a view but no
            // initial layout info, use the one attached to the view.
            if (view.layoutInfo) {
                if (!transaction.finalLayoutInfo.has(view.layoutInfo.key)) transaction.finalLayoutInfo.set(view.layoutInfo.key, view.layoutInfo);
            }
        }
    }
}
function useVirtualizerState(opts) {
    let [visibleViews, setVisibleViews] = useState([]);
    let [contentSize, setContentSize] = useState(new Size());
    let [isAnimating, setAnimating] = useState(false);
    let [isScrolling, setScrolling] = useState(false);
    let virtualizer1 = useMemo(()=>new $c28d52c9ae86344e9273f2344f3d5a45$export$Virtualizer()
    , []);
    virtualizer1.delegate = {
        setVisibleViews,
        setVisibleRect (rect) {
            virtualizer1.visibleRect = rect;
            opts.onVisibleRectChange(rect);
        },
        setContentSize,
        renderView: opts.renderView,
        renderWrapper: opts.renderWrapper,
        beginAnimations: ()=>setAnimating(true)
        ,
        endAnimations: ()=>setAnimating(false)
        ,
        getScrollAnchor: opts.getScrollAnchor
    };
    virtualizer1.layout = opts.layout;
    virtualizer1.collection = opts.collection;
    virtualizer1.transitionDuration = opts.transitionDuration;
    useLayoutEffect(()=>{
        virtualizer1.afterRender();
    }); // eslint-disable-next-line arrow-body-style
    useEffect(()=>{
        return ()=>virtualizer1.willUnmount()
        ;
    }, []);
    return {
        virtualizer: virtualizer1,
        visibleViews,
        setVisibleRect: useCallback((rect2)=>{
            virtualizer1.visibleRect = rect2;
        }, [
            virtualizer1
        ]),
        contentSize,
        isAnimating,
        isScrolling,
        startScrolling: useCallback(()=>{
            virtualizer1.startScrolling();
            setScrolling(true);
        }, [
            virtualizer1
        ]),
        endScrolling: useCallback(()=>{
            virtualizer1.endScrolling();
            setScrolling(false);
        }, [
            virtualizer1
        ])
    };
}
exports.useVirtualizerState = useVirtualizerState;

},{"@babel/runtime/helpers/extends":"5xz6u","@react-aria/utils":"d8qxy","react":"a6qBW"}],"2bCXx":[function(require,module,exports) {
var { useLocale  } = require("@react-aria/i18n");
var { flushSync  } = require("react-dom");
var _react2 = require("react");
var _react = $parcel$interopDefault(_react2);
var { useCallback , useEffect , useRef , useState  } = _react2;
var { useVirtualizerState , Rect , Size  } = require("@react-stately/virtualizer");
var { focusWithoutScrolling , mergeProps , useLayoutEffect , useResizeObserver  } = require("@react-aria/utils");
var _babelRuntimeHelpersObjectWithoutPropertiesLoose = $parcel$interopDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ let $d649e158743d5440c2ce6b2da8a4e6c$var$cachedRTLResult = null; // Original licensing for the following methods can be found in the
// NOTICE file in the root directory of this source tree.
// See https://github.com/bvaughn/react-window/blob/master/src/createGridComponent.js
// According to the spec, scrollLeft should be negative for RTL aligned elements.
// Chrome does not seem to adhere; its scrollLeft values are positive (measured relative to the left).
// Safari's elastic bounce makes detecting this even more complicated wrt potential false positives.
// The safest way to check this is to intentionally set a negative offset,
// and then verify that the subsequent "scroll" event matches the negative offset.
// If it does not match, then we can assume a non-standard RTL scroll implementation.
function getRTLOffsetType(recalculate) {
    if (recalculate === void 0) recalculate = false;
    if ($d649e158743d5440c2ce6b2da8a4e6c$var$cachedRTLResult === null || recalculate) {
        const outerDiv = document.createElement('div');
        const outerStyle = outerDiv.style;
        outerStyle.width = '50px';
        outerStyle.height = '50px';
        outerStyle.overflow = 'scroll';
        outerStyle.direction = 'rtl';
        const innerDiv = document.createElement('div');
        const innerStyle = innerDiv.style;
        innerStyle.width = '100px';
        innerStyle.height = '100px';
        outerDiv.appendChild(innerDiv);
        document.body.appendChild(outerDiv);
        if (outerDiv.scrollLeft > 0) $d649e158743d5440c2ce6b2da8a4e6c$var$cachedRTLResult = 'positive-descending';
        else {
            outerDiv.scrollLeft = 1;
            if (outerDiv.scrollLeft === 0) $d649e158743d5440c2ce6b2da8a4e6c$var$cachedRTLResult = 'negative';
            else $d649e158743d5440c2ce6b2da8a4e6c$var$cachedRTLResult = 'positive-ascending';
        }
        document.body.removeChild(outerDiv);
        return $d649e158743d5440c2ce6b2da8a4e6c$var$cachedRTLResult;
    }
    return $d649e158743d5440c2ce6b2da8a4e6c$var$cachedRTLResult;
}
exports.getRTLOffsetType = getRTLOffsetType;
function getScrollLeft(node, direction) {
    let { scrollLeft  } = node; // scrollLeft in rtl locales differs across browsers, so normalize.
    // See comment by getRTLOffsetType below for details.
    if (direction === 'rtl') {
        let { scrollWidth , clientWidth  } = node;
        switch(getRTLOffsetType()){
            case 'negative':
                scrollLeft = -scrollLeft;
                break;
            case 'positive-descending':
                scrollLeft = scrollWidth - clientWidth - scrollLeft;
                break;
        }
    }
    return scrollLeft;
}
exports.getScrollLeft = getScrollLeft;
function setScrollLeft(node, direction, scrollLeft) {
    if (direction === 'rtl') switch(getRTLOffsetType()){
        case 'negative':
            scrollLeft = -scrollLeft;
            break;
        case 'positive-ascending':
            break;
        default:
            {
                const { clientWidth , scrollWidth  } = node;
                scrollLeft = scrollWidth - clientWidth - scrollLeft;
                break;
            }
    }
    node.scrollLeft = scrollLeft;
}
exports.setScrollLeft = setScrollLeft;
function $a90951c3d36a11fc98c5f85adae5ad$var$ScrollView(props, ref) {
    let { contentSize , onVisibleRectChange , children , innerStyle , sizeToFit , onScrollStart , onScrollEnd , scrollDirection ='both'  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "contentSize",
        "onVisibleRectChange",
        "children",
        "innerStyle",
        "sizeToFit",
        "onScrollStart",
        "onScrollEnd",
        "scrollDirection"
    ]);
    let defaultRef = useRef();
    ref = ref || defaultRef;
    let state = useRef({
        scrollTop: 0,
        scrollLeft: 0,
        scrollEndTime: 0,
        scrollTimeout: null,
        width: 0,
        height: 0,
        isScrolling: false
    }).current;
    let { direction  } = useLocale();
    let [isScrolling, setScrolling] = useState(false);
    let onScroll = useCallback((e)=>{
        if (e.target !== e.currentTarget) return;
        if (props.onScroll) props.onScroll(e);
        flushSync(()=>{
            let scrollTop = e.currentTarget.scrollTop;
            let scrollLeft = getScrollLeft(e.currentTarget, direction); // Prevent rubber band scrolling from shaking when scrolling out of bounds
            state.scrollTop = Math.max(0, Math.min(scrollTop, contentSize.height - state.height));
            state.scrollLeft = Math.max(0, Math.min(scrollLeft, contentSize.width - state.width));
            onVisibleRectChange(new Rect(state.scrollLeft, state.scrollTop, state.width, state.height));
            if (!state.isScrolling) {
                state.isScrolling = true;
                setScrolling(true);
                if (onScrollStart) onScrollStart();
            } // So we don't constantly call clearTimeout and setTimeout,
            // keep track of the current timeout time and only reschedule
            // the timer when it is getting close.
            let now = Date.now();
            if (state.scrollEndTime <= now + 50) {
                state.scrollEndTime = now + 300;
                clearTimeout(state.scrollTimeout);
                state.scrollTimeout = setTimeout(()=>{
                    state.isScrolling = false;
                    setScrolling(false);
                    state.scrollTimeout = null;
                    if (onScrollEnd) onScrollEnd();
                }, 300);
            }
        });
    }, [
        props,
        direction,
        state,
        contentSize,
        onVisibleRectChange,
        onScrollStart,
        onScrollEnd
    ]); // eslint-disable-next-line arrow-body-style
    useEffect(()=>{
        return ()=>{
            clearTimeout(state.scrollTimeout);
        };
    }, []);
    let updateSize = useCallback(()=>{
        let dom = ref.current;
        if (!dom) return;
        let w = dom.clientWidth;
        let h = dom.clientHeight;
        if (sizeToFit && contentSize.width > 0 && contentSize.height > 0) {
            if (sizeToFit === 'width') w = Math.min(w, contentSize.width);
            else if (sizeToFit === 'height') h = Math.min(h, contentSize.height);
        }
        if (state.width !== w || state.height !== h) {
            state.width = w;
            state.height = h;
            onVisibleRectChange(new Rect(state.scrollLeft, state.scrollTop, w, h));
        }
    }, [
        onVisibleRectChange,
        ref,
        state,
        sizeToFit,
        contentSize
    ]);
    useLayoutEffect(()=>{
        updateSize();
    }, [
        updateSize
    ]);
    useResizeObserver({
        ref,
        onResize: updateSize
    });
    let style = _babelRuntimeHelpersExtends({
        // Reset padding so that relative positioning works correctly. Padding will be done in JS layout.
        padding: 0
    }, otherProps.style);
    if (scrollDirection === 'horizontal') {
        style.overflowX = 'auto';
        style.overflowY = 'hidden';
    } else if (scrollDirection === 'vertical') {
        style.overflowY = 'auto';
        style.overflowX = 'hidden';
    } else style.overflow = 'auto';
    return(/*#__PURE__*/ _react.createElement("div", _babelRuntimeHelpersExtends({
    }, otherProps, {
        style: style,
        ref: ref,
        onScroll: onScroll
    }), /*#__PURE__*/ _react.createElement("div", {
        role: "presentation",
        style: _babelRuntimeHelpersExtends({
            width: contentSize.width,
            height: contentSize.height,
            pointerEvents: isScrolling ? 'none' : 'auto',
            position: 'relative'
        }, innerStyle)
    }, children)));
}
const ScrollView = /*#__PURE__*/ _react.forwardRef($a90951c3d36a11fc98c5f85adae5ad$var$ScrollView);
exports.ScrollView = ScrollView;
function useVirtualizerItem(options) {
    let { reusableView: { layoutInfo , virtualizer  } , ref  } = options;
    let updateSize = useCallback(()=>{
        let size = $f82ecd66628117a18b18263690e81$var$getSize(ref.current);
        virtualizer.updateItemSize(layoutInfo.key, size);
    }, [
        virtualizer,
        layoutInfo.key,
        ref
    ]);
    useLayoutEffect(()=>{
        if (layoutInfo.estimatedSize) updateSize();
    });
    return {
        updateSize
    };
}
exports.useVirtualizerItem = useVirtualizerItem;
function $f82ecd66628117a18b18263690e81$var$getSize(node) {
    // Reset height before measuring so we get the intrinsic size
    let height = node.style.height;
    node.style.height = '';
    let size = new Size(node.scrollWidth, node.scrollHeight);
    node.style.height = height;
    return size;
}
function VirtualizerItem(props) {
    let { className , reusableView , parent  } = props;
    let { direction  } = useLocale();
    let ref = useRef();
    useVirtualizerItem({
        reusableView,
        ref
    });
    return(/*#__PURE__*/ _react.createElement("div", {
        role: "presentation",
        ref: ref,
        className: className,
        style: layoutInfoToStyle(reusableView.layoutInfo, direction, parent && parent.layoutInfo)
    }, reusableView.rendered));
}
exports.VirtualizerItem = VirtualizerItem;
let $bf262162425aa7028ff507f81a78147$var$cache = new WeakMap();
function layoutInfoToStyle(layoutInfo, dir, parent) {
    let xProperty = dir === 'rtl' ? 'right' : 'left';
    let cached = $bf262162425aa7028ff507f81a78147$var$cache.get(layoutInfo);
    if (cached && cached[xProperty] != null) {
        if (!parent) return cached;
         // Invalidate if the parent position changed.
        let top = layoutInfo.rect.y - parent.rect.y;
        let x = layoutInfo.rect.x - parent.rect.x;
        if (cached.top === top && cached[xProperty] === x) return cached;
    }
    let style = {
        position: layoutInfo.isSticky ? 'sticky' : 'absolute',
        overflow: 'hidden',
        top: layoutInfo.rect.y - (parent ? parent.rect.y : 0),
        [xProperty]: layoutInfo.rect.x - (parent ? parent.rect.x : 0),
        transition: 'all',
        WebkitTransition: 'all',
        WebkitTransitionDuration: 'inherit',
        transitionDuration: 'inherit',
        width: layoutInfo.rect.width,
        height: layoutInfo.rect.height,
        opacity: layoutInfo.opacity,
        zIndex: layoutInfo.zIndex,
        transform: layoutInfo.transform,
        contain: 'size layout style paint'
    };
    $bf262162425aa7028ff507f81a78147$var$cache.set(layoutInfo, style);
    return style;
}
exports.layoutInfoToStyle = layoutInfoToStyle;
function $c6087bb500e3bca67ce9dc45886$var$Virtualizer(props, ref) {
    let { children: renderView , renderWrapper , layout , collection , sizeToFit , scrollDirection , transitionDuration , isLoading , onLoadMore  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "children",
        "renderWrapper",
        "layout",
        "collection",
        "sizeToFit",
        "scrollDirection",
        "transitionDuration",
        "isLoading",
        "onLoadMore",
        "focusedKey",
        "shouldUseVirtualFocus"
    ]);
    let fallbackRef = useRef();
    ref = ref || fallbackRef;
    let state = useVirtualizerState({
        transitionDuration,
        layout,
        collection,
        renderView,
        renderWrapper: renderWrapper || $c6087bb500e3bca67ce9dc45886$var$defaultRenderWrapper,
        onVisibleRectChange (rect) {
            ref.current.scrollLeft = rect.x;
            ref.current.scrollTop = rect.y;
        }
    });
    let { virtualizerProps  } = useVirtualizer(props, state, ref); // Handle scrolling, and call onLoadMore when nearing the bottom.
    let onVisibleRectChange = useCallback((rect)=>{
        state.setVisibleRect(rect);
        if (!isLoading && onLoadMore) {
            let scrollOffset = state.virtualizer.contentSize.height - rect.height * 2;
            if (rect.y > scrollOffset) onLoadMore();
        }
    }, [
        isLoading,
        onLoadMore,
        state
    ]);
    useLayoutEffect(()=>{
        if (!isLoading && onLoadMore && !state.isAnimating) {
            if (state.contentSize.height <= state.virtualizer.visibleRect.height) onLoadMore();
        }
    }, [
        state.contentSize,
        state.isAnimating,
        state.virtualizer,
        onLoadMore,
        isLoading
    ]);
    return(/*#__PURE__*/ _react.createElement(ScrollView, _babelRuntimeHelpersExtends({
    }, mergeProps(otherProps, virtualizerProps), {
        ref: ref,
        innerStyle: state.isAnimating ? {
            transition: "none " + state.virtualizer.transitionDuration + "ms"
        } : undefined,
        contentSize: state.contentSize,
        onVisibleRectChange: onVisibleRectChange,
        onScrollStart: state.startScrolling,
        onScrollEnd: state.endScrolling,
        sizeToFit: sizeToFit,
        scrollDirection: scrollDirection
    }), state.visibleViews));
}
function useVirtualizer(props, state, ref) {
    let { focusedKey , scrollToItem , shouldUseVirtualFocus  } = props;
    let { virtualizer  } = state; // Scroll to the focusedKey when it changes. Actually focusing the focusedKey
    // is up to the implementation using Virtualizer since we don't have refs
    // to all of the item DOM nodes.
    let lastFocusedKey = useRef(null);
    useEffect(()=>{
        if (virtualizer.visibleRect.height === 0) return;
        if (focusedKey !== lastFocusedKey.current) {
            if (scrollToItem) scrollToItem(focusedKey);
            else virtualizer.scrollToItem(focusedKey, {
                duration: 0
            });
        }
        lastFocusedKey.current = focusedKey;
    }, [
        focusedKey,
        virtualizer.visibleRect.height,
        virtualizer,
        lastFocusedKey,
        scrollToItem
    ]);
    let isFocusWithin = useRef(false);
    let onFocus = useCallback((e)=>{
        // If the focused item is scrolled out of view and is not in the DOM, the collection
        // will have tabIndex={0}. When tabbing in from outside, scroll the focused item into view.
        // We only want to do this if the collection itself is receiving focus, not a child
        // element, and we aren't moving focus to the collection from within (see below).
        if (e.target === ref.current && !isFocusWithin.current) virtualizer.scrollToItem(focusedKey, {
            duration: 0
        });
        isFocusWithin.current = e.target !== ref.current;
    }, [
        ref,
        virtualizer,
        focusedKey
    ]);
    let onBlur = useCallback((e)=>{
        isFocusWithin.current = ref.current.contains(e.relatedTarget);
    }, [
        ref
    ]); // When the focused item is scrolled out of view and is removed from the DOM,
    // move focus to the collection view as a whole if focus was within before.
    let focusedView = virtualizer.getView(focusedKey);
    useEffect(()=>{
        if (focusedKey && !focusedView && isFocusWithin.current && document.activeElement !== ref.current) focusWithoutScrolling(ref.current);
    }); // Set tabIndex to -1 if the focused view is in the DOM, otherwise 0 so that the collection
    // itself is tabbable. When the collection receives focus, we scroll the focused item back into
    // view, which will allow it to be properly focused. If using virtual focus, don't set a
    // tabIndex at all so that VoiceOver on iOS 14 doesn't try to move real DOM focus to the element anyway.
    let tabIndex;
    if (!shouldUseVirtualFocus) tabIndex = focusedView ? -1 : 0;
    return {
        virtualizerProps: {
            tabIndex,
            onFocus,
            onBlur
        }
    };
} // forwardRef doesn't support generic parameters, so cast the result to the correct type
// https://stackoverflow.com/questions/58469229/react-with-typescript-generics-while-using-react-forwardref
exports.useVirtualizer = useVirtualizer;
const Virtualizer = /*#__PURE__*/ _react.forwardRef($c6087bb500e3bca67ce9dc45886$var$Virtualizer);
exports.Virtualizer = Virtualizer;
function $c6087bb500e3bca67ce9dc45886$var$defaultRenderWrapper(parent, reusableView) {
    return(/*#__PURE__*/ _react.createElement(VirtualizerItem, {
        key: reusableView.key,
        reusableView: reusableView,
        parent: parent
    }));
}

},{"@react-aria/i18n":"6xZcx","react-dom":"6V7Bv","react":"a6qBW","@react-stately/virtualizer":"4QY66","@react-aria/utils":"d8qxy","@babel/runtime/helpers/objectWithoutPropertiesLoose":"5byko","@babel/runtime/helpers/extends":"5xz6u"}],"2gyNR":[function(require,module,exports) {
var { isFocusVisible , useHover , usePress  } = require("@react-aria/interactions");
var { getItemCount  } = require("@react-stately/collections");
var { useSelectableList , useSelectableItem  } = require("@react-aria/selection");
var { useLabel  } = require("@react-aria/label");
var { filterDOMProps , mergeProps , useId , isMac , isWebKit , useSlotId  } = require("@react-aria/utils");
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ const listIds = new WeakMap();
exports.listIds = listIds;
function $e25442753cf4918277b5a7f1d4$var$normalizeKey(key) {
    if (typeof key === 'string') return key.replace(/\s*/g, '');
    return '' + key;
}
function getItemId(state, itemKey) {
    let listId = listIds.get(state);
    if (!listId) throw new Error('Unknown list');
    return listId + "-option-" + $e25442753cf4918277b5a7f1d4$var$normalizeKey(itemKey);
}
exports.getItemId = getItemId;
/**
 * Provides the behavior and accessibility implementation for a listbox component.
 * A listbox displays a list of options and allows a user to select one or more of them.
 * @param props - Props for the listbox.
 * @param state - State for the listbox, as returned by `useListState`.
 */ function useListBox(props, state, ref) {
    let domProps = filterDOMProps(props, {
        labelable: true
    });
    let { listProps  } = useSelectableList(_babelRuntimeHelpersExtends({
    }, props, {
        ref,
        selectionManager: state.selectionManager,
        collection: state.collection,
        disabledKeys: state.disabledKeys
    }));
    let id = useId(props.id);
    listIds.set(state, id);
    let { labelProps , fieldProps  } = useLabel(_babelRuntimeHelpersExtends({
    }, props, {
        id,
        // listbox is not an HTML input element so it
        // shouldn't be labeled by a <label> element.
        labelElementType: 'span'
    }));
    return {
        labelProps,
        listBoxProps: mergeProps(domProps, state.selectionManager.selectionMode === 'multiple' ? {
            'aria-multiselectable': 'true'
        } : {
        }, _babelRuntimeHelpersExtends({
            role: 'listbox'
        }, mergeProps(fieldProps, listProps)))
    };
}
exports.useListBox = useListBox;
/**
 * Provides the behavior and accessibility implementation for an option in a listbox.
 * See `useListBox` for more details about listboxes.
 * @param props - Props for the option.
 * @param state - State for the listbox, as returned by `useListState`.
 */ function useOption(props, state, ref) {
    let { isSelected , isDisabled , key , shouldSelectOnPressUp , shouldFocusOnHover , isVirtualized , shouldUseVirtualFocus  } = props;
    let labelId = useSlotId();
    let descriptionId = useSlotId();
    let optionProps = {
        role: 'option',
        'aria-disabled': isDisabled,
        'aria-selected': isSelected
    }; // Safari with VoiceOver on macOS misreads options with aria-labelledby or aria-label as simply "text".
    // We should not map slots to the label and description on Safari and instead just have VoiceOver read the textContent.
    // https://bugs.webkit.org/show_bug.cgi?id=209279
    if (!(isMac() && isWebKit())) {
        optionProps['aria-label'] = props['aria-label'];
        optionProps['aria-labelledby'] = labelId;
        optionProps['aria-describedby'] = descriptionId;
    }
    if (isVirtualized) {
        optionProps['aria-posinset'] = state.collection.getItem(key).index + 1;
        optionProps['aria-setsize'] = getItemCount(state.collection);
    }
    let { itemProps  } = useSelectableItem({
        selectionManager: state.selectionManager,
        key,
        ref,
        shouldSelectOnPressUp,
        isVirtualized,
        shouldUseVirtualFocus
    });
    let { pressProps  } = usePress(_babelRuntimeHelpersExtends({
    }, itemProps, {
        isDisabled,
        preventFocusOnPress: shouldUseVirtualFocus
    }));
    let { hoverProps  } = useHover({
        isDisabled: isDisabled || !shouldFocusOnHover,
        onHoverStart () {
            if (!isFocusVisible()) {
                state.selectionManager.setFocused(true);
                state.selectionManager.setFocusedKey(key);
            }
        }
    });
    return {
        optionProps: _babelRuntimeHelpersExtends({
        }, optionProps, mergeProps(pressProps, hoverProps), {
            id: getItemId(state, key)
        }),
        labelProps: {
            id: labelId
        },
        descriptionProps: {
            id: descriptionId
        }
    };
}
exports.useOption = useOption;
/**
 * Provides the behavior and accessibility implementation for a section in a listbox.
 * See `useListBox` for more details about listboxes.
 * @param props - Props for the section.
 */ function useListBoxSection(props) {
    let { heading , 'aria-label': ariaLabel  } = props;
    let headingId = useId();
    return {
        itemProps: {
            role: 'presentation'
        },
        headingProps: heading ? {
            // Techincally, listbox cannot contain headings according to ARIA.
            // We hide the heading from assistive technology, and only use it
            // as a label for the nested group.
            id: headingId,
            'aria-hidden': true
        } : {
        },
        groupProps: {
            role: 'group',
            'aria-label': ariaLabel,
            'aria-labelledby': heading ? headingId : undefined
        }
    };
}
exports.useListBoxSection = useListBoxSection;

},{"@react-aria/interactions":"3irYN","@react-stately/collections":"4IPbJ","@react-aria/selection":"3khS7","@react-aria/label":"2pFvL","@react-aria/utils":"d8qxy","@babel/runtime/helpers/extends":"5xz6u"}],"2jJRV":[function() {},{}],"4Hal1":[function(require,module,exports) {
var { useMeter  } = require("@react-aria/meter");
var _react = $parcel$interopDefault(require("react"));
var { ProgressBarBase  } = require("@react-spectrum/progress");
var { classNames  } = require("@react-spectrum/utils");
var _babelRuntimeHelpersObjectWithoutPropertiesLoose = $parcel$interopDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
require("./main.css");
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/barloader/vars.css
var $b76be3b356c6ec92c2715ea3e4dc0e69$exports = {
};
$b76be3b356c6ec92c2715ea3e4dc0e69$exports = {
    "spectrum-BarLoader": "_spectrum-BarLoader_c74d2",
    "spectrum-BarLoader--indeterminate": "_spectrum-BarLoader--indeterminate_c74d2",
    "spectrum-BarLoader--sideLabel": "_spectrum-BarLoader--sideLabel_c74d2",
    "spectrum-BarLoader-track": "_spectrum-BarLoader-track_c74d2",
    "spectrum-BarLoader-fill": "_spectrum-BarLoader-fill_c74d2",
    "spectrum-BarLoader-label": "_spectrum-BarLoader-label_c74d2",
    "spectrum-BarLoader-percentage": "_spectrum-BarLoader-percentage_c74d2",
    "spectrum-BarLoader--small": "_spectrum-BarLoader--small_c74d2",
    "indeterminate-loop-ltr": "_indeterminate-loop-ltr_c74d2",
    "indeterminate-loop-rtl": "_indeterminate-loop-rtl_c74d2",
    "spectrum-BarLoader--overBackground": "_spectrum-BarLoader--overBackground_c74d2",
    "is-positive": "_is-positive_c74d2",
    "is-warning": "_is-warning_c74d2",
    "is-critical": "_is-critical_c74d2"
};
var $b76be3b356c6ec92c2715ea3e4dc0e69$$interop$default = $parcel$interopDefault($b76be3b356c6ec92c2715ea3e4dc0e69$exports);
function $eeef15d2d894316d5d31205c88ac$var$Meter(props, ref) {
    let { variant  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "variant"
    ]);
    const { meterProps , labelProps  } = useMeter(props);
    return(/*#__PURE__*/ _react.createElement(ProgressBarBase, _babelRuntimeHelpersExtends({
    }, otherProps, {
        ref: ref,
        barProps: meterProps,
        labelProps: labelProps,
        barClassName: classNames($b76be3b356c6ec92c2715ea3e4dc0e69$$interop$default, {
            'is-positive': variant === 'positive',
            'is-warning': variant === 'warning',
            'is-critical': variant === 'critical'
        })
    })));
}
/**
 * Meters are visual representations of a quantity or an achievement.
 * Their progress is determined by user actions, rather than system actions.
 */ let Meter = /*#__PURE__*/ _react.forwardRef($eeef15d2d894316d5d31205c88ac$var$Meter);
exports.Meter = Meter;

},{"@react-aria/meter":"1mUwd","react":"a6qBW","@react-spectrum/progress":"4593I","@react-spectrum/utils":"7ch5A","@babel/runtime/helpers/objectWithoutPropertiesLoose":"5byko","@babel/runtime/helpers/extends":"5xz6u","./main.css":"4esC7"}],"1mUwd":[function(require,module,exports) {
var { useProgressBar  } = require("@react-aria/progress");
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
/**
 * Provides the accessibility implementation for a meter component.
 * Meters represent a quantity within a known range, or a fractional value.
 */ function useMeter(props) {
    let { progressBarProps , labelProps  } = useProgressBar(props);
    return {
        meterProps: _babelRuntimeHelpersExtends({
        }, progressBarProps, {
            // Use the meter role if available, but fall back to progressbar if not
            // Chrome currently falls back from meter automatically, and Firefox
            // does not support meter at all. Safari 13+ seems to support meter properly.
            // https://bugs.chromium.org/p/chromium/issues/detail?id=944542
            // https://bugzilla.mozilla.org/show_bug.cgi?id=1460378
            role: 'meter progressbar'
        }),
        labelProps
    };
}
exports.useMeter = useMeter;

},{"@react-aria/progress":"3H4Bc","@babel/runtime/helpers/extends":"5xz6u"}],"4esC7":[function() {},{}],"4ZEYf":[function(require,module,exports) {
var { useNumberFieldState  } = require("@react-stately/numberfield");
var { useNumberField  } = require("@react-aria/numberfield");
var { useLocale  } = require("@react-aria/i18n");
var { useFormProps  } = require("@react-spectrum/form");
var { TextFieldBase  } = require("@react-spectrum/textfield");
var { useProvider , useProviderProps  } = require("@react-spectrum/provider");
var { useHover  } = require("@react-aria/interactions");
var { useButton  } = require("@react-aria/button");
var _spectrumIconsWorkflowRemove = $parcel$interopDefault(require("@spectrum-icons/workflow/Remove"));
var _spectrumIconsUiChevronUpSmall = $parcel$interopDefault(require("@spectrum-icons/ui/ChevronUpSmall"));
var _spectrumIconsUiChevronDownSmall = $parcel$interopDefault(require("@spectrum-icons/ui/ChevronDownSmall"));
var _spectrumIconsWorkflowAdd = $parcel$interopDefault(require("@spectrum-icons/workflow/Add"));
var _react2 = require("react");
var _react = $parcel$interopDefault(_react2);
var { useRef  } = _react2;
var { mergeProps  } = require("@react-aria/utils");
var { FocusRing  } = require("@react-aria/focus");
var { Field  } = require("@react-spectrum/label");
var { classNames , useFocusableRef , useStyleProps  } = require("@react-spectrum/utils");
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
require("./main.css");
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/stepper/vars.css
var $d4a007006219f2f0747e8180$exports = {
};
$d4a007006219f2f0747e8180$exports = {
    "spectrum-Button": "_spectrum-Button_82b07",
    "spectrum-ActionButton": "_spectrum-ActionButton_82b07",
    "spectrum-LogicButton": "_spectrum-LogicButton_82b07",
    "spectrum-FieldButton": "_spectrum-FieldButton_82b07",
    "spectrum-ClearButton": "_spectrum-ClearButton_82b07",
    "spectrum-Stepper-button": "_spectrum-Stepper-button_82b07",
    "focus-ring": "_focus-ring_82b07",
    "spectrum-Icon": "_spectrum-Icon_82b07",
    "is-hovered": "_is-hovered_82b07",
    "spectrum-Button-label": "_spectrum-Button-label_82b07",
    "spectrum-ActionButton-label": "_spectrum-ActionButton-label_82b07",
    "spectrum-ActionButton-hold": "_spectrum-ActionButton-hold_82b07",
    "spectrum-ActionButton--quiet": "_spectrum-ActionButton--quiet_82b07",
    "is-disabled": "_is-disabled_82b07",
    "is-open": "_is-open_82b07",
    "spectrum-FieldButton--quiet": "_spectrum-FieldButton--quiet_82b07",
    "spectrum-ClearButton--overBackground": "_spectrum-ClearButton--overBackground_82b07",
    "spectrum-ClearButton--small": "_spectrum-ClearButton--small_82b07",
    "spectrum-Stepper": "_spectrum-Stepper_82b07",
    "spectrum-Stepper--isMobile": "_spectrum-Stepper--isMobile_82b07",
    "spectrum-Stepper-button--stepUp": "_spectrum-Stepper-button--stepUp_82b07",
    "spectrum-Stepper-button--stepDown": "_spectrum-Stepper-button--stepDown_82b07",
    "spectrum-Stepper-field": "_spectrum-Stepper-field_82b07",
    "spectrum-Stepper-icon": "_spectrum-Stepper-icon_82b07",
    "spectrum-Stepper--isQuiet": "_spectrum-Stepper--isQuiet_82b07",
    "spectrum-Stepper--showStepper": "_spectrum-Stepper--showStepper_82b07",
    "spectrum-Stepper-input": "_spectrum-Stepper-input_82b07",
    "spectrum-Stepper-container": "_spectrum-Stepper-container_82b07",
    "spectrum-Stepper-container--isMobile": "_spectrum-Stepper-container--isMobile_82b07",
    "spectrum-Stepper-button-icon": "_spectrum-Stepper-button-icon_82b07",
    "is-active": "_is-active_82b07",
    "is-focused": "_is-focused_82b07",
    "is-invalid": "_is-invalid_82b07"
};
var $d4a007006219f2f0747e8180$$interop$default = $parcel$interopDefault($d4a007006219f2f0747e8180$exports);
function $a76af8b854aff60e70a87f94896d9fa1$var$StepButton(props, ref) {
    props = useProviderProps(props);
    let { scale  } = useProvider();
    let { direction , isDisabled , isQuiet  } = props;
    /**
   * Must use div for now because Safari pointer event bugs on disabled form elements.
   * Link https://bugs.webkit.org/show_bug.cgi?id=219188.
   */ let { buttonProps , isPressed  } = useButton(_babelRuntimeHelpersExtends({
    }, props, {
        elementType: 'div'
    }), ref);
    let { hoverProps , isHovered  } = useHover(props);
    return(/*#__PURE__*/ _react.createElement(FocusRing, {
        focusRingClass: classNames($d4a007006219f2f0747e8180$$interop$default, 'focus-ring')
    }, /*#__PURE__*/ _react.createElement("div", _babelRuntimeHelpersExtends({
        className: classNames($d4a007006219f2f0747e8180$$interop$default, 'spectrum-Stepper-button', {
            'spectrum-Stepper-button--stepUp': direction === 'up',
            'spectrum-Stepper-button--stepDown': direction === 'down',
            'spectrum-Stepper-button--isQuiet': isQuiet,
            'is-hovered': isHovered,
            'is-active': isPressed,
            'is-disabled': isDisabled
        })
    }, mergeProps(hoverProps, buttonProps), {
        ref: ref
    }), direction === 'up' && scale === 'large' && /*#__PURE__*/ _react.createElement(_spectrumIconsWorkflowAdd, {
        UNSAFE_className: classNames($d4a007006219f2f0747e8180$$interop$default, 'spectrum-Stepper-button-icon', 'spectrum-Stepper-stepUpIcon'),
        size: "S"
    }), direction === 'up' && scale === 'medium' && /*#__PURE__*/ _react.createElement(_spectrumIconsUiChevronUpSmall, {
        UNSAFE_className: classNames($d4a007006219f2f0747e8180$$interop$default, 'spectrum-Stepper-button-icon', 'spectrum-Stepper-stepUpIcon')
    }), direction === 'down' && scale === 'large' && /*#__PURE__*/ _react.createElement(_spectrumIconsWorkflowRemove, {
        UNSAFE_className: classNames($d4a007006219f2f0747e8180$$interop$default, 'spectrum-Stepper-button-icon', 'spectrum-Stepper-stepDownIcon'),
        size: "S"
    }), direction === 'down' && scale === 'medium' && /*#__PURE__*/ _react.createElement(_spectrumIconsUiChevronDownSmall, {
        UNSAFE_className: classNames($d4a007006219f2f0747e8180$$interop$default, 'spectrum-Stepper-button-icon', 'spectrum-Stepper-stepDownIcon')
    }))));
}
/**
 * Buttons for NumberField.
 */ let $a76af8b854aff60e70a87f94896d9fa1$export$StepButton = /*#__PURE__*/ _react.forwardRef($a76af8b854aff60e70a87f94896d9fa1$var$StepButton);
function $ce21b38982d1913bcad5f7c7ce6464f8$var$NumberField(props, ref) {
    props = useProviderProps(props);
    props = useFormProps(props);
    let provider = useProvider();
    let { isQuiet , isReadOnly , isDisabled , hideStepper  } = props;
    let { styleProps: style  } = useStyleProps(props);
    let { locale  } = useLocale();
    let state = useNumberFieldState(_babelRuntimeHelpersExtends({
    }, props, {
        locale
    }));
    let inputRef = useRef();
    let domRef = useFocusableRef(ref, inputRef);
    let { groupProps , labelProps , inputProps , incrementButtonProps , decrementButtonProps  } = useNumberField(props, state, inputRef);
    let isMobile = provider.scale === 'large';
    let showStepper = !hideStepper;
    let { isHovered , hoverProps  } = useHover({
        isDisabled
    });
    let className = classNames($d4a007006219f2f0747e8180$$interop$default, 'spectrum-Stepper', {
        'spectrum-Stepper--isQuiet': isQuiet,
        'is-disabled': isDisabled,
        'spectrum-Stepper--readonly': isReadOnly,
        'is-invalid': props.validationState === 'invalid',
        'spectrum-Stepper--showStepper': showStepper,
        'spectrum-Stepper--isMobile': isMobile,
        'is-hovered': isHovered,
        // because FocusRing won't pass along the className from Field, we have to handle that ourselves
        [style.className]: !props.label && style.className
    });
    return(/*#__PURE__*/ _react.createElement(Field, _babelRuntimeHelpersExtends({
    }, props, {
        labelProps: labelProps,
        ref: domRef,
        wrapperClassName: classNames($d4a007006219f2f0747e8180$$interop$default, 'spectrum-Stepper-container', {
            'spectrum-Stepper-container--isMobile': isMobile
        })
    }), /*#__PURE__*/ _react.createElement($ce21b38982d1913bcad5f7c7ce6464f8$var$NumberFieldInput, _babelRuntimeHelpersExtends({
    }, props, {
        groupProps: mergeProps(groupProps, hoverProps),
        inputProps: inputProps,
        inputRef: inputRef,
        incrementProps: incrementButtonProps,
        decrementProps: decrementButtonProps,
        className: className,
        style: style
    }))));
}
const $ce21b38982d1913bcad5f7c7ce6464f8$var$NumberFieldInput = /*#__PURE__*/ _react.forwardRef(function NumberFieldInput(props, ref) {
    let { groupProps , inputProps , inputRef , incrementProps , decrementProps , className , style , autoFocus , isQuiet , hideStepper , validationState  } = props;
    let showStepper = !hideStepper;
    return(/*#__PURE__*/ _react.createElement(FocusRing, {
        within: true,
        isTextInput: true,
        focusClass: classNames($d4a007006219f2f0747e8180$$interop$default, 'is-focused'),
        focusRingClass: classNames($d4a007006219f2f0747e8180$$interop$default, 'focus-ring'),
        autoFocus: autoFocus
    }, /*#__PURE__*/ _react.createElement("div", _babelRuntimeHelpersExtends({
    }, groupProps, {
        ref: ref,
        style: style,
        className: className
    }), /*#__PURE__*/ _react.createElement(TextFieldBase, {
        UNSAFE_className: classNames($d4a007006219f2f0747e8180$$interop$default, 'spectrum-Stepper-field'),
        inputClassName: classNames($d4a007006219f2f0747e8180$$interop$default, 'spectrum-Stepper-input'),
        validationIconClassName: classNames($d4a007006219f2f0747e8180$$interop$default, 'spectrum-Stepper-icon'),
        isQuiet: isQuiet,
        inputRef: inputRef,
        validationState: validationState,
        inputProps: inputProps
    }), showStepper && /*#__PURE__*/ _react.createElement(_react.Fragment, null, /*#__PURE__*/ _react.createElement($a76af8b854aff60e70a87f94896d9fa1$export$StepButton, _babelRuntimeHelpersExtends({
        direction: "up",
        isQuiet: isQuiet
    }, incrementProps)), /*#__PURE__*/ _react.createElement($a76af8b854aff60e70a87f94896d9fa1$export$StepButton, _babelRuntimeHelpersExtends({
        direction: "down",
        isQuiet: isQuiet
    }, decrementProps))))));
});
/**
 * NumberFields allow users to enter a number, and increment or decrement the value using stepper buttons.
 */ let NumberField = /*#__PURE__*/ _react.forwardRef($ce21b38982d1913bcad5f7c7ce6464f8$var$NumberField);
exports.NumberField = NumberField;

},{"@react-stately/numberfield":"3BPai","@react-aria/numberfield":"4pvLL","@react-aria/i18n":"6xZcx","@react-spectrum/form":"6qmvm","@react-spectrum/textfield":"39Gqw","@react-spectrum/provider":"3Y6zE","@react-aria/interactions":"3irYN","@react-aria/button":"6RKhD","@spectrum-icons/workflow/Remove":"6kPp1","@spectrum-icons/ui/ChevronUpSmall":"2bjrE","@spectrum-icons/ui/ChevronDownSmall":"5oTGx","@spectrum-icons/workflow/Add":"6mgrK","react":"a6qBW","@react-aria/utils":"d8qxy","@react-aria/focus":"76fMY","@react-spectrum/label":"4HKfm","@react-spectrum/utils":"7ch5A","@babel/runtime/helpers/extends":"5xz6u","./main.css":"4oNvI"}],"3BPai":[function(require,module,exports) {
var { useCallback , useEffect , useMemo , useRef , useState  } = require("react");
var { NumberFormatter , NumberParser  } = require("@internationalized/number");
var { clamp , snapValueToStep , useControlledState  } = require("@react-stately/utils");
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
/**
 * Provides state management for a number field component. Number fields allow users to enter a number,
 * and increment or decrement the value using stepper buttons.
 */ function useNumberFieldState(props) {
    let { minValue , maxValue , step , formatOptions , value , defaultValue , onChange , locale , isDisabled , isReadOnly  } = props;
    let [numberValue, setNumberValue] = useControlledState(value, isNaN(defaultValue) ? NaN : defaultValue, onChange);
    let [inputValue, setInputValue] = useState(()=>isNaN(numberValue) ? '' : new NumberFormatter(locale, formatOptions).format(numberValue)
    );
    let numberParser = useMemo(()=>new NumberParser(locale, formatOptions)
    , [
        locale,
        formatOptions
    ]);
    let numberingSystem = useMemo(()=>numberParser.getNumberingSystem(inputValue)
    , [
        numberParser,
        inputValue
    ]);
    let formatter = useMemo(()=>new NumberFormatter(locale, _babelRuntimeHelpersExtends({
        }, formatOptions, {
            numberingSystem
        }))
    , [
        locale,
        formatOptions,
        numberingSystem
    ]);
    let intlOptions = useMemo(()=>formatter.resolvedOptions()
    , [
        formatter
    ]);
    let format = useCallback((value1)=>isNaN(value1) ? '' : formatter.format(value1)
    , [
        formatter
    ]);
    let clampStep = !isNaN(step) ? step : 1;
    if (intlOptions.style === 'percent' && isNaN(step)) clampStep = 0.01;
     // Update the input value when the number value or format options change. This is done
    // in a useEffect so that the controlled behavior is correct and we only update the
    // textfield after prop changes.
    useEffect(()=>{
        setInputValue(format(numberValue));
    }, [
        numberValue,
        locale,
        formatOptions
    ]); // Store last parsed value in a ref so it can be used by increment/decrement below
    let parsedValue = useMemo(()=>numberParser.parse(inputValue)
    , [
        numberParser,
        inputValue
    ]);
    let parsed = useRef(0);
    parsed.current = parsedValue;
    let commit = ()=>{
        // Set to empty state if input value is empty
        if (!inputValue.length) {
            setNumberValue(NaN);
            setInputValue(value === undefined ? '' : format(numberValue));
            return;
        } // if it failed to parse, then reset input to formatted version of current number
        if (isNaN(parsed.current)) {
            setInputValue(format(numberValue));
            return;
        } // Clamp to min and max, round to the nearest step, and round to specified number of digits
        let clampedValue;
        if (isNaN(step)) clampedValue = clamp(parsed.current, minValue, maxValue);
        else clampedValue = snapValueToStep(parsed.current, minValue, maxValue, step);
        clampedValue = numberParser.parse(format(clampedValue));
        setNumberValue(clampedValue); // in a controlled state, the numberValue won't change, so we won't go back to our old input without help
        setInputValue(format(value === undefined ? clampedValue : numberValue));
    };
    let safeNextStep = (operation, minMax)=>{
        let prev = parsed.current;
        if (isNaN(prev)) {
            // if the input is empty, start from the min/max value when incrementing/decrementing,
            // or zero if there is no min/max value defined.
            let newValue = isNaN(minMax) ? 0 : minMax;
            return snapValueToStep(newValue, minValue, maxValue, clampStep);
        } else {
            // otherwise, first snap the current value to the nearest step. if it moves in the direction
            // we're going, use that value, otherwise add the step and snap that value.
            let newValue = snapValueToStep(prev, minValue, maxValue, clampStep);
            if (operation === '+' && newValue > prev || operation === '-' && newValue < prev) return newValue;
            return snapValueToStep($bb3f0c77930f1734ecd987a3e5d3aa28$var$handleDecimalOperation(operation, prev, clampStep), minValue, maxValue, clampStep);
        }
    };
    let increment = ()=>{
        setNumberValue((previousValue)=>{
            let newValue = safeNextStep('+', minValue); // if we've arrived at the same value that was previously in the state, the
            // input value should be updated to match
            // ex type 4, press increment, highlight the number in the input, type 4 again, press increment
            // you'd be at 5, then incrementing to 5 again, so no re-render would happen and 4 would be left in the input
            if (newValue === previousValue) setInputValue(format(newValue));
            return newValue;
        });
    };
    let decrement = ()=>{
        setNumberValue((previousValue)=>{
            let newValue = safeNextStep('-', maxValue);
            if (newValue === previousValue) setInputValue(format(newValue));
            return newValue;
        });
    };
    let incrementToMax = ()=>{
        if (maxValue != null) setNumberValue(snapValueToStep(maxValue, minValue, maxValue, clampStep));
    };
    let decrementToMin = ()=>{
        if (minValue != null) setNumberValue(minValue);
    };
    let canIncrement = useMemo(()=>!isDisabled && !isReadOnly && (isNaN(parsedValue) || isNaN(maxValue) || snapValueToStep(parsedValue, minValue, maxValue, clampStep) > parsedValue || $bb3f0c77930f1734ecd987a3e5d3aa28$var$handleDecimalOperation('+', parsedValue, clampStep) <= maxValue)
    , [
        isDisabled,
        isReadOnly,
        minValue,
        maxValue,
        clampStep,
        parsedValue
    ]);
    let canDecrement = useMemo(()=>!isDisabled && !isReadOnly && (isNaN(parsedValue) || isNaN(minValue) || snapValueToStep(parsedValue, minValue, maxValue, clampStep) < parsedValue || $bb3f0c77930f1734ecd987a3e5d3aa28$var$handleDecimalOperation('-', parsedValue, clampStep) >= minValue)
    , [
        isDisabled,
        isReadOnly,
        minValue,
        maxValue,
        clampStep,
        parsedValue
    ]);
    let validate = (value1)=>numberParser.isValidPartialNumber(value1, minValue, maxValue)
    ;
    return {
        validate,
        increment,
        incrementToMax,
        decrement,
        decrementToMin,
        canIncrement,
        canDecrement,
        minValue,
        maxValue,
        numberValue: parsedValue,
        setInputValue,
        inputValue,
        commit
    };
}
exports.useNumberFieldState = useNumberFieldState;
function $bb3f0c77930f1734ecd987a3e5d3aa28$var$handleDecimalOperation(operator, value1, value2) {
    let result = operator === '+' ? value1 + value2 : value1 - value2; // Check if we have decimals
    if (value1 % 1 !== 0 || value2 % 1 !== 0) {
        const value1Decimal = value1.toString().split('.');
        const value2Decimal = value2.toString().split('.');
        const value1DecimalLength = value1Decimal[1] && value1Decimal[1].length || 0;
        const value2DecimalLength = value2Decimal[1] && value2Decimal[1].length || 0;
        const multiplier = Math.pow(10, Math.max(value1DecimalLength, value2DecimalLength)); // Transform the decimals to integers based on the precision
        value1 = Math.round(value1 * multiplier);
        value2 = Math.round(value2 * multiplier); // Perform the operation on integers values to make sure we don't get a fancy decimal value
        result = operator === '+' ? value1 + value2 : value1 - value2; // Transform the integer result back to decimal
        result /= multiplier;
    }
    return result;
}

},{"react":"a6qBW","@internationalized/number":"3t69S","@react-stately/utils":"7ILZk","@babel/runtime/helpers/extends":"5xz6u"}],"4pvLL":[function(require,module,exports) {
var { useSpinButton  } = require("@react-aria/spinbutton");
var { useMessageFormatter , useNumberFormatter  } = require("@react-aria/i18n");
var { useFormattedTextField  } = require("@react-aria/textfield");
var { useFocus , useFocusWithin , useScrollWheel  } = require("@react-aria/interactions");
var { isAndroid , isIOS , isIPhone , mergeProps , useId  } = require("@react-aria/utils");
var { useCallback , useMemo , useState  } = require("react");
var _babelRuntimeHelpersInteropRequireDefault = $parcel$interopDefault(require("@babel/runtime/helpers/interopRequireDefault"));
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/numberfield/intl/ar-AE.json
var $bb445d18f084f340ccf67353487c16$exports = {
};
$bb445d18f084f340ccf67353487c16$exports = JSON.parse("{\"decrease\":\"خفض {fieldLabel}\",\"increase\":\"زيادة {fieldLabel}\",\"numberField\":\"حقل رقمي\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/numberfield/intl/bg-BG.json
var $ed6d795c880a0ab9c214b9003f1a43$exports = {
};
$ed6d795c880a0ab9c214b9003f1a43$exports = JSON.parse("{\"decrease\":\"Намаляване {fieldLabel}\",\"increase\":\"Усилване {fieldLabel}\",\"numberField\":\"Номер на полето\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/numberfield/intl/cs-CZ.json
var $a4fa5907cb6ec4ef05d8194cd9b3c6b9$exports = {
};
$a4fa5907cb6ec4ef05d8194cd9b3c6b9$exports = JSON.parse("{\"decrease\":\"Snížit {fieldLabel}\",\"increase\":\"Zvýšit {fieldLabel}\",\"numberField\":\"Číselné pole\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/numberfield/intl/da-DK.json
var $af89a3f199f96b4b2f53fc09970add7a$exports = {
};
$af89a3f199f96b4b2f53fc09970add7a$exports = JSON.parse("{\"decrease\":\"Reducer {fieldLabel}\",\"increase\":\"Øg {fieldLabel}\",\"numberField\":\"Talfelt\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/numberfield/intl/de-DE.json
var $b0341cdc3c5ab5e88b4f2cbd32e56479$exports = {
};
$b0341cdc3c5ab5e88b4f2cbd32e56479$exports = JSON.parse("{\"decrease\":\"{fieldLabel} verringern\",\"increase\":\"{fieldLabel} erhöhen\",\"numberField\":\"Nummernfeld\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/numberfield/intl/el-GR.json
var $d0de24a5d89f4698e53e6427ab9502$exports = {
};
$d0de24a5d89f4698e53e6427ab9502$exports = JSON.parse("{\"decrease\":\"Μείωση {fieldLabel}\",\"increase\":\"Αύξηση {fieldLabel}\",\"numberField\":\"Πεδίο αριθμού\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/numberfield/intl/en-US.json
var $ca2b757c6100accb55e4393f5$exports = {
};
$ca2b757c6100accb55e4393f5$exports = JSON.parse("{\"decrease\":\"Decrease {fieldLabel}\",\"increase\":\"Increase {fieldLabel}\",\"numberField\":\"Number field\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/numberfield/intl/es-ES.json
var $f31ea545ffa161b5fb56650a118d07f$exports = {
};
$f31ea545ffa161b5fb56650a118d07f$exports = JSON.parse("{\"decrease\":\"Reducir {fieldLabel}\",\"increase\":\"Aumentar {fieldLabel}\",\"numberField\":\"Campo de número\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/numberfield/intl/et-EE.json
var $b112b56324926292d7470a7621f1f$exports = {
};
$b112b56324926292d7470a7621f1f$exports = JSON.parse("{\"decrease\":\"Vähenda {fieldLabel}\",\"increase\":\"Suurenda {fieldLabel}\",\"numberField\":\"Numbri väli\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/numberfield/intl/fi-FI.json
var $b9ff6794fa67f0ef93f0dcffb86cc31$exports = {
};
$b9ff6794fa67f0ef93f0dcffb86cc31$exports = JSON.parse("{\"decrease\":\"Vähennä {fieldLabel}\",\"increase\":\"Lisää {fieldLabel}\",\"numberField\":\"Numerokenttä\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/numberfield/intl/fr-FR.json
var $ac97a9a52baebde094acea488ec586$exports = {
};
$ac97a9a52baebde094acea488ec586$exports = JSON.parse("{\"decrease\":\"Diminuer {fieldLabel}\",\"increase\":\"Augmenter {fieldLabel}\",\"numberField\":\"Champ de nombre\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/numberfield/intl/he-IL.json
var $a817963177f04fe858962588b15e3$exports = {
};
$a817963177f04fe858962588b15e3$exports = JSON.parse("{\"decrease\":\"הקטן {fieldLabel}\",\"increase\":\"הגדל {fieldLabel}\",\"numberField\":\"שדה מספר\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/numberfield/intl/hr-HR.json
var $d73bb32bb7f8bac6e5dc11e732223c08$exports = {
};
$d73bb32bb7f8bac6e5dc11e732223c08$exports = JSON.parse("{\"decrease\":\"Smanji {fieldLabel}\",\"increase\":\"Povećaj {fieldLabel}\",\"numberField\":\"Polje broja\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/numberfield/intl/hu-HU.json
var $e71664d22d716ff0ef6add2132$exports = {
};
$e71664d22d716ff0ef6add2132$exports = JSON.parse("{\"decrease\":\"{fieldLabel} csökkentése\",\"increase\":\"{fieldLabel} növelése\",\"numberField\":\"Számmező\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/numberfield/intl/it-IT.json
var $cfbad042bd5b73285229d9afcc6cf6$exports = {
};
$cfbad042bd5b73285229d9afcc6cf6$exports = JSON.parse("{\"decrease\":\"Riduci {fieldLabel}\",\"increase\":\"Aumenta {fieldLabel}\",\"numberField\":\"Campo numero\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/numberfield/intl/ja-JP.json
var $b1ee0d48af31cdbaf4266405ccf9370$exports = {
};
$b1ee0d48af31cdbaf4266405ccf9370$exports = JSON.parse("{\"decrease\":\"{fieldLabel}を縮小\",\"increase\":\"{fieldLabel}を拡大\",\"numberField\":\"数値フィールド\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/numberfield/intl/ko-KR.json
var $dab39e0e634f48a0b5f7165f6c6d3c$exports = {
};
$dab39e0e634f48a0b5f7165f6c6d3c$exports = JSON.parse("{\"decrease\":\"{fieldLabel} 감소\",\"increase\":\"{fieldLabel} 증가\",\"numberField\":\"번호 필드\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/numberfield/intl/lt-LT.json
var $b043632ea67e0dfa620af42a79b561f6$exports = {
};
$b043632ea67e0dfa620af42a79b561f6$exports = JSON.parse("{\"decrease\":\"Sumažinti {fieldLabel}\",\"increase\":\"Padidinti {fieldLabel}\",\"numberField\":\"Numerio laukas\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/numberfield/intl/lv-LV.json
var $f3ea210b36ecef8645290573d6e8d616$exports = {
};
$f3ea210b36ecef8645290573d6e8d616$exports = JSON.parse("{\"decrease\":\"Samazināšana {fieldLabel}\",\"increase\":\"Palielināšana {fieldLabel}\",\"numberField\":\"Skaitļu lauks\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/numberfield/intl/nb-NO.json
var $ccc61cfcd514f82dac599f764ba71c5$exports = {
};
$ccc61cfcd514f82dac599f764ba71c5$exports = JSON.parse("{\"decrease\":\"Reduser {fieldLabel}\",\"increase\":\"Øk {fieldLabel}\",\"numberField\":\"Tallfelt\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/numberfield/intl/nl-NL.json
var $dd9d3b704bf07be5389470b29747b9de$exports = {
};
$dd9d3b704bf07be5389470b29747b9de$exports = JSON.parse("{\"decrease\":\"{fieldLabel} verlagen\",\"increase\":\"{fieldLabel} verhogen\",\"numberField\":\"Getalveld\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/numberfield/intl/pl-PL.json
var $bebe1ea9ac232e6902e0f72406e44eb$exports = {
};
$bebe1ea9ac232e6902e0f72406e44eb$exports = JSON.parse("{\"decrease\":\"Zmniejsz {fieldLabel}\",\"increase\":\"Zwiększ {fieldLabel}\",\"numberField\":\"Pole numeru\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/numberfield/intl/pt-BR.json
var $d6e8889105da4f40a98b889847bbfde2$exports = {
};
$d6e8889105da4f40a98b889847bbfde2$exports = JSON.parse("{\"decrease\":\"Diminuir {fieldLabel}\",\"increase\":\"Aumentar {fieldLabel}\",\"numberField\":\"Campo de número\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/numberfield/intl/pt-PT.json
var $c8137a1fbba7abca411e8082204660c0$exports = {
};
$c8137a1fbba7abca411e8082204660c0$exports = JSON.parse("{\"decrease\":\"Diminuir {fieldLabel}\",\"increase\":\"Aumentar {fieldLabel}\",\"numberField\":\"Campo numérico\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/numberfield/intl/ro-RO.json
var $f60ff373d7de3cba59f4218efd24b7cd$exports = {
};
$f60ff373d7de3cba59f4218efd24b7cd$exports = JSON.parse("{\"decrease\":\"Scădere {fieldLabel}\",\"increase\":\"Creștere {fieldLabel}\",\"numberField\":\"Câmp numeric\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/numberfield/intl/ru-RU.json
var $c6d4d6cf5803f02ca818e8202$exports = {
};
$c6d4d6cf5803f02ca818e8202$exports = JSON.parse("{\"decrease\":\"Уменьшение {fieldLabel}\",\"increase\":\"Увеличение {fieldLabel}\",\"numberField\":\"Числовое поле\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/numberfield/intl/sk-SK.json
var $ca65c03b648624f7b8097f49088764f$exports = {
};
$ca65c03b648624f7b8097f49088764f$exports = JSON.parse("{\"decrease\":\"Znížiť {fieldLabel}\",\"increase\":\"Zvýšiť {fieldLabel}\",\"numberField\":\"Číselné pole\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/numberfield/intl/sl-SI.json
var $d9d6de340774d4c29f6a37a5f2255f7b$exports = {
};
$d9d6de340774d4c29f6a37a5f2255f7b$exports = JSON.parse("{\"decrease\":\"Upadati {fieldLabel}\",\"increase\":\"Povečajte {fieldLabel}\",\"numberField\":\"Številčno polje\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/numberfield/intl/sr-SP.json
var $d48f74261c92cefae6f19ede6151219$exports = {
};
$d48f74261c92cefae6f19ede6151219$exports = JSON.parse("{\"decrease\":\"Decrease {fieldLabel}\",\"increase\":\"Increase {fieldLabel}\",\"numberField\":\"Number field\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/numberfield/intl/sv-SE.json
var $e5a7f1976917a2974f369962ea0bf95$exports = {
};
$e5a7f1976917a2974f369962ea0bf95$exports = JSON.parse("{\"decrease\":\"Minska {fieldLabel}\",\"increase\":\"Öka {fieldLabel}\",\"numberField\":\"Nummerfält\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/numberfield/intl/tr-TR.json
var $f2bd2269a5c765cf56d6d26edac3d2$exports = {
};
$f2bd2269a5c765cf56d6d26edac3d2$exports = JSON.parse("{\"decrease\":\"{fieldLabel} azalt\",\"increase\":\"{fieldLabel} arttır\",\"numberField\":\"Sayı alanı\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/numberfield/intl/uk-UA.json
var $ee881c3a5d0951c202f061fbe957e$exports = {
};
$ee881c3a5d0951c202f061fbe957e$exports = JSON.parse("{\"decrease\":\"Зменшити {fieldLabel}\",\"increase\":\"Збільшити {fieldLabel}\",\"numberField\":\"Поле номера\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/numberfield/intl/zh-CN.json
var $ed2e7ec62a1fc30780141b5ce26b663$exports = {
};
$ed2e7ec62a1fc30780141b5ce26b663$exports = JSON.parse("{\"decrease\":\"降低 {fieldLabel}\",\"increase\":\"提高 {fieldLabel}\",\"numberField\":\"数字字段\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/numberfield/intl/zh-TW.json
var $e5db46fc5bab2e1cddabb46042e67b$exports = {
};
$e5db46fc5bab2e1cddabb46042e67b$exports = JSON.parse("{\"decrease\":\"縮小 {fieldLabel}\",\"increase\":\"放大 {fieldLabel}\",\"numberField\":\"數字欄位\"}");
// @ts-ignore
const $ebb253b0ca493f114f41772a028a$var$intlMessages = {
    "ar-AE": _babelRuntimeHelpersInteropRequireDefault($bb445d18f084f340ccf67353487c16$exports).default,
    "bg-BG": _babelRuntimeHelpersInteropRequireDefault($ed6d795c880a0ab9c214b9003f1a43$exports).default,
    "cs-CZ": _babelRuntimeHelpersInteropRequireDefault($a4fa5907cb6ec4ef05d8194cd9b3c6b9$exports).default,
    "da-DK": _babelRuntimeHelpersInteropRequireDefault($af89a3f199f96b4b2f53fc09970add7a$exports).default,
    "de-DE": _babelRuntimeHelpersInteropRequireDefault($b0341cdc3c5ab5e88b4f2cbd32e56479$exports).default,
    "el-GR": _babelRuntimeHelpersInteropRequireDefault($d0de24a5d89f4698e53e6427ab9502$exports).default,
    "en-US": _babelRuntimeHelpersInteropRequireDefault($ca2b757c6100accb55e4393f5$exports).default,
    "es-ES": _babelRuntimeHelpersInteropRequireDefault($f31ea545ffa161b5fb56650a118d07f$exports).default,
    "et-EE": _babelRuntimeHelpersInteropRequireDefault($b112b56324926292d7470a7621f1f$exports).default,
    "fi-FI": _babelRuntimeHelpersInteropRequireDefault($b9ff6794fa67f0ef93f0dcffb86cc31$exports).default,
    "fr-FR": _babelRuntimeHelpersInteropRequireDefault($ac97a9a52baebde094acea488ec586$exports).default,
    "he-IL": _babelRuntimeHelpersInteropRequireDefault($a817963177f04fe858962588b15e3$exports).default,
    "hr-HR": _babelRuntimeHelpersInteropRequireDefault($d73bb32bb7f8bac6e5dc11e732223c08$exports).default,
    "hu-HU": _babelRuntimeHelpersInteropRequireDefault($e71664d22d716ff0ef6add2132$exports).default,
    "it-IT": _babelRuntimeHelpersInteropRequireDefault($cfbad042bd5b73285229d9afcc6cf6$exports).default,
    "ja-JP": _babelRuntimeHelpersInteropRequireDefault($b1ee0d48af31cdbaf4266405ccf9370$exports).default,
    "ko-KR": _babelRuntimeHelpersInteropRequireDefault($dab39e0e634f48a0b5f7165f6c6d3c$exports).default,
    "lt-LT": _babelRuntimeHelpersInteropRequireDefault($b043632ea67e0dfa620af42a79b561f6$exports).default,
    "lv-LV": _babelRuntimeHelpersInteropRequireDefault($f3ea210b36ecef8645290573d6e8d616$exports).default,
    "nb-NO": _babelRuntimeHelpersInteropRequireDefault($ccc61cfcd514f82dac599f764ba71c5$exports).default,
    "nl-NL": _babelRuntimeHelpersInteropRequireDefault($dd9d3b704bf07be5389470b29747b9de$exports).default,
    "pl-PL": _babelRuntimeHelpersInteropRequireDefault($bebe1ea9ac232e6902e0f72406e44eb$exports).default,
    "pt-BR": _babelRuntimeHelpersInteropRequireDefault($d6e8889105da4f40a98b889847bbfde2$exports).default,
    "pt-PT": _babelRuntimeHelpersInteropRequireDefault($c8137a1fbba7abca411e8082204660c0$exports).default,
    "ro-RO": _babelRuntimeHelpersInteropRequireDefault($f60ff373d7de3cba59f4218efd24b7cd$exports).default,
    "ru-RU": _babelRuntimeHelpersInteropRequireDefault($c6d4d6cf5803f02ca818e8202$exports).default,
    "sk-SK": _babelRuntimeHelpersInteropRequireDefault($ca65c03b648624f7b8097f49088764f$exports).default,
    "sl-SI": _babelRuntimeHelpersInteropRequireDefault($d9d6de340774d4c29f6a37a5f2255f7b$exports).default,
    "sr-SP": _babelRuntimeHelpersInteropRequireDefault($d48f74261c92cefae6f19ede6151219$exports).default,
    "sv-SE": _babelRuntimeHelpersInteropRequireDefault($e5a7f1976917a2974f369962ea0bf95$exports).default,
    "tr-TR": _babelRuntimeHelpersInteropRequireDefault($f2bd2269a5c765cf56d6d26edac3d2$exports).default,
    "uk-UA": _babelRuntimeHelpersInteropRequireDefault($ee881c3a5d0951c202f061fbe957e$exports).default,
    "zh-CN": _babelRuntimeHelpersInteropRequireDefault($ed2e7ec62a1fc30780141b5ce26b663$exports).default,
    "zh-TW": _babelRuntimeHelpersInteropRequireDefault($e5db46fc5bab2e1cddabb46042e67b$exports).default
};
/**
 * Provides the behavior and accessibility implementation for a number field component.
 * Number fields allow users to enter a number, and increment or decrement the value using stepper buttons.
 */ function useNumberField(props, state, inputRef) {
    let { id , decrementAriaLabel , incrementAriaLabel , isDisabled , isReadOnly , isRequired , minValue , maxValue , autoFocus , validationState , label , formatOptions , onBlur , onFocus , onFocusChange , onKeyDown , onKeyUp  } = props;
    let { increment , incrementToMax , decrement , decrementToMin , numberValue , commit  } = state;
    const formatMessage = useMessageFormatter($ebb253b0ca493f114f41772a028a$var$intlMessages);
    let inputId = useId(id);
    let { focusProps  } = useFocus({
        onBlur: ()=>{
            // Set input value to normalized valid value
            commit();
        }
    });
    let { spinButtonProps , incrementButtonProps: incButtonProps , decrementButtonProps: decButtonProps  } = useSpinButton({
        isDisabled,
        isReadOnly,
        isRequired,
        maxValue,
        minValue,
        onIncrement: increment,
        onIncrementToMax: incrementToMax,
        onDecrement: decrement,
        onDecrementToMin: decrementToMin,
        value: numberValue,
        textValue: state.inputValue
    });
    let [focusWithin, setFocusWithin] = useState(false);
    let { focusWithinProps  } = useFocusWithin({
        isDisabled,
        onFocusWithinChange: setFocusWithin
    });
    let onWheel = useCallback((e)=>{
        // if on a trackpad, users can scroll in both X and Y at once, check the magnitude of the change
        // if it's mostly in the X direction, then just return, the user probably doesn't mean to inc/dec
        // this isn't perfect, events come in fast with small deltas and a part of the scroll may give a false indication
        // especially if the user is scrolling near 45deg
        if (Math.abs(e.deltaY) <= Math.abs(e.deltaX)) return;
        if (e.deltaY > 0) increment();
        else if (e.deltaY < 0) decrement();
    }, [
        decrement,
        increment
    ]); // If the input isn't supposed to receive input, disable scrolling.
    let scrollingDisabled = isDisabled || isReadOnly || !focusWithin;
    useScrollWheel({
        onScroll: onWheel,
        isDisabled: scrollingDisabled
    }, inputRef); // The inputMode attribute influences the software keyboard that is shown on touch devices.
    // Browsers and operating systems are quite inconsistent about what keys are available, however.
    // We choose between numeric and decimal based on whether we allow negative and fractional numbers,
    // and based on testing on various devices to determine what keys are available in each inputMode.
    let numberFormatter = useNumberFormatter(formatOptions);
    let intlOptions = useMemo(()=>numberFormatter.resolvedOptions()
    , [
        numberFormatter
    ]);
    let hasDecimals = intlOptions.maximumFractionDigits > 0;
    let hasNegative = isNaN(state.minValue) || state.minValue < 0;
    let inputMode = 'numeric';
    if (isIPhone()) {
        // iPhone doesn't have a minus sign in either numeric or decimal.
        // Note this is only for iPhone, not iPad, which always has both
        // minus and decimal in numeric.
        if (hasNegative) inputMode = 'text';
        else if (hasDecimals) inputMode = 'decimal';
    } else if (isAndroid()) {
        // Android numeric has both a decimal point and minus key.
        // decimal does not have a minus key.
        if (hasNegative) inputMode = 'numeric';
        else if (hasDecimals) inputMode = 'decimal';
    }
    let onChange = (value)=>{
        state.setInputValue(value);
    };
    let { labelProps , inputProps: textFieldProps  } = useFormattedTextField({
        label,
        autoFocus,
        isDisabled,
        isReadOnly,
        isRequired,
        validationState,
        value: state.inputValue,
        autoComplete: 'off',
        'aria-label': props['aria-label'] || null,
        'aria-labelledby': props['aria-labelledby'] || null,
        id: inputId,
        type: 'text',
        // Can't use type="number" because then we can't have things like $ in the field.
        inputMode,
        onChange,
        onBlur,
        onFocus,
        onFocusChange,
        onKeyDown,
        onKeyUp
    }, state, inputRef);
    let inputProps = mergeProps(spinButtonProps, textFieldProps, focusProps, {
        // override the spinbutton role, we can't focus a spin button with VO
        role: null,
        // ignore aria-roledescription on iOS so that required state will announce when it is present
        'aria-roledescription': !isIOS() ? formatMessage('numberField') : null,
        'aria-valuemax': null,
        'aria-valuemin': null,
        'aria-valuenow': null,
        'aria-valuetext': null,
        autoCorrect: 'off',
        spellCheck: 'false'
    });
    let onButtonPressStart = (e)=>{
        // If focus is already on the input, keep it there so we don't hide the
        // software keyboard when tapping the increment/decrement buttons.
        if (document.activeElement === inputRef.current) return;
         // Otherwise, when using a mouse, move focus to the input.
        // On touch, or with a screen reader, focus the button so that the software
        // keyboard does not appear and the screen reader cursor is not moved off the button.
        if (e.pointerType === 'mouse') inputRef.current.focus();
        else e.target.focus();
    }; // Determine the label for the increment and decrement buttons. There are 4 cases:
    //
    // 1. With a visible label that is a string: aria-label: `Increase ${props.label}`
    // 2. With a visible label that is JSX: aria-label: 'Increase', aria-labelledby: '${incrementId} ${labelId}'
    // 3. With an aria-label: aria-label: `Increase ${props['aria-label']}`
    // 4. With an aria-labelledby: aria-label: 'Increase', aria-labelledby: `${incrementId} ${props['aria-labelledby']}`
    //
    // (1) and (2) could possibly be combined and both use aria-labelledby. However, placing the label in
    // the aria-label string rather than using aria-labelledby gives more flexibility to translators to change
    // the order or add additional words around the label if needed.
    let fieldLabel = props['aria-label'] || (typeof props.label === 'string' ? props.label : '');
    let ariaLabelledby;
    if (!fieldLabel) ariaLabelledby = props.label != null ? labelProps.id : props['aria-labelledby'];
    let incrementId = useId();
    let decrementId = useId();
    let incrementButtonProps = mergeProps(incButtonProps, {
        'aria-label': incrementAriaLabel || formatMessage('increase', {
            fieldLabel
        }).trim(),
        id: ariaLabelledby && !incrementAriaLabel ? incrementId : null,
        'aria-labelledby': ariaLabelledby && !incrementAriaLabel ? incrementId + " " + ariaLabelledby : null,
        'aria-controls': inputId,
        excludeFromTabOrder: true,
        preventFocusOnPress: true,
        isDisabled: !state.canIncrement,
        onPressStart: onButtonPressStart
    });
    let decrementButtonProps = mergeProps(decButtonProps, {
        'aria-label': decrementAriaLabel || formatMessage('decrease', {
            fieldLabel
        }).trim(),
        id: ariaLabelledby && !decrementAriaLabel ? decrementId : null,
        'aria-labelledby': ariaLabelledby && !decrementAriaLabel ? decrementId + " " + ariaLabelledby : null,
        'aria-controls': inputId,
        excludeFromTabOrder: true,
        preventFocusOnPress: true,
        isDisabled: !state.canDecrement,
        onPressStart: onButtonPressStart
    });
    return {
        groupProps: _babelRuntimeHelpersExtends({
            role: 'group',
            'aria-disabled': isDisabled,
            'aria-invalid': validationState === 'invalid' ? 'true' : undefined
        }, focusWithinProps),
        labelProps,
        inputProps,
        incrementButtonProps,
        decrementButtonProps
    };
}
exports.useNumberField = useNumberField;

},{"@react-aria/spinbutton":"3Peii","@react-aria/i18n":"6xZcx","@react-aria/textfield":"4AjqK","@react-aria/interactions":"3irYN","@react-aria/utils":"d8qxy","react":"a6qBW","@babel/runtime/helpers/interopRequireDefault":"5TvsK","@babel/runtime/helpers/extends":"5xz6u"}],"3Peii":[function(require,module,exports) {
var { useMessageFormatter  } = require("@react-aria/i18n");
var { useCallback , useEffect , useRef  } = require("react");
var { announce  } = require("@react-aria/live-announcer");
var _babelRuntimeHelpersInteropRequireDefault = $parcel$interopDefault(require("@babel/runtime/helpers/interopRequireDefault"));
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/spinbutton/intl/ar-AE.json
var $c3f05488d24647f48a8d3915425531f5$exports = {
};
$c3f05488d24647f48a8d3915425531f5$exports = JSON.parse("{\"Empty\":\"فارغ\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/spinbutton/intl/bg-BG.json
var $c548d4e19a7d415fbd330d328941a62d$exports = {
};
$c548d4e19a7d415fbd330d328941a62d$exports = JSON.parse("{\"Empty\":\"Изпразни\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/spinbutton/intl/cs-CZ.json
var $fc6cef73ed60f9302e1b85aadbb2fd2$exports = {
};
$fc6cef73ed60f9302e1b85aadbb2fd2$exports = JSON.parse("{\"Empty\":\"Prázdné\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/spinbutton/intl/da-DK.json
var $bb231bdd6ba2feec533fd4d9c7ac6c2$exports = {
};
$bb231bdd6ba2feec533fd4d9c7ac6c2$exports = JSON.parse("{\"Empty\":\"Tom\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/spinbutton/intl/de-DE.json
var $b5d12325028283f0cfc4910b221995$exports = {
};
$b5d12325028283f0cfc4910b221995$exports = JSON.parse("{\"Empty\":\"Leer\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/spinbutton/intl/el-GR.json
var $d42489ef1f2735d70ec958ca03$exports = {
};
$d42489ef1f2735d70ec958ca03$exports = JSON.parse("{\"Empty\":\"Άδειο\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/spinbutton/intl/en-US.json
var $a3d36b11748baaae2b72d2d06b8d4f$exports = {
};
$a3d36b11748baaae2b72d2d06b8d4f$exports = JSON.parse("{\"Empty\":\"Empty\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/spinbutton/intl/es-ES.json
var $bd9fdde72120aa3296bfb888e979b561$exports = {
};
$bd9fdde72120aa3296bfb888e979b561$exports = JSON.parse("{\"Empty\":\"Vacío\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/spinbutton/intl/et-EE.json
var $b8e0686b145132b537854e4ad43f8153$exports = {
};
$b8e0686b145132b537854e4ad43f8153$exports = JSON.parse("{\"Empty\":\"Tühjenda\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/spinbutton/intl/fi-FI.json
var $cb67d34ec1986ae4ce899649fa400433$exports = {
};
$cb67d34ec1986ae4ce899649fa400433$exports = JSON.parse("{\"Empty\":\"Tyhjä\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/spinbutton/intl/fr-FR.json
var $d398af3c700a617df41e916bad7f12e5$exports = {
};
$d398af3c700a617df41e916bad7f12e5$exports = JSON.parse("{\"Empty\":\"Vide\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/spinbutton/intl/he-IL.json
var $d41fa3b22e61dd6c25a78dfeb$exports = {
};
$d41fa3b22e61dd6c25a78dfeb$exports = JSON.parse("{\"Empty\":\"ריק\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/spinbutton/intl/hr-HR.json
var $f7dc0ea5cd692eed8bcb420f0302865f$exports = {
};
$f7dc0ea5cd692eed8bcb420f0302865f$exports = JSON.parse("{\"Empty\":\"Prazno\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/spinbutton/intl/hu-HU.json
var $c6a5a7aaf2fe130b2df0059729c9f0$exports = {
};
$c6a5a7aaf2fe130b2df0059729c9f0$exports = JSON.parse("{\"Empty\":\"Üres\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/spinbutton/intl/it-IT.json
var $ac64756ac14c2b81eb727a0e625$exports = {
};
$ac64756ac14c2b81eb727a0e625$exports = JSON.parse("{\"Empty\":\"Vuoto\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/spinbutton/intl/ja-JP.json
var $a81b25b0880f7d16b795e54a728bb29$exports = {
};
$a81b25b0880f7d16b795e54a728bb29$exports = JSON.parse("{\"Empty\":\"空\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/spinbutton/intl/ko-KR.json
var $e060150641d9fc7af$exports = {
};
$e060150641d9fc7af$exports = JSON.parse("{\"Empty\":\"비어 있음\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/spinbutton/intl/lt-LT.json
var $a1312532e65fc00702f3f430d9de2$exports = {
};
$a1312532e65fc00702f3f430d9de2$exports = JSON.parse("{\"Empty\":\"Tuščias\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/spinbutton/intl/lv-LV.json
var $e7f8f9085275407ea74b19d37ee95c$exports = {
};
$e7f8f9085275407ea74b19d37ee95c$exports = JSON.parse("{\"Empty\":\"Tukšs\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/spinbutton/intl/nb-NO.json
var $dbeb0b645a29b160801f37417da29237$exports = {
};
$dbeb0b645a29b160801f37417da29237$exports = JSON.parse("{\"Empty\":\"Tom\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/spinbutton/intl/nl-NL.json
var $adc62b182a2bd5c8be093387b010c180$exports = {
};
$adc62b182a2bd5c8be093387b010c180$exports = JSON.parse("{\"Empty\":\"Leeg\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/spinbutton/intl/pl-PL.json
var $ada7dad0f5a84e53c4ee9d8e28716$exports = {
};
$ada7dad0f5a84e53c4ee9d8e28716$exports = JSON.parse("{\"Empty\":\"Pusty\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/spinbutton/intl/pt-BR.json
var $e5021bea6ccc4ee454cc450c7b7e07$exports = {
};
$e5021bea6ccc4ee454cc450c7b7e07$exports = JSON.parse("{\"Empty\":\"Vazio\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/spinbutton/intl/pt-PT.json
var $e3c0a97c491b8382678a0a50134539$exports = {
};
$e3c0a97c491b8382678a0a50134539$exports = JSON.parse("{\"Empty\":\"Vazio\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/spinbutton/intl/ro-RO.json
var $dd30978fd7e514c9877cc015110b7231$exports = {
};
$dd30978fd7e514c9877cc015110b7231$exports = JSON.parse("{\"Empty\":\"Gol\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/spinbutton/intl/ru-RU.json
var $c931a7e1c845a80d96eaa3eb644bf6$exports = {
};
$c931a7e1c845a80d96eaa3eb644bf6$exports = JSON.parse("{\"Empty\":\"Не заполнено\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/spinbutton/intl/sk-SK.json
var $fcae139572b3ab616faa1767db3ad5e4$exports = {
};
$fcae139572b3ab616faa1767db3ad5e4$exports = JSON.parse("{\"Empty\":\"Prázdne\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/spinbutton/intl/sl-SI.json
var $bb9d64d674256d4ec0105b505320df$exports = {
};
$bb9d64d674256d4ec0105b505320df$exports = JSON.parse("{\"Empty\":\"Prazen\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/spinbutton/intl/sr-SP.json
var $a7e20439e972cd0406c8a08f295a2ad$exports = {
};
$a7e20439e972cd0406c8a08f295a2ad$exports = JSON.parse("{\"Empty\":\"Prazno\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/spinbutton/intl/sv-SE.json
var $a56bbf53f8bca3b866c5ade05276887d$exports = {
};
$a56bbf53f8bca3b866c5ade05276887d$exports = JSON.parse("{\"Empty\":\"Tomt\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/spinbutton/intl/tr-TR.json
var $ff4317415bd9d5e5c55b1fb3ab9701fc$exports = {
};
$ff4317415bd9d5e5c55b1fb3ab9701fc$exports = JSON.parse("{\"Empty\":\"Boş\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/spinbutton/intl/uk-UA.json
var $b029c402307c2967096f8d041ac94$exports = {
};
$b029c402307c2967096f8d041ac94$exports = JSON.parse("{\"Empty\":\"Пусто\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/spinbutton/intl/zh-CN.json
var $e90b748bf720360e1e47ad5a796a35d4$exports = {
};
$e90b748bf720360e1e47ad5a796a35d4$exports = JSON.parse("{\"Empty\":\"空\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/spinbutton/intl/zh-TW.json
var $f3827624a5a1724a27668435137c30c6$exports = {
};
$f3827624a5a1724a27668435137c30c6$exports = JSON.parse("{\"Empty\":\"空白\"}");
// @ts-ignore
const $e2611a2eb0ff0bc5956aba8eea80194b$var$intlMessages = {
    "ar-AE": _babelRuntimeHelpersInteropRequireDefault($c3f05488d24647f48a8d3915425531f5$exports).default,
    "bg-BG": _babelRuntimeHelpersInteropRequireDefault($c548d4e19a7d415fbd330d328941a62d$exports).default,
    "cs-CZ": _babelRuntimeHelpersInteropRequireDefault($fc6cef73ed60f9302e1b85aadbb2fd2$exports).default,
    "da-DK": _babelRuntimeHelpersInteropRequireDefault($bb231bdd6ba2feec533fd4d9c7ac6c2$exports).default,
    "de-DE": _babelRuntimeHelpersInteropRequireDefault($b5d12325028283f0cfc4910b221995$exports).default,
    "el-GR": _babelRuntimeHelpersInteropRequireDefault($d42489ef1f2735d70ec958ca03$exports).default,
    "en-US": _babelRuntimeHelpersInteropRequireDefault($a3d36b11748baaae2b72d2d06b8d4f$exports).default,
    "es-ES": _babelRuntimeHelpersInteropRequireDefault($bd9fdde72120aa3296bfb888e979b561$exports).default,
    "et-EE": _babelRuntimeHelpersInteropRequireDefault($b8e0686b145132b537854e4ad43f8153$exports).default,
    "fi-FI": _babelRuntimeHelpersInteropRequireDefault($cb67d34ec1986ae4ce899649fa400433$exports).default,
    "fr-FR": _babelRuntimeHelpersInteropRequireDefault($d398af3c700a617df41e916bad7f12e5$exports).default,
    "he-IL": _babelRuntimeHelpersInteropRequireDefault($d41fa3b22e61dd6c25a78dfeb$exports).default,
    "hr-HR": _babelRuntimeHelpersInteropRequireDefault($f7dc0ea5cd692eed8bcb420f0302865f$exports).default,
    "hu-HU": _babelRuntimeHelpersInteropRequireDefault($c6a5a7aaf2fe130b2df0059729c9f0$exports).default,
    "it-IT": _babelRuntimeHelpersInteropRequireDefault($ac64756ac14c2b81eb727a0e625$exports).default,
    "ja-JP": _babelRuntimeHelpersInteropRequireDefault($a81b25b0880f7d16b795e54a728bb29$exports).default,
    "ko-KR": _babelRuntimeHelpersInteropRequireDefault($e060150641d9fc7af$exports).default,
    "lt-LT": _babelRuntimeHelpersInteropRequireDefault($a1312532e65fc00702f3f430d9de2$exports).default,
    "lv-LV": _babelRuntimeHelpersInteropRequireDefault($e7f8f9085275407ea74b19d37ee95c$exports).default,
    "nb-NO": _babelRuntimeHelpersInteropRequireDefault($dbeb0b645a29b160801f37417da29237$exports).default,
    "nl-NL": _babelRuntimeHelpersInteropRequireDefault($adc62b182a2bd5c8be093387b010c180$exports).default,
    "pl-PL": _babelRuntimeHelpersInteropRequireDefault($ada7dad0f5a84e53c4ee9d8e28716$exports).default,
    "pt-BR": _babelRuntimeHelpersInteropRequireDefault($e5021bea6ccc4ee454cc450c7b7e07$exports).default,
    "pt-PT": _babelRuntimeHelpersInteropRequireDefault($e3c0a97c491b8382678a0a50134539$exports).default,
    "ro-RO": _babelRuntimeHelpersInteropRequireDefault($dd30978fd7e514c9877cc015110b7231$exports).default,
    "ru-RU": _babelRuntimeHelpersInteropRequireDefault($c931a7e1c845a80d96eaa3eb644bf6$exports).default,
    "sk-SK": _babelRuntimeHelpersInteropRequireDefault($fcae139572b3ab616faa1767db3ad5e4$exports).default,
    "sl-SI": _babelRuntimeHelpersInteropRequireDefault($bb9d64d674256d4ec0105b505320df$exports).default,
    "sr-SP": _babelRuntimeHelpersInteropRequireDefault($a7e20439e972cd0406c8a08f295a2ad$exports).default,
    "sv-SE": _babelRuntimeHelpersInteropRequireDefault($a56bbf53f8bca3b866c5ade05276887d$exports).default,
    "tr-TR": _babelRuntimeHelpersInteropRequireDefault($ff4317415bd9d5e5c55b1fb3ab9701fc$exports).default,
    "uk-UA": _babelRuntimeHelpersInteropRequireDefault($b029c402307c2967096f8d041ac94$exports).default,
    "zh-CN": _babelRuntimeHelpersInteropRequireDefault($e90b748bf720360e1e47ad5a796a35d4$exports).default,
    "zh-TW": _babelRuntimeHelpersInteropRequireDefault($f3827624a5a1724a27668435137c30c6$exports).default
};
function useSpinButton(props) {
    const _async = useRef();
    let { value , textValue , minValue , maxValue , isDisabled , isReadOnly , isRequired , onIncrement , onIncrementPage , onDecrement , onDecrementPage , onDecrementToMin , onIncrementToMax  } = props;
    const formatMessage = useMessageFormatter($e2611a2eb0ff0bc5956aba8eea80194b$var$intlMessages);
    const clearAsync = ()=>clearTimeout(_async.current)
    ; // eslint-disable-next-line arrow-body-style
    useEffect(()=>{
        return ()=>clearAsync()
        ;
    }, []);
    let onKeyDown = (e)=>{
        if (e.ctrlKey || e.metaKey || e.shiftKey || e.altKey || isReadOnly) return;
        switch(e.key){
            case 'PageUp':
                if (onIncrementPage) {
                    e.preventDefault();
                    onIncrementPage();
                    break;
                }
            // fallthrough!
            case 'ArrowUp':
            case 'Up':
                if (onIncrement) {
                    e.preventDefault();
                    onIncrement();
                }
                break;
            case 'PageDown':
                if (onDecrementPage) {
                    e.preventDefault();
                    onDecrementPage();
                    break;
                }
            // fallthrough
            case 'ArrowDown':
            case 'Down':
                if (onDecrement) {
                    e.preventDefault();
                    onDecrement();
                }
                break;
            case 'Home':
                if (onDecrementToMin) {
                    e.preventDefault();
                    onDecrementToMin();
                }
                break;
            case 'End':
                if (onIncrementToMax) {
                    e.preventDefault();
                    onIncrementToMax();
                }
                break;
        }
    };
    let isFocused = useRef(false);
    let onFocus = ()=>{
        isFocused.current = true;
    };
    let onBlur = ()=>{
        isFocused.current = false;
    }; // Replace Unicode hyphen-minus (U+002D) with minus sign (U+2212).
    // This ensures that macOS VoiceOver announces it as "minus" even with other characters between the minus sign
    // and the number (e.g. currency symbol). Otherwise it announces nothing because it assumes the character is a hyphen.
    // In addition, replace the empty string with the word "Empty" so that iOS VoiceOver does not read "50%" for an empty field.
    textValue = textValue === '' ? formatMessage('Empty') : (textValue || "" + value).replace('-', '\u2212');
    useEffect(()=>{
        if (isFocused.current) announce(textValue, 'assertive');
    }, [
        textValue
    ]);
    const onIncrementPressStart = useCallback((initialStepDelay)=>{
        clearAsync();
        onIncrement(); // Start spinning after initial delay
        _async.current = window.setTimeout(()=>{
            if (isNaN(maxValue) || isNaN(value) || value < maxValue) onIncrementPressStart(60);
        }, initialStepDelay);
    }, [
        onIncrement,
        maxValue,
        value
    ]);
    const onDecrementPressStart = useCallback((initialStepDelay)=>{
        clearAsync();
        onDecrement(); // Start spinning after initial delay
        _async.current = window.setTimeout(()=>{
            if (isNaN(minValue) || isNaN(value) || value > minValue) onDecrementPressStart(60);
        }, initialStepDelay);
    }, [
        onDecrement,
        minValue,
        value
    ]);
    return {
        spinButtonProps: {
            role: 'spinbutton',
            'aria-valuenow': !isNaN(value) ? value : null,
            'aria-valuetext': textValue,
            'aria-valuemin': minValue,
            'aria-valuemax': maxValue,
            'aria-disabled': isDisabled || null,
            'aria-readonly': isReadOnly || null,
            'aria-required': isRequired || null,
            onKeyDown,
            onFocus,
            onBlur
        },
        incrementButtonProps: {
            onPressStart: ()=>onIncrementPressStart(400)
            ,
            onPressEnd: clearAsync,
            onFocus,
            onBlur
        },
        decrementButtonProps: {
            onPressStart: ()=>onDecrementPressStart(400)
            ,
            onPressEnd: clearAsync,
            onFocus,
            onBlur
        }
    };
}
exports.useSpinButton = useSpinButton;

},{"@react-aria/i18n":"6xZcx","react":"a6qBW","@react-aria/live-announcer":"4Ru5i","@babel/runtime/helpers/interopRequireDefault":"5TvsK"}],"4Ru5i":[function(require,module,exports) {
var { VisuallyHidden  } = require("@react-aria/visually-hidden");
var _reactDom = $parcel$interopDefault(require("react-dom"));
var _react2 = require("react");
var _react = $parcel$interopDefault(_react2);
var { Fragment , useImperativeHandle , useState  } = _react2;
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
/* Inspired by https://github.com/AlmeroSteyn/react-aria-live */ const $daf77d092755557a1dfdc345b21308d$var$LIVEREGION_TIMEOUT_DELAY = 7000;
let $daf77d092755557a1dfdc345b21308d$var$liveRegionAnnouncer = /*#__PURE__*/ _react.createRef();
let $daf77d092755557a1dfdc345b21308d$var$node = null;
let $daf77d092755557a1dfdc345b21308d$var$messageId = 0;
/**
 * Announces the message using screen reader technology.
 */ function announce(message, assertiveness, timeout) {
    if (assertiveness === void 0) assertiveness = 'assertive';
    if (timeout === void 0) timeout = $daf77d092755557a1dfdc345b21308d$var$LIVEREGION_TIMEOUT_DELAY;
    $daf77d092755557a1dfdc345b21308d$var$ensureInstance((announcer)=>announcer.announce(message, assertiveness, timeout)
    );
}
/**
 * Stops all queued announcements.
 */ exports.announce = announce;
function clearAnnouncer(assertiveness) {
    $daf77d092755557a1dfdc345b21308d$var$ensureInstance((announcer)=>announcer.clear(assertiveness)
    );
}
/**
 * Removes the announcer from the DOM.
 */ exports.clearAnnouncer = clearAnnouncer;
function destroyAnnouncer() {
    if ($daf77d092755557a1dfdc345b21308d$var$liveRegionAnnouncer.current) {
        _reactDom.unmountComponentAtNode($daf77d092755557a1dfdc345b21308d$var$node);
        document.body.removeChild($daf77d092755557a1dfdc345b21308d$var$node);
        $daf77d092755557a1dfdc345b21308d$var$node = null;
    }
}
/**
 * Ensures we only have one instance of the announcer so that we don't have elements competing.
 */ exports.destroyAnnouncer = destroyAnnouncer;
function $daf77d092755557a1dfdc345b21308d$var$ensureInstance(callback) {
    if (!$daf77d092755557a1dfdc345b21308d$var$liveRegionAnnouncer.current) {
        $daf77d092755557a1dfdc345b21308d$var$node = document.createElement('div');
        $daf77d092755557a1dfdc345b21308d$var$node.dataset.liveAnnouncer = 'true';
        document.body.prepend($daf77d092755557a1dfdc345b21308d$var$node);
        _reactDom.render(/*#__PURE__*/ _react.createElement($daf77d092755557a1dfdc345b21308d$var$LiveRegionAnnouncer, {
            ref: $daf77d092755557a1dfdc345b21308d$var$liveRegionAnnouncer
        }), $daf77d092755557a1dfdc345b21308d$var$node, ()=>callback($daf77d092755557a1dfdc345b21308d$var$liveRegionAnnouncer.current)
        );
    } else callback($daf77d092755557a1dfdc345b21308d$var$liveRegionAnnouncer.current);
}
const $daf77d092755557a1dfdc345b21308d$var$LiveRegionAnnouncer = /*#__PURE__*/ _react.forwardRef((_, ref)=>{
    let [assertiveMessages, setAssertiveMessages] = useState([]);
    let [politeMessages, setPoliteMessages] = useState([]);
    let clear = (assertiveness)=>{
        if (!assertiveness || assertiveness === 'assertive') setAssertiveMessages([]);
        if (!assertiveness || assertiveness === 'polite') setPoliteMessages([]);
    };
    let announce1 = function announce2(message, assertiveness, timeout) {
        if (assertiveness === void 0) assertiveness = 'assertive';
        if (timeout === void 0) timeout = $daf77d092755557a1dfdc345b21308d$var$LIVEREGION_TIMEOUT_DELAY;
        let id = $daf77d092755557a1dfdc345b21308d$var$messageId++;
        if (assertiveness === 'assertive') setAssertiveMessages((messages)=>[
                ...messages,
                {
                    id,
                    text: message
                }
            ]
        );
        else setPoliteMessages((messages)=>[
                ...messages,
                {
                    id,
                    text: message
                }
            ]
        );
        if (message !== '') setTimeout(()=>{
            if (assertiveness === 'assertive') setAssertiveMessages((messages)=>messages.filter((message1)=>message1.id !== id
                )
            );
            else setPoliteMessages((messages)=>messages.filter((message1)=>message1.id !== id
                )
            );
        }, timeout);
    };
    useImperativeHandle(ref, ()=>({
            announce: announce1,
            clear
        })
    );
    return(/*#__PURE__*/ _react.createElement(Fragment, null, /*#__PURE__*/ _react.createElement($daf77d092755557a1dfdc345b21308d$var$MessageBlock, {
        "aria-live": "assertive"
    }, assertiveMessages.map((message)=>/*#__PURE__*/ _react.createElement("div", {
            key: message.id
        }, message.text)
    )), /*#__PURE__*/ _react.createElement($daf77d092755557a1dfdc345b21308d$var$MessageBlock, {
        "aria-live": "polite"
    }, politeMessages.map((message)=>/*#__PURE__*/ _react.createElement("div", {
            key: message.id
        }, message.text)
    ))));
});
function $daf77d092755557a1dfdc345b21308d$var$MessageBlock(_ref) {
    let { children , 'aria-live': ariaLive  } = _ref;
    return(/*#__PURE__*/ _react.createElement(VisuallyHidden, {
        role: "log",
        "aria-live": ariaLive,
        "aria-relevant": "additions"
    }, children));
}

},{"@react-aria/visually-hidden":"AVm9K","react-dom":"6V7Bv","react":"a6qBW"}],"4AjqK":[function(require,module,exports) {
var { useEffect , useRef  } = require("react");
var { useLabel  } = require("@react-aria/label");
var { useFocusable  } = require("@react-aria/focus");
var { filterDOMProps , mergeProps  } = require("@react-aria/utils");
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
/**
 * Provides the behavior and accessibility implementation for a text field.
 * @param props - Props for the text field.
 * @param ref - Ref to the HTML input or textarea element.
 */ function useTextField(props, ref) {
    let { inputElementType ='input' , isDisabled =false , isRequired =false , isReadOnly =false , validationState , type ='text' , onChange: _onChange = ()=>{
    }  } = props;
    let { focusableProps  } = useFocusable(props, ref);
    let { labelProps , fieldProps  } = useLabel(props);
    let domProps = filterDOMProps(props, {
        labelable: true
    });
    const inputOnlyProps = {
        type,
        pattern: props.pattern
    };
    return {
        labelProps,
        inputProps: mergeProps(domProps, inputElementType === 'input' && inputOnlyProps, _babelRuntimeHelpersExtends({
            disabled: isDisabled,
            readOnly: isReadOnly,
            'aria-required': isRequired || undefined,
            'aria-invalid': validationState === 'invalid' || undefined,
            'aria-errormessage': props['aria-errormessage'],
            'aria-activedescendant': props['aria-activedescendant'],
            'aria-autocomplete': props['aria-autocomplete'],
            'aria-haspopup': props['aria-haspopup'],
            value: props.value,
            defaultValue: props.value ? undefined : props.defaultValue,
            onChange: (e)=>_onChange(e.target.value)
            ,
            autoComplete: props.autoComplete,
            maxLength: props.maxLength,
            minLength: props.minLength,
            name: props.name,
            placeholder: props.placeholder,
            inputMode: props.inputMode,
            // Clipboard events
            onCopy: props.onCopy,
            onCut: props.onCut,
            onPaste: props.onPaste,
            // Composition events
            onCompositionEnd: props.onCompositionEnd,
            onCompositionStart: props.onCompositionStart,
            onCompositionUpdate: props.onCompositionUpdate,
            // Selection events
            onSelect: props.onSelect,
            // Input events
            onBeforeInput: props.onBeforeInput,
            onInput: props.onInput
        }, focusableProps, fieldProps))
    };
}
exports.useTextField = useTextField;
function $e12a6959a5c62c5783c0140bc17c4eda$var$supportsNativeBeforeInputEvent() {
    return typeof window !== 'undefined' && window.InputEvent && typeof InputEvent.prototype.getTargetRanges === 'function';
}
function useFormattedTextField(props, state, inputRef) {
    let stateRef = useRef(state);
    stateRef.current = state; // All browsers implement the 'beforeinput' event natively except Firefox
    // (currently behind a flag as of Firefox 84). React's polyfill does not
    // run in all cases that the native event fires, e.g. when deleting text.
    // Use the native event if available so that we can prevent invalid deletions.
    // We do not attempt to polyfill this in Firefox since it would be very complicated,
    // the benefit of doing so is fairly minor, and it's going to be natively supported soon.
    useEffect(()=>{
        if (!$e12a6959a5c62c5783c0140bc17c4eda$var$supportsNativeBeforeInputEvent()) return;
        let input = inputRef.current;
        let onBeforeInput = (e)=>{
            let state1 = stateRef.current; // Compute the next value of the input if the event is allowed to proceed.
            // See https://www.w3.org/TR/input-events-2/#interface-InputEvent-Attributes for a full list of input types.
            let nextValue;
            switch(e.inputType){
                case 'historyUndo':
                case 'historyRedo':
                    // Explicitly allow undo/redo. e.data is null in this case, but there's no need to validate,
                    // because presumably the input would have already been validated previously.
                    return;
                case 'deleteContent':
                case 'deleteByCut':
                case 'deleteByDrag':
                    nextValue = input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);
                    break;
                case 'deleteContentForward':
                    // This is potentially incorrect, since the browser may actually delete more than a single UTF-16
                    // character. In reality, a full Unicode grapheme cluster consisting of multiple UTF-16 characters
                    // or code points may be deleted. However, in our currently supported locales, there are no such cases.
                    // If we support additional locales in the future, this may need to change.
                    nextValue = input.selectionEnd === input.selectionStart ? input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd + 1) : input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);
                    break;
                case 'deleteContentBackward':
                    nextValue = input.selectionEnd === input.selectionStart ? input.value.slice(0, input.selectionStart - 1) + input.value.slice(input.selectionStart) : input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);
                    break;
                default:
                    if (e.data != null) nextValue = input.value.slice(0, input.selectionStart) + e.data + input.value.slice(input.selectionEnd);
                    break;
            } // If we did not compute a value, or the new value is invalid, prevent the event
            // so that the browser does not update the input text, move the selection, or add to
            // the undo/redo stack.
            if (nextValue == null || !state1.validate(nextValue)) e.preventDefault();
        };
        input.addEventListener('beforeinput', onBeforeInput, false);
        return ()=>{
            input.removeEventListener('beforeinput', onBeforeInput, false);
        };
    }, [
        inputRef,
        stateRef
    ]);
    let onBeforeInput = !$e12a6959a5c62c5783c0140bc17c4eda$var$supportsNativeBeforeInputEvent() ? (e)=>{
        let nextValue = e.target.value.slice(0, e.target.selectionStart) + e.data + e.target.value.slice(e.target.selectionEnd);
        if (!state.validate(nextValue)) e.preventDefault();
    } : null;
    let { labelProps , inputProps: textFieldProps  } = useTextField(props, inputRef);
    let compositionStartState = useRef(null);
    return {
        inputProps: mergeProps(textFieldProps, {
            onBeforeInput,
            onCompositionStart () {
                // Chrome does not implement Input Events Level 2, which specifies the insertFromComposition
                // and deleteByComposition inputType values for the beforeinput event. These are meant to occur
                // at the end of a composition (e.g. Pinyin IME, Android auto correct, etc.), and crucially, are
                // cancelable. The insertCompositionText and deleteCompositionText input types are not cancelable,
                // nor would we want to cancel them because the input from the user is incomplete at that point.
                // In Safari, insertFromComposition/deleteFromComposition will fire, however, allowing us to cancel
                // the final composition result if it is invalid. As a fallback for Chrome and Firefox, which either
                // don't support Input Events Level 2, or beforeinput at all, we store the state of the input when
                // the compositionstart event fires, and undo the changes in compositionend (below) if it is invalid.
                // Unfortunately, this messes up the undo/redo stack, but until insertFromComposition/deleteByComposition
                // are implemented, there is no other way to prevent composed input.
                // See https://bugs.chromium.org/p/chromium/issues/detail?id=1022204
                let { value , selectionStart , selectionEnd  } = inputRef.current;
                compositionStartState.current = {
                    value,
                    selectionStart,
                    selectionEnd
                };
            },
            onCompositionEnd () {
                if (!state.validate(inputRef.current.value)) {
                    // Restore the input value in the DOM immediately so we can synchronously update the selection position.
                    // But also update the value in React state as well so it is correct for future updates.
                    let { value , selectionStart , selectionEnd  } = compositionStartState.current;
                    inputRef.current.value = value;
                    inputRef.current.setSelectionRange(selectionStart, selectionEnd);
                    state.setInputValue(value);
                }
            }
        }),
        labelProps
    };
}
exports.useFormattedTextField = useFormattedTextField;

},{"react":"a6qBW","@react-aria/label":"2pFvL","@react-aria/focus":"76fMY","@react-aria/utils":"d8qxy","@babel/runtime/helpers/extends":"5xz6u"}],"39Gqw":[function(require,module,exports) {
var { useTextField  } = require("@react-aria/textfield");
var { useControlledState  } = require("@react-stately/utils");
var { useProviderProps  } = require("@react-spectrum/provider");
var { useHover  } = require("@react-aria/interactions");
var { useFormProps  } = require("@react-spectrum/form");
var { Label  } = require("@react-spectrum/label");
var { FocusRing  } = require("@react-aria/focus");
var { classNames , createFocusableRef , useStyleProps  } = require("@react-spectrum/utils");
var _spectrumIconsUiCheckmarkMedium = $parcel$interopDefault(require("@spectrum-icons/ui/CheckmarkMedium"));
var _spectrumIconsUiAlertMedium = $parcel$interopDefault(require("@spectrum-icons/ui/AlertMedium"));
var _react2 = require("react");
var _react = $parcel$interopDefault(_react2);
var { useCallback , useRef , cloneElement , forwardRef , useImperativeHandle  } = _react2;
var { chain , useLayoutEffect , mergeProps  } = require("@react-aria/utils");
var _babelRuntimeHelpersObjectWithoutPropertiesLoose = $parcel$interopDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
require("./main.css");
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/fieldlabel/vars.css
var $a0bedb1888ff92cb3407d1a60d76e$exports = {
};
$a0bedb1888ff92cb3407d1a60d76e$exports = {
    "spectrum-FieldLabel": "_spectrum-FieldLabel_36b9b",
    "spectrum-FieldLabel--positionSide": "_spectrum-FieldLabel--positionSide_36b9b",
    "spectrum-FieldLabel-requiredIcon": "_spectrum-FieldLabel-requiredIcon_36b9b",
    "spectrum-FieldLabel--alignEnd": "_spectrum-FieldLabel--alignEnd_36b9b",
    "spectrum-Field": "_spectrum-Field_36b9b",
    "spectrum-Field--positionTop": "_spectrum-Field--positionTop_36b9b",
    "spectrum-Field-field": "_spectrum-Field-field_36b9b",
    "spectrum-Field-field--multiline": "_spectrum-Field-field--multiline_36b9b",
    "spectrum-Field--positionSide": "_spectrum-Field--positionSide_36b9b",
    "spectrum-Form": "_spectrum-Form_36b9b",
    "spectrum-Form--positionSide": "_spectrum-Form--positionSide_36b9b",
    "spectrum-Form--positionTop": "_spectrum-Form--positionTop_36b9b",
    "spectrum-Form-itemLabel": "_spectrum-Form-itemLabel_36b9b",
    "is-disabled": "_is-disabled_36b9b"
};
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/textfield/vars.css
var $d6ccebc39ce6c9807064e14b8824ec$exports = {
};
$d6ccebc39ce6c9807064e14b8824ec$exports = {
    "spectrum-Textfield": "_spectrum-Textfield_61339",
    "spectrum-Textfield--quiet": "_spectrum-Textfield--quiet_61339",
    "spectrum-Textfield--multiline": "_spectrum-Textfield--multiline_61339",
    "spectrum-Textfield-input": "_spectrum-Textfield-input_61339",
    "is-placeholder": "_is-placeholder_61339",
    "is-hovered": "_is-hovered_61339",
    "spectrum-Textfield--valid": "_spectrum-Textfield--valid_61339",
    "spectrum-Textfield--invalid": "_spectrum-Textfield--invalid_61339",
    "spectrum-Textfield--loadable": "_spectrum-Textfield--loadable_61339",
    "spectrum-Textfield-validationIcon": "_spectrum-Textfield-validationIcon_61339",
    "spectrum-Textfield-icon": "_spectrum-Textfield-icon_61339",
    "spectrum-Textfield-inputIcon": "_spectrum-Textfield-inputIcon_61339",
    "spectrum-Textfield-circleLoader": "_spectrum-Textfield-circleLoader_61339",
    "is-focused": "_is-focused_61339",
    "focus-ring": "_focus-ring_61339",
    "is-disabled": "_is-disabled_61339"
};
var $d6ccebc39ce6c9807064e14b8824ec$$interop$default = $parcel$interopDefault($d6ccebc39ce6c9807064e14b8824ec$exports);
var $a0bedb1888ff92cb3407d1a60d76e$$interop$default = $parcel$interopDefault($a0bedb1888ff92cb3407d1a60d76e$exports);
function $e7a3dfeb4bff45d199cec4325445e2$var$TextFieldBase(props, ref) {
    props = useProviderProps(props);
    props = useFormProps(props);
    let { label , labelPosition ='top' , labelAlign , isRequired , necessityIndicator , validationState , icon , isQuiet =false , isDisabled , multiLine , autoFocus , inputClassName , wrapperChildren , labelProps , inputProps , inputRef , isLoading , loadingIndicator , validationIconClassName  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "label",
        "labelPosition",
        "labelAlign",
        "isRequired",
        "necessityIndicator",
        "validationState",
        "icon",
        "isQuiet",
        "isDisabled",
        "multiLine",
        "autoFocus",
        "inputClassName",
        "wrapperChildren",
        "labelProps",
        "inputProps",
        "inputRef",
        "isLoading",
        "loadingIndicator",
        "validationIconClassName"
    ]);
    let { hoverProps , isHovered  } = useHover({
        isDisabled
    });
    let domRef = useRef(null);
    let defaultInputRef = useRef(null);
    inputRef = inputRef || defaultInputRef; // Expose imperative interface for ref
    useImperativeHandle(ref, ()=>_babelRuntimeHelpersExtends({
        }, createFocusableRef(domRef, inputRef), {
            select () {
                if (inputRef.current) inputRef.current.select();
            },
            getInputElement () {
                return inputRef.current;
            }
        })
    );
    let { styleProps  } = useStyleProps(otherProps);
    let ElementType = multiLine ? 'textarea' : 'input';
    let isInvalid = validationState === 'invalid';
    if (icon) {
        let UNSAFE_className = classNames($d6ccebc39ce6c9807064e14b8824ec$$interop$default, icon.props && icon.props.UNSAFE_className, 'spectrum-Textfield-icon');
        icon = /*#__PURE__*/ cloneElement(icon, {
            UNSAFE_className,
            size: 'S'
        });
    }
    let validationIcon = isInvalid ? /*#__PURE__*/ _react.createElement(_spectrumIconsUiAlertMedium, null) : /*#__PURE__*/ _react.createElement(_spectrumIconsUiCheckmarkMedium, null);
    let validation = /*#__PURE__*/ cloneElement(validationIcon, {
        UNSAFE_className: classNames($d6ccebc39ce6c9807064e14b8824ec$$interop$default, 'spectrum-Textfield-validationIcon', validationIconClassName)
    });
    let textField = /*#__PURE__*/ _react.createElement("div", {
        className: classNames($d6ccebc39ce6c9807064e14b8824ec$$interop$default, 'spectrum-Textfield', {
            'spectrum-Textfield--invalid': isInvalid,
            'spectrum-Textfield--valid': validationState === 'valid',
            'spectrum-Textfield--loadable': loadingIndicator,
            'spectrum-Textfield--quiet': isQuiet,
            'spectrum-Textfield--multiline': multiLine
        })
    }, /*#__PURE__*/ _react.createElement(FocusRing, {
        focusRingClass: classNames($d6ccebc39ce6c9807064e14b8824ec$$interop$default, 'focus-ring'),
        isTextInput: true,
        autoFocus: autoFocus
    }, /*#__PURE__*/ _react.createElement(ElementType, _babelRuntimeHelpersExtends({
    }, mergeProps(inputProps, hoverProps), {
        ref: inputRef,
        rows: multiLine ? 1 : undefined,
        className: classNames($d6ccebc39ce6c9807064e14b8824ec$$interop$default, 'spectrum-Textfield-input', {
            'spectrum-Textfield-inputIcon': icon,
            'is-hovered': isHovered
        }, inputClassName)
    }))), icon, validationState && !isLoading ? validation : null, isLoading && loadingIndicator, wrapperChildren);
    if (label) {
        let labelWrapperClass = classNames($a0bedb1888ff92cb3407d1a60d76e$$interop$default, 'spectrum-Field', {
            'spectrum-Field--positionTop': labelPosition === 'top',
            'spectrum-Field--positionSide': labelPosition === 'side'
        }, styleProps.className);
        textField = /*#__PURE__*/ _react.cloneElement(textField, mergeProps(textField.props, {
            className: classNames($a0bedb1888ff92cb3407d1a60d76e$$interop$default, 'spectrum-Field-field', {
                'spectrum-Field-field--multiline': multiLine
            })
        }));
        return(/*#__PURE__*/ _react.createElement("div", _babelRuntimeHelpersExtends({
        }, styleProps, {
            ref: domRef,
            className: labelWrapperClass
        }), /*#__PURE__*/ _react.createElement(Label, _babelRuntimeHelpersExtends({
        }, labelProps, {
            labelPosition: labelPosition,
            labelAlign: labelAlign,
            isRequired: isRequired,
            necessityIndicator: necessityIndicator
        }), label), textField));
    }
    return(/*#__PURE__*/ _react.cloneElement(textField, mergeProps(textField.props, _babelRuntimeHelpersExtends({
    }, styleProps, {
        ref: domRef
    }))));
}
const TextFieldBase = /*#__PURE__*/ forwardRef($e7a3dfeb4bff45d199cec4325445e2$var$TextFieldBase);
exports.TextFieldBase = TextFieldBase;
function $b063c3295c2860c57a7ba2b2561c3d34$var$TextArea(props, ref) {
    props = useProviderProps(props);
    let { isDisabled =false , isQuiet =false , isReadOnly =false , isRequired =false , onChange  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "isDisabled",
        "isQuiet",
        "isReadOnly",
        "isRequired",
        "onChange"
    ]); // not in stately because this is so we know when to re-measure, which is a spectrum design
    let [inputValue, setInputValue] = useControlledState(props.value, props.defaultValue, ()=>{
    });
    let inputRef = useRef();
    let onHeightChange = useCallback(()=>{
        if (isQuiet) {
            let input = inputRef.current;
            let prevAlignment = input.style.alignSelf;
            input.style.alignSelf = 'start';
            input.style.height = 'auto';
            input.style.height = input.scrollHeight + "px";
            input.style.alignSelf = prevAlignment;
        }
    }, [
        isQuiet,
        inputRef
    ]);
    useLayoutEffect(()=>{
        if (inputRef.current) onHeightChange();
    }, [
        onHeightChange,
        inputValue,
        inputRef
    ]);
    let { labelProps , inputProps  } = useTextField(_babelRuntimeHelpersExtends({
    }, props, {
        onChange: chain(onChange, setInputValue),
        inputElementType: 'textarea'
    }), inputRef);
    return(/*#__PURE__*/ _react.createElement(TextFieldBase, _babelRuntimeHelpersExtends({
    }, otherProps, {
        ref: ref,
        inputRef: inputRef,
        labelProps: labelProps,
        inputProps: inputProps,
        multiLine: true,
        isDisabled: isDisabled,
        isQuiet: isQuiet,
        isReadOnly: isReadOnly,
        isRequired: isRequired
    })));
}
/**
 * TextAreas are multiline text inputs, useful for cases where users have
 * a sizable amount of text to enter. They allow for all customizations that
 * are available to text fields.
 */ let TextArea = /*#__PURE__*/ _react.forwardRef($b063c3295c2860c57a7ba2b2561c3d34$var$TextArea);
exports.TextArea = TextArea;
function $db9dd8b68ff637ff703d9fd0385e7$var$TextField(props, ref) {
    props = useProviderProps(props);
    let inputRef = useRef();
    let { labelProps , inputProps  } = useTextField(props, inputRef);
    return(/*#__PURE__*/ _react.createElement(TextFieldBase, _babelRuntimeHelpersExtends({
    }, props, {
        labelProps: labelProps,
        inputProps: inputProps,
        ref: ref,
        inputRef: inputRef
    })));
}
/**
 * TextFields are text inputs that allow users to input custom text entries
 * with a keyboard. Various decorations can be displayed around the field to
 * communicate the entry requirements.
 */ const TextField = /*#__PURE__*/ forwardRef($db9dd8b68ff637ff703d9fd0385e7$var$TextField);
exports.TextField = TextField;

},{"@react-aria/textfield":"4AjqK","@react-stately/utils":"7ILZk","@react-spectrum/provider":"3Y6zE","@react-aria/interactions":"3irYN","@react-spectrum/form":"6qmvm","@react-spectrum/label":"4HKfm","@react-aria/focus":"76fMY","@react-spectrum/utils":"7ch5A","@spectrum-icons/ui/CheckmarkMedium":"6ue5E","@spectrum-icons/ui/AlertMedium":"3zVMj","react":"a6qBW","@react-aria/utils":"d8qxy","@babel/runtime/helpers/objectWithoutPropertiesLoose":"5byko","@babel/runtime/helpers/extends":"5xz6u","./main.css":"2FWwn"}],"2FWwn":[function() {},{}],"6kPp1":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = Remove;
var _Remove = require("@adobe/react-spectrum-workflow/dist/Remove");
var _icon = require("@react-spectrum/icon");
var _react = _interopRequireDefault(require("react"));
function Remove(props) {
    return(/*#__PURE__*/ _react.default.createElement(_icon.Icon, props, /*#__PURE__*/ _react.default.createElement(_Remove.A4uRemove, null)));
}

},{"@babel/runtime/helpers/interopRequireDefault":"5TvsK","@adobe/react-spectrum-workflow/dist/Remove":"1Igui","@react-spectrum/icon":"5ij4g","react":"a6qBW"}],"1Igui":[function(require,module,exports) {
/**
* @adobe/react-spectrum-workflow (c) by Adobe
* 
* @adobe/react-spectrum-workflow is licensed under a
* Creative Commons Attribution-NoDerivatives 4.0 International License.
* 
* You should have received a copy of the license along with this
* work. If not, see <http://creativecommons.org/licenses/by-nd/4.0/>.
**/ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.A4uRemove = A4uRemove;
var _react = _interopRequireDefault(require("react"));
var _util = require("./util");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutProperties(source, excluded) {
    if (source == null) return {
    };
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function A4uRemove(_ref) {
    var _ref$scale = _ref.scale, scale = _ref$scale === void 0 ? 'M' : _ref$scale, _ref$color = _ref.color, color = _ref$color === void 0 ? 'LIGHT' : _ref$color, props = _objectWithoutProperties(_ref, [
        "scale",
        "color"
    ]);
    return _react["default"].createElement("svg", _extends({
        viewBox: _util.viewBoxes[scale]
    }, props, props), _react["default"].createElement("rect", {
        height: 4,
        rx: 1,
        ry: 1,
        width: 24,
        x: 6,
        y: 16
    }));
}

},{"react":"a6qBW","./util":"4bMhm"}],"2bjrE":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = ChevronUpSmall;
var _ChevronUpSmall = require("@adobe/react-spectrum-ui/dist/ChevronUpSmall");
var _icon = require("@react-spectrum/icon");
var _react = _interopRequireDefault(require("react"));
function ChevronUpSmall(props) {
    return(/*#__PURE__*/ _react.default.createElement(_icon.UIIcon, props, /*#__PURE__*/ _react.default.createElement(_ChevronUpSmall.ChevronUpSmall, null)));
}

},{"@babel/runtime/helpers/interopRequireDefault":"5TvsK","@adobe/react-spectrum-ui/dist/ChevronUpSmall":"18pGi","@react-spectrum/icon":"5ij4g","react":"a6qBW"}],"18pGi":[function(require,module,exports) {
/**
* @adobe/react-spectrum-ui (c) by Adobe
* 
* @adobe/react-spectrum-ui is licensed under a
* Creative Commons Attribution-NoDerivatives 4.0 International License.
* 
* You should have received a copy of the license along with this
* work. If not, see <http://creativecommons.org/licenses/by-nd/4.0/>.
**/ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ChevronUpSmall = ChevronUpSmall;
var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutProperties(source, excluded) {
    if (source == null) return {
    };
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function ChevronUpSmall(_ref) {
    var _ref$scale = _ref.scale, scale = _ref$scale === void 0 ? 'M' : _ref$scale, props = _objectWithoutProperties(_ref, [
        "scale"
    ]);
    return _react["default"].createElement("svg", _extends({
    }, props, props), scale === 'L' && _react["default"].createElement("path", {
        d: "M5 1a.747.747 0 0 0-.53.22L.23 5.46a.75.75 0 1 0 1.06 1.06L5 2.81l3.71 3.71a.75.75 0 1 0 1.06-1.06L5.53 1.22A.747.747 0 0 0 5 1z"
    }), scale === 'M' && _react["default"].createElement("path", {
        d: "M4 .5a.747.747 0 0 0-.53.22C2.862 1.297 1.5 2.758.23 3.96a.75.75 0 1 0 1.06 1.06L4 2.31l2.71 2.71a.75.75 0 1 0 1.06-1.06L4.53.72A.747.747 0 0 0 4 .5z"
    }));
}
ChevronUpSmall.displayName = 'ChevronUpSmall';

},{"react":"a6qBW"}],"5oTGx":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = ChevronDownSmall;
var _ChevronDownSmall = require("@adobe/react-spectrum-ui/dist/ChevronDownSmall");
var _icon = require("@react-spectrum/icon");
var _react = _interopRequireDefault(require("react"));
function ChevronDownSmall(props) {
    return(/*#__PURE__*/ _react.default.createElement(_icon.UIIcon, props, /*#__PURE__*/ _react.default.createElement(_ChevronDownSmall.ChevronDownSmall, null)));
}

},{"@babel/runtime/helpers/interopRequireDefault":"5TvsK","@adobe/react-spectrum-ui/dist/ChevronDownSmall":"7kxbc","@react-spectrum/icon":"5ij4g","react":"a6qBW"}],"7kxbc":[function(require,module,exports) {
/**
* @adobe/react-spectrum-ui (c) by Adobe
* 
* @adobe/react-spectrum-ui is licensed under a
* Creative Commons Attribution-NoDerivatives 4.0 International License.
* 
* You should have received a copy of the license along with this
* work. If not, see <http://creativecommons.org/licenses/by-nd/4.0/>.
**/ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ChevronDownSmall = ChevronDownSmall;
var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutProperties(source, excluded) {
    if (source == null) return {
    };
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function ChevronDownSmall(_ref) {
    var _ref$scale = _ref.scale, scale = _ref$scale === void 0 ? 'M' : _ref$scale, props = _objectWithoutProperties(_ref, [
        "scale"
    ]);
    return _react["default"].createElement("svg", _extends({
    }, props, props), scale === 'L' && _react["default"].createElement("path", {
        d: "M5 7a.747.747 0 0 0 .53-.22l4.24-4.24a.75.75 0 1 0-1.06-1.06L5 5.19 1.29 1.48A.75.75 0 1 0 .23 2.54l4.24 4.24A.747.747 0 0 0 5 7z"
    }), scale === 'M' && _react["default"].createElement("path", {
        d: "M4 5.5a.747.747 0 0 0 .53-.22c.607-.577 1.97-2.038 3.24-3.24A.75.75 0 1 0 6.71.98L4 3.69 1.29.98A.75.75 0 1 0 .23 2.04l3.24 3.24A.747.747 0 0 0 4 5.5z"
    }));
}
ChevronDownSmall.displayName = 'ChevronDownSmall';

},{"react":"a6qBW"}],"6mgrK":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = Add;
var _Add = require("@adobe/react-spectrum-workflow/dist/Add");
var _icon = require("@react-spectrum/icon");
var _react = _interopRequireDefault(require("react"));
function Add(props) {
    return(/*#__PURE__*/ _react.default.createElement(_icon.Icon, props, /*#__PURE__*/ _react.default.createElement(_Add.A4uAdd, null)));
}

},{"@babel/runtime/helpers/interopRequireDefault":"5TvsK","@adobe/react-spectrum-workflow/dist/Add":"7bGKL","@react-spectrum/icon":"5ij4g","react":"a6qBW"}],"7bGKL":[function(require,module,exports) {
/**
* @adobe/react-spectrum-workflow (c) by Adobe
* 
* @adobe/react-spectrum-workflow is licensed under a
* Creative Commons Attribution-NoDerivatives 4.0 International License.
* 
* You should have received a copy of the license along with this
* work. If not, see <http://creativecommons.org/licenses/by-nd/4.0/>.
**/ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.A4uAdd = A4uAdd;
var _react = _interopRequireDefault(require("react"));
var _util = require("./util");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutProperties(source, excluded) {
    if (source == null) return {
    };
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function A4uAdd(_ref) {
    var _ref$scale = _ref.scale, scale = _ref$scale === void 0 ? 'M' : _ref$scale, _ref$color = _ref.color, color = _ref$color === void 0 ? 'LIGHT' : _ref$color, props = _objectWithoutProperties(_ref, [
        "scale",
        "color"
    ]);
    return _react["default"].createElement("svg", _extends({
        viewBox: _util.viewBoxes[scale]
    }, props, props), _react["default"].createElement("path", {
        d: "M29 16h-9V7a1 1 0 0 0-1-1h-2a1 1 0 0 0-1 1v9H7a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h9v9a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1v-9h9a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1z"
    }));
}

},{"react":"a6qBW","./util":"4bMhm"}],"4oNvI":[function() {},{}],"2BPJK":[function(require,module,exports) {
var { useSelectState  } = require("@react-stately/select");
var { useProvider , useProviderProps  } = require("@react-spectrum/provider");
var { useMessageFormatter  } = require("@react-aria/i18n");
var { useFormProps  } = require("@react-spectrum/form");
var { Text: Text1  } = require("@react-spectrum/text");
var _react2 = require("react");
var _react = $parcel$interopDefault(_react2);
var { useCallback , useRef , useState  } = _react2;
var { ProgressCircle  } = require("@react-spectrum/progress");
var { PressResponder , useHover  } = require("@react-aria/interactions");
var { Popover , Tray  } = require("@react-spectrum/overlays");
var { mergeProps , useLayoutEffect , useResizeObserver  } = require("@react-aria/utils");
var { ListBoxBase , useListBoxLayout  } = require("@react-spectrum/listbox");
var { Label  } = require("@react-spectrum/label");
var { HiddenSelect , useSelect  } = require("@react-aria/select");
var { FocusScope  } = require("@react-aria/focus");
var { FieldButton  } = require("@react-spectrum/button");
var { DismissButton , useOverlayPosition  } = require("@react-aria/overlays");
var { classNames , dimensionValue , SlotProvider , useDOMRef , useIsMobileDevice , useStyleProps , useUnwrapDOMRef  } = require("@react-spectrum/utils");
var _spectrumIconsUiChevronDownMedium = $parcel$interopDefault(require("@spectrum-icons/ui/ChevronDownMedium"));
var _spectrumIconsUiAlertMedium = $parcel$interopDefault(require("@spectrum-icons/ui/AlertMedium"));
var _babelRuntimeHelpersInteropRequireDefault = $parcel$interopDefault(require("@babel/runtime/helpers/interopRequireDefault"));
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
var { Item , Section  } = require("@react-stately/collections");
exports.Section = Section;
exports.Item = Item;
require("./main.css");
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/fieldlabel/vars.css
var $a0bedb1888ff92cb3407d1a60d76e$exports = {
};
$a0bedb1888ff92cb3407d1a60d76e$exports = {
    "spectrum-FieldLabel": "_spectrum-FieldLabel_36b9b",
    "spectrum-FieldLabel--positionSide": "_spectrum-FieldLabel--positionSide_36b9b",
    "spectrum-FieldLabel-requiredIcon": "_spectrum-FieldLabel-requiredIcon_36b9b",
    "spectrum-FieldLabel--alignEnd": "_spectrum-FieldLabel--alignEnd_36b9b",
    "spectrum-Field": "_spectrum-Field_36b9b",
    "spectrum-Field--positionTop": "_spectrum-Field--positionTop_36b9b",
    "spectrum-Field-field": "_spectrum-Field-field_36b9b",
    "spectrum-Field-field--multiline": "_spectrum-Field-field--multiline_36b9b",
    "spectrum-Field--positionSide": "_spectrum-Field--positionSide_36b9b",
    "spectrum-Form": "_spectrum-Form_36b9b",
    "spectrum-Form--positionSide": "_spectrum-Form--positionSide_36b9b",
    "spectrum-Form--positionTop": "_spectrum-Form--positionTop_36b9b",
    "spectrum-Form-itemLabel": "_spectrum-Form-itemLabel_36b9b",
    "is-disabled": "_is-disabled_36b9b"
};
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/dropdown/vars.css
var $ff28cc3f8ffd4fdf5aa9663ba31df99a$exports = {
};
$ff28cc3f8ffd4fdf5aa9663ba31df99a$exports = {
    "spectrum-Dropdown": "_spectrum-Dropdown_06fc4",
    "spectrum-Dropdown-chevron": "_spectrum-Dropdown-chevron_06fc4",
    "spectrum-Dropdown-trigger": "_spectrum-Dropdown-trigger_06fc4",
    "spectrum-Dropdown-label": "_spectrum-Dropdown-label_06fc4",
    "is-placeholder": "_is-placeholder_06fc4",
    "spectrum-Icon": "_spectrum-Icon_06fc4",
    "spectrum-Dropdown-invalidIcon": "_spectrum-Dropdown-invalidIcon_06fc4",
    "spectrum-Dropdown-progressCircle": "_spectrum-Dropdown-progressCircle_06fc4",
    "spectrum-Dropdown--quiet": "_spectrum-Dropdown--quiet_06fc4",
    "spectrum-Dropdown-popover--quiet": "_spectrum-Dropdown-popover--quiet_06fc4",
    "spectrum-Field": "_spectrum-Field_06fc4",
    "spectrum-Dropdown-fieldWrapper--quiet": "_spectrum-Dropdown-fieldWrapper--quiet_06fc4",
    "spectrum-Dropdown-fieldWrapper--positionSide": "_spectrum-Dropdown-fieldWrapper--positionSide_06fc4",
    "is-hovered": "_is-hovered_06fc4",
    "is-selected": "_is-selected_06fc4",
    "is-invalid": "_is-invalid_06fc4",
    "is-disabled": "_is-disabled_06fc4",
    "focus-ring": "_focus-ring_06fc4"
};
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/picker/intl/ar-AE.json
var $d19a4a4ecddce78a56644d64bee4bb6$exports = {
};
$d19a4a4ecddce78a56644d64bee4bb6$exports = JSON.parse("{\"loading\":\"جار التحميل...\",\"placeholder\":\"حدد خيارًا...\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/picker/intl/bg-BG.json
var $e24be3597e95f5f684df11ff83f$exports = {
};
$e24be3597e95f5f684df11ff83f$exports = JSON.parse("{\"loading\":\"Зареждане...\",\"placeholder\":\"Изберете опция\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/picker/intl/cs-CZ.json
var $ce46f31e9c28cd082cef613d2caf39$exports = {
};
$ce46f31e9c28cd082cef613d2caf39$exports = JSON.parse("{\"loading\":\"Načítání...\",\"placeholder\":\"Vyberte vhodnou možnost...\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/picker/intl/da-DK.json
var $b28e8ad20c759e59ec4dabc69d28466$exports = {
};
$b28e8ad20c759e59ec4dabc69d28466$exports = JSON.parse("{\"loading\":\"Indlæser ...\",\"placeholder\":\"Vælg en mulighed ...\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/picker/intl/de-DE.json
var $ba583f48236bc33f4b5befa1b5c3a9$exports = {
};
$ba583f48236bc33f4b5befa1b5c3a9$exports = JSON.parse("{\"loading\":\"Laden...\",\"placeholder\":\"Option auswählen...\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/picker/intl/el-GR.json
var $ed2bc749505ce0b05f3f513eb6c027$exports = {
};
$ed2bc749505ce0b05f3f513eb6c027$exports = JSON.parse("{\"loading\":\"Φόρτωση...\",\"placeholder\":\"Επιλέξτε…\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/picker/intl/en-US.json
var $bb1264344ffba09b5bf4074d1f1f9d1$exports = {
};
$bb1264344ffba09b5bf4074d1f1f9d1$exports = JSON.parse("{\"placeholder\":\"Select an option…\",\"loading\":\"Loading…\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/picker/intl/es-ES.json
var $f4b5ee4327eabfd4b828abc1c7613942$exports = {
};
$f4b5ee4327eabfd4b828abc1c7613942$exports = JSON.parse("{\"loading\":\"Cargando…\",\"placeholder\":\"Seleccione una opción…\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/picker/intl/et-EE.json
var $cf54a06a1d25ab5080b077b532728feb$exports = {
};
$cf54a06a1d25ab5080b077b532728feb$exports = JSON.parse("{\"loading\":\"Laadimine...\",\"placeholder\":\"Valige valikuline...\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/picker/intl/fi-FI.json
var $c8c8b5e706a11a864a6994b8143f$exports = {
};
$c8c8b5e706a11a864a6994b8143f$exports = JSON.parse("{\"loading\":\"Ladataan…\",\"placeholder\":\"Valitse vaihtoehto...\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/picker/intl/fr-FR.json
var $a66e736b20cf75a9a20cf165c48e$exports = {
};
$a66e736b20cf75a9a20cf165c48e$exports = JSON.parse("{\"loading\":\"Chargement...\",\"placeholder\":\"Sélectionnez une option...\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/picker/intl/he-IL.json
var $d69bf3be14bb64872ca0002d13f53919$exports = {
};
$d69bf3be14bb64872ca0002d13f53919$exports = JSON.parse("{\"loading\":\"טוען...\",\"placeholder\":\"בחר אפשרות...\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/picker/intl/hr-HR.json
var $fa1a4dd8fc34d3c06a44aa4d7c34$exports = {
};
$fa1a4dd8fc34d3c06a44aa4d7c34$exports = JSON.parse("{\"loading\":\"Učitavam...\",\"placeholder\":\"Odaberite opciju\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/picker/intl/hu-HU.json
var $d9ee670a23fafa0ab7292078c954146b$exports = {
};
$d9ee670a23fafa0ab7292078c954146b$exports = JSON.parse("{\"loading\":\"Betöltés folyamatban…\",\"placeholder\":\"Válasszon egy opciót…\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/picker/intl/it-IT.json
var $f1600a8f36cde6c0517193b58d053ed$exports = {
};
$f1600a8f36cde6c0517193b58d053ed$exports = JSON.parse("{\"loading\":\"Caricamento...\",\"placeholder\":\"Seleziona un’opzione...\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/picker/intl/ja-JP.json
var $b13e2e0914c4fd66ae373ad1cf7f3bf$exports = {
};
$b13e2e0914c4fd66ae373ad1cf7f3bf$exports = JSON.parse("{\"loading\":\"読み込み中...\",\"placeholder\":\"オプションを選択...\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/picker/intl/ko-KR.json
var $d8d113da2a7dc868cee2f435b63d3297$exports = {
};
$d8d113da2a7dc868cee2f435b63d3297$exports = JSON.parse("{\"loading\":\"로드 중\",\"placeholder\":\"선택 사항 선택\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/picker/intl/lt-LT.json
var $ee6c2fbbe004227127f567a03f1a01f1$exports = {
};
$ee6c2fbbe004227127f567a03f1a01f1$exports = JSON.parse("{\"loading\":\"Įkeliama...\",\"placeholder\":\"Pasirinkite parinktį...\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/picker/intl/lv-LV.json
var $d6d33e14bd72f8bba05e3e961243$exports = {
};
$d6d33e14bd72f8bba05e3e961243$exports = JSON.parse("{\"loading\":\"Notiek ielāde...\",\"placeholder\":\"Atlasiet opciju...\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/picker/intl/nb-NO.json
var $d2d83b6708f9c1e431d00178d31a60f$exports = {
};
$d2d83b6708f9c1e431d00178d31a60f$exports = JSON.parse("{\"loading\":\"Laster inn ...\",\"placeholder\":\"Velg et alternativ...\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/picker/intl/nl-NL.json
var $f9465282eb478fd2bd11d32897b05$exports = {
};
$f9465282eb478fd2bd11d32897b05$exports = JSON.parse("{\"loading\":\"Laden...\",\"placeholder\":\"Optie selecteren...\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/picker/intl/pl-PL.json
var $c51802087875260e91cc82101878c14$exports = {
};
$c51802087875260e91cc82101878c14$exports = JSON.parse("{\"loading\":\"Ładowanie...\",\"placeholder\":\"Wybierz opcję...\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/picker/intl/pt-BR.json
var $cc70ce2b9be9d70389c58b22e804d0a8$exports = {
};
$cc70ce2b9be9d70389c58b22e804d0a8$exports = JSON.parse("{\"loading\":\"Carregando...\",\"placeholder\":\"Selecione uma opção...\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/picker/intl/pt-PT.json
var $f23f80ebe6d5d560e65ad3a7bc0a8d$exports = {
};
$f23f80ebe6d5d560e65ad3a7bc0a8d$exports = JSON.parse("{\"loading\":\"A carregar...\",\"placeholder\":\"Selecionar uma opção...\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/picker/intl/ro-RO.json
var $e3ab6a24c3af399d8a96c900290d9$exports = {
};
$e3ab6a24c3af399d8a96c900290d9$exports = JSON.parse("{\"loading\":\"Se încarcă...\",\"placeholder\":\"Selectați o opțiune\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/picker/intl/ru-RU.json
var $eb9e68b44dfb5fc2b00ee39e37d8fbda$exports = {
};
$eb9e68b44dfb5fc2b00ee39e37d8fbda$exports = JSON.parse("{\"loading\":\"Загрузка...\",\"placeholder\":\"Выбрать параметр...\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/picker/intl/sk-SK.json
var $d6573640a469b66fcb19b878c7a34$exports = {
};
$d6573640a469b66fcb19b878c7a34$exports = JSON.parse("{\"loading\":\"Načítava sa...\",\"placeholder\":\"Vyberte možnosť...\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/picker/intl/sl-SI.json
var $b0c76fc1ca63a2e6c3be4e294ea959e9$exports = {
};
$b0c76fc1ca63a2e6c3be4e294ea959e9$exports = JSON.parse("{\"loading\":\"Nalaganje...\",\"placeholder\":\"Izberite možnost\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/picker/intl/sr-SP.json
var $f77a6d9b0f30c0a8505b66ac5$exports = {
};
$f77a6d9b0f30c0a8505b66ac5$exports = JSON.parse("{\"loading\":\"Učitavam...\",\"placeholder\":\"Izaberite opciju\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/picker/intl/sv-SE.json
var $aad7245fd57a2e632331f24f8922aa9d$exports = {
};
$aad7245fd57a2e632331f24f8922aa9d$exports = JSON.parse("{\"loading\":\"Läser in...\",\"placeholder\":\"Välj ett alternativ...\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/picker/intl/tr-TR.json
var $c682e84430c89038e947632c77f8c4b$exports = {
};
$c682e84430c89038e947632c77f8c4b$exports = JSON.parse("{\"loading\":\"Yükleniyor...\",\"placeholder\":\"Bir seçim yapın…\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/picker/intl/uk-UA.json
var $d2b2d610401b4d207ea3fe4675906eb6$exports = {
};
$d2b2d610401b4d207ea3fe4675906eb6$exports = JSON.parse("{\"loading\":\"Завантаження…\",\"placeholder\":\"Виберіть опцію...\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/picker/intl/zh-CN.json
var $baadf47714021551afb5a83775fdb3a5$exports = {
};
$baadf47714021551afb5a83775fdb3a5$exports = JSON.parse("{\"loading\":\"正在加载...\",\"placeholder\":\"选择一个选项...\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/picker/intl/zh-TW.json
var $b5138dbae2fedca8896d726bdd689373$exports = {
};
$b5138dbae2fedca8896d726bdd689373$exports = JSON.parse("{\"loading\":\"正在載入\",\"placeholder\":\"選取一個選項\"}");
// @ts-ignore
const $c320301e25b8b10590c0ecf8fe1539f$var$intlMessages = {
    "ar-AE": _babelRuntimeHelpersInteropRequireDefault($d19a4a4ecddce78a56644d64bee4bb6$exports).default,
    "bg-BG": _babelRuntimeHelpersInteropRequireDefault($e24be3597e95f5f684df11ff83f$exports).default,
    "cs-CZ": _babelRuntimeHelpersInteropRequireDefault($ce46f31e9c28cd082cef613d2caf39$exports).default,
    "da-DK": _babelRuntimeHelpersInteropRequireDefault($b28e8ad20c759e59ec4dabc69d28466$exports).default,
    "de-DE": _babelRuntimeHelpersInteropRequireDefault($ba583f48236bc33f4b5befa1b5c3a9$exports).default,
    "el-GR": _babelRuntimeHelpersInteropRequireDefault($ed2bc749505ce0b05f3f513eb6c027$exports).default,
    "en-US": _babelRuntimeHelpersInteropRequireDefault($bb1264344ffba09b5bf4074d1f1f9d1$exports).default,
    "es-ES": _babelRuntimeHelpersInteropRequireDefault($f4b5ee4327eabfd4b828abc1c7613942$exports).default,
    "et-EE": _babelRuntimeHelpersInteropRequireDefault($cf54a06a1d25ab5080b077b532728feb$exports).default,
    "fi-FI": _babelRuntimeHelpersInteropRequireDefault($c8c8b5e706a11a864a6994b8143f$exports).default,
    "fr-FR": _babelRuntimeHelpersInteropRequireDefault($a66e736b20cf75a9a20cf165c48e$exports).default,
    "he-IL": _babelRuntimeHelpersInteropRequireDefault($d69bf3be14bb64872ca0002d13f53919$exports).default,
    "hr-HR": _babelRuntimeHelpersInteropRequireDefault($fa1a4dd8fc34d3c06a44aa4d7c34$exports).default,
    "hu-HU": _babelRuntimeHelpersInteropRequireDefault($d9ee670a23fafa0ab7292078c954146b$exports).default,
    "it-IT": _babelRuntimeHelpersInteropRequireDefault($f1600a8f36cde6c0517193b58d053ed$exports).default,
    "ja-JP": _babelRuntimeHelpersInteropRequireDefault($b13e2e0914c4fd66ae373ad1cf7f3bf$exports).default,
    "ko-KR": _babelRuntimeHelpersInteropRequireDefault($d8d113da2a7dc868cee2f435b63d3297$exports).default,
    "lt-LT": _babelRuntimeHelpersInteropRequireDefault($ee6c2fbbe004227127f567a03f1a01f1$exports).default,
    "lv-LV": _babelRuntimeHelpersInteropRequireDefault($d6d33e14bd72f8bba05e3e961243$exports).default,
    "nb-NO": _babelRuntimeHelpersInteropRequireDefault($d2d83b6708f9c1e431d00178d31a60f$exports).default,
    "nl-NL": _babelRuntimeHelpersInteropRequireDefault($f9465282eb478fd2bd11d32897b05$exports).default,
    "pl-PL": _babelRuntimeHelpersInteropRequireDefault($c51802087875260e91cc82101878c14$exports).default,
    "pt-BR": _babelRuntimeHelpersInteropRequireDefault($cc70ce2b9be9d70389c58b22e804d0a8$exports).default,
    "pt-PT": _babelRuntimeHelpersInteropRequireDefault($f23f80ebe6d5d560e65ad3a7bc0a8d$exports).default,
    "ro-RO": _babelRuntimeHelpersInteropRequireDefault($e3ab6a24c3af399d8a96c900290d9$exports).default,
    "ru-RU": _babelRuntimeHelpersInteropRequireDefault($eb9e68b44dfb5fc2b00ee39e37d8fbda$exports).default,
    "sk-SK": _babelRuntimeHelpersInteropRequireDefault($d6573640a469b66fcb19b878c7a34$exports).default,
    "sl-SI": _babelRuntimeHelpersInteropRequireDefault($b0c76fc1ca63a2e6c3be4e294ea959e9$exports).default,
    "sr-SP": _babelRuntimeHelpersInteropRequireDefault($f77a6d9b0f30c0a8505b66ac5$exports).default,
    "sv-SE": _babelRuntimeHelpersInteropRequireDefault($aad7245fd57a2e632331f24f8922aa9d$exports).default,
    "tr-TR": _babelRuntimeHelpersInteropRequireDefault($c682e84430c89038e947632c77f8c4b$exports).default,
    "uk-UA": _babelRuntimeHelpersInteropRequireDefault($d2b2d610401b4d207ea3fe4675906eb6$exports).default,
    "zh-CN": _babelRuntimeHelpersInteropRequireDefault($baadf47714021551afb5a83775fdb3a5$exports).default,
    "zh-TW": _babelRuntimeHelpersInteropRequireDefault($b5138dbae2fedca8896d726bdd689373$exports).default
};
var $ff28cc3f8ffd4fdf5aa9663ba31df99a$$interop$default = $parcel$interopDefault($ff28cc3f8ffd4fdf5aa9663ba31df99a$exports);
var $a0bedb1888ff92cb3407d1a60d76e$$interop$default = $parcel$interopDefault($a0bedb1888ff92cb3407d1a60d76e$exports);
function $c320301e25b8b10590c0ecf8fe1539f$var$Picker(props, ref) {
    props = useProviderProps(props);
    props = useFormProps(props);
    let formatMessage = useMessageFormatter($c320301e25b8b10590c0ecf8fe1539f$var$intlMessages);
    let { isDisabled , direction ='bottom' , align ='start' , shouldFlip =true , placeholder =formatMessage('placeholder') , validationState , isQuiet , label , labelPosition ='top' , labelAlign , isRequired , necessityIndicator , menuWidth , name , autoFocus  } = props;
    let { styleProps  } = useStyleProps(props);
    let state = useSelectState(props);
    let domRef = useDOMRef(ref);
    let popoverRef = useRef();
    let unwrappedPopoverRef = useUnwrapDOMRef(popoverRef);
    let triggerRef = useRef();
    let unwrappedTriggerRef = useUnwrapDOMRef(triggerRef);
    let listboxRef = useRef(); // We create the listbox layout in Picker and pass it to ListBoxBase below
    // so that the layout information can be cached even while the listbox is not mounted.
    // We also use the layout as the keyboard delegate for type to select.
    let layout = useListBoxLayout(state);
    let { labelProps , triggerProps , valueProps , menuProps  } = useSelect(_babelRuntimeHelpersExtends({
    }, props, {
        keyboardDelegate: layout
    }), state, unwrappedTriggerRef);
    let isMobile = useIsMobileDevice();
    let { overlayProps , placement , updatePosition  } = useOverlayPosition({
        targetRef: unwrappedTriggerRef,
        overlayRef: unwrappedPopoverRef,
        scrollRef: listboxRef,
        placement: direction + " " + align,
        shouldFlip: shouldFlip,
        isOpen: state.isOpen && !isMobile,
        onClose: state.close
    });
    let { hoverProps , isHovered  } = useHover({
        isDisabled
    }); // Update position once the ListBox has rendered. This ensures that
    // it flips properly when it doesn't fit in the available space.
    // TODO: add ResizeObserver to useOverlayPosition so we don't need this.
    useLayoutEffect(()=>{
        if (state.isOpen) requestAnimationFrame(()=>{
            updatePosition();
        });
    }, [
        state.isOpen,
        updatePosition
    ]);
    let isLoadingInitial = props.isLoading && state.collection.size === 0;
    let isLoadingMore = props.isLoading && state.collection.size > 0; // On small screen devices, the listbox is rendered in a tray, otherwise a popover.
    let listbox = /*#__PURE__*/ _react.createElement(FocusScope, {
        restoreFocus: true
    }, /*#__PURE__*/ _react.createElement(DismissButton, {
        onDismiss: ()=>state.close()
    }), /*#__PURE__*/ _react.createElement(ListBoxBase, {
        ref: listboxRef,
        domProps: menuProps,
        disallowEmptySelection: true,
        autoFocus: state.focusStrategy || true,
        shouldSelectOnPressUp: true,
        focusOnPointerEnter: true,
        layout: layout,
        state: state,
        width: isMobile ? '100%' : undefined,
        UNSAFE_style: {
            maxHeight: 'inherit'
        },
        isLoading: isLoadingMore,
        onLoadMore: props.onLoadMore
    }), /*#__PURE__*/ _react.createElement(DismissButton, {
        onDismiss: ()=>state.close()
    })); // Measure the width of the button to inform the width of the menu (below).
    let [buttonWidth, setButtonWidth] = useState(null);
    let { scale  } = useProvider();
    let onResize = useCallback(()=>{
        if (!isMobile && unwrappedTriggerRef.current) {
            let width = unwrappedTriggerRef.current.offsetWidth;
            setButtonWidth(width);
        }
    }, [
        unwrappedTriggerRef,
        setButtonWidth,
        isMobile
    ]);
    useResizeObserver({
        ref: unwrappedTriggerRef,
        onResize: onResize
    });
    useLayoutEffect(onResize, [
        scale,
        state.selectedKey,
        onResize
    ]);
    let overlay;
    if (isMobile) overlay = /*#__PURE__*/ _react.createElement(Tray, {
        isOpen: state.isOpen,
        onClose: state.close,
        shouldCloseOnBlur: true
    }, listbox);
    else {
        // If quiet, use the default width, otherwise match the width of the button. This can be overridden by the menuWidth prop.
        // Always have a minimum width of the button width. When quiet, there is an extra offset to add.
        // Not using style props for this because they don't support `calc`.
        let width = isQuiet ? null : buttonWidth;
        let style = _babelRuntimeHelpersExtends({
        }, overlayProps.style, {
            width: menuWidth ? dimensionValue(menuWidth) : width,
            minWidth: isQuiet ? "calc(" + buttonWidth + "px + calc(2 * var(--spectrum-dropdown-quiet-offset)))" : buttonWidth
        });
        overlay = /*#__PURE__*/ _react.createElement(Popover, {
            isOpen: state.isOpen,
            UNSAFE_style: style,
            UNSAFE_className: classNames($ff28cc3f8ffd4fdf5aa9663ba31df99a$$interop$default, 'spectrum-Dropdown-popover', {
                'spectrum-Dropdown-popover--quiet': isQuiet
            }),
            ref: popoverRef,
            placement: placement,
            hideArrow: true,
            shouldCloseOnBlur: true,
            onClose: state.close
        }, listbox);
    }
    let contents = state.selectedItem ? state.selectedItem.rendered : placeholder;
    if (typeof contents === 'string') contents = /*#__PURE__*/ _react.createElement(Text1, null, contents);
    let picker = /*#__PURE__*/ _react.createElement("div", {
        className: classNames($ff28cc3f8ffd4fdf5aa9663ba31df99a$$interop$default, 'spectrum-Dropdown', {
            'is-invalid': validationState === 'invalid',
            'is-disabled': isDisabled,
            'spectrum-Dropdown--quiet': isQuiet
        })
    }, /*#__PURE__*/ _react.createElement(HiddenSelect, {
        isDisabled: isDisabled,
        state: state,
        triggerRef: unwrappedTriggerRef,
        label: label,
        name: name
    }), /*#__PURE__*/ _react.createElement(PressResponder, mergeProps(hoverProps, triggerProps), /*#__PURE__*/ _react.createElement(FieldButton, {
        ref: triggerRef,
        isActive: state.isOpen,
        isQuiet: isQuiet,
        isDisabled: isDisabled,
        validationState: validationState,
        autoFocus: autoFocus,
        UNSAFE_className: classNames($ff28cc3f8ffd4fdf5aa9663ba31df99a$$interop$default, 'spectrum-Dropdown-trigger', {
            'is-hovered': isHovered
        })
    }, /*#__PURE__*/ _react.createElement(SlotProvider, {
        slots: {
            icon: {
                UNSAFE_className: classNames($ff28cc3f8ffd4fdf5aa9663ba31df99a$$interop$default, 'spectrum-Icon'),
                size: 'S'
            },
            text: _babelRuntimeHelpersExtends({
            }, valueProps, {
                UNSAFE_className: classNames($ff28cc3f8ffd4fdf5aa9663ba31df99a$$interop$default, 'spectrum-Dropdown-label', {
                    'is-placeholder': !state.selectedItem
                })
            }),
            description: {
                isHidden: true
            }
        }
    }, contents), isLoadingInitial && /*#__PURE__*/ _react.createElement(ProgressCircle, {
        isIndeterminate: true,
        size: "S",
        "aria-label": formatMessage('loading'),
        UNSAFE_className: classNames($ff28cc3f8ffd4fdf5aa9663ba31df99a$$interop$default, 'spectrum-Dropdown-progressCircle')
    }), validationState === 'invalid' && !isLoadingInitial && /*#__PURE__*/ _react.createElement(_spectrumIconsUiAlertMedium, {
        UNSAFE_className: classNames($ff28cc3f8ffd4fdf5aa9663ba31df99a$$interop$default, 'spectrum-Dropdown-invalidIcon')
    }), /*#__PURE__*/ _react.createElement(_spectrumIconsUiChevronDownMedium, {
        UNSAFE_className: classNames($ff28cc3f8ffd4fdf5aa9663ba31df99a$$interop$default, 'spectrum-Dropdown-chevron')
    }))), state.collection.size === 0 ? null : overlay);
    if (label) {
        let labelWrapperClass = classNames($a0bedb1888ff92cb3407d1a60d76e$$interop$default, 'spectrum-Field', {
            'spectrum-Field--positionTop': labelPosition === 'top',
            'spectrum-Field--positionSide': labelPosition === 'side'
        }, classNames($ff28cc3f8ffd4fdf5aa9663ba31df99a$$interop$default, 'spectrum-Field', {
            'spectrum-Dropdown-fieldWrapper--quiet': isQuiet,
            'spectrum-Dropdown-fieldWrapper--positionSide': labelPosition === 'side'
        }), styleProps.className);
        picker = /*#__PURE__*/ _react.cloneElement(picker, mergeProps(picker.props, {
            className: classNames($a0bedb1888ff92cb3407d1a60d76e$$interop$default, 'spectrum-Field-field')
        }));
        return(/*#__PURE__*/ _react.createElement("div", _babelRuntimeHelpersExtends({
        }, styleProps, {
            ref: domRef,
            className: labelWrapperClass
        }), /*#__PURE__*/ _react.createElement(Label, _babelRuntimeHelpersExtends({
        }, labelProps, {
            labelPosition: labelPosition,
            labelAlign: labelAlign,
            isRequired: isRequired,
            necessityIndicator: necessityIndicator,
            includeNecessityIndicatorInAccessibilityName: true,
            elementType: "span"
        }), label), picker));
    }
    return(/*#__PURE__*/ _react.cloneElement(picker, mergeProps(picker.props, _babelRuntimeHelpersExtends({
    }, styleProps, {
        ref: domRef
    }))));
}
/**
 * Pickers allow users to choose a single option from a collapsible list of options when space is limited.
 */ // forwardRef doesn't support generic parameters, so cast the result to the correct type
// https://stackoverflow.com/questions/58469229/react-with-typescript-generics-while-using-react-forwardref
const Picker = /*#__PURE__*/ _react.forwardRef($c320301e25b8b10590c0ecf8fe1539f$var$Picker);
exports.Picker = Picker;

},{"@react-stately/select":"3IzcG","@react-spectrum/provider":"3Y6zE","@react-aria/i18n":"6xZcx","@react-spectrum/form":"6qmvm","@react-spectrum/text":"ib5WK","react":"a6qBW","@react-spectrum/progress":"4593I","@react-aria/interactions":"3irYN","@react-spectrum/overlays":"4hImP","@react-aria/utils":"d8qxy","@react-spectrum/listbox":"2fPzl","@react-spectrum/label":"4HKfm","@react-aria/select":"1sLz5","@react-aria/focus":"76fMY","@react-spectrum/button":"7zChe","@react-aria/overlays":"6I1ei","@react-spectrum/utils":"7ch5A","@spectrum-icons/ui/ChevronDownMedium":"2d2IG","@spectrum-icons/ui/AlertMedium":"3zVMj","@babel/runtime/helpers/interopRequireDefault":"5TvsK","@babel/runtime/helpers/extends":"5xz6u","@react-stately/collections":"4IPbJ","./main.css":"BcfDn"}],"3IzcG":[function(require,module,exports) {
var { useState  } = require("react");
var { useSingleSelectListState  } = require("@react-stately/list");
var { useMenuTriggerState  } = require("@react-stately/menu");
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
/**
 * Provides state management for a select component. Handles building a collection
 * of items from props, handles the open state for the popup menu, and manages
 * multiple selection state.
 */ function useSelectState(props) {
    let triggerState = useMenuTriggerState(props);
    let listState = useSingleSelectListState(_babelRuntimeHelpersExtends({
    }, props, {
        onSelectionChange: (key)=>{
            if (props.onSelectionChange != null) props.onSelectionChange(key);
            triggerState.close();
        }
    }));
    let [isFocused, setFocused] = useState(false);
    return _babelRuntimeHelpersExtends({
    }, listState, triggerState, {
        open () {
            // Don't open if the collection is empty.
            if (listState.collection.size !== 0) triggerState.open();
        },
        toggle (focusStrategy) {
            if (listState.collection.size !== 0) triggerState.toggle(focusStrategy);
        },
        isFocused,
        setFocused
    });
}
exports.useSelectState = useSelectState;

},{"react":"a6qBW","@react-stately/list":"6jXbK","@react-stately/menu":"3UPRC","@babel/runtime/helpers/extends":"5xz6u"}],"1sLz5":[function(require,module,exports) {
var { useVisuallyHidden  } = require("@react-aria/visually-hidden");
var { useMenuTrigger  } = require("@react-aria/menu");
var { useLabel  } = require("@react-aria/label");
var { useCollator  } = require("@react-aria/i18n");
var { setInteractionModality , useInteractionModality  } = require("@react-aria/interactions");
var { ListKeyboardDelegate , useTypeSelect  } = require("@react-aria/selection");
var _react2 = require("react");
var _react = $parcel$interopDefault(_react2);
var { useMemo  } = _react2;
var { chain , filterDOMProps , mergeProps , useId  } = require("@react-aria/utils");
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
/**
 * Provides the behavior and accessibility implementation for a select component.
 * A select displays a collapsible list of options and allows a user to select one of them.
 * @param props - Props for the select.
 * @param state - State for the select, as returned by `useListState`.
 */ function useSelect(props, state, ref) {
    let { keyboardDelegate , isDisabled  } = props; // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).
    // When virtualized, the layout object will be passed in as a prop and override this.
    let collator = useCollator({
        usage: 'search',
        sensitivity: 'base'
    });
    let delegate = useMemo(()=>keyboardDelegate || new ListKeyboardDelegate(state.collection, state.disabledKeys, null, collator)
    , [
        keyboardDelegate,
        state.collection,
        state.disabledKeys,
        collator
    ]);
    let { menuTriggerProps , menuProps  } = useMenuTrigger({
        isDisabled,
        type: 'listbox'
    }, state, ref);
    let onKeyDown = (e)=>{
        switch(e.key){
            case 'ArrowLeft':
                {
                    // prevent scrolling containers
                    e.preventDefault();
                    let key = state.selectedKey != null ? delegate.getKeyAbove(state.selectedKey) : delegate.getFirstKey();
                    if (key) state.setSelectedKey(key);
                    break;
                }
            case 'ArrowRight':
                {
                    // prevent scrolling containers
                    e.preventDefault();
                    let key = state.selectedKey != null ? delegate.getKeyBelow(state.selectedKey) : delegate.getFirstKey();
                    if (key) state.setSelectedKey(key);
                    break;
                }
        }
    };
    let { typeSelectProps  } = useTypeSelect({
        keyboardDelegate: delegate,
        selectionManager: state.selectionManager,
        onTypeSelect (key) {
            state.setSelectedKey(key);
        }
    });
    let { labelProps , fieldProps  } = useLabel(_babelRuntimeHelpersExtends({
    }, props, {
        labelElementType: 'span'
    }));
    typeSelectProps.onKeyDown = typeSelectProps.onKeyDownCapture;
    delete typeSelectProps.onKeyDownCapture;
    let domProps = filterDOMProps(props, {
        labelable: true
    });
    let triggerProps = mergeProps(typeSelectProps, menuTriggerProps, fieldProps);
    let valueId = useId();
    return {
        labelProps: _babelRuntimeHelpersExtends({
        }, labelProps, {
            onClick: ()=>{
                if (!props.isDisabled) {
                    ref.current.focus(); // Show the focus ring so the user knows where focus went
                    setInteractionModality('keyboard');
                }
            }
        }),
        triggerProps: mergeProps(domProps, _babelRuntimeHelpersExtends({
        }, triggerProps, {
            onKeyDown: chain(triggerProps.onKeyDown, onKeyDown, props.onKeyDown),
            onKeyUp: props.onKeyUp,
            'aria-labelledby': [
                triggerProps['aria-labelledby'],
                triggerProps['aria-label'] && !triggerProps['aria-labelledby'] ? triggerProps.id : null,
                valueId
            ].filter(Boolean).join(' '),
            onFocus (e) {
                if (state.isFocused) return;
                if (props.onFocus) props.onFocus(e);
                state.setFocused(true);
            },
            onBlur (e) {
                if (state.isOpen) return;
                if (props.onBlur) props.onBlur(e);
                state.setFocused(false);
            }
        })),
        valueProps: {
            id: valueId
        },
        menuProps: _babelRuntimeHelpersExtends({
        }, menuProps, {
            onBlur: (e)=>{
                if (e.currentTarget.contains(e.relatedTarget)) return;
                if (props.onBlur) props.onBlur(e);
                state.setFocused(false);
            },
            'aria-labelledby': [
                fieldProps['aria-labelledby'],
                triggerProps['aria-label'] && !fieldProps['aria-labelledby'] ? triggerProps.id : null
            ].filter(Boolean).join(' ')
        })
    };
}
exports.useSelect = useSelect;
/**
 * Provides the behavior and accessibility implementation for a hidden `<select>` element, which
 * can be used in combination with `useSelect` to support browser form autofill, mobile form
 * navigation, and native HTML form submission.
 */ function useHiddenSelect(props, state, triggerRef) {
    var _state$selectedKey;
    let { name , isDisabled  } = props;
    let modality = useInteractionModality();
    let { visuallyHiddenProps  } = useVisuallyHidden(); // In Safari, the <select> cannot have `display: none` or `hidden` for autofill to work.
    // In Firefox, there must be a <label> to identify the <select> whereas other browsers
    // seem to identify it just by surrounding text.
    // The solution is to use <VisuallyHidden> to hide the elements, which clips the elements to a
    // 1px rectangle. In addition, we hide from screen readers with aria-hidden, and make the <select>
    // non tabbable with tabIndex={-1}.
    //
    // In mobile browsers, there are next/previous buttons above the software keyboard for navigating
    // between fields in a form. These only support native form inputs that are tabbable. In order to
    // support those, an additional hidden input is used to marshall focus to the button. It is tabbable
    // except when the button is focused, so that shift tab works properly to go to the actual previous
    // input in the form. Using the <select> for this also works, but Safari on iOS briefly flashes
    // the native menu on focus, so this isn't ideal. A font-size of 16px or greater is required to
    // prevent Safari from zooming in on the input when it is focused.
    //
    // If the current interaction modality is null, then the user hasn't interacted with the page yet.
    // In this case, we set the tabIndex to -1 on the input element so that automated accessibility
    // checkers don't throw false-positives about focusable elements inside an aria-hidden parent.
    return {
        containerProps: _babelRuntimeHelpersExtends({
        }, visuallyHiddenProps, {
            'aria-hidden': true
        }),
        inputProps: {
            type: 'text',
            tabIndex: modality == null || state.isFocused || state.isOpen ? -1 : 0,
            style: {
                fontSize: 16
            },
            onFocus: ()=>triggerRef.current.focus()
            ,
            disabled: isDisabled
        },
        selectProps: {
            tabIndex: -1,
            disabled: isDisabled,
            name,
            size: state.collection.size,
            value: (_state$selectedKey = state.selectedKey) != null ? _state$selectedKey : '',
            onChange: (e)=>state.setSelectedKey(e.target.value)
        }
    };
}
/**
 * Renders a hidden native `<select>` element, which can be used to support browser
 * form autofill, mobile form navigation, and native form submission.
 */ exports.useHiddenSelect = useHiddenSelect;
function HiddenSelect(props) {
    let { state , triggerRef , label , name , isDisabled  } = props;
    let { containerProps , inputProps , selectProps  } = useHiddenSelect(props, state, triggerRef); // If used in a <form>, use a hidden input so the value can be submitted to a server.
    // If the collection isn't too big, use a hidden <select> element for this so that browser
    // autofill will work. Otherwise, use an <input type="hidden">.
    if (state.collection.size <= 300) return(/*#__PURE__*/ _react.createElement("div", containerProps, /*#__PURE__*/ _react.createElement("input", inputProps), /*#__PURE__*/ _react.createElement("label", null, label, /*#__PURE__*/ _react.createElement("select", selectProps, /*#__PURE__*/ _react.createElement("option", null), [
        ...state.collection.getKeys()
    ].map((key)=>{
        let item = state.collection.getItem(key);
        if (item.type === 'item') return(/*#__PURE__*/ _react.createElement("option", {
            key: item.key,
            value: item.key
        }, item.textValue));
    })))));
    else if (name) return(/*#__PURE__*/ _react.createElement("input", {
        type: "hidden",
        name: name,
        disabled: isDisabled,
        value: state.selectedKey
    }));
    return null;
}
exports.HiddenSelect = HiddenSelect;

},{"@react-aria/visually-hidden":"AVm9K","@react-aria/menu":"MJnSy","@react-aria/label":"2pFvL","@react-aria/i18n":"6xZcx","@react-aria/interactions":"3irYN","@react-aria/selection":"3khS7","react":"a6qBW","@react-aria/utils":"d8qxy","@babel/runtime/helpers/extends":"5xz6u"}],"BcfDn":[function() {},{}],"1MQgW":[function(require,module,exports) {
var { useRadioGroupState  } = require("@react-stately/radio");
var { useProviderProps  } = require("@react-spectrum/provider");
var { useFormProps  } = require("@react-spectrum/form");
var { Label  } = require("@react-spectrum/label");
var { useRadio , useRadioGroup  } = require("@react-aria/radio");
var { useHover  } = require("@react-aria/interactions");
var _react2 = require("react");
var _react = $parcel$interopDefault(_react2);
var { forwardRef , useRef , useContext  } = _react2;
var { FocusRing  } = require("@react-aria/focus");
var { classNames , useFocusableRef , useStyleProps , useDOMRef  } = require("@react-spectrum/utils");
var _babelRuntimeHelpersObjectWithoutPropertiesLoose = $parcel$interopDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
require("./main.css");
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/radio/vars.css
var $b50b26895e9d451b27b55d215ff6a51$exports = {
};
$b50b26895e9d451b27b55d215ff6a51$exports = {
    "spectrum-Radio": "_spectrum-Radio_db05c",
    "spectrum-Radio-input": "_spectrum-Radio-input_db05c",
    "spectrum-Radio-button": "_spectrum-Radio-button_db05c",
    "focus-ring": "_focus-ring_db05c",
    "spectrum-Radio-label": "_spectrum-Radio-label_db05c",
    "spectrum-Radio--labelBelow": "_spectrum-Radio--labelBelow_db05c",
    "is-hovered": "_is-hovered_db05c",
    "spectrum-Radio--quiet": "_spectrum-Radio--quiet_db05c",
    "is-invalid": "_is-invalid_db05c"
};
const $dc0e5d54409e9454b207deef7914e49$export$RadioContext = /*#__PURE__*/ _react.createContext(null);
function $dc0e5d54409e9454b207deef7914e49$export$useRadioProvider() {
    return useContext($dc0e5d54409e9454b207deef7914e49$export$RadioContext);
}
var $b50b26895e9d451b27b55d215ff6a51$$interop$default = $parcel$interopDefault($b50b26895e9d451b27b55d215ff6a51$exports);
function $e743ac5588e53ffd4700c60556426f6$var$Radio(props, ref) {
    let { isDisabled , children , autoFocus  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "isDisabled",
        "children",
        "autoFocus"
    ]);
    let { styleProps  } = useStyleProps(otherProps);
    let { hoverProps , isHovered  } = useHover({
        isDisabled
    });
    let inputRef = useRef(null);
    let domRef = useFocusableRef(ref, inputRef);
    let radioGroupProps = $dc0e5d54409e9454b207deef7914e49$export$useRadioProvider();
    let { isEmphasized , validationState , state  } = radioGroupProps;
    let { inputProps  } = useRadio(_babelRuntimeHelpersExtends({
    }, props, radioGroupProps, {
        isDisabled
    }), state, inputRef);
    return(/*#__PURE__*/ _react.createElement("label", _babelRuntimeHelpersExtends({
    }, styleProps, hoverProps, {
        ref: domRef,
        className: classNames($b50b26895e9d451b27b55d215ff6a51$$interop$default, 'spectrum-Radio', {
            // Removing. Pending design feedback.
            // 'spectrum-Radio--labelBelow': labelPosition === 'bottom',
            'spectrum-Radio--quiet': !isEmphasized,
            'is-disabled': isDisabled,
            'is-invalid': validationState === 'invalid',
            'is-hovered': isHovered
        }, styleProps.className)
    }), /*#__PURE__*/ _react.createElement(FocusRing, {
        focusRingClass: classNames($b50b26895e9d451b27b55d215ff6a51$$interop$default, 'focus-ring'),
        autoFocus: autoFocus
    }, /*#__PURE__*/ _react.createElement("input", _babelRuntimeHelpersExtends({
    }, inputProps, {
        ref: inputRef,
        className: classNames($b50b26895e9d451b27b55d215ff6a51$$interop$default, 'spectrum-Radio-input')
    }))), /*#__PURE__*/ _react.createElement("span", {
        className: classNames($b50b26895e9d451b27b55d215ff6a51$$interop$default, 'spectrum-Radio-button')
    }), children && /*#__PURE__*/ _react.createElement("span", {
        className: classNames($b50b26895e9d451b27b55d215ff6a51$$interop$default, 'spectrum-Radio-label')
    }, children)));
}
/**
 * Radio buttons allow users to select a single option from a list of mutually exclusive options.
 * All possible options are exposed up front for users to compare.
 */ const Radio = /*#__PURE__*/ forwardRef($e743ac5588e53ffd4700c60556426f6$var$Radio);
exports.Radio = Radio;
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/fieldlabel/vars.css
var $a0bedb1888ff92cb3407d1a60d76e$exports = {
};
$a0bedb1888ff92cb3407d1a60d76e$exports = {
    "spectrum-FieldLabel": "_spectrum-FieldLabel_36b9b",
    "spectrum-FieldLabel--positionSide": "_spectrum-FieldLabel--positionSide_36b9b",
    "spectrum-FieldLabel-requiredIcon": "_spectrum-FieldLabel-requiredIcon_36b9b",
    "spectrum-FieldLabel--alignEnd": "_spectrum-FieldLabel--alignEnd_36b9b",
    "spectrum-Field": "_spectrum-Field_36b9b",
    "spectrum-Field--positionTop": "_spectrum-Field--positionTop_36b9b",
    "spectrum-Field-field": "_spectrum-Field-field_36b9b",
    "spectrum-Field-field--multiline": "_spectrum-Field-field--multiline_36b9b",
    "spectrum-Field--positionSide": "_spectrum-Field--positionSide_36b9b",
    "spectrum-Form": "_spectrum-Form_36b9b",
    "spectrum-Form--positionSide": "_spectrum-Form--positionSide_36b9b",
    "spectrum-Form--positionTop": "_spectrum-Form--positionTop_36b9b",
    "spectrum-Form-itemLabel": "_spectrum-Form-itemLabel_36b9b",
    "is-disabled": "_is-disabled_36b9b"
};
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/fieldgroup/vars.css
var $ddc491461af2b6836404526ae99891$exports = {
};
$ddc491461af2b6836404526ae99891$exports = {
    "spectrum-FieldGroup": "_spectrum-FieldGroup_8cb9b",
    "spectrum-FieldGroup--positionSide": "_spectrum-FieldGroup--positionSide_8cb9b",
    "spectrum-FieldGroup-group": "_spectrum-FieldGroup-group_8cb9b",
    "spectrum-FieldGroup-group--horizontal": "_spectrum-FieldGroup-group--horizontal_8cb9b"
};
var $ddc491461af2b6836404526ae99891$$interop$default = $parcel$interopDefault($ddc491461af2b6836404526ae99891$exports);
var $a0bedb1888ff92cb3407d1a60d76e$$interop$default = $parcel$interopDefault($a0bedb1888ff92cb3407d1a60d76e$exports);
function $e125f55143423f8d3ecf034e5ae37$var$RadioGroup(props, ref) {
    props = useProviderProps(props);
    props = useFormProps(props);
    let { isEmphasized , isRequired , necessityIndicator , label , labelPosition ='top' , labelAlign , validationState , children , orientation ='vertical'  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "isEmphasized",
        "isRequired",
        "necessityIndicator",
        "label",
        "labelPosition",
        "labelAlign",
        "validationState",
        "children",
        "orientation"
    ]);
    let domRef = useDOMRef(ref);
    let { styleProps  } = useStyleProps(otherProps);
    let state = useRadioGroupState(props);
    let { radioGroupProps , labelProps  } = useRadioGroup(props, state);
    return(/*#__PURE__*/ _react.createElement("div", _babelRuntimeHelpersExtends({
    }, styleProps, radioGroupProps, {
        className: classNames($ddc491461af2b6836404526ae99891$$interop$default, 'spectrum-FieldGroup', {
            'spectrum-FieldGroup--positionSide': labelPosition === 'side'
        }, classNames($a0bedb1888ff92cb3407d1a60d76e$$interop$default, 'spectrum-Field'), styleProps.className),
        ref: domRef
    }), label && /*#__PURE__*/ _react.createElement(Label, _babelRuntimeHelpersExtends({
    }, labelProps, {
        elementType: "span",
        labelPosition: labelPosition,
        labelAlign: labelAlign,
        isRequired: isRequired,
        necessityIndicator: necessityIndicator
    }), label), /*#__PURE__*/ _react.createElement("div", {
        className: classNames($ddc491461af2b6836404526ae99891$$interop$default, 'spectrum-FieldGroup-group', {
            'spectrum-FieldGroup-group--horizontal': orientation === 'horizontal'
        })
    }, /*#__PURE__*/ _react.createElement($dc0e5d54409e9454b207deef7914e49$export$RadioContext.Provider, {
        value: {
            isEmphasized,
            isRequired,
            validationState,
            state
        }
    }, children))));
}
/**
 * Radio groups allow users to select a single option from a list of mutually exclusive options.
 * All possible options are exposed up front for users to compare.
 */ const RadioGroup = /*#__PURE__*/ _react.forwardRef($e125f55143423f8d3ecf034e5ae37$var$RadioGroup);
exports.RadioGroup = RadioGroup;

},{"@react-stately/radio":"1cLe6","@react-spectrum/provider":"3Y6zE","@react-spectrum/form":"6qmvm","@react-spectrum/label":"4HKfm","@react-aria/radio":"4uuIb","@react-aria/interactions":"3irYN","react":"a6qBW","@react-aria/focus":"76fMY","@react-spectrum/utils":"7ch5A","@babel/runtime/helpers/objectWithoutPropertiesLoose":"5byko","@babel/runtime/helpers/extends":"5xz6u","./main.css":"16wZU"}],"1cLe6":[function(require,module,exports) {
var { useMemo , useState  } = require("react");
var { useControlledState  } = require("@react-stately/utils");
let $d0ad1e5f2b737cb6c44a515e014bc7c0$var$instance = Math.round(Math.random() * 10000000000);
let $d0ad1e5f2b737cb6c44a515e014bc7c0$var$i = 0;
/**
 * Provides state management for a radio group component. Provides a name for the group,
 * and manages selection and focus state.
 */ function useRadioGroupState(props) {
    // Preserved here for backward compatibility. React Aria now generates the name instead of stately.
    let name = useMemo(()=>props.name || "radio-group-" + $d0ad1e5f2b737cb6c44a515e014bc7c0$var$instance + "-" + ++$d0ad1e5f2b737cb6c44a515e014bc7c0$var$i
    , [
        props.name
    ]);
    let [selectedValue, setSelected] = useControlledState(props.value, props.defaultValue, props.onChange);
    let [lastFocusedValue, setLastFocusedValue] = useState(null);
    let setSelectedValue = (value)=>{
        if (!props.isReadOnly && !props.isDisabled) setSelected(value);
    };
    return {
        name,
        selectedValue,
        setSelectedValue,
        lastFocusedValue,
        setLastFocusedValue,
        isDisabled: props.isDisabled || false,
        isReadOnly: props.isReadOnly || false
    };
}
exports.useRadioGroupState = useRadioGroupState;

},{"react":"a6qBW","@react-stately/utils":"7ILZk"}],"4uuIb":[function(require,module,exports) {
var { useLocale  } = require("@react-aria/i18n");
var { useLabel  } = require("@react-aria/label");
var { usePress , useFocusWithin  } = require("@react-aria/interactions");
var { useFocusable , getFocusableTreeWalker  } = require("@react-aria/focus");
var { filterDOMProps , mergeProps , useId  } = require("@react-aria/utils");
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ const $d9900fa75ce48f638bc47fd54695f66$export$radioGroupNames = new WeakMap();
/**
 * Provides the behavior and accessibility implementation for an individual
 * radio button in a radio group.
 * @param props - Props for the radio.
 * @param state - State for the radio group, as returned by `useRadioGroupState`.
 * @param ref - Ref to the HTML input element.
 */ function useRadio(props, state, ref) {
    let { value , isRequired , children , 'aria-label': ariaLabel , 'aria-labelledby': ariaLabelledby  } = props;
    const isDisabled = props.isDisabled || state.isDisabled; // Individual radios cannot be readonly
    const isReadOnly = state.isReadOnly;
    let hasChildren = children != null;
    let hasAriaLabel = ariaLabel != null || ariaLabelledby != null;
    if (!hasChildren && !hasAriaLabel) console.warn('If you do not provide children, you must specify an aria-label for accessibility');
    let checked = state.selectedValue === value;
    let onChange = (e)=>{
        e.stopPropagation();
        state.setSelectedValue(value);
    };
    let { pressProps  } = usePress({
        isDisabled
    });
    let { focusableProps  } = useFocusable(mergeProps(props, {
        onFocus: ()=>state.setLastFocusedValue(value)
    }), ref);
    let interactions = mergeProps(pressProps, focusableProps);
    let domProps = filterDOMProps(props, {
        labelable: true
    });
    let tabIndex = state.lastFocusedValue === value || state.lastFocusedValue == null ? 0 : -1;
    if (isDisabled) tabIndex = undefined;
    return {
        inputProps: mergeProps(domProps, _babelRuntimeHelpersExtends({
        }, interactions, {
            type: 'radio',
            name: $d9900fa75ce48f638bc47fd54695f66$export$radioGroupNames.get(state),
            tabIndex,
            disabled: isDisabled,
            'aria-readonly': isReadOnly || undefined,
            required: isRequired,
            checked,
            value,
            onChange
        }))
    };
}
exports.useRadio = useRadio;
/**
 * Provides the behavior and accessibility implementation for a radio group component.
 * Radio groups allow users to select a single item from a list of mutually exclusive options.
 * @param props - Props for the radio group.
 * @param state - State for the radio group, as returned by `useRadioGroupState`.
 */ function useRadioGroup(props, state) {
    let { name , validationState , isReadOnly , isRequired , isDisabled , orientation ='vertical'  } = props;
    let { direction  } = useLocale();
    let { labelProps , fieldProps  } = useLabel(_babelRuntimeHelpersExtends({
    }, props, {
        // Radio group is not an HTML input element so it
        // shouldn't be labeled by a <label> element.
        labelElementType: 'span'
    }));
    let domProps = filterDOMProps(props, {
        labelable: true
    }); // When the radio group loses focus, reset the focusable radio to null if
    // there is no selection. This allows tabbing into the group from either
    // direction to go to the first or last radio.
    let { focusWithinProps  } = useFocusWithin({
        onBlurWithin () {
            if (!state.selectedValue) state.setLastFocusedValue(null);
        }
    });
    let onKeyDown = (e)=>{
        let nextDir;
        switch(e.key){
            case 'ArrowRight':
                if (direction === 'rtl' && orientation !== 'vertical') nextDir = 'prev';
                else nextDir = 'next';
                break;
            case 'ArrowLeft':
                if (direction === 'rtl' && orientation !== 'vertical') nextDir = 'next';
                else nextDir = 'prev';
                break;
            case 'ArrowDown':
                nextDir = 'next';
                break;
            case 'ArrowUp':
                nextDir = 'prev';
                break;
            default:
                return;
        }
        e.preventDefault();
        let walker = getFocusableTreeWalker(e.currentTarget, {
            from: e.target
        });
        let nextElem;
        if (nextDir === 'next') {
            nextElem = walker.nextNode();
            if (!nextElem) {
                walker.currentNode = e.currentTarget;
                nextElem = walker.firstChild();
            }
        } else {
            nextElem = walker.previousNode();
            if (!nextElem) {
                walker.currentNode = e.currentTarget;
                nextElem = walker.lastChild();
            }
        }
        if (nextElem) {
            // Call focus on nextElem so that keyboard navigation scrolls the radio into view
            nextElem.focus();
            state.setSelectedValue(nextElem.value);
        }
    };
    let groupName = useId(name);
    $d9900fa75ce48f638bc47fd54695f66$export$radioGroupNames.set(state, groupName);
    return {
        radioGroupProps: mergeProps(domProps, _babelRuntimeHelpersExtends({
            // https://www.w3.org/TR/wai-aria-1.2/#radiogroup
            role: 'radiogroup',
            onKeyDown,
            'aria-invalid': validationState === 'invalid' || undefined,
            'aria-errormessage': props['aria-errormessage'],
            'aria-readonly': isReadOnly || undefined,
            'aria-required': isRequired || undefined,
            'aria-disabled': isDisabled || undefined,
            'aria-orientation': orientation
        }, fieldProps, focusWithinProps)),
        labelProps
    };
}
exports.useRadioGroup = useRadioGroup;

},{"@react-aria/i18n":"6xZcx","@react-aria/label":"2pFvL","@react-aria/interactions":"3irYN","@react-aria/focus":"76fMY","@react-aria/utils":"d8qxy","@babel/runtime/helpers/extends":"5xz6u"}],"16wZU":[function() {},{}],"6RHG7":[function(require,module,exports) {
var _babelRuntimeHelpersInteropRequireDefault = $parcel$interopDefault(require("@babel/runtime/helpers/interopRequireDefault"));
var { VisuallyHidden  } = require("@react-aria/visually-hidden");
var { useHover  } = require("@react-aria/interactions");
var { FocusRing  } = require("@react-aria/focus");
var { useSlider , useSliderThumb  } = require("@react-aria/slider");
var { useProviderProps  } = require("@react-spectrum/provider");
var { useNumberFormatter , useLocale , useMessageFormatter  } = require("@react-aria/i18n");
var { useSliderState  } = require("@react-stately/slider");
var _react2 = require("react");
var _react = $parcel$interopDefault(_react2);
var { useRef  } = _react2;
var { classNames , useFocusableRef , useStyleProps  } = require("@react-spectrum/utils");
var { clamp , mergeProps  } = require("@react-aria/utils");
var _babelRuntimeHelpersObjectWithoutPropertiesLoose = $parcel$interopDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
require("./main.css");
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/slider/vars.css
var $c8f0b01c76499f8ceef39abc1b587900$exports = {
};
$c8f0b01c76499f8ceef39abc1b587900$exports = {
    "spectrum-Slider": "_spectrum-Slider_48d11",
    "spectrum-Dial": "_spectrum-Dial_48d11",
    "spectrum-Slider--positionTop": "_spectrum-Slider--positionTop_48d11",
    "spectrum-Slider-controls": "_spectrum-Slider-controls_48d11",
    "spectrum-Dial-controls": "_spectrum-Dial-controls_48d11",
    "spectrum-Slider--positionSide": "_spectrum-Slider--positionSide_48d11",
    "spectrum-Slider-labelContainer": "_spectrum-Slider-labelContainer_48d11",
    "spectrum-Dial-labelContainer": "_spectrum-Dial-labelContainer_48d11",
    "spectrum-Slider-valueLabelContainer": "_spectrum-Slider-valueLabelContainer_48d11",
    "spectrum-Slider-value": "_spectrum-Slider-value_48d11",
    "spectrum-Slider-track": "_spectrum-Slider-track_48d11",
    "spectrum-Slider-buffer": "_spectrum-Slider-buffer_48d11",
    "spectrum-Slider-ramp": "_spectrum-Slider-ramp_48d11",
    "spectrum-Slider-fill": "_spectrum-Slider-fill_48d11",
    "spectrum-Slider-fill--right": "_spectrum-Slider-fill--right_48d11",
    "spectrum-Slider--range": "_spectrum-Slider--range_48d11",
    "spectrum-Slider-handle": "_spectrum-Slider-handle_48d11",
    "spectrum-Dial-handle": "_spectrum-Dial-handle_48d11",
    "is-dragged": "_is-dragged_48d11",
    "is-focused": "_is-focused_48d11",
    "is-tophandle": "_is-tophandle_48d11",
    "spectrum-Slider-input": "_spectrum-Slider-input_48d11",
    "spectrum-Dial-input": "_spectrum-Dial-input_48d11",
    "spectrum-Slider-label": "_spectrum-Slider-label_48d11",
    "spectrum-Dial-label": "_spectrum-Dial-label_48d11",
    "spectrum-Dial-value": "_spectrum-Dial-value_48d11",
    "spectrum-Slider-ticks": "_spectrum-Slider-ticks_48d11",
    "spectrum-Slider-tick": "_spectrum-Slider-tick_48d11",
    "spectrum-Slider-tickLabel": "_spectrum-Slider-tickLabel_48d11",
    "spectrum-Slider--color": "_spectrum-Slider--color_48d11",
    "spectrum-Dial--small": "_spectrum-Dial--small_48d11",
    "is-disabled": "_is-disabled_48d11",
    "is-hovered": "_is-hovered_48d11",
    "u-isGrabbing": "_u-isGrabbing_48d11",
    "spectrum-Slider--filled": "_spectrum-Slider--filled_48d11",
    "spectrum-Slider--ramp": "_spectrum-Slider--ramp_48d11",
    "spectrum-Slider--label-side": "_spectrum-Slider--label-side_48d11"
};
var $c8f0b01c76499f8ceef39abc1b587900$$interop$default = $parcel$interopDefault($c8f0b01c76499f8ceef39abc1b587900$exports);
function $e14249f20430d37bc9376d3f2ea9af72$var$SliderBase(props, ref) {
    props = useProviderProps(props);
    let { isDisabled , children , classes , style , labelPosition ='top' , getValueLabel , showValueLabel =!!props.label , formatOptions , minValue =0 , maxValue =100  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "isDisabled",
        "children",
        "classes",
        "style",
        "labelPosition",
        "getValueLabel",
        "showValueLabel",
        "formatOptions",
        "minValue",
        "maxValue"
    ]);
    let { styleProps  } = useStyleProps(otherProps); // `Math.abs(Math.sign(a) - Math.sign(b)) === 2` is true if the values have a different sign.
    let alwaysDisplaySign = Math.abs(Math.sign(minValue) - Math.sign(maxValue)) === 2;
    if (alwaysDisplaySign) {
        if (formatOptions != null) {
            if (!('signDisplay' in formatOptions)) formatOptions = _babelRuntimeHelpersExtends({
            }, formatOptions, {
                // @ts-ignore
                signDisplay: 'exceptZero'
            });
        } else // @ts-ignore
        formatOptions = {
            signDisplay: 'exceptZero'
        };
    }
    const formatter = useNumberFormatter(formatOptions);
    const state = useSliderState(_babelRuntimeHelpersExtends({
    }, props, {
        numberFormatter: formatter,
        minValue,
        maxValue
    }));
    let trackRef = useRef();
    let { groupProps , trackProps , labelProps , outputProps  } = useSlider(props, state, trackRef);
    let inputRef = useRef();
    let domRef = useFocusableRef(ref, inputRef);
    let displayValue = '';
    let maxLabelLength = undefined;
    if (typeof getValueLabel === 'function') {
        displayValue = getValueLabel(state.values);
        switch(state.values.length){
            case 1:
                maxLabelLength = Math.max(getValueLabel([
                    minValue
                ]).length, getValueLabel([
                    maxValue
                ]).length);
                break;
            case 2:
                // Try all possible combinations of min and max values.
                maxLabelLength = Math.max(getValueLabel([
                    minValue,
                    minValue
                ]).length, getValueLabel([
                    minValue,
                    maxValue
                ]).length, getValueLabel([
                    maxValue,
                    minValue
                ]).length, getValueLabel([
                    maxValue,
                    maxValue
                ]).length);
                break;
            default:
                throw new Error('Only sliders with 1 or 2 handles are supported!');
        }
    } else {
        maxLabelLength = Math.max([
            ...formatter.format(minValue)
        ].length, [
            ...formatter.format(maxValue)
        ].length);
        switch(state.values.length){
            case 1:
                displayValue = state.getThumbValueLabel(0);
                break;
            case 2:
                // This should really use the NumberFormat#formatRange proposal...
                // https://github.com/tc39/ecma402/issues/393
                // https://github.com/tc39/proposal-intl-numberformat-v3#formatrange-ecma-402-393
                displayValue = state.getThumbValueLabel(0) + " \u2013 " + state.getThumbValueLabel(1);
                maxLabelLength = 3 + 2 * Math.max(maxLabelLength, [
                    ...formatter.format(minValue)
                ].length, [
                    ...formatter.format(maxValue)
                ].length);
                break;
            default:
                throw new Error('Only sliders with 1 or 2 handles are supported!');
        }
    }
    let labelNode = /*#__PURE__*/ _react.createElement("label", _babelRuntimeHelpersExtends({
        className: classNames($c8f0b01c76499f8ceef39abc1b587900$$interop$default, 'spectrum-Slider-label')
    }, labelProps), props.label);
    let valueNode = /*#__PURE__*/ _react.createElement("output", _babelRuntimeHelpersExtends({
    }, outputProps, {
        className: classNames($c8f0b01c76499f8ceef39abc1b587900$$interop$default, 'spectrum-Slider-value'),
        style: maxLabelLength && {
            width: maxLabelLength + "ch",
            minWidth: maxLabelLength + "ch"
        }
    }), displayValue);
    return(/*#__PURE__*/ _react.createElement("div", _babelRuntimeHelpersExtends({
        ref: domRef,
        className: classNames($c8f0b01c76499f8ceef39abc1b587900$$interop$default, 'spectrum-Slider', {
            'spectrum-Slider--positionTop': labelPosition === 'top',
            'spectrum-Slider--positionSide': labelPosition === 'side',
            'is-disabled': isDisabled
        }, classes, styleProps.className),
        style: _babelRuntimeHelpersExtends({
        }, style, styleProps.style)
    }, groupProps), props.label && /*#__PURE__*/ _react.createElement("div", {
        className: classNames($c8f0b01c76499f8ceef39abc1b587900$$interop$default, 'spectrum-Slider-labelContainer'),
        role: "presentation"
    }, props.label && labelNode, labelPosition === 'top' && showValueLabel && valueNode), /*#__PURE__*/ _react.createElement("div", _babelRuntimeHelpersExtends({
        className: classNames($c8f0b01c76499f8ceef39abc1b587900$$interop$default, 'spectrum-Slider-controls'),
        ref: trackRef
    }, trackProps, {
        role: "presentation"
    }), children({
        trackRef,
        inputRef,
        state
    })), labelPosition === 'side' && /*#__PURE__*/ _react.createElement("div", {
        className: classNames($c8f0b01c76499f8ceef39abc1b587900$$interop$default, 'spectrum-Slider-valueLabelContainer'),
        role: "presentation"
    }, showValueLabel && valueNode)));
}
const $e14249f20430d37bc9376d3f2ea9af72$export$SliderBase = /*#__PURE__*/ _react.forwardRef($e14249f20430d37bc9376d3f2ea9af72$var$SliderBase);
function $d5bef0bb79767419ec0237e591b28$export$SliderThumb(props) {
    let { index , inputRef , state  } = props;
    let backupRef = useRef();
    inputRef = inputRef || backupRef;
    let { thumbProps , inputProps  } = useSliderThumb(_babelRuntimeHelpersExtends({
    }, props, {
        inputRef
    }), state);
    let { hoverProps , isHovered  } = useHover({
    });
    let { direction  } = useLocale();
    let cssDirection = direction === 'rtl' ? 'right' : 'left';
    return(/*#__PURE__*/ _react.createElement(FocusRing, {
        within: true,
        focusRingClass: classNames($c8f0b01c76499f8ceef39abc1b587900$$interop$default, 'is-focused')
    }, /*#__PURE__*/ _react.createElement("div", _babelRuntimeHelpersExtends({
        className: classNames($c8f0b01c76499f8ceef39abc1b587900$$interop$default, 'spectrum-Slider-handle', {
            'is-hovered': isHovered,
            'is-dragged': state.isThumbDragging(index),
            'is-tophandle': state.focusedThumb === index
        }),
        style: {
            [cssDirection]: state.getThumbPercent(index) * 100 + "%"
        }
    }, mergeProps(thumbProps, hoverProps), {
        role: "presentation"
    }), /*#__PURE__*/ _react.createElement(VisuallyHidden, null, /*#__PURE__*/ _react.createElement("input", _babelRuntimeHelpersExtends({
        className: classNames($c8f0b01c76499f8ceef39abc1b587900$$interop$default, 'spectrum-Slider-input'),
        ref: inputRef
    }, inputProps))))));
}
function $de4e99e1d6ad6d61a9bc95d4631$var$Slider(props, ref) {
    let { onChange: _onChange , onChangeEnd: _onChangeEnd , value , defaultValue , isFilled , fillOffset , trackGradient , getValueLabel  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "onChange",
        "onChangeEnd",
        "value",
        "defaultValue",
        "isFilled",
        "fillOffset",
        "trackGradient",
        "getValueLabel"
    ]);
    let baseProps = _babelRuntimeHelpersExtends({
    }, otherProps, {
        // Normalize `value: number[]` to `value: number`
        value: value != null ? [
            value
        ] : undefined,
        defaultValue: defaultValue != null ? [
            defaultValue
        ] : undefined,
        onChange: (v)=>{
            _onChange == null || _onChange(v[0]);
        },
        onChangeEnd: (v)=>{
            _onChangeEnd == null || _onChangeEnd(v[0]);
        },
        getValueLabel: getValueLabel ? (_ref)=>{
            let [v] = _ref;
            return getValueLabel(v);
        } : undefined
    });
    let { direction  } = useLocale();
    return(/*#__PURE__*/ _react.createElement($e14249f20430d37bc9376d3f2ea9af72$export$SliderBase, _babelRuntimeHelpersExtends({
    }, baseProps, {
        ref: ref,
        classes: {
            'spectrum-Slider--filled': isFilled && fillOffset == null
        },
        style: {
            '--spectrum-slider-track-gradient': trackGradient && "linear-gradient(to " + (direction === 'ltr' ? 'right' : 'left') + ", " + trackGradient.join(', ') + ")"
        }
    }), (_ref2)=>{
        let { trackRef , inputRef , state  } = _ref2;
        fillOffset = fillOffset != null ? clamp(fillOffset, state.getThumbMinValue(0), state.getThumbMaxValue(0)) : fillOffset;
        let cssDirection = direction === 'rtl' ? 'right' : 'left';
        let lowerTrack = /*#__PURE__*/ _react.createElement("div", {
            className: classNames($c8f0b01c76499f8ceef39abc1b587900$$interop$default, 'spectrum-Slider-track'),
            style: {
                width: state.getThumbPercent(0) * 100 + "%",
                // TODO not sure if it has advantages, but this could also be implemented as CSS calc():
                // .track::before {
                //    background-size: calc((1/ (var(--width)/100)) * 100%);
                //    width: calc(var(--width) * 1%)M
                // }
                // @ts-ignore
                '--spectrum-track-background-size': 1 / state.getThumbPercent(0) * 100 + "%",
                '--spectrum-track-background-position': direction === 'ltr' ? '0' : '100%'
            }
        });
        let upperTrack = /*#__PURE__*/ _react.createElement("div", {
            className: classNames($c8f0b01c76499f8ceef39abc1b587900$$interop$default, 'spectrum-Slider-track'),
            style: {
                width: (1 - state.getThumbPercent(0)) * 100 + "%",
                // @ts-ignore
                '--spectrum-track-background-size': 1 / (1 - state.getThumbPercent(0)) * 100 + "%",
                '--spectrum-track-background-position': direction === 'ltr' ? '100%' : '0'
            }
        });
        let filledTrack = null;
        if (isFilled && fillOffset != null) {
            let width = state.getThumbPercent(0) - state.getValuePercent(fillOffset);
            let isRightOfOffset = width > 0;
            let offset = isRightOfOffset ? state.getValuePercent(fillOffset) : state.getThumbPercent(0);
            filledTrack = /*#__PURE__*/ _react.createElement("div", {
                className: classNames($c8f0b01c76499f8ceef39abc1b587900$$interop$default, 'spectrum-Slider-fill', {
                    'spectrum-Slider-fill--right': isRightOfOffset
                }),
                style: {
                    [cssDirection]: offset * 100 + "%",
                    width: Math.abs(width) * 100 + "%"
                }
            });
        }
        return(/*#__PURE__*/ _react.createElement(_react.Fragment, null, lowerTrack, /*#__PURE__*/ _react.createElement($d5bef0bb79767419ec0237e591b28$export$SliderThumb, {
            index: 0,
            isDisabled: props.isDisabled,
            trackRef: trackRef,
            inputRef: inputRef,
            state: state
        }), upperTrack, filledTrack));
    }));
}
/**
 * Sliders allow users to quickly select a value within a range. They should be used when the upper and lower bounds to the range are invariable.
 */ const Slider = /*#__PURE__*/ _react.forwardRef($de4e99e1d6ad6d61a9bc95d4631$var$Slider);
exports.Slider = Slider;
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/slider/intl/ar-AE.json
var $d78e0b50ed86b529de1ea5a9c2e5e3a0$exports = {
};
$d78e0b50ed86b529de1ea5a9c2e5e3a0$exports = JSON.parse("{\"maximum\":\"أقصى\",\"minimum\":\"أدنى\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/slider/intl/bg-BG.json
var $b8053210c821c3657151d27d3a03aba$exports = {
};
$b8053210c821c3657151d27d3a03aba$exports = JSON.parse("{\"maximum\":\"Максимум\",\"minimum\":\"Минимум\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/slider/intl/cs-CZ.json
var $b3123d5771edb4be28c66dce211c946$exports = {
};
$b3123d5771edb4be28c66dce211c946$exports = JSON.parse("{\"maximum\":\"Maximum\",\"minimum\":\"Minimum\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/slider/intl/da-DK.json
var $afd096174a90c8a61a0f8ed18$exports = {
};
$afd096174a90c8a61a0f8ed18$exports = JSON.parse("{\"maximum\":\"Maksimum\",\"minimum\":\"Minimum\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/slider/intl/de-DE.json
var $ae2c9e4bda6c39a90d65a27f5c556788$exports = {
};
$ae2c9e4bda6c39a90d65a27f5c556788$exports = JSON.parse("{\"maximum\":\"Maximum\",\"minimum\":\"Minimum\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/slider/intl/el-GR.json
var $a105026d6afa9e6267d2ddbcfd39a$exports = {
};
$a105026d6afa9e6267d2ddbcfd39a$exports = JSON.parse("{\"maximum\":\"Μέγιστο\",\"minimum\":\"Ελάχιστο\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/slider/intl/en-US.json
var $fe0427bf71697a80afe363fd174c3d2$exports = {
};
$fe0427bf71697a80afe363fd174c3d2$exports = JSON.parse("{\"minimum\":\"Minimum\",\"maximum\":\"Maximum\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/slider/intl/es-ES.json
var $ebe61748ec02536aa113857af1f4e72$exports = {
};
$ebe61748ec02536aa113857af1f4e72$exports = JSON.parse("{\"maximum\":\"Máximo\",\"minimum\":\"Mínimo\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/slider/intl/et-EE.json
var $e9a9a4dcf098fc49e73a17fe63b$exports = {
};
$e9a9a4dcf098fc49e73a17fe63b$exports = JSON.parse("{\"maximum\":\"Maksimaalne\",\"minimum\":\"Minimaalne\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/slider/intl/fi-FI.json
var $ad34360a22b458ec27cdfc71d13e23$exports = {
};
$ad34360a22b458ec27cdfc71d13e23$exports = JSON.parse("{\"maximum\":\"Maksimi\",\"minimum\":\"Minimi\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/slider/intl/fr-FR.json
var $d8b4689d285edca7cf57f1be30cad1d$exports = {
};
$d8b4689d285edca7cf57f1be30cad1d$exports = JSON.parse("{\"maximum\":\"Maximum\",\"minimum\":\"Minimum\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/slider/intl/he-IL.json
var $c2ccacfd828d16a0780a500ec6f2b3e$exports = {
};
$c2ccacfd828d16a0780a500ec6f2b3e$exports = JSON.parse("{\"maximum\":\"מקסימום\",\"minimum\":\"מינימום\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/slider/intl/hr-HR.json
var $e131faf50c4d52f6155cb1da25ec1594$exports = {
};
$e131faf50c4d52f6155cb1da25ec1594$exports = JSON.parse("{\"maximum\":\"Najviše\",\"minimum\":\"Najmanje\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/slider/intl/hu-HU.json
var $c4df3691058a446ced0dd150dfe$exports = {
};
$c4df3691058a446ced0dd150dfe$exports = JSON.parse("{\"maximum\":\"Maximum\",\"minimum\":\"Minimum\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/slider/intl/it-IT.json
var $f4bcae96d6025c3425150015e7c1$exports = {
};
$f4bcae96d6025c3425150015e7c1$exports = JSON.parse("{\"maximum\":\"Massimo\",\"minimum\":\"Minimo\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/slider/intl/ja-JP.json
var $ce4641ff9c7f6cd81880de9ec4aea1$exports = {
};
$ce4641ff9c7f6cd81880de9ec4aea1$exports = JSON.parse("{\"maximum\":\"最大\",\"minimum\":\"最小\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/slider/intl/ko-KR.json
var $fc7f2dc28877fe5ef711423f43ab4ec$exports = {
};
$fc7f2dc28877fe5ef711423f43ab4ec$exports = JSON.parse("{\"maximum\":\"최대\",\"minimum\":\"최소\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/slider/intl/lt-LT.json
var $e9780606fc2786708924a487ef051090$exports = {
};
$e9780606fc2786708924a487ef051090$exports = JSON.parse("{\"maximum\":\"Daugiausia\",\"minimum\":\"Mažiausia\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/slider/intl/lv-LV.json
var $f78f2303da5064e404af9736fac047$exports = {
};
$f78f2303da5064e404af9736fac047$exports = JSON.parse("{\"maximum\":\"Maksimālā vērtība\",\"minimum\":\"Minimālā vērtība\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/slider/intl/nb-NO.json
var $cee5ad394707cc520a38ce3ba3cf$exports = {
};
$cee5ad394707cc520a38ce3ba3cf$exports = JSON.parse("{\"maximum\":\"Maksimum\",\"minimum\":\"Minimum\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/slider/intl/nl-NL.json
var $cb082e87d27553826af25629e5be5497$exports = {
};
$cb082e87d27553826af25629e5be5497$exports = JSON.parse("{\"maximum\":\"Maximum\",\"minimum\":\"Minimum\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/slider/intl/pl-PL.json
var $c157e78f7f989ea301b76269c14e187$exports = {
};
$c157e78f7f989ea301b76269c14e187$exports = JSON.parse("{\"maximum\":\"Maksimum\",\"minimum\":\"Minimum\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/slider/intl/pt-BR.json
var $b8a8c2b158e59b4a0c2e03bc13ca6d$exports = {
};
$b8a8c2b158e59b4a0c2e03bc13ca6d$exports = JSON.parse("{\"maximum\":\"Máximo\",\"minimum\":\"Mínimo\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/slider/intl/pt-PT.json
var $fdc632fdd31e71a1b5a58a9b01a0$exports = {
};
$fdc632fdd31e71a1b5a58a9b01a0$exports = JSON.parse("{\"maximum\":\"Máximo\",\"minimum\":\"Mínimo\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/slider/intl/ro-RO.json
var $b4afde306c2e45ef13d84f99c1f9$exports = {
};
$b4afde306c2e45ef13d84f99c1f9$exports = JSON.parse("{\"maximum\":\"Maximum\",\"minimum\":\"Minimum\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/slider/intl/ru-RU.json
var $f70785a191c1047fe82970e3e4ca90a$exports = {
};
$f70785a191c1047fe82970e3e4ca90a$exports = JSON.parse("{\"maximum\":\"Максимум\",\"minimum\":\"Минимум\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/slider/intl/sk-SK.json
var $d9f1e67ea22a6278ecf4429d8d6404b7$exports = {
};
$d9f1e67ea22a6278ecf4429d8d6404b7$exports = JSON.parse("{\"maximum\":\"Maximum\",\"minimum\":\"Minimum\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/slider/intl/sl-SI.json
var $d935f82244fe405429542f38796$exports = {
};
$d935f82244fe405429542f38796$exports = JSON.parse("{\"maximum\":\"Največji\",\"minimum\":\"Najmanj\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/slider/intl/sr-SP.json
var $f34be9f827d85a700494af98057c32$exports = {
};
$f34be9f827d85a700494af98057c32$exports = JSON.parse("{\"maximum\":\"Najviše\",\"minimum\":\"Najmanje\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/slider/intl/sv-SE.json
var $d5bc44175c568de085b694f2193a7616$exports = {
};
$d5bc44175c568de085b694f2193a7616$exports = JSON.parse("{\"maximum\":\"Maximum\",\"minimum\":\"Minimum\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/slider/intl/tr-TR.json
var $eebf5c30d8cd80b9b3f852c78275c4f1$exports = {
};
$eebf5c30d8cd80b9b3f852c78275c4f1$exports = JSON.parse("{\"maximum\":\"Maksimum\",\"minimum\":\"Minimum\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/slider/intl/uk-UA.json
var $cac4b10af9ebf64a6b9df2e9a4d$exports = {
};
$cac4b10af9ebf64a6b9df2e9a4d$exports = JSON.parse("{\"maximum\":\"Максимум\",\"minimum\":\"Мінімум\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/slider/intl/zh-CN.json
var $b2d7ef1e8161e192c7a2a26b282f26e$exports = {
};
$b2d7ef1e8161e192c7a2a26b282f26e$exports = JSON.parse("{\"maximum\":\"最大\",\"minimum\":\"最小\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/slider/intl/zh-TW.json
var $d8c66ddb465b487c64522ffc49e44c8$exports = {
};
$d8c66ddb465b487c64522ffc49e44c8$exports = JSON.parse("{\"maximum\":\"最大值\",\"minimum\":\"最小值\"}");
// @ts-ignore
const $b7614884795b0b78874e0b09da85cc36$var$intlMessages = {
    "ar-AE": _babelRuntimeHelpersInteropRequireDefault($d78e0b50ed86b529de1ea5a9c2e5e3a0$exports).default,
    "bg-BG": _babelRuntimeHelpersInteropRequireDefault($b8053210c821c3657151d27d3a03aba$exports).default,
    "cs-CZ": _babelRuntimeHelpersInteropRequireDefault($b3123d5771edb4be28c66dce211c946$exports).default,
    "da-DK": _babelRuntimeHelpersInteropRequireDefault($afd096174a90c8a61a0f8ed18$exports).default,
    "de-DE": _babelRuntimeHelpersInteropRequireDefault($ae2c9e4bda6c39a90d65a27f5c556788$exports).default,
    "el-GR": _babelRuntimeHelpersInteropRequireDefault($a105026d6afa9e6267d2ddbcfd39a$exports).default,
    "en-US": _babelRuntimeHelpersInteropRequireDefault($fe0427bf71697a80afe363fd174c3d2$exports).default,
    "es-ES": _babelRuntimeHelpersInteropRequireDefault($ebe61748ec02536aa113857af1f4e72$exports).default,
    "et-EE": _babelRuntimeHelpersInteropRequireDefault($e9a9a4dcf098fc49e73a17fe63b$exports).default,
    "fi-FI": _babelRuntimeHelpersInteropRequireDefault($ad34360a22b458ec27cdfc71d13e23$exports).default,
    "fr-FR": _babelRuntimeHelpersInteropRequireDefault($d8b4689d285edca7cf57f1be30cad1d$exports).default,
    "he-IL": _babelRuntimeHelpersInteropRequireDefault($c2ccacfd828d16a0780a500ec6f2b3e$exports).default,
    "hr-HR": _babelRuntimeHelpersInteropRequireDefault($e131faf50c4d52f6155cb1da25ec1594$exports).default,
    "hu-HU": _babelRuntimeHelpersInteropRequireDefault($c4df3691058a446ced0dd150dfe$exports).default,
    "it-IT": _babelRuntimeHelpersInteropRequireDefault($f4bcae96d6025c3425150015e7c1$exports).default,
    "ja-JP": _babelRuntimeHelpersInteropRequireDefault($ce4641ff9c7f6cd81880de9ec4aea1$exports).default,
    "ko-KR": _babelRuntimeHelpersInteropRequireDefault($fc7f2dc28877fe5ef711423f43ab4ec$exports).default,
    "lt-LT": _babelRuntimeHelpersInteropRequireDefault($e9780606fc2786708924a487ef051090$exports).default,
    "lv-LV": _babelRuntimeHelpersInteropRequireDefault($f78f2303da5064e404af9736fac047$exports).default,
    "nb-NO": _babelRuntimeHelpersInteropRequireDefault($cee5ad394707cc520a38ce3ba3cf$exports).default,
    "nl-NL": _babelRuntimeHelpersInteropRequireDefault($cb082e87d27553826af25629e5be5497$exports).default,
    "pl-PL": _babelRuntimeHelpersInteropRequireDefault($c157e78f7f989ea301b76269c14e187$exports).default,
    "pt-BR": _babelRuntimeHelpersInteropRequireDefault($b8a8c2b158e59b4a0c2e03bc13ca6d$exports).default,
    "pt-PT": _babelRuntimeHelpersInteropRequireDefault($fdc632fdd31e71a1b5a58a9b01a0$exports).default,
    "ro-RO": _babelRuntimeHelpersInteropRequireDefault($b4afde306c2e45ef13d84f99c1f9$exports).default,
    "ru-RU": _babelRuntimeHelpersInteropRequireDefault($f70785a191c1047fe82970e3e4ca90a$exports).default,
    "sk-SK": _babelRuntimeHelpersInteropRequireDefault($d9f1e67ea22a6278ecf4429d8d6404b7$exports).default,
    "sl-SI": _babelRuntimeHelpersInteropRequireDefault($d935f82244fe405429542f38796$exports).default,
    "sr-SP": _babelRuntimeHelpersInteropRequireDefault($f34be9f827d85a700494af98057c32$exports).default,
    "sv-SE": _babelRuntimeHelpersInteropRequireDefault($d5bc44175c568de085b694f2193a7616$exports).default,
    "tr-TR": _babelRuntimeHelpersInteropRequireDefault($eebf5c30d8cd80b9b3f852c78275c4f1$exports).default,
    "uk-UA": _babelRuntimeHelpersInteropRequireDefault($cac4b10af9ebf64a6b9df2e9a4d$exports).default,
    "zh-CN": _babelRuntimeHelpersInteropRequireDefault($b2d7ef1e8161e192c7a2a26b282f26e$exports).default,
    "zh-TW": _babelRuntimeHelpersInteropRequireDefault($d8c66ddb465b487c64522ffc49e44c8$exports).default
};
function $b7614884795b0b78874e0b09da85cc36$var$RangeSlider(props, ref) {
    var _props$minValue, _props$maxValue;
    let { onChange , onChangeEnd , value , defaultValue , getValueLabel  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "onChange",
        "onChangeEnd",
        "value",
        "defaultValue",
        "getValueLabel"
    ]);
    let baseProps = _babelRuntimeHelpersExtends({
    }, otherProps, {
        value: value != null ? [
            value.start,
            value.end
        ] : undefined,
        defaultValue: defaultValue != null ? [
            defaultValue.start,
            defaultValue.end
        ] : [
            (_props$minValue = props.minValue) != null ? _props$minValue : 0,
            (_props$maxValue = props.maxValue) != null ? _props$maxValue : 100
        ],
        onChange (v) {
            onChange == null || onChange({
                start: v[0],
                end: v[1]
            });
        },
        onChangeEnd (v) {
            onChangeEnd == null || onChangeEnd({
                start: v[0],
                end: v[1]
            });
        },
        getValueLabel: getValueLabel ? (_ref)=>{
            let [start, end] = _ref;
            return getValueLabel({
                start,
                end
            });
        } : undefined
    });
    let formatter = useMessageFormatter($b7614884795b0b78874e0b09da85cc36$var$intlMessages);
    let { direction  } = useLocale();
    return(/*#__PURE__*/ _react.createElement($e14249f20430d37bc9376d3f2ea9af72$export$SliderBase, _babelRuntimeHelpersExtends({
    }, baseProps, {
        classes: 'spectrum-Slider--range',
        ref: ref
    }), (_ref2)=>{
        let { trackRef , inputRef , state  } = _ref2;
        let cssDirection = direction === 'rtl' ? 'right' : 'left';
        return(/*#__PURE__*/ _react.createElement(_react.Fragment, null, /*#__PURE__*/ _react.createElement("div", {
            className: classNames($c8f0b01c76499f8ceef39abc1b587900$$interop$default, 'spectrum-Slider-track'),
            style: {
                width: state.getThumbPercent(0) * 100 + "%"
            }
        }), /*#__PURE__*/ _react.createElement($d5bef0bb79767419ec0237e591b28$export$SliderThumb, {
            index: 0,
            "aria-label": formatter('minimum'),
            isDisabled: props.isDisabled,
            trackRef: trackRef,
            inputRef: inputRef,
            state: state
        }), /*#__PURE__*/ _react.createElement("div", {
            className: classNames($c8f0b01c76499f8ceef39abc1b587900$$interop$default, 'spectrum-Slider-track'),
            style: {
                [cssDirection]: state.getThumbPercent(0) * 100 + "%",
                width: Math.abs(state.getThumbPercent(0) - state.getThumbPercent(1)) * 100 + "%"
            }
        }), /*#__PURE__*/ _react.createElement($d5bef0bb79767419ec0237e591b28$export$SliderThumb, {
            index: 1,
            "aria-label": formatter('maximum'),
            isDisabled: props.isDisabled,
            trackRef: trackRef,
            state: state
        }), /*#__PURE__*/ _react.createElement("div", {
            className: classNames($c8f0b01c76499f8ceef39abc1b587900$$interop$default, 'spectrum-Slider-track'),
            style: {
                width: (1 - state.getThumbPercent(1)) * 100 + "%"
            }
        })));
    }));
}
/**
 * RangeSliders allow users to quickly select a subset range. They should be used when the upper and lower bounds to the range are invariable.
 */ const RangeSlider = /*#__PURE__*/ _react.forwardRef($b7614884795b0b78874e0b09da85cc36$var$RangeSlider);
exports.RangeSlider = RangeSlider;

},{"@babel/runtime/helpers/interopRequireDefault":"5TvsK","@react-aria/visually-hidden":"AVm9K","@react-aria/interactions":"3irYN","@react-aria/focus":"76fMY","@react-aria/slider":"7FIQt","@react-spectrum/provider":"3Y6zE","@react-aria/i18n":"6xZcx","@react-stately/slider":"2ve3h","react":"a6qBW","@react-spectrum/utils":"7ch5A","@react-aria/utils":"d8qxy","@babel/runtime/helpers/objectWithoutPropertiesLoose":"5byko","@babel/runtime/helpers/extends":"5xz6u","./main.css":"5aA8z"}],"7FIQt":[function(require,module,exports) {
var { useFocusable  } = require("@react-aria/focus");
var { useLocale  } = require("@react-aria/i18n");
var { useLabel  } = require("@react-aria/label");
var { setInteractionModality , useMove  } = require("@react-aria/interactions");
var { useRef , useCallback , useEffect  } = require("react");
var { clamp , mergeProps , useGlobalListeners , focusWithoutScrolling  } = require("@react-aria/utils");
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
const $dec1906781d9c7cb69245fc4d5344b$export$sliderIds = new WeakMap();
function $dec1906781d9c7cb69245fc4d5344b$export$getSliderThumbId(state, index) {
    let id = $dec1906781d9c7cb69245fc4d5344b$export$sliderIds.get(state);
    if (!id) throw new Error('Unknown slider state');
    return id + "-" + index;
}
/**
 * Provides the behavior and accessibility implementation for a slider component representing one or more values.
 *
 * @param props Props for the slider.
 * @param state State for the slider, as returned by `useSliderState`.
 * @param trackRef Ref for the "track" element.  The width of this element provides the "length"
 * of the track -- the span of one dimensional space that the slider thumb can be.  It also
 * accepts click and drag motions, so that the closest thumb will follow clicks and drags on
 * the track.
 */ function useSlider(props, state, trackRef) {
    var _labelProps$id;
    let { labelProps , fieldProps  } = useLabel(props);
    let isVertical = props.orientation === 'vertical'; // Attach id of the label to the state so it can be accessed by useSliderThumb.
    $dec1906781d9c7cb69245fc4d5344b$export$sliderIds.set(state, (_labelProps$id = labelProps.id) != null ? _labelProps$id : fieldProps.id);
    let { direction  } = useLocale();
    let { addGlobalListener , removeGlobalListener  } = useGlobalListeners(); // When the user clicks or drags the track, we want the motion to set and drag the
    // closest thumb.  Hence we also need to install useMove() on the track element.
    // Here, we keep track of which index is the "closest" to the drag start point.
    // It is set onMouseDown/onTouchDown; see trackProps below.
    const realTimeTrackDraggingIndex = useRef(null);
    const stateRef = useRef(null);
    stateRef.current = state;
    const reverseX = direction === 'rtl';
    const currentPosition = useRef(null);
    const { moveProps  } = useMove({
        onMoveStart () {
            currentPosition.current = null;
        },
        onMove (_ref) {
            let { deltaX , deltaY  } = _ref;
            let size = isVertical ? trackRef.current.offsetHeight : trackRef.current.offsetWidth;
            if (currentPosition.current == null) currentPosition.current = stateRef.current.getThumbPercent(realTimeTrackDraggingIndex.current) * size;
            let delta = isVertical ? deltaY : deltaX;
            if (isVertical || reverseX) delta = -delta;
            currentPosition.current += delta;
            if (realTimeTrackDraggingIndex.current != null && trackRef.current) {
                const percent = clamp(currentPosition.current / size, 0, 1);
                stateRef.current.setThumbPercent(realTimeTrackDraggingIndex.current, percent);
            }
        },
        onMoveEnd () {
            if (realTimeTrackDraggingIndex.current != null) {
                stateRef.current.setThumbDragging(realTimeTrackDraggingIndex.current, false);
                realTimeTrackDraggingIndex.current = null;
            }
        }
    });
    let currentPointer = useRef(undefined);
    let onDownTrack = (e, id, clientX, clientY)=>{
        // We only trigger track-dragging if the user clicks on the track itself and nothing is currently being dragged.
        if (trackRef.current && !props.isDisabled && state.values.every((_, i)=>!state.isThumbDragging(i)
        )) {
            let size = isVertical ? trackRef.current.offsetHeight : trackRef.current.offsetWidth; // Find the closest thumb
            const trackPosition = trackRef.current.getBoundingClientRect()[isVertical ? 'top' : 'left'];
            const clickPosition = isVertical ? clientY : clientX;
            const offset = clickPosition - trackPosition;
            let percent = offset / size;
            if (direction === 'rtl' || isVertical) percent = 1 - percent;
            let value = state.getPercentValue(percent); // to find the closet thumb we split the array based on the first thumb position to the "right/end" of the click.
            let closestThumb;
            let split = state.values.findIndex((v)=>value - v < 0
            );
            if (split === 0) // If the index is zero then the closetThumb is the first one
            closestThumb = split;
            else if (split === -1) // If no index is found they've clicked past all the thumbs
            closestThumb = state.values.length - 1;
            else {
                let lastLeft = state.values[split - 1];
                let firstRight = state.values[split]; // Pick the last left/start thumb, unless they are stacked on top of each other, then pick the right/end one
                if (Math.abs(lastLeft - value) < Math.abs(firstRight - value)) closestThumb = split - 1;
                else closestThumb = split;
            } // Confirm that the found closest thumb is editable, not disabled, and move it
            if (closestThumb >= 0 && state.isThumbEditable(closestThumb)) {
                // Don't unfocus anything
                e.preventDefault();
                realTimeTrackDraggingIndex.current = closestThumb;
                state.setFocusedThumb(closestThumb);
                currentPointer.current = id;
                state.setThumbDragging(realTimeTrackDraggingIndex.current, true);
                state.setThumbValue(closestThumb, value);
                addGlobalListener(window, 'mouseup', onUpTrack, false);
                addGlobalListener(window, 'touchend', onUpTrack, false);
                addGlobalListener(window, 'pointerup', onUpTrack, false);
            } else realTimeTrackDraggingIndex.current = null;
        }
    };
    let onUpTrack = (e)=>{
        var _e$pointerId, _e$changedTouches;
        let id = (_e$pointerId = e.pointerId) != null ? _e$pointerId : (_e$changedTouches = e.changedTouches) == null ? void 0 : _e$changedTouches[0].identifier;
        if (id === currentPointer.current) {
            if (realTimeTrackDraggingIndex.current != null) {
                state.setThumbDragging(realTimeTrackDraggingIndex.current, false);
                realTimeTrackDraggingIndex.current = null;
            }
            removeGlobalListener(window, 'mouseup', onUpTrack, false);
            removeGlobalListener(window, 'touchend', onUpTrack, false);
            removeGlobalListener(window, 'pointerup', onUpTrack, false);
        }
    };
    if (labelProps.htmlFor) {
        // Ideally the `for` attribute should point to the first thumb, but VoiceOver on iOS
        // causes this to override the `aria-labelledby` on the thumb. This causes the first
        // thumb to only be announced as the slider label rather than its individual name as well.
        // See https://bugs.webkit.org/show_bug.cgi?id=172464.
        delete labelProps.htmlFor;
        labelProps.onClick = ()=>{
            var _document$getElementB;
            // Safari does not focus <input type="range"> elements when clicking on an associated <label>,
            // so do it manually. In addition, make sure we show the focus ring.
            (_document$getElementB = document.getElementById($dec1906781d9c7cb69245fc4d5344b$export$getSliderThumbId(state, 0))) == null || _document$getElementB.focus();
            setInteractionModality('keyboard');
        };
    }
    return {
        labelProps,
        // The root element of the Slider will have role="group" to group together
        // all the thumb inputs in the Slider.  The label of the Slider will
        // be used to label the group.
        groupProps: _babelRuntimeHelpersExtends({
            role: 'group'
        }, fieldProps),
        trackProps: mergeProps({
            onMouseDown (e) {
                if (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey) return;
                onDownTrack(e, undefined, e.clientX, e.clientY);
            },
            onPointerDown (e) {
                if (e.pointerType === 'mouse' && (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey)) return;
                onDownTrack(e, e.pointerId, e.clientX, e.clientY);
            },
            onTouchStart (e) {
                onDownTrack(e, e.changedTouches[0].identifier, e.changedTouches[0].clientX, e.changedTouches[0].clientY);
            }
        }, moveProps),
        outputProps: {
            htmlFor: state.values.map((_, index)=>$dec1906781d9c7cb69245fc4d5344b$export$getSliderThumbId(state, index)
            ).join(' '),
            'aria-live': 'off'
        }
    };
}
exports.useSlider = useSlider;
/**
 * Provides behavior and accessibility for a thumb of a slider component.
 *
 * @param opts Options for this Slider thumb.
 * @param state Slider state, created via `useSliderState`.
 */ function useSliderThumb(opts, state) {
    var _opts$ariaLabelledby;
    let { index , isRequired , isDisabled , validationState , trackRef , inputRef  } = opts;
    let isVertical = opts.orientation === 'vertical';
    let { direction  } = useLocale();
    let { addGlobalListener , removeGlobalListener  } = useGlobalListeners();
    let labelId = $dec1906781d9c7cb69245fc4d5344b$export$sliderIds.get(state);
    const { labelProps , fieldProps  } = useLabel(_babelRuntimeHelpersExtends({
    }, opts, {
        id: $dec1906781d9c7cb69245fc4d5344b$export$getSliderThumbId(state, index),
        'aria-labelledby': (labelId + " " + ((_opts$ariaLabelledby = opts['aria-labelledby']) != null ? _opts$ariaLabelledby : '')).trim()
    }));
    const value = state.values[index];
    const focusInput = useCallback(()=>{
        if (inputRef.current) focusWithoutScrolling(inputRef.current);
    }, [
        inputRef
    ]);
    const isFocused = state.focusedThumb === index;
    useEffect(()=>{
        if (isFocused) focusInput();
    }, [
        isFocused,
        focusInput
    ]);
    const stateRef = useRef(null);
    stateRef.current = state;
    let reverseX = direction === 'rtl';
    let currentPosition = useRef(null);
    let { moveProps  } = useMove({
        onMoveStart () {
            currentPosition.current = null;
            state.setThumbDragging(index, true);
        },
        onMove (_ref) {
            let { deltaX , deltaY , pointerType  } = _ref;
            let size = isVertical ? trackRef.current.offsetHeight : trackRef.current.offsetWidth;
            if (currentPosition.current == null) currentPosition.current = stateRef.current.getThumbPercent(index) * size;
            if (pointerType === 'keyboard') {
                // (invert left/right according to language direction) + (according to vertical)
                let delta = ((reverseX ? -deltaX : deltaX) + (isVertical ? -deltaY : -deltaY)) * stateRef.current.step;
                currentPosition.current += delta * size;
                stateRef.current.setThumbValue(index, stateRef.current.getThumbValue(index) + delta);
            } else {
                let delta = isVertical ? deltaY : deltaX;
                if (isVertical || reverseX) delta = -delta;
                currentPosition.current += delta;
                stateRef.current.setThumbPercent(index, clamp(currentPosition.current / size, 0, 1));
            }
        },
        onMoveEnd () {
            state.setThumbDragging(index, false);
        }
    }); // Immediately register editability with the state
    state.setThumbEditable(index, !isDisabled);
    const { focusableProps  } = useFocusable(mergeProps(opts, {
        onFocus: ()=>state.setFocusedThumb(index)
        ,
        onBlur: ()=>state.setFocusedThumb(undefined)
    }), inputRef);
    let currentPointer = useRef(undefined);
    let onDown = (id)=>{
        focusInput();
        currentPointer.current = id;
        state.setThumbDragging(index, true);
        addGlobalListener(window, 'mouseup', onUp, false);
        addGlobalListener(window, 'touchend', onUp, false);
        addGlobalListener(window, 'pointerup', onUp, false);
    };
    let onUp = (e)=>{
        var _e$pointerId, _e$changedTouches;
        let id = (_e$pointerId = e.pointerId) != null ? _e$pointerId : (_e$changedTouches = e.changedTouches) == null ? void 0 : _e$changedTouches[0].identifier;
        if (id === currentPointer.current) {
            focusInput();
            state.setThumbDragging(index, false);
            removeGlobalListener(window, 'mouseup', onUp, false);
            removeGlobalListener(window, 'touchend', onUp, false);
            removeGlobalListener(window, 'pointerup', onUp, false);
        }
    }; // We install mouse handlers for the drag motion on the thumb div, but
    // not the key handler for moving the thumb with the slider.  Instead,
    // we focus the range input, and let the browser handle the keyboard
    // interactions; we then listen to input's onChange to update state.
    return {
        inputProps: mergeProps(focusableProps, fieldProps, {
            type: 'range',
            tabIndex: !isDisabled ? 0 : undefined,
            min: state.getThumbMinValue(index),
            max: state.getThumbMaxValue(index),
            step: state.step,
            value: value,
            disabled: isDisabled,
            'aria-orientation': opts.orientation,
            'aria-valuetext': state.getThumbValueLabel(index),
            'aria-required': isRequired || undefined,
            'aria-invalid': validationState === 'invalid' || undefined,
            'aria-errormessage': opts['aria-errormessage'],
            onChange: (e)=>{
                state.setThumbValue(index, parseFloat(e.target.value));
            }
        }),
        thumbProps: !isDisabled ? mergeProps(moveProps, {
            onMouseDown: (e)=>{
                if (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey) return;
                onDown();
            },
            onPointerDown: (e)=>{
                if (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey) return;
                onDown(e.pointerId);
            },
            onTouchStart: (e)=>{
                onDown(e.changedTouches[0].identifier);
            }
        }) : {
        },
        labelProps
    };
}
exports.useSliderThumb = useSliderThumb;

},{"@react-aria/focus":"76fMY","@react-aria/i18n":"6xZcx","@react-aria/label":"2pFvL","@react-aria/interactions":"3irYN","react":"a6qBW","@react-aria/utils":"d8qxy","@babel/runtime/helpers/extends":"5xz6u"}],"2ve3h":[function(require,module,exports) {
var { useRef , useState  } = require("react");
var { useControlledState  } = require("@react-stately/utils");
var { clamp , snapValueToStep  } = require("@react-aria/utils");
const $bc3294032743285adead374b6f67$var$DEFAULT_MIN_VALUE = 0;
const $bc3294032743285adead374b6f67$var$DEFAULT_MAX_VALUE = 100;
const $bc3294032743285adead374b6f67$var$DEFAULT_STEP_VALUE = 1;
/**
 * Provides state management for a slider component. Stores values for all thumbs,
 * formats values for localization, and provides methods to update the position
 * of any thumbs.
 * @param props
 */ function useSliderState(props) {
    var _props$defaultValue;
    const { isDisabled , minValue =$bc3294032743285adead374b6f67$var$DEFAULT_MIN_VALUE , maxValue =$bc3294032743285adead374b6f67$var$DEFAULT_MAX_VALUE , numberFormatter: formatter , step =$bc3294032743285adead374b6f67$var$DEFAULT_STEP_VALUE  } = props;
    const [values, setValues] = useControlledState(props.value, (_props$defaultValue = props.defaultValue) != null ? _props$defaultValue : [
        minValue
    ], props.onChange);
    const [isDraggings, setDraggings] = useState(new Array(values.length).fill(false));
    const isEditablesRef = useRef(new Array(values.length).fill(true));
    const [focusedIndex, setFocusedIndex] = useState(undefined);
    const valuesRef = useRef(null);
    valuesRef.current = values;
    const isDraggingsRef = useRef(null);
    isDraggingsRef.current = isDraggings;
    function getValuePercent(value) {
        return (value - minValue) / (maxValue - minValue);
    }
    function getThumbMinValue(index) {
        return index === 0 ? minValue : values[index - 1];
    }
    function getThumbMaxValue(index) {
        return index === values.length - 1 ? maxValue : values[index + 1];
    }
    function isThumbEditable(index) {
        return isEditablesRef.current[index];
    }
    function setThumbEditable(index, editable) {
        isEditablesRef.current[index] = editable;
    }
    function updateValue(index, value) {
        if (isDisabled || !isThumbEditable(index)) return;
        const thisMin = getThumbMinValue(index);
        const thisMax = getThumbMaxValue(index); // Round value to multiple of step, clamp value between min and max
        value = snapValueToStep(value, thisMin, thisMax, step);
        valuesRef.current = $bc3294032743285adead374b6f67$var$replaceIndex(valuesRef.current, index, value);
        setValues(valuesRef.current);
    }
    function updateDragging(index, dragging) {
        if (isDisabled || !isThumbEditable(index)) return;
        const wasDragging = isDraggingsRef.current[index];
        isDraggingsRef.current = $bc3294032743285adead374b6f67$var$replaceIndex(isDraggingsRef.current, index, dragging);
        setDraggings(isDraggingsRef.current); // Call onChangeEnd if no handles are dragging.
        if (props.onChangeEnd && wasDragging && !isDraggingsRef.current.some(Boolean)) props.onChangeEnd(valuesRef.current);
    }
    function getFormattedValue(value) {
        return formatter.format(value);
    }
    function setThumbPercent(index, percent) {
        updateValue(index, getPercentValue(percent));
    }
    function getRoundedValue(value) {
        return Math.round((value - minValue) / step) * step + minValue;
    }
    function getPercentValue(percent) {
        const val = percent * (maxValue - minValue) + minValue;
        return clamp(getRoundedValue(val), minValue, maxValue);
    }
    return {
        values: values,
        getThumbValue: (index)=>values[index]
        ,
        setThumbValue: updateValue,
        setThumbPercent,
        isThumbDragging: (index)=>isDraggings[index]
        ,
        setThumbDragging: updateDragging,
        focusedThumb: focusedIndex,
        setFocusedThumb: setFocusedIndex,
        getThumbPercent: (index)=>getValuePercent(values[index])
        ,
        getValuePercent,
        getThumbValueLabel: (index)=>getFormattedValue(values[index])
        ,
        getFormattedValue,
        getThumbMinValue,
        getThumbMaxValue,
        getPercentValue,
        isThumbEditable,
        setThumbEditable,
        step
    };
}
exports.useSliderState = useSliderState;
function $bc3294032743285adead374b6f67$var$replaceIndex(array, index, value) {
    if (array[index] === value) return array;
    return [
        ...array.slice(0, index),
        value,
        ...array.slice(index + 1)
    ];
}

},{"react":"a6qBW","@react-stately/utils":"7ILZk","@react-aria/utils":"d8qxy"}],"5aA8z":[function() {},{}],"1S1n0":[function(require,module,exports) {
var { useSearchFieldState  } = require("@react-stately/searchfield");
var { useSearchField  } = require("@react-aria/searchfield");
var { useProviderProps  } = require("@react-spectrum/provider");
var { TextFieldBase  } = require("@react-spectrum/textfield");
var _react2 = require("react");
var _react = $parcel$interopDefault(_react2);
var { forwardRef , useRef  } = _react2;
var _spectrumIconsUiMagnifier = $parcel$interopDefault(require("@spectrum-icons/ui/Magnifier"));
var { ClearButton  } = require("@react-spectrum/button");
var { classNames  } = require("@react-spectrum/utils");
var _babelRuntimeHelpersObjectWithoutPropertiesLoose = $parcel$interopDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
require("./main.css");
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/search/vars.css
var $b42ee6503342f63a10b70c33e73302b1$exports = {
};
$b42ee6503342f63a10b70c33e73302b1$exports = {
    "spectrum-Search": "_spectrum-Search_d08c7",
    "spectrum-ClearButton": "_spectrum-ClearButton_d08c7",
    "is-quiet": "_is-quiet_d08c7",
    "spectrum-Search-input": "_spectrum-Search-input_d08c7",
    "spectrum-Search--invalid": "_spectrum-Search--invalid_d08c7",
    "spectrum-Search--valid": "_spectrum-Search--valid_d08c7",
    "spectrum-Search--loadable": "_spectrum-Search--loadable_d08c7",
    "spectrum-Search-circleLoader": "_spectrum-Search-circleLoader_d08c7",
    "spectrum-Search-validationIcon": "_spectrum-Search-validationIcon_d08c7",
    "spectrum-Textfield": "_spectrum-Textfield_d08c7"
};
var $b42ee6503342f63a10b70c33e73302b1$$interop$default = $parcel$interopDefault($b42ee6503342f63a10b70c33e73302b1$exports);
function $c7bd01575afa7bea7ba1694646$var$SearchField(props, ref) {
    props = useProviderProps(props);
    let defaultIcon = /*#__PURE__*/ _react.createElement(_spectrumIconsUiMagnifier, null);
    let { icon =defaultIcon , isDisabled , UNSAFE_className  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "icon",
        "isDisabled",
        "UNSAFE_className"
    ]);
    let state = useSearchFieldState(props);
    let inputRef = useRef();
    let { labelProps , inputProps , clearButtonProps  } = useSearchField(props, state, inputRef);
    let clearButton = /*#__PURE__*/ _react.createElement(ClearButton, _babelRuntimeHelpersExtends({
    }, clearButtonProps, {
        preventFocus: true,
        UNSAFE_className: classNames($b42ee6503342f63a10b70c33e73302b1$$interop$default, 'spectrum-ClearButton'),
        isDisabled: isDisabled
    }));
    return(/*#__PURE__*/ _react.createElement(TextFieldBase, _babelRuntimeHelpersExtends({
    }, otherProps, {
        labelProps: labelProps,
        inputProps: inputProps,
        UNSAFE_className: classNames($b42ee6503342f63a10b70c33e73302b1$$interop$default, 'spectrum-Search', 'spectrum-Textfield', {
            'is-disabled': isDisabled,
            'is-quiet': props.isQuiet,
            'spectrum-Search--invalid': props.validationState === 'invalid',
            'spectrum-Search--valid': props.validationState === 'valid'
        }, UNSAFE_className),
        inputClassName: classNames($b42ee6503342f63a10b70c33e73302b1$$interop$default, 'spectrum-Search-input'),
        ref: ref,
        inputRef: inputRef,
        isDisabled: isDisabled,
        icon: icon,
        wrapperChildren: state.value !== '' && !props.isReadOnly && clearButton
    })));
}
/**
 * A SearchField is a text field designed for searches.
 */ let SearchField = /*#__PURE__*/ forwardRef($c7bd01575afa7bea7ba1694646$var$SearchField);
exports.SearchField = SearchField;

},{"@react-stately/searchfield":"20uXu","@react-aria/searchfield":"XJ9dn","@react-spectrum/provider":"3Y6zE","@react-spectrum/textfield":"39Gqw","react":"a6qBW","@spectrum-icons/ui/Magnifier":"4Xob5","@react-spectrum/button":"7zChe","@react-spectrum/utils":"7ch5A","@babel/runtime/helpers/objectWithoutPropertiesLoose":"5byko","@babel/runtime/helpers/extends":"5xz6u","./main.css":"271uB"}],"20uXu":[function(require,module,exports) {
var { useControlledState  } = require("@react-stately/utils");
/**
 * Provides state management for a search field.
 */ function useSearchFieldState(props) {
    let [value, setValue] = useControlledState($f7e1711a9e517c942ab938ede655$var$toString(props.value), $f7e1711a9e517c942ab938ede655$var$toString(props.defaultValue) || '', props.onChange);
    return {
        value,
        setValue
    };
}
exports.useSearchFieldState = useSearchFieldState;
function $f7e1711a9e517c942ab938ede655$var$toString(val) {
    if (val == null) return;
    return val.toString();
}

},{"@react-stately/utils":"7ILZk"}],"XJ9dn":[function(require,module,exports) {
var { useTextField  } = require("@react-aria/textfield");
var { useMessageFormatter  } = require("@react-aria/i18n");
var _babelRuntimeHelpersInteropRequireDefault = $parcel$interopDefault(require("@babel/runtime/helpers/interopRequireDefault"));
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/searchfield/intl/ar-AE.json
var $e098623c5abd86207131f0484ad08121$exports = {
};
$e098623c5abd86207131f0484ad08121$exports = JSON.parse("{\"Clear search\":\"مسح البحث\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/searchfield/intl/bg-BG.json
var $f809dec720e7c26424349d9b2d46bdde$exports = {
};
$f809dec720e7c26424349d9b2d46bdde$exports = JSON.parse("{\"Clear search\":\"Изчистване на търсене\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/searchfield/intl/cs-CZ.json
var $f39fdcc11c18cca380d05ed422ed7$exports = {
};
$f39fdcc11c18cca380d05ed422ed7$exports = JSON.parse("{\"Clear search\":\"Vymazat hledání\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/searchfield/intl/da-DK.json
var $e9c10faa05d161fc8cafbf580e22ea$exports = {
};
$e9c10faa05d161fc8cafbf580e22ea$exports = JSON.parse("{\"Clear search\":\"Ryd søgning\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/searchfield/intl/de-DE.json
var $f4167ea5b036e4ac15c508b1cf59df14$exports = {
};
$f4167ea5b036e4ac15c508b1cf59df14$exports = JSON.parse("{\"Clear search\":\"Suche zurücksetzen\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/searchfield/intl/el-GR.json
var $d7e651a69756bedd0a48f04c4979516$exports = {
};
$d7e651a69756bedd0a48f04c4979516$exports = JSON.parse("{\"Clear search\":\"Απαλοιφή αναζήτησης\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/searchfield/intl/en-US.json
var $f20e253760cf5bc2f29783e0efe5d83a$exports = {
};
$f20e253760cf5bc2f29783e0efe5d83a$exports = JSON.parse("{\"Clear search\":\"Clear search\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/searchfield/intl/es-ES.json
var $ef99dd9fe708cf73b353c5f8197b4fb4$exports = {
};
$ef99dd9fe708cf73b353c5f8197b4fb4$exports = JSON.parse("{\"Clear search\":\"Borrar búsqueda\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/searchfield/intl/et-EE.json
var $a59a7e0dfb3f440e2e1e97ce8efc419f$exports = {
};
$a59a7e0dfb3f440e2e1e97ce8efc419f$exports = JSON.parse("{\"Clear search\":\"Tühjenda otsing\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/searchfield/intl/fi-FI.json
var $f290a64a313f77f835a41d6296ad2f2e$exports = {
};
$f290a64a313f77f835a41d6296ad2f2e$exports = JSON.parse("{\"Clear search\":\"Tyhjennä haku\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/searchfield/intl/fr-FR.json
var $b31bed97651267e242d24d6551022ca4$exports = {
};
$b31bed97651267e242d24d6551022ca4$exports = JSON.parse("{\"Clear search\":\"Effacer la recherche\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/searchfield/intl/he-IL.json
var $b8bf653d634ff7703d1050e7604e471$exports = {
};
$b8bf653d634ff7703d1050e7604e471$exports = JSON.parse("{\"Clear search\":\"נקה חיפוש\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/searchfield/intl/hr-HR.json
var $f1891ffa77e96268137169940188a75b$exports = {
};
$f1891ffa77e96268137169940188a75b$exports = JSON.parse("{\"Clear search\":\"Obriši pretragu\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/searchfield/intl/hu-HU.json
var $c38253ddc5536f3a23da97c192b$exports = {
};
$c38253ddc5536f3a23da97c192b$exports = JSON.parse("{\"Clear search\":\"Keresés törlése\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/searchfield/intl/it-IT.json
var $ae5bd8001e6aa93d0004fe7b738d58$exports = {
};
$ae5bd8001e6aa93d0004fe7b738d58$exports = JSON.parse("{\"Clear search\":\"Cancella ricerca\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/searchfield/intl/ja-JP.json
var $aefc2841f76847585483f29f024f58e$exports = {
};
$aefc2841f76847585483f29f024f58e$exports = JSON.parse("{\"Clear search\":\"検索をクリア\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/searchfield/intl/ko-KR.json
var $ca9c804c7c60f9f4b54a5bdf03e3aab5$exports = {
};
$ca9c804c7c60f9f4b54a5bdf03e3aab5$exports = JSON.parse("{\"Clear search\":\"검색 지우기\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/searchfield/intl/lt-LT.json
var $ad2776f3ca36dd88d43877a2276e33c$exports = {
};
$ad2776f3ca36dd88d43877a2276e33c$exports = JSON.parse("{\"Clear search\":\"Išvalyti iešką\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/searchfield/intl/lv-LV.json
var $e6cac712062558e97d0094b46c66d4$exports = {
};
$e6cac712062558e97d0094b46c66d4$exports = JSON.parse("{\"Clear search\":\"Notīrīt meklēšanu\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/searchfield/intl/nb-NO.json
var $b33b6231715f6133acd32dacc5b5b49$exports = {
};
$b33b6231715f6133acd32dacc5b5b49$exports = JSON.parse("{\"Clear search\":\"Tøm søk\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/searchfield/intl/nl-NL.json
var $d61451fa63a769096a98e5af75c10e31$exports = {
};
$d61451fa63a769096a98e5af75c10e31$exports = JSON.parse("{\"Clear search\":\"Zoekactie wissen\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/searchfield/intl/pl-PL.json
var $ad0509fcc7b39e04e72957f6f8a2db1a$exports = {
};
$ad0509fcc7b39e04e72957f6f8a2db1a$exports = JSON.parse("{\"Clear search\":\"Wyczyść zawartość wyszukiwania\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/searchfield/intl/pt-BR.json
var $e933c14bff3961483408c2e5$exports = {
};
$e933c14bff3961483408c2e5$exports = JSON.parse("{\"Clear search\":\"Limpar pesquisa\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/searchfield/intl/pt-PT.json
var $f26435fc24bee6edb1a669189d31d19$exports = {
};
$f26435fc24bee6edb1a669189d31d19$exports = JSON.parse("{\"Clear search\":\"Limpar pesquisa\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/searchfield/intl/ro-RO.json
var $c17b0ec1db5334397055294b2a8ef12a$exports = {
};
$c17b0ec1db5334397055294b2a8ef12a$exports = JSON.parse("{\"Clear search\":\"Ştergeţi căutarea\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/searchfield/intl/ru-RU.json
var $f3876d8384793c7f37094f9397b8016$exports = {
};
$f3876d8384793c7f37094f9397b8016$exports = JSON.parse("{\"Clear search\":\"Очистить поиск\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/searchfield/intl/sk-SK.json
var $b7970608090e874dab4bdc404ef44023$exports = {
};
$b7970608090e874dab4bdc404ef44023$exports = JSON.parse("{\"Clear search\":\"Vymazať vyhľadávanie\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/searchfield/intl/sl-SI.json
var $b396a3efb76f7b09f30f6e7e66867b5$exports = {
};
$b396a3efb76f7b09f30f6e7e66867b5$exports = JSON.parse("{\"Clear search\":\"Počisti iskanje\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/searchfield/intl/sr-SP.json
var $f3aa7ff05bada8828401ad3b50cb7$exports = {
};
$f3aa7ff05bada8828401ad3b50cb7$exports = JSON.parse("{\"Clear search\":\"Obriši pretragu\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/searchfield/intl/sv-SE.json
var $e82232fbfea9d7f7e0ab593a7f7a472e$exports = {
};
$e82232fbfea9d7f7e0ab593a7f7a472e$exports = JSON.parse("{\"Clear search\":\"Rensa sökning\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/searchfield/intl/tr-TR.json
var $c8cd6e9b2bd3a9db0d504690f1e$exports = {
};
$c8cd6e9b2bd3a9db0d504690f1e$exports = JSON.parse("{\"Clear search\":\"Aramayı temizle\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/searchfield/intl/uk-UA.json
var $f7a97678369f7cf4c628d1ac54c$exports = {
};
$f7a97678369f7cf4c628d1ac54c$exports = JSON.parse("{\"Clear search\":\"Очистити пошук\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/searchfield/intl/zh-CN.json
var $bc630f8eedd1e90520de8cc0efa6eeb6$exports = {
};
$bc630f8eedd1e90520de8cc0efa6eeb6$exports = JSON.parse("{\"Clear search\":\"清除搜索\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/searchfield/intl/zh-TW.json
var $e251690a4ee68f5d22186ee4854f6d15$exports = {
};
$e251690a4ee68f5d22186ee4854f6d15$exports = JSON.parse("{\"Clear search\":\"清除搜尋條件\"}");
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // @ts-ignore
const $bf491a6398f2208b3a1929ee4aa18$var$intlMessages = {
    "ar-AE": _babelRuntimeHelpersInteropRequireDefault($e098623c5abd86207131f0484ad08121$exports).default,
    "bg-BG": _babelRuntimeHelpersInteropRequireDefault($f809dec720e7c26424349d9b2d46bdde$exports).default,
    "cs-CZ": _babelRuntimeHelpersInteropRequireDefault($f39fdcc11c18cca380d05ed422ed7$exports).default,
    "da-DK": _babelRuntimeHelpersInteropRequireDefault($e9c10faa05d161fc8cafbf580e22ea$exports).default,
    "de-DE": _babelRuntimeHelpersInteropRequireDefault($f4167ea5b036e4ac15c508b1cf59df14$exports).default,
    "el-GR": _babelRuntimeHelpersInteropRequireDefault($d7e651a69756bedd0a48f04c4979516$exports).default,
    "en-US": _babelRuntimeHelpersInteropRequireDefault($f20e253760cf5bc2f29783e0efe5d83a$exports).default,
    "es-ES": _babelRuntimeHelpersInteropRequireDefault($ef99dd9fe708cf73b353c5f8197b4fb4$exports).default,
    "et-EE": _babelRuntimeHelpersInteropRequireDefault($a59a7e0dfb3f440e2e1e97ce8efc419f$exports).default,
    "fi-FI": _babelRuntimeHelpersInteropRequireDefault($f290a64a313f77f835a41d6296ad2f2e$exports).default,
    "fr-FR": _babelRuntimeHelpersInteropRequireDefault($b31bed97651267e242d24d6551022ca4$exports).default,
    "he-IL": _babelRuntimeHelpersInteropRequireDefault($b8bf653d634ff7703d1050e7604e471$exports).default,
    "hr-HR": _babelRuntimeHelpersInteropRequireDefault($f1891ffa77e96268137169940188a75b$exports).default,
    "hu-HU": _babelRuntimeHelpersInteropRequireDefault($c38253ddc5536f3a23da97c192b$exports).default,
    "it-IT": _babelRuntimeHelpersInteropRequireDefault($ae5bd8001e6aa93d0004fe7b738d58$exports).default,
    "ja-JP": _babelRuntimeHelpersInteropRequireDefault($aefc2841f76847585483f29f024f58e$exports).default,
    "ko-KR": _babelRuntimeHelpersInteropRequireDefault($ca9c804c7c60f9f4b54a5bdf03e3aab5$exports).default,
    "lt-LT": _babelRuntimeHelpersInteropRequireDefault($ad2776f3ca36dd88d43877a2276e33c$exports).default,
    "lv-LV": _babelRuntimeHelpersInteropRequireDefault($e6cac712062558e97d0094b46c66d4$exports).default,
    "nb-NO": _babelRuntimeHelpersInteropRequireDefault($b33b6231715f6133acd32dacc5b5b49$exports).default,
    "nl-NL": _babelRuntimeHelpersInteropRequireDefault($d61451fa63a769096a98e5af75c10e31$exports).default,
    "pl-PL": _babelRuntimeHelpersInteropRequireDefault($ad0509fcc7b39e04e72957f6f8a2db1a$exports).default,
    "pt-BR": _babelRuntimeHelpersInteropRequireDefault($e933c14bff3961483408c2e5$exports).default,
    "pt-PT": _babelRuntimeHelpersInteropRequireDefault($f26435fc24bee6edb1a669189d31d19$exports).default,
    "ro-RO": _babelRuntimeHelpersInteropRequireDefault($c17b0ec1db5334397055294b2a8ef12a$exports).default,
    "ru-RU": _babelRuntimeHelpersInteropRequireDefault($f3876d8384793c7f37094f9397b8016$exports).default,
    "sk-SK": _babelRuntimeHelpersInteropRequireDefault($b7970608090e874dab4bdc404ef44023$exports).default,
    "sl-SI": _babelRuntimeHelpersInteropRequireDefault($b396a3efb76f7b09f30f6e7e66867b5$exports).default,
    "sr-SP": _babelRuntimeHelpersInteropRequireDefault($f3aa7ff05bada8828401ad3b50cb7$exports).default,
    "sv-SE": _babelRuntimeHelpersInteropRequireDefault($e82232fbfea9d7f7e0ab593a7f7a472e$exports).default,
    "tr-TR": _babelRuntimeHelpersInteropRequireDefault($c8cd6e9b2bd3a9db0d504690f1e$exports).default,
    "uk-UA": _babelRuntimeHelpersInteropRequireDefault($f7a97678369f7cf4c628d1ac54c$exports).default,
    "zh-CN": _babelRuntimeHelpersInteropRequireDefault($bc630f8eedd1e90520de8cc0efa6eeb6$exports).default,
    "zh-TW": _babelRuntimeHelpersInteropRequireDefault($e251690a4ee68f5d22186ee4854f6d15$exports).default
};
/**
 * Provides the behavior and accessibility implementation for a search field.
 * @param props - Props for the search field.
 * @param state - State for the search field, as returned by `useSearchFieldState`.
 * @param inputRef - A ref to the input element.
 */ function useSearchField(props, state, inputRef) {
    let formatMessage = useMessageFormatter($bf491a6398f2208b3a1929ee4aa18$var$intlMessages);
    let { isDisabled , onSubmit =()=>{
    } , onClear , type ='search'  } = props;
    let onKeyDown = (e)=>{
        const key = e.key;
        if (key === 'Enter' || key === 'Escape') e.preventDefault();
        if (isDisabled) return;
        if (key === 'Enter') onSubmit(state.value);
        if (key === 'Escape') {
            state.setValue('');
            if (onClear) onClear();
        }
    };
    let onClearButtonClick = ()=>{
        state.setValue('');
        if (onClear) onClear();
    };
    let onPressStart = ()=>{
        // this is in PressStart for mobile so that touching the clear button doesn't remove focus from
        // the input and close the keyboard
        inputRef.current.focus();
    };
    let { labelProps , inputProps  } = useTextField(_babelRuntimeHelpersExtends({
    }, props, {
        value: state.value,
        onChange: state.setValue,
        onKeyDown,
        type
    }), inputRef);
    return {
        labelProps,
        inputProps: _babelRuntimeHelpersExtends({
        }, inputProps, {
            // already handled by useSearchFieldState
            defaultValue: undefined
        }),
        clearButtonProps: {
            'aria-label': formatMessage('Clear search'),
            excludeFromTabOrder: true,
            onPress: onClearButtonClick,
            onPressStart
        }
    };
}
exports.useSearchField = useSearchField;

},{"@react-aria/textfield":"4AjqK","@react-aria/i18n":"6xZcx","@babel/runtime/helpers/interopRequireDefault":"5TvsK","@babel/runtime/helpers/extends":"5xz6u"}],"4Xob5":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = Magnifier;
var _Magnifier = require("@adobe/react-spectrum-ui/dist/Magnifier");
var _icon = require("@react-spectrum/icon");
var _react = _interopRequireDefault(require("react"));
function Magnifier(props) {
    return(/*#__PURE__*/ _react.default.createElement(_icon.UIIcon, props, /*#__PURE__*/ _react.default.createElement(_Magnifier.Magnifier, null)));
}

},{"@babel/runtime/helpers/interopRequireDefault":"5TvsK","@adobe/react-spectrum-ui/dist/Magnifier":"2cfTG","@react-spectrum/icon":"5ij4g","react":"a6qBW"}],"2cfTG":[function(require,module,exports) {
/**
* @adobe/react-spectrum-ui (c) by Adobe
* 
* @adobe/react-spectrum-ui is licensed under a
* Creative Commons Attribution-NoDerivatives 4.0 International License.
* 
* You should have received a copy of the license along with this
* work. If not, see <http://creativecommons.org/licenses/by-nd/4.0/>.
**/ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Magnifier = Magnifier;
var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutProperties(source, excluded) {
    if (source == null) return {
    };
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function Magnifier(_ref) {
    var _ref$scale = _ref.scale, scale = _ref$scale === void 0 ? 'M' : _ref$scale, props = _objectWithoutProperties(_ref, [
        "scale"
    ]);
    return _react["default"].createElement("svg", _extends({
    }, props, props), scale === 'L' && _react["default"].createElement("path", {
        d: "M19.77 18.71l-5.464-5.464a7.503 7.503 0 1 0-1.06 1.06l5.463 5.464a.75.75 0 1 0 1.061-1.06zM2.5 8.5a6 6 0 1 1 6 6 6.007 6.007 0 0 1-6-6z"
    }), scale === 'M' && _react["default"].createElement("path", {
        d: "M15.77 14.71l-4.534-4.535a6.014 6.014 0 1 0-1.06 1.06l4.533 4.535a.75.75 0 1 0 1.061-1.06zM6.5 11A4.5 4.5 0 1 1 11 6.5 4.505 4.505 0 0 1 6.5 11z"
    }));
}
Magnifier.displayName = 'Magnifier';

},{"react":"a6qBW"}],"271uB":[function() {},{}],"2ZvH7":[function(require,module,exports) {
var { useProviderProps  } = require("@react-spectrum/provider");
var _react2 = require("react");
var _react = $parcel$interopDefault(_react2);
var { forwardRef  } = _react2;
var { filterDOMProps  } = require("@react-aria/utils");
var { classNames , useDOMRef , useStyleProps  } = require("@react-spectrum/utils");
var _babelRuntimeHelpersObjectWithoutPropertiesLoose = $parcel$interopDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
require("./main.css");
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/statuslight/vars.css
var $e5d7a37f7bdf1f624f38f79b87678a42$exports = {
};
$e5d7a37f7bdf1f624f38f79b87678a42$exports = {
    "spectrum-StatusLight": "_spectrum-StatusLight_71d0f",
    "spectrum-StatusLight--neutral": "_spectrum-StatusLight--neutral_71d0f",
    "is-disabled": "_is-disabled_71d0f",
    "spectrum-StatusLight--negative": "_spectrum-StatusLight--negative_71d0f",
    "spectrum-StatusLight--notice": "_spectrum-StatusLight--notice_71d0f",
    "spectrum-StatusLight--positive": "_spectrum-StatusLight--positive_71d0f",
    "spectrum-StatusLight--info": "_spectrum-StatusLight--info_71d0f",
    "spectrum-StatusLight--active": "_spectrum-StatusLight--active_71d0f",
    "spectrum-StatusLight--celery": "_spectrum-StatusLight--celery_71d0f",
    "spectrum-StatusLight--yellow": "_spectrum-StatusLight--yellow_71d0f",
    "spectrum-StatusLight--fuchsia": "_spectrum-StatusLight--fuchsia_71d0f",
    "spectrum-StatusLight--indigo": "_spectrum-StatusLight--indigo_71d0f",
    "spectrum-StatusLight--seafoam": "_spectrum-StatusLight--seafoam_71d0f",
    "spectrum-StatusLight--chartreuse": "_spectrum-StatusLight--chartreuse_71d0f",
    "spectrum-StatusLight--magenta": "_spectrum-StatusLight--magenta_71d0f",
    "spectrum-StatusLight--purple": "_spectrum-StatusLight--purple_71d0f"
};
var $e5d7a37f7bdf1f624f38f79b87678a42$$interop$default = $parcel$interopDefault($e5d7a37f7bdf1f624f38f79b87678a42$exports);
function $e73b264a0f1df629ff3e0b79dc4e357a$var$StatusLight(props, ref) {
    let _useProviderProps = useProviderProps(props), { variant , children , isDisabled , role  } = _useProviderProps, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(_useProviderProps, [
        "variant",
        "children",
        "isDisabled",
        "role"
    ]);
    let domRef = useDOMRef(ref);
    let { styleProps  } = useStyleProps(otherProps);
    if (!children && !props['aria-label']) console.warn('If no children are provided, an aria-label must be specified');
    if (!role && (props['aria-label'] || props['aria-labelledby'])) console.warn('A labelled StatusLight must have a role.');
    return(/*#__PURE__*/ _react.createElement("div", _babelRuntimeHelpersExtends({
    }, filterDOMProps(otherProps, {
        labelable: !!role
    }), styleProps, {
        role: role,
        className: classNames($e5d7a37f7bdf1f624f38f79b87678a42$$interop$default, 'spectrum-StatusLight', "spectrum-StatusLight--" + variant, {
            'is-disabled': isDisabled
        }, styleProps.className),
        ref: domRef
    }), children));
}
/**
 * Status lights are used to color code categories and labels commonly found in data visualization.
 * When status lights have a semantic meaning, they should use semantic variant colors.
 */ let StatusLight = /*#__PURE__*/ forwardRef($e73b264a0f1df629ff3e0b79dc4e357a$var$StatusLight);
exports.StatusLight = StatusLight;

},{"@react-spectrum/provider":"3Y6zE","react":"a6qBW","@react-aria/utils":"d8qxy","@react-spectrum/utils":"7ch5A","@babel/runtime/helpers/objectWithoutPropertiesLoose":"5byko","@babel/runtime/helpers/extends":"5xz6u","./main.css":"mExtT"}],"mExtT":[function() {},{}],"1IKmS":[function(require,module,exports) {
var { useToggleState  } = require("@react-stately/toggle");
var { useSwitch  } = require("@react-aria/switch");
var { useProviderProps  } = require("@react-spectrum/provider");
var { useHover  } = require("@react-aria/interactions");
var _react2 = require("react");
var _react = $parcel$interopDefault(_react2);
var { forwardRef , useRef  } = _react2;
var { FocusRing  } = require("@react-aria/focus");
var { classNames , useFocusableRef , useStyleProps  } = require("@react-spectrum/utils");
var _babelRuntimeHelpersObjectWithoutPropertiesLoose = $parcel$interopDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
require("./main.css");
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/toggle/vars.css
var $c0e9fa21e5197f150cb2ac60c4351474$exports = {
};
$c0e9fa21e5197f150cb2ac60c4351474$exports = {
    "spectrum-ToggleSwitch": "_spectrum-ToggleSwitch_fc100",
    "spectrum-ToggleSwitch-input": "_spectrum-ToggleSwitch-input_fc100",
    "spectrum-ToggleSwitch-switch": "_spectrum-ToggleSwitch-switch_fc100",
    "focus-ring": "_focus-ring_fc100",
    "spectrum-ToggleSwitch-label": "_spectrum-ToggleSwitch-label_fc100",
    "is-hovered": "_is-hovered_fc100",
    "spectrum-ToggleSwitch--quiet": "_spectrum-ToggleSwitch--quiet_fc100",
    "spectrum-ToggleSwitch--ab": "_spectrum-ToggleSwitch--ab_fc100"
};
var $c0e9fa21e5197f150cb2ac60c4351474$$interop$default = $parcel$interopDefault($c0e9fa21e5197f150cb2ac60c4351474$exports);
function $db9ffdf19392d6fe228fcec0e1352a3$var$Switch(props, ref) {
    props = useProviderProps(props);
    let { isEmphasized =false , isDisabled =false , autoFocus , children  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "isEmphasized",
        "isDisabled",
        "autoFocus",
        "children"
    ]);
    let { styleProps  } = useStyleProps(otherProps);
    let { hoverProps , isHovered  } = useHover({
        isDisabled
    });
    let inputRef = useRef(null);
    let domRef = useFocusableRef(ref, inputRef);
    let state = useToggleState(props);
    let { inputProps  } = useSwitch(props, state, inputRef);
    return(/*#__PURE__*/ _react.createElement("label", _babelRuntimeHelpersExtends({
    }, styleProps, hoverProps, {
        ref: domRef,
        className: classNames($c0e9fa21e5197f150cb2ac60c4351474$$interop$default, 'spectrum-ToggleSwitch', {
            'spectrum-ToggleSwitch--quiet': !isEmphasized,
            'is-disabled': isDisabled,
            'is-hovered': isHovered
        }, styleProps.className)
    }), /*#__PURE__*/ _react.createElement(FocusRing, {
        focusRingClass: classNames($c0e9fa21e5197f150cb2ac60c4351474$$interop$default, 'focus-ring'),
        autoFocus: autoFocus
    }, /*#__PURE__*/ _react.createElement("input", _babelRuntimeHelpersExtends({
    }, inputProps, {
        ref: inputRef,
        className: classNames($c0e9fa21e5197f150cb2ac60c4351474$$interop$default, 'spectrum-ToggleSwitch-input')
    }))), /*#__PURE__*/ _react.createElement("span", {
        className: classNames($c0e9fa21e5197f150cb2ac60c4351474$$interop$default, 'spectrum-ToggleSwitch-switch')
    }), children && /*#__PURE__*/ _react.createElement("span", {
        className: classNames($c0e9fa21e5197f150cb2ac60c4351474$$interop$default, 'spectrum-ToggleSwitch-label')
    }, children)));
}
/**
 * Switches allow users to turn an individual option on or off.
 * They are usually used to activate or deactivate a specific setting.
 */ const Switch = /*#__PURE__*/ forwardRef($db9ffdf19392d6fe228fcec0e1352a3$var$Switch);
exports.Switch = Switch;

},{"@react-stately/toggle":"1L9xd","@react-aria/switch":"2xJrp","@react-spectrum/provider":"3Y6zE","@react-aria/interactions":"3irYN","react":"a6qBW","@react-aria/focus":"76fMY","@react-spectrum/utils":"7ch5A","@babel/runtime/helpers/objectWithoutPropertiesLoose":"5byko","@babel/runtime/helpers/extends":"5xz6u","./main.css":"5Brfn"}],"2xJrp":[function(require,module,exports) {
var { useToggle  } = require("@react-aria/toggle");
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
/**
 * Provides the behavior and accessibility implementation for a switch component.
 * A switch is similar to a checkbox, but represents on/off values as opposed to selection.
 * @param props - Props for the switch.
 * @param state - State for the switch, as returned by `useToggleState`.
 * @param ref - Ref to the HTML input element.
 */ function useSwitch(props, state, ref) {
    let { inputProps  } = useToggle(props, state, ref);
    let { isSelected  } = state;
    return {
        inputProps: _babelRuntimeHelpersExtends({
        }, inputProps, {
            role: 'switch',
            checked: isSelected,
            'aria-checked': isSelected
        })
    };
}
exports.useSwitch = useSwitch;

},{"@react-aria/toggle":"25Eje","@babel/runtime/helpers/extends":"5xz6u"}],"5Brfn":[function() {},{}],"62B3U":[function(require,module,exports) {
var { useTab , useTabList , useTabPanel  } = require("@react-aria/tabs");
var { useProvider , useProviderProps  } = require("@react-spectrum/provider");
var { useLocale  } = require("@react-aria/i18n");
var { useHover  } = require("@react-aria/interactions");
var { Text: Text1  } = require("@react-spectrum/text");
var { useTabListState  } = require("@react-stately/tabs");
var _react2 = require("react");
var _react = $parcel$interopDefault(_react2);
var { useCallback , useContext , useEffect , useRef , useState  } = _react2;
var { mergeProps , useId , useLayoutEffect , useResizeObserver  } = require("@react-aria/utils");
var { ListCollection  } = require("@react-stately/list");
var { Item: _Item , Picker  } = require("@react-spectrum/picker");
var { FocusRing  } = require("@react-aria/focus");
var { classNames , SlotProvider , unwrapDOMRef , useDOMRef , useStyleProps , useValueEffect  } = require("@react-spectrum/utils");
var _babelRuntimeHelpersObjectWithoutPropertiesLoose = $parcel$interopDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
var { Item , useCollection  } = require("@react-stately/collections");
exports.Item = Item;
require("./main.css");
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/tabs/vars.css
var $a221257d7bd2e9d0c131cda7c75f4f5$exports = {
};
$a221257d7bd2e9d0c131cda7c75f4f5$exports = {
    "spectrum-TabsPanel": "_spectrum-TabsPanel_0248f",
    "spectrum-TabsPanel--horizontal": "_spectrum-TabsPanel--horizontal_0248f",
    "spectrum-TabsPanel--vertical": "_spectrum-TabsPanel--vertical_0248f",
    "spectrum-Tabs": "_spectrum-Tabs_0248f",
    "spectrum-Tabs-item": "_spectrum-Tabs-item_0248f",
    "is-disabled": "_is-disabled_0248f",
    "spectrum-Tabs-itemLabel": "_spectrum-Tabs-itemLabel_0248f",
    "spectrum-Icon": "_spectrum-Icon_0248f",
    "spectrum-Tabs-selectionIndicator": "_spectrum-Tabs-selectionIndicator_0248f",
    "spectrum-Tabs--horizontal": "_spectrum-Tabs--horizontal_0248f",
    "spectrum-Tabs--compact": "_spectrum-Tabs--compact_0248f",
    "spectrum-Tabs--isCollapsed": "_spectrum-Tabs--isCollapsed_0248f",
    "spectrum-Tabs--quiet": "_spectrum-Tabs--quiet_0248f",
    "spectrum-Tabs--vertical": "_spectrum-Tabs--vertical_0248f",
    "spectrum-TabsPanel-collapseWrapper": "_spectrum-TabsPanel-collapseWrapper_0248f",
    "spectrum-TabsPanel-tabs": "_spectrum-TabsPanel-tabs_0248f",
    "spectrum-TabsPanel-tabpanel": "_spectrum-TabsPanel-tabpanel_0248f",
    "focus-ring": "_focus-ring_0248f",
    "is-hovered": "_is-hovered_0248f",
    "is-selected": "_is-selected_0248f"
};
const $a016f96d614f365ec6ad3cd2df19b52$var$TabContext = /*#__PURE__*/ _react.createContext(null);
var $a221257d7bd2e9d0c131cda7c75f4f5$$interop$default = $parcel$interopDefault($a221257d7bd2e9d0c131cda7c75f4f5$exports);
function $a016f96d614f365ec6ad3cd2df19b52$var$Tabs(props, ref) {
    props = useProviderProps(props);
    let { orientation ='horizontal' , density ='regular' , children  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "orientation",
        "density",
        "children"
    ]);
    let domRef = useDOMRef(ref);
    let tablistRef = useRef();
    let wrapperRef = useRef();
    let { direction  } = useLocale();
    let { styleProps  } = useStyleProps(otherProps);
    let [collapse, setCollapse] = useValueEffect(false);
    let [selectedTab, setSelectedTab] = useState();
    const [tabListState, setTabListState] = useState(null);
    useEffect(()=>{
        if (tablistRef.current) {
            let selectedTab1 = tablistRef.current.querySelector("[data-key=\"" + (tabListState == null ? void 0 : tabListState.selectedKey) + "\"]");
            if (selectedTab1 != null) setSelectedTab(selectedTab1);
        } // collapse is in the dep array so selectedTab can be updated for TabLine positioning
    }, [
        children,
        tabListState == null ? void 0 : tabListState.selectedKey,
        collapse,
        tablistRef
    ]);
    let checkShouldCollapse = useCallback(()=>{
        let computeShouldCollapse = ()=>{
            if (wrapperRef.current) {
                let tabsComponent = wrapperRef.current;
                let tabs = tablistRef.current.querySelectorAll('[role="tab"]');
                let lastTab = tabs[tabs.length - 1];
                let end = direction === 'rtl' ? 'left' : 'right';
                let farEdgeTabList = tabsComponent.getBoundingClientRect()[end];
                let farEdgeLastTab = lastTab == null ? void 0 : lastTab.getBoundingClientRect()[end];
                let shouldCollapse = direction === 'rtl' ? farEdgeLastTab < farEdgeTabList : farEdgeTabList < farEdgeLastTab;
                return shouldCollapse;
            }
        };
        if (orientation !== 'vertical') setCollapse(function*() {
            // Make Tabs render in non-collapsed state
            yield false; // Compute if Tabs should collapse and update
            yield computeShouldCollapse();
        });
    }, [
        tablistRef,
        wrapperRef,
        direction,
        orientation,
        setCollapse
    ]);
    useEffect(()=>{
        checkShouldCollapse();
    }, [
        children,
        checkShouldCollapse
    ]);
    useResizeObserver({
        ref: wrapperRef,
        onResize: checkShouldCollapse
    });
    let tabPanelProps = {
        'aria-labelledby': undefined
    }; // When the tabs are collapsed, the tabPanel should be labelled by the Picker button element.
    let collapsibleTabListId = useId();
    if (collapse && orientation !== 'vertical') tabPanelProps['aria-labelledby'] = collapsibleTabListId;
    return(/*#__PURE__*/ _react.createElement($a016f96d614f365ec6ad3cd2df19b52$var$TabContext.Provider, {
        value: {
            tabProps: _babelRuntimeHelpersExtends({
            }, props, {
                orientation,
                density
            }),
            tabState: {
                tabListState,
                setTabListState,
                selectedTab,
                collapse
            },
            refs: {
                tablistRef,
                wrapperRef
            },
            tabPanelProps
        }
    }, /*#__PURE__*/ _react.createElement("div", _babelRuntimeHelpersExtends({
    }, styleProps, {
        ref: domRef,
        className: classNames($a221257d7bd2e9d0c131cda7c75f4f5$$interop$default, 'spectrum-TabsPanel', "spectrum-TabsPanel--" + orientation, styleProps.className)
    }), props.children)));
}
// @private
function $a016f96d614f365ec6ad3cd2df19b52$var$Tab(props) {
    let { item , state , isDisabled: propsDisabled  } = props;
    let { key , rendered  } = item;
    let isDisabled = propsDisabled || state.disabledKeys.has(key);
    let ref = useRef();
    let { tabProps  } = useTab({
        key,
        isDisabled
    }, state, ref);
    let { hoverProps , isHovered  } = useHover(_babelRuntimeHelpersExtends({
    }, props));
    let isSelected = state.selectedKey === key;
    return(/*#__PURE__*/ _react.createElement(FocusRing, {
        focusRingClass: classNames($a221257d7bd2e9d0c131cda7c75f4f5$$interop$default, 'focus-ring')
    }, /*#__PURE__*/ _react.createElement("div", _babelRuntimeHelpersExtends({
    }, mergeProps(tabProps, hoverProps), {
        ref: ref,
        className: classNames($a221257d7bd2e9d0c131cda7c75f4f5$$interop$default, 'spectrum-Tabs-item', {
            'is-selected': isSelected,
            'is-disabled': isDisabled,
            'is-hovered': isHovered
        })
    }), /*#__PURE__*/ _react.createElement(SlotProvider, {
        slots: {
            icon: {
                size: 'S',
                UNSAFE_className: classNames($a221257d7bd2e9d0c131cda7c75f4f5$$interop$default, 'spectrum-Icon')
            },
            text: {
                UNSAFE_className: classNames($a221257d7bd2e9d0c131cda7c75f4f5$$interop$default, 'spectrum-Tabs-itemLabel')
            }
        }
    }, typeof rendered === 'string' ? /*#__PURE__*/ _react.createElement(Text1, null, rendered) : rendered))));
}
// @private
function $a016f96d614f365ec6ad3cd2df19b52$var$TabLine(props) {
    let { orientation , // Is either the tab node (non-collapsed) or the picker node (collapsed)
    selectedTab , // selectedKey is provided so that the TabLine styles are updated when the TabPicker's width updates from a selection change
    selectedKey  } = props;
    let { direction  } = useLocale();
    let { scale  } = useProvider();
    let [style, setStyle] = useState({
        width: undefined,
        height: undefined
    });
    useLayoutEffect(()=>{
        if (selectedTab) {
            var _selectedTab$offsetPa;
            let styleObj = {
                transform: undefined,
                width: undefined,
                height: undefined
            }; // In RTL, calculate the transform from the right edge of the tablist so that resizing the window doesn't break the Tabline position due to offsetLeft changes
            let offset = direction === 'rtl' ? -1 * (((_selectedTab$offsetPa = selectedTab.offsetParent) == null ? void 0 : _selectedTab$offsetPa.offsetWidth) - selectedTab.offsetWidth - selectedTab.offsetLeft) : selectedTab.offsetLeft;
            styleObj.transform = orientation === 'vertical' ? "translateY(" + selectedTab.offsetTop + "px)" : "translateX(" + offset + "px)";
            if (orientation === 'horizontal') styleObj.width = selectedTab.offsetWidth + "px";
            else styleObj.height = selectedTab.offsetHeight + "px";
            setStyle(styleObj);
        }
    }, [
        direction,
        setStyle,
        selectedTab,
        orientation,
        scale,
        selectedKey
    ]);
    return(/*#__PURE__*/ _react.createElement("div", {
        className: classNames($a221257d7bd2e9d0c131cda7c75f4f5$$interop$default, 'spectrum-Tabs-selectionIndicator'),
        role: "presentation",
        style: style
    }));
}
/**
 * A TabList is used within Tabs to group tabs that a user can switch between.
 * The keys of the items within the <TabList> must match up with a corresponding item inside the <TabPanels>.
 */ function TabList(props) {
    const tabContext = useContext($a016f96d614f365ec6ad3cd2df19b52$var$TabContext);
    const { refs , tabState , tabProps , tabPanelProps  } = tabContext;
    const { isQuiet , density , isDisabled , orientation  } = tabProps;
    const { selectedTab , collapse , setTabListState  } = tabState;
    const { tablistRef , wrapperRef  } = refs; // Pass original Tab props but override children to create the collection.
    const state = useTabListState(_babelRuntimeHelpersExtends({
    }, tabProps, {
        children: props.children
    }));
    let { styleProps  } = useStyleProps(props);
    const { tabListProps  } = useTabList(_babelRuntimeHelpersExtends({
    }, tabProps, props), state, tablistRef);
    useEffect(()=>{
        // Passing back to root as useTabPanel needs the TabListState
        setTabListState(state); // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [
        state.disabledKeys,
        state.selectedItem,
        state.selectedKey,
        props.children
    ]);
    let stylePropsForVertical = orientation === 'vertical' ? styleProps : {
    };
    let tabListclassName = classNames($a221257d7bd2e9d0c131cda7c75f4f5$$interop$default, 'spectrum-TabsPanel-tabs');
    const tabContent = /*#__PURE__*/ _react.createElement("div", _babelRuntimeHelpersExtends({
    }, stylePropsForVertical, tabListProps, {
        ref: tablistRef,
        className: classNames($a221257d7bd2e9d0c131cda7c75f4f5$$interop$default, 'spectrum-Tabs', "spectrum-Tabs--" + orientation, tabListclassName, {
            'spectrum-Tabs--quiet': isQuiet,
            ['spectrum-Tabs--compact']: density === 'compact'
        }, orientation === 'vertical' && styleProps.className)
    }), [
        ...state.collection
    ].map((item)=>/*#__PURE__*/ _react.createElement($a016f96d614f365ec6ad3cd2df19b52$var$Tab, {
            key: item.key,
            item: item,
            state: state,
            isDisabled: isDisabled,
            orientation: orientation
        })
    ), /*#__PURE__*/ _react.createElement($a016f96d614f365ec6ad3cd2df19b52$var$TabLine, {
        orientation: orientation,
        selectedTab: selectedTab
    }));
    if (orientation === 'vertical') return tabContent;
    else return(/*#__PURE__*/ _react.createElement("div", _babelRuntimeHelpersExtends({
    }, styleProps, {
        ref: wrapperRef,
        className: classNames($a221257d7bd2e9d0c131cda7c75f4f5$$interop$default, 'spectrum-TabsPanel-collapseWrapper', styleProps.className)
    }), collapse ? /*#__PURE__*/ _react.createElement($a016f96d614f365ec6ad3cd2df19b52$var$TabPicker, _babelRuntimeHelpersExtends({
    }, props, tabProps, {
        id: tabPanelProps['aria-labelledby'],
        state: state,
        className: tabListclassName
    })) : tabContent));
}
/**
 * TabPanels is used within Tabs as a container for the content of each tab.
 * The keys of the items within the <TabPanels> must match up with a corresponding item inside the <TabList>.
 */ exports.TabList = TabList;
function TabPanels(props) {
    const { tabState , tabProps  } = useContext($a016f96d614f365ec6ad3cd2df19b52$var$TabContext);
    const { tabListState  } = tabState;
    const factory = (nodes)=>new ListCollection(nodes)
    ;
    const collection = useCollection(_babelRuntimeHelpersExtends({
        items: tabProps.items
    }, props), factory, {
        suppressTextValueWarning: true
    });
    const selectedItem = tabListState ? collection.getItem(tabListState.selectedKey) : null;
    return(/*#__PURE__*/ _react.createElement($a016f96d614f365ec6ad3cd2df19b52$var$TabPanel, _babelRuntimeHelpersExtends({
    }, props, {
        key: tabListState == null ? void 0 : tabListState.selectedKey
    }), selectedItem && selectedItem.props.children));
} // @private
exports.TabPanels = TabPanels;
function $a016f96d614f365ec6ad3cd2df19b52$var$TabPanel(props) {
    const { tabState , tabPanelProps: ctxTabPanelProps  } = useContext($a016f96d614f365ec6ad3cd2df19b52$var$TabContext);
    const { tabListState  } = tabState;
    let ref = useRef();
    const { tabPanelProps  } = useTabPanel(props, tabListState, ref);
    let { styleProps  } = useStyleProps(props);
    if (ctxTabPanelProps['aria-labelledby']) tabPanelProps['aria-labelledby'] = ctxTabPanelProps['aria-labelledby'];
    return(/*#__PURE__*/ _react.createElement(FocusRing, {
        focusRingClass: classNames($a221257d7bd2e9d0c131cda7c75f4f5$$interop$default, 'focus-ring')
    }, /*#__PURE__*/ _react.createElement("div", _babelRuntimeHelpersExtends({
    }, styleProps, tabPanelProps, {
        ref: ref,
        className: classNames($a221257d7bd2e9d0c131cda7c75f4f5$$interop$default, 'spectrum-TabsPanel-tabpanel', styleProps.className)
    }), props.children)));
}
function $a016f96d614f365ec6ad3cd2df19b52$var$TabPicker(props) {
    let { isDisabled , isQuiet , state , 'aria-labelledby': ariaLabeledBy , 'aria-label': ariaLabel , density , className , id  } = props;
    let ref = useRef();
    let [pickerNode, setPickerNode] = useState(null);
    useEffect(()=>{
        let node = unwrapDOMRef(ref);
        setPickerNode(node.current);
    }, [
        ref
    ]);
    let items = [
        ...state.collection
    ].map((item)=>({
            rendered: item.rendered,
            textValue: item.textValue,
            id: item.key
        })
    );
    let pickerProps = {
        'aria-labelledby': ariaLabeledBy,
        'aria-label': ariaLabel
    }; // TODO: Figure out if tabListProps should go onto the div here, v2 doesn't do it
    return(/*#__PURE__*/ _react.createElement("div", {
        className: classNames($a221257d7bd2e9d0c131cda7c75f4f5$$interop$default, 'spectrum-Tabs', 'spectrum-Tabs--horizontal', 'spectrum-Tabs--isCollapsed', {
            'spectrum-Tabs--quiet': isQuiet,
            ['spectrum-Tabs--compact']: density === 'compact'
        }, className)
    }, /*#__PURE__*/ _react.createElement(SlotProvider, {
        slots: {
            icon: {
                size: 'S',
                UNSAFE_className: classNames($a221257d7bd2e9d0c131cda7c75f4f5$$interop$default, 'spectrum-Icon')
            },
            button: {
                focusRingClass: classNames($a221257d7bd2e9d0c131cda7c75f4f5$$interop$default, 'focus-ring')
            }
        }
    }, /*#__PURE__*/ _react.createElement(Picker, _babelRuntimeHelpersExtends({
    }, pickerProps, {
        id: id,
        items: items,
        ref: ref,
        isQuiet: true,
        isDisabled: isDisabled,
        selectedKey: state.selectedKey,
        disabledKeys: state.disabledKeys,
        onSelectionChange: state.setSelectedKey
    }), (item)=>/*#__PURE__*/ _react.createElement(_Item, {
            textValue: item.textValue
        }, item.rendered)
    ), pickerNode && /*#__PURE__*/ _react.createElement($a016f96d614f365ec6ad3cd2df19b52$var$TabLine, {
        orientation: "horizontal",
        selectedTab: pickerNode,
        selectedKey: state.selectedKey
    }))));
}
/**
 * Tabs organize content into multiple sections and allow users to navigate between them. The content under the set of tabs should be related and form a coherent unit.
 */ // forwardRef doesn't support generic parameters, so cast the result to the correct type
// https://stackoverflow.com/questions/58469229/react-with-typescript-generics-while-using-react-forwardref
const Tabs = /*#__PURE__*/ _react.forwardRef($a016f96d614f365ec6ad3cd2df19b52$var$Tabs);
exports.Tabs = Tabs;

},{"@react-aria/tabs":"1jMhN","@react-spectrum/provider":"3Y6zE","@react-aria/i18n":"6xZcx","@react-aria/interactions":"3irYN","@react-spectrum/text":"ib5WK","@react-stately/tabs":"547mD","react":"a6qBW","@react-aria/utils":"d8qxy","@react-stately/list":"6jXbK","@react-spectrum/picker":"2BPJK","@react-aria/focus":"76fMY","@react-spectrum/utils":"7ch5A","@babel/runtime/helpers/objectWithoutPropertiesLoose":"5byko","@babel/runtime/helpers/extends":"5xz6u","@react-stately/collections":"4IPbJ","./main.css":"3ASOH"}],"1jMhN":[function(require,module,exports) {
var { useLocale  } = require("@react-aria/i18n");
var { mergeProps , useLabels , useId  } = require("@react-aria/utils");
var { useLayoutEffect , useState , useMemo  } = require("react");
var { getFocusableTreeWalker  } = require("@react-aria/focus");
var { useSelectableItem , useSelectableCollection  } = require("@react-aria/selection");
var { usePress  } = require("@react-aria/interactions");
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ const $c685c043bb86d16b2fcf2a65974f3$export$tabsIds = new WeakMap();
function $c685c043bb86d16b2fcf2a65974f3$export$generateId(state, key, role) {
    if (typeof key === 'string') key = key.replace(/\s+/g, '');
    let baseId = $c685c043bb86d16b2fcf2a65974f3$export$tabsIds.get(state);
    return baseId + "-" + role + "-" + key;
}
/**
 * Provides the behavior and accessibility implementation for a tab.
 * When selected, the associated tab panel is shown.
 */ function useTab(props, state, ref) {
    let { key , isDisabled: propsDisabled  } = props;
    let { selectionManager: manager , selectedKey  } = state;
    let isSelected = key === selectedKey;
    let { itemProps  } = useSelectableItem({
        selectionManager: manager,
        key,
        ref
    });
    let isDisabled = propsDisabled || state.disabledKeys.has(key);
    let { pressProps  } = usePress(_babelRuntimeHelpersExtends({
    }, itemProps, {
        isDisabled
    }));
    let tabId = $c685c043bb86d16b2fcf2a65974f3$export$generateId(state, key, 'tab');
    let tabPanelId = $c685c043bb86d16b2fcf2a65974f3$export$generateId(state, key, 'tabpanel');
    let { tabIndex  } = pressProps;
    return {
        tabProps: _babelRuntimeHelpersExtends({
        }, pressProps, {
            id: tabId,
            'aria-selected': isSelected,
            'aria-disabled': isDisabled || undefined,
            'aria-controls': isSelected ? tabPanelId : undefined,
            tabIndex: isDisabled ? undefined : tabIndex,
            role: 'tab'
        })
    };
}
exports.useTab = useTab;
/**
 * Provides the behavior and accessibility implementation for a tab panel. A tab panel is a container for
 * the contents of a tab, and is shown when the tab is selected.
 */ function useTabPanel(props, state, ref) {
    let [tabIndex, setTabIndex] = useState(0); // The tabpanel should have tabIndex=0 when there are no tabbable elements within it.
    // Otherwise, tabbing from the focused tab should go directly to the first tabbable element
    // within the tabpanel.
    useLayoutEffect(()=>{
        if (ref != null && ref.current) {
            let update = ()=>{
                // Detect if there are any tabbable elements and update the tabIndex accordingly.
                let walker = getFocusableTreeWalker(ref.current, {
                    tabbable: true
                });
                setTabIndex(walker.nextNode() ? undefined : 0);
            };
            update(); // Update when new elements are inserted, or the tabIndex/disabled attribute updates.
            let observer = new MutationObserver(update);
            observer.observe(ref.current, {
                subtree: true,
                childList: true,
                attributes: true,
                attributeFilter: [
                    'tabIndex',
                    'disabled'
                ]
            });
            return ()=>{
                observer.disconnect();
            };
        }
    }, [
        ref
    ]);
    const id = $c685c043bb86d16b2fcf2a65974f3$export$generateId(state, state == null ? void 0 : state.selectedKey, 'tabpanel');
    const tabPanelProps = useLabels(_babelRuntimeHelpersExtends({
    }, props, {
        id,
        'aria-labelledby': $c685c043bb86d16b2fcf2a65974f3$export$generateId(state, state == null ? void 0 : state.selectedKey, 'tab')
    }));
    return {
        tabPanelProps: mergeProps(tabPanelProps, {
            tabIndex,
            role: 'tabpanel',
            'aria-describedby': props['aria-describedby'],
            'aria-details': props['aria-details']
        })
    };
}
exports.useTabPanel = useTabPanel;
class $c98ba41732a4afea84f1af0a5428958$export$TabsKeyboardDelegate {
    constructor(collection, direction, orientation, disabledKeys){
        if (disabledKeys === void 0) disabledKeys = new Set();
        this.collection = void 0;
        this.flipDirection = void 0;
        this.disabledKeys = void 0;
        this.orientation = void 0;
        this.collection = collection;
        this.flipDirection = direction === 'rtl' && orientation === 'horizontal';
        this.orientation = orientation;
        this.disabledKeys = disabledKeys;
    }
    getKeyLeftOf(key) {
        if (this.flipDirection) return this.getNextKey(key);
        else {
            if (this.orientation === 'horizontal') return this.getPreviousKey(key);
            return null;
        }
    }
    getKeyRightOf(key) {
        if (this.flipDirection) return this.getPreviousKey(key);
        else {
            if (this.orientation === 'horizontal') return this.getNextKey(key);
            return null;
        }
    }
    getKeyAbove(key) {
        if (this.orientation === 'vertical') return this.getPreviousKey(key);
        return null;
    }
    getKeyBelow(key) {
        if (this.orientation === 'vertical') return this.getNextKey(key);
        return null;
    }
    getFirstKey() {
        let key = this.collection.getFirstKey();
        if (this.disabledKeys.has(key)) key = this.getNextKey(key);
        return key;
    }
    getLastKey() {
        let key = this.collection.getLastKey();
        if (this.disabledKeys.has(key)) key = this.getPreviousKey(key);
        return key;
    }
    getNextKey(key) {
        do {
            key = this.collection.getKeyAfter(key);
            if (key == null) key = this.collection.getFirstKey();
        }while (this.disabledKeys.has(key))
        return key;
    }
    getPreviousKey(key) {
        do {
            key = this.collection.getKeyBefore(key);
            if (key == null) key = this.collection.getLastKey();
        }while (this.disabledKeys.has(key))
        return key;
    }
}
/**
 * Provides the behavior and accessibility implementation for a tab list.
 * Tabs organize content into multiple sections and allow users to navigate between them.
 */ function useTabList(props, state, ref) {
    let { orientation: orientation1 = 'horizontal' , keyboardActivation ='automatic'  } = props;
    let { collection: collection1 , selectionManager: manager , disabledKeys: disabledKeys1  } = state;
    let { direction: direction1  } = useLocale();
    let delegate = useMemo(()=>new $c98ba41732a4afea84f1af0a5428958$export$TabsKeyboardDelegate(collection1, direction1, orientation1, disabledKeys1)
    , [
        collection1,
        disabledKeys1,
        orientation1,
        direction1
    ]);
    let { collectionProps  } = useSelectableCollection({
        ref,
        selectionManager: manager,
        keyboardDelegate: delegate,
        selectOnFocus: keyboardActivation === 'automatic',
        disallowEmptySelection: true
    }); // Compute base id for all tabs
    let tabsId = useId();
    $c685c043bb86d16b2fcf2a65974f3$export$tabsIds.set(state, tabsId);
    let tabListLabelProps = useLabels(_babelRuntimeHelpersExtends({
    }, props, {
        id: tabsId
    }));
    return {
        tabListProps: _babelRuntimeHelpersExtends({
        }, mergeProps(collectionProps, tabListLabelProps), {
            role: 'tablist',
            'aria-orientation': orientation1,
            tabIndex: undefined
        })
    };
}
exports.useTabList = useTabList;

},{"@react-aria/i18n":"6xZcx","@react-aria/utils":"d8qxy","react":"a6qBW","@react-aria/focus":"76fMY","@react-aria/selection":"3khS7","@react-aria/interactions":"3irYN","@babel/runtime/helpers/extends":"5xz6u"}],"547mD":[function(require,module,exports) {
var { useEffect  } = require("react");
var { useSingleSelectListState  } = require("@react-stately/list");
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
/**
 * Provides state management for a Tabs component. Tabs include a TabList which tracks
 * which tab is currently selected and displays the content associated with that Tab in a TabPanel.
 */ function useTabListState(props) {
    let state = useSingleSelectListState(_babelRuntimeHelpersExtends({
    }, props, {
        suppressTextValueWarning: true
    }));
    useEffect(()=>{
        // Ensure a tab is always selected (in case no selected key was specified or if selected item was deleted from collection)
        let selectedKey = state.selectedKey;
        if (state.selectionManager.isEmpty || !state.collection.getItem(selectedKey)) {
            selectedKey = state.collection.getFirstKey();
            state.selectionManager.replaceSelection(selectedKey);
        }
        if (state.selectionManager.focusedKey == null) state.selectionManager.setFocusedKey(selectedKey);
    }, [
        state.selectionManager,
        state.selectedKey,
        state.collection
    ]);
    return state;
}
exports.useTabListState = useTabListState;

},{"react":"a6qBW","@react-stately/list":"6jXbK","@babel/runtime/helpers/extends":"5xz6u"}],"3ASOH":[function() {},{}],"4hlmb":[function(require,module,exports) {
require("./main.css");
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/vars/spectrum-dark.css
var $f3dd3704586a86d4aeb06a347fdf6a$exports = {
};
$f3dd3704586a86d4aeb06a347fdf6a$exports = {
    "spectrum--dark": "_spectrum--dark_61099"
};
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/vars/spectrum-darkest.css
var $cf8ed174d1fbd864d1206b5e8a3c262$exports = {
};
$cf8ed174d1fbd864d1206b5e8a3c262$exports = {
    "spectrum--darkest": "_spectrum--darkest_acf7f"
};
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/vars/spectrum-global.css
var $b3d87d42a3b0ee7f09fdccf7740f9569$exports = {
};
$b3d87d42a3b0ee7f09fdccf7740f9569$exports = {
    "spectrum": "_spectrum_5be2e",
    "spectrum--medium": "_spectrum--medium_5be2e",
    "spectrum--large": "_spectrum--large_5be2e",
    "spectrum--darkest": "_spectrum--darkest_5be2e",
    "spectrum--dark": "_spectrum--dark_5be2e",
    "spectrum--light": "_spectrum--light_5be2e",
    "spectrum--lightest": "_spectrum--lightest_5be2e"
};
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/vars/spectrum-large.css
var $b402298dcb2ea73f1cd9cf191$exports = {
};
$b402298dcb2ea73f1cd9cf191$exports = {
    "spectrum--large": "_spectrum--large_4f200"
};
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/vars/spectrum-medium.css
var $b02b84ece36f72b1103c5ef5d9e1692a$exports = {
};
$b02b84ece36f72b1103c5ef5d9e1692a$exports = {
    "spectrum--medium": "_spectrum--medium_b3c97"
};
var $b3d87d42a3b0ee7f09fdccf7740f9569$$interop$default = $parcel$interopDefault($b3d87d42a3b0ee7f09fdccf7740f9569$exports);
var $f3dd3704586a86d4aeb06a347fdf6a$$interop$default = $parcel$interopDefault($f3dd3704586a86d4aeb06a347fdf6a$exports);
var $cf8ed174d1fbd864d1206b5e8a3c262$$interop$default = $parcel$interopDefault($cf8ed174d1fbd864d1206b5e8a3c262$exports);
var $b02b84ece36f72b1103c5ef5d9e1692a$$interop$default = $parcel$interopDefault($b02b84ece36f72b1103c5ef5d9e1692a$exports);
var $b402298dcb2ea73f1cd9cf191$$interop$default = $parcel$interopDefault($b402298dcb2ea73f1cd9cf191$exports);
let theme = {
    global: $b3d87d42a3b0ee7f09fdccf7740f9569$$interop$default,
    light: $f3dd3704586a86d4aeb06a347fdf6a$$interop$default,
    dark: $cf8ed174d1fbd864d1206b5e8a3c262$$interop$default,
    medium: $b02b84ece36f72b1103c5ef5d9e1692a$$interop$default,
    large: $b402298dcb2ea73f1cd9cf191$$interop$default
};
exports.theme = theme;

},{"./main.css":"7lX4d"}],"7lX4d":[function() {},{}],"1nkAa":[function(require,module,exports) {
require("./main.css");
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/vars/spectrum-darkest.css
var $cf8ed174d1fbd864d1206b5e8a3c262$exports = {
};
$cf8ed174d1fbd864d1206b5e8a3c262$exports = {
    "spectrum--darkest": "_spectrum--darkest_acf7f"
};
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/vars/spectrum-global.css
var $b3d87d42a3b0ee7f09fdccf7740f9569$exports = {
};
$b3d87d42a3b0ee7f09fdccf7740f9569$exports = {
    "spectrum": "_spectrum_5be2e",
    "spectrum--medium": "_spectrum--medium_5be2e",
    "spectrum--large": "_spectrum--large_5be2e",
    "spectrum--darkest": "_spectrum--darkest_5be2e",
    "spectrum--dark": "_spectrum--dark_5be2e",
    "spectrum--light": "_spectrum--light_5be2e",
    "spectrum--lightest": "_spectrum--lightest_5be2e"
};
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/vars/spectrum-large.css
var $b402298dcb2ea73f1cd9cf191$exports = {
};
$b402298dcb2ea73f1cd9cf191$exports = {
    "spectrum--large": "_spectrum--large_4f200"
};
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/vars/spectrum-light.css
var $ef8732b4bd8f7534057c4b76375199be$exports = {
};
$ef8732b4bd8f7534057c4b76375199be$exports = {
    "spectrum--light": "_spectrum--light_606b7"
};
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/vars/spectrum-medium.css
var $b02b84ece36f72b1103c5ef5d9e1692a$exports = {
};
$b02b84ece36f72b1103c5ef5d9e1692a$exports = {
    "spectrum--medium": "_spectrum--medium_b3c97"
};
var $b3d87d42a3b0ee7f09fdccf7740f9569$$interop$default = $parcel$interopDefault($b3d87d42a3b0ee7f09fdccf7740f9569$exports);
var $ef8732b4bd8f7534057c4b76375199be$$interop$default = $parcel$interopDefault($ef8732b4bd8f7534057c4b76375199be$exports);
var $cf8ed174d1fbd864d1206b5e8a3c262$$interop$default = $parcel$interopDefault($cf8ed174d1fbd864d1206b5e8a3c262$exports);
var $b02b84ece36f72b1103c5ef5d9e1692a$$interop$default = $parcel$interopDefault($b02b84ece36f72b1103c5ef5d9e1692a$exports);
var $b402298dcb2ea73f1cd9cf191$$interop$default = $parcel$interopDefault($b402298dcb2ea73f1cd9cf191$exports);
let theme = {
    global: $b3d87d42a3b0ee7f09fdccf7740f9569$$interop$default,
    light: $ef8732b4bd8f7534057c4b76375199be$$interop$default,
    dark: $cf8ed174d1fbd864d1206b5e8a3c262$$interop$default,
    medium: $b02b84ece36f72b1103c5ef5d9e1692a$$interop$default,
    large: $b402298dcb2ea73f1cd9cf191$$interop$default
};
exports.theme = theme;

},{"./main.css":"4FUwZ"}],"4FUwZ":[function() {},{}],"4JkwG":[function(require,module,exports) {
require("./main.css");
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/vars/spectrum-darkest.css
var $cf8ed174d1fbd864d1206b5e8a3c262$exports = {
};
$cf8ed174d1fbd864d1206b5e8a3c262$exports = {
    "spectrum--darkest": "_spectrum--darkest_acf7f"
};
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/vars/spectrum-global.css
var $b3d87d42a3b0ee7f09fdccf7740f9569$exports = {
};
$b3d87d42a3b0ee7f09fdccf7740f9569$exports = {
    "spectrum": "_spectrum_5be2e",
    "spectrum--medium": "_spectrum--medium_5be2e",
    "spectrum--large": "_spectrum--large_5be2e",
    "spectrum--darkest": "_spectrum--darkest_5be2e",
    "spectrum--dark": "_spectrum--dark_5be2e",
    "spectrum--light": "_spectrum--light_5be2e",
    "spectrum--lightest": "_spectrum--lightest_5be2e"
};
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/vars/spectrum-large.css
var $b402298dcb2ea73f1cd9cf191$exports = {
};
$b402298dcb2ea73f1cd9cf191$exports = {
    "spectrum--large": "_spectrum--large_4f200"
};
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/vars/spectrum-lightest.css
var $a065f9015bd96e7bb6ca03721fb$exports = {
};
$a065f9015bd96e7bb6ca03721fb$exports = {
    "spectrum--lightest": "_spectrum--lightest_05988"
};
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/vars/spectrum-medium.css
var $b02b84ece36f72b1103c5ef5d9e1692a$exports = {
};
$b02b84ece36f72b1103c5ef5d9e1692a$exports = {
    "spectrum--medium": "_spectrum--medium_b3c97"
};
var $b3d87d42a3b0ee7f09fdccf7740f9569$$interop$default = $parcel$interopDefault($b3d87d42a3b0ee7f09fdccf7740f9569$exports);
var $a065f9015bd96e7bb6ca03721fb$$interop$default = $parcel$interopDefault($a065f9015bd96e7bb6ca03721fb$exports);
var $cf8ed174d1fbd864d1206b5e8a3c262$$interop$default = $parcel$interopDefault($cf8ed174d1fbd864d1206b5e8a3c262$exports);
var $b02b84ece36f72b1103c5ef5d9e1692a$$interop$default = $parcel$interopDefault($b02b84ece36f72b1103c5ef5d9e1692a$exports);
var $b402298dcb2ea73f1cd9cf191$$interop$default = $parcel$interopDefault($b402298dcb2ea73f1cd9cf191$exports);
let theme = {
    global: $b3d87d42a3b0ee7f09fdccf7740f9569$$interop$default,
    light: $a065f9015bd96e7bb6ca03721fb$$interop$default,
    dark: $cf8ed174d1fbd864d1206b5e8a3c262$$interop$default,
    medium: $b02b84ece36f72b1103c5ef5d9e1692a$$interop$default,
    large: $b402298dcb2ea73f1cd9cf191$$interop$default
};
exports.theme = theme;

},{"./main.css":"54xzC"}],"54xzC":[function() {},{}],"4PJ1Z":[function(require,module,exports) {
var _react2 = require("react");
var _react = $parcel$interopDefault(_react2);
var { forwardRef  } = _react2;
var { filterDOMProps  } = require("@react-aria/utils");
var { classNames , useDOMRef , useStyleProps  } = require("@react-spectrum/utils");
var _babelRuntimeHelpersObjectWithoutPropertiesLoose = $parcel$interopDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
require("./main.css");
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/well/vars.css
var $a130fdabd783f318e8c35e8a239$exports = {
};
$a130fdabd783f318e8c35e8a239$exports = {
    "spectrum-Well": "_spectrum-Well_daead"
};
var $a130fdabd783f318e8c35e8a239$$interop$default = $parcel$interopDefault($a130fdabd783f318e8c35e8a239$exports);
function $ebf17523e38960cd1bcede856a195$var$Well(props, ref) {
    let { children , role  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "children",
        "role"
    ]);
    let domRef = useDOMRef(ref);
    let { styleProps  } = useStyleProps(otherProps);
    if (!role && (props['aria-label'] || props['aria-labelledby'])) console.warn('A labelled Well must have a role.');
    return(/*#__PURE__*/ _react.createElement("div", _babelRuntimeHelpersExtends({
    }, filterDOMProps(otherProps, {
        labelable: !!role
    }), styleProps, {
        role: role,
        ref: domRef,
        className: classNames($a130fdabd783f318e8c35e8a239$$interop$default, 'spectrum-Well', styleProps.className)
    }), children));
}
/**
 * A Well is a content container that displays non-editable content separate from other content on the screen.
 * Often this is used to display preformatted text, such as code/markup examples on a documentation page.
 */ const Well = /*#__PURE__*/ forwardRef($ebf17523e38960cd1bcede856a195$var$Well);
exports.Well = Well;

},{"react":"a6qBW","@react-aria/utils":"d8qxy","@react-spectrum/utils":"7ch5A","@babel/runtime/helpers/objectWithoutPropertiesLoose":"5byko","@babel/runtime/helpers/extends":"5xz6u","./main.css":"W47SF"}],"W47SF":[function() {},{}],"44YS8":[function(require,module,exports) {
var { useMemo , useState , useEffect , useReducer  } = require("react");
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
/**
 * Manages state for an immutable list data structure, and provides convenience methods to
 * update the data over time.
 */ function useListData(options) {
    let { initialItems =[] , initialSelectedKeys , getKey =(item)=>item.id || item.key
     , filter , initialFilterText =''  } = options; // Store both items and filteredItems in state so we can go back to the unfiltered list
    let [state, setState] = useState({
        items: initialItems,
        selectedKeys: initialSelectedKeys === 'all' ? 'all' : new Set(initialSelectedKeys || []),
        filterText: initialFilterText
    });
    let filteredItems = useMemo(()=>filter ? state.items.filter((item)=>filter(item, state.filterText)
        ) : state.items
    , [
        state.items,
        state.filterText,
        filter
    ]);
    return _babelRuntimeHelpersExtends({
    }, state, {
        items: filteredItems
    }, $f237d9b45bc5fe911ce76292c069bdd7$export$createListActions({
        getKey
    }, setState), {
        getItem (key) {
            return state.items.find((item)=>getKey(item) === key
            );
        }
    });
}
exports.useListData = useListData;
function $f237d9b45bc5fe911ce76292c069bdd7$export$createListActions(opts, dispatch) {
    let { getKey  } = opts;
    return {
        setSelectedKeys (selectedKeys) {
            dispatch((state)=>_babelRuntimeHelpersExtends({
                }, state, {
                    selectedKeys
                })
            );
        },
        setFilterText (filterText) {
            dispatch((state)=>_babelRuntimeHelpersExtends({
                }, state, {
                    filterText
                })
            );
        },
        insert (index) {
            for(var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)values[_key - 1] = arguments[_key];
            dispatch((state)=>$f237d9b45bc5fe911ce76292c069bdd7$var$insert(state, index, ...values)
            );
        },
        insertBefore (key) {
            for(var _len2 = arguments.length, values = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)values[_key2 - 1] = arguments[_key2];
            dispatch((state)=>{
                let index = state.items.findIndex((item)=>getKey(item) === key
                );
                if (index === -1) return;
                return $f237d9b45bc5fe911ce76292c069bdd7$var$insert(state, index, ...values);
            });
        },
        insertAfter (key) {
            for(var _len3 = arguments.length, values = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++)values[_key3 - 1] = arguments[_key3];
            dispatch((state)=>{
                let index = state.items.findIndex((item)=>getKey(item) === key
                );
                if (index === -1) return;
                return $f237d9b45bc5fe911ce76292c069bdd7$var$insert(state, index + 1, ...values);
            });
        },
        prepend () {
            for(var _len4 = arguments.length, values = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++)values[_key4] = arguments[_key4];
            dispatch((state)=>$f237d9b45bc5fe911ce76292c069bdd7$var$insert(state, 0, ...values)
            );
        },
        append () {
            for(var _len5 = arguments.length, values = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++)values[_key5] = arguments[_key5];
            dispatch((state)=>$f237d9b45bc5fe911ce76292c069bdd7$var$insert(state, state.items.length, ...values)
            );
        },
        remove () {
            for(var _len6 = arguments.length, keys = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++)keys[_key6] = arguments[_key6];
            dispatch((state)=>{
                let keySet = new Set(keys);
                let items = state.items.filter((item)=>!keySet.has(getKey(item))
                );
                let selection = new Set(state.selectedKeys);
                for (let key of keys)selection.delete(key);
                return _babelRuntimeHelpersExtends({
                }, state, {
                    items,
                    selectedKeys: selection
                });
            });
        },
        removeSelectedItems () {
            dispatch((state)=>{
                if (state.selectedKeys === 'all') return _babelRuntimeHelpersExtends({
                }, state, {
                    items: [],
                    selectedKeys: new Set()
                });
                let selectedKeys = state.selectedKeys;
                let items = state.items.filter((item)=>!selectedKeys.has(getKey(item))
                );
                return _babelRuntimeHelpersExtends({
                }, state, {
                    items,
                    selectedKeys: new Set()
                });
            });
        },
        move (key, toIndex) {
            dispatch((state)=>{
                let index = state.items.findIndex((item)=>getKey(item) === key
                );
                if (index === -1) return state;
                let copy = state.items.slice();
                let [item] = copy.splice(index, 1);
                copy.splice(toIndex, 0, item);
                return _babelRuntimeHelpersExtends({
                }, state, {
                    items: copy
                });
            });
        },
        moveBefore (key, keys) {
            dispatch((state)=>{
                let toIndex = state.items.findIndex((item)=>getKey(item) === key
                );
                if (toIndex === -1) return state;
                 // Find indices of keys to move. Sort them so that the order in the list is retained.
                let indices = keys.map((key)=>state.items.findIndex((item)=>getKey(item) === key
                    )
                ).sort();
                return $f237d9b45bc5fe911ce76292c069bdd7$var$move(state, indices, toIndex);
            });
        },
        moveAfter (key, keys) {
            dispatch((state)=>{
                let toIndex = state.items.findIndex((item)=>getKey(item) === key
                );
                if (toIndex === -1) return state;
                let indices = keys.map((key)=>state.items.findIndex((item)=>getKey(item) === key
                    )
                ).sort();
                return $f237d9b45bc5fe911ce76292c069bdd7$var$move(state, indices, toIndex + 1);
            });
        },
        update (key, newValue) {
            dispatch((state)=>{
                let index = state.items.findIndex((item)=>getKey(item) === key
                );
                if (index === -1) return state;
                return _babelRuntimeHelpersExtends({
                }, state, {
                    items: [
                        ...state.items.slice(0, index),
                        newValue,
                        ...state.items.slice(index + 1)
                    ]
                });
            });
        }
    };
}
function $f237d9b45bc5fe911ce76292c069bdd7$var$insert(state, index) {
    for(var _len7 = arguments.length, values = new Array(_len7 > 2 ? _len7 - 2 : 0), _key7 = 2; _key7 < _len7; _key7++)values[_key7 - 2] = arguments[_key7];
    return _babelRuntimeHelpersExtends({
    }, state, {
        items: [
            ...state.items.slice(0, index),
            ...values,
            ...state.items.slice(index)
        ]
    });
}
function $f237d9b45bc5fe911ce76292c069bdd7$var$move(state, indices, toIndex) {
    // Shift the target down by the number of items being moved from before the target
    for (let index of indices)if (index < toIndex) toIndex--;
    let moves = indices.map((from)=>({
            from,
            to: toIndex++
        })
    ); // Shift later from indices down if they have a larger index
    for(let i = 0; i < moves.length; i++){
        let a = moves[i].from;
        for(let j = i; j < moves.length; j++){
            let b = moves[j].from;
            if (b > a) moves[j].from--;
        }
    } // Interleave the moves so they can be applied one by one rather than all at once
    for(let i1 = 0; i1 < moves.length; i1++){
        let a = moves[i1];
        for(let j = moves.length - 1; j > i1; j--){
            let b = moves[j];
            if (b.from < a.to) a.to++;
            else b.from++;
        }
    }
    let copy = state.items.slice();
    for (let move of moves){
        let [item] = copy.splice(move.from, 1);
        copy.splice(move.to, 0, item);
    }
    return _babelRuntimeHelpersExtends({
    }, state, {
        items: copy
    });
}
function $fbe26d4ebdaa302e354dcbb53fc6447$var$reducer(data, action) {
    var _action$filterText, _action$sortDescripto, _action$filterText2, _action$selectedKeys, _action$sortDescripto2, _action$filterText3, _action$selectedKeys2, _action$sortDescripto3, _action$filterText4;
    switch(data.state){
        case 'idle':
        case 'error':
            switch(action.type){
                case 'loading':
                case 'loadingMore':
                case 'sorting':
                case 'filtering':
                    return _babelRuntimeHelpersExtends({
                    }, data, {
                        filterText: (_action$filterText = action.filterText) != null ? _action$filterText : data.filterText,
                        state: action.type,
                        // Reset items to an empty list if loading, but not when sorting.
                        items: action.type === 'loading' ? [] : data.items,
                        sortDescriptor: (_action$sortDescripto = action.sortDescriptor) != null ? _action$sortDescripto : data.sortDescriptor,
                        abortController: action.abortController
                    });
                case 'update':
                    return _babelRuntimeHelpersExtends({
                    }, data, action.updater(data));
                case 'success':
                case 'error':
                    return data;
                default:
                    throw new Error("Invalid action \"" + action.type + "\" in state \"" + data.state + "\"");
            }
        case 'loading':
        case 'sorting':
        case 'filtering':
            switch(action.type){
                case 'success':
                    // Ignore if there is a newer abortcontroller in state.
                    // This means that multiple requests were going at once.
                    // We want to take only the latest result.
                    if (action.abortController !== data.abortController) return data;
                    return _babelRuntimeHelpersExtends({
                    }, data, {
                        filterText: (_action$filterText2 = action.filterText) != null ? _action$filterText2 : data.filterText,
                        state: 'idle',
                        items: [
                            ...action.items
                        ],
                        selectedKeys: new Set((_action$selectedKeys = action.selectedKeys) != null ? _action$selectedKeys : data.selectedKeys),
                        sortDescriptor: (_action$sortDescripto2 = action.sortDescriptor) != null ? _action$sortDescripto2 : data.sortDescriptor,
                        abortController: null,
                        cursor: action.cursor
                    });
                case 'error':
                    if (action.abortController !== data.abortController) return data;
                    return _babelRuntimeHelpersExtends({
                    }, data, {
                        state: 'error',
                        error: action.error,
                        abortController: null
                    });
                case 'loading':
                case 'loadingMore':
                case 'sorting':
                case 'filtering':
                    // We're already loading, and another load was triggered at the same time.
                    // We need to abort the previous load and start a new one.
                    data.abortController.abort();
                    return _babelRuntimeHelpersExtends({
                    }, data, {
                        filterText: (_action$filterText3 = action.filterText) != null ? _action$filterText3 : data.filterText,
                        state: action.type,
                        // Reset items to an empty list if loading, but not when sorting.
                        items: action.type === 'loading' ? [] : data.items,
                        abortController: action.abortController
                    });
                case 'update':
                    // We're already loading, and an update happened at the same time (e.g. selectedKey changed).
                    // Update data but don't abort previous load.
                    return _babelRuntimeHelpersExtends({
                    }, data, action.updater(data));
                default:
                    throw new Error("Invalid action \"" + action.type + "\" in state \"" + data.state + "\"");
            }
        case 'loadingMore':
            switch(action.type){
                case 'success':
                    // Append the new items
                    return _babelRuntimeHelpersExtends({
                    }, data, {
                        state: 'idle',
                        items: [
                            ...data.items,
                            ...action.items
                        ],
                        selectedKeys: new Set([
                            ...data.selectedKeys,
                            ...(_action$selectedKeys2 = action.selectedKeys) != null ? _action$selectedKeys2 : []
                        ]),
                        sortDescriptor: (_action$sortDescripto3 = action.sortDescriptor) != null ? _action$sortDescripto3 : data.sortDescriptor,
                        abortController: null,
                        cursor: action.cursor
                    });
                case 'error':
                    if (action.abortController !== data.abortController) return data;
                    return _babelRuntimeHelpersExtends({
                    }, data, {
                        state: 'error',
                        error: action.error
                    });
                case 'loading':
                case 'sorting':
                case 'filtering':
                    // We're already loading more, and another load was triggered at the same time.
                    // We need to abort the previous load more and start a new one.
                    data.abortController.abort();
                    return _babelRuntimeHelpersExtends({
                    }, data, {
                        filterText: (_action$filterText4 = action.filterText) != null ? _action$filterText4 : data.filterText,
                        state: action.type,
                        // Reset items to an empty list if loading, but not when sorting.
                        items: action.type === 'loading' ? [] : data.items,
                        abortController: action.abortController
                    });
                case 'loadingMore':
                    // If already loading more and another loading more is triggered, abort the new load more since
                    // it is a duplicate request since the cursor hasn't been updated.
                    // Do not overwrite the data.abortController
                    action.abortController.abort();
                    return data;
                case 'update':
                    // We're already loading, and an update happened at the same time (e.g. selectedKey changed).
                    // Update data but don't abort previous load.
                    return _babelRuntimeHelpersExtends({
                    }, data, action.updater(data));
                default:
                    throw new Error("Invalid action \"" + action.type + "\" in state \"" + data.state + "\"");
            }
        default:
            throw new Error("Invalid state \"" + data.state + "\"");
    }
}
/**
 * Manages state for an immutable async loaded list data structure, and provides convenience methods to
 * update the data over time. Manages loading and error states, pagination, and sorting.
 */ function useAsyncList(options) {
    const { load , sort , initialSelectedKeys , initialSortDescriptor , getKey =(item)=>item.id || item.key
     , initialFilterText =''  } = options;
    let [data, dispatch] = useReducer($fbe26d4ebdaa302e354dcbb53fc6447$var$reducer, {
        state: 'idle',
        error: null,
        items: [],
        selectedKeys: new Set(initialSelectedKeys),
        sortDescriptor: initialSortDescriptor,
        filterText: initialFilterText
    });
    const dispatchFetch = async (action, fn)=>{
        let abortController = new AbortController();
        try {
            var _action$filterText5, _action$sortDescripto4, _response$filterText;
            dispatch(_babelRuntimeHelpersExtends({
            }, action, {
                abortController
            }));
            let previousFilterText = (_action$filterText5 = action.filterText) != null ? _action$filterText5 : data.filterText;
            let response = await fn({
                items: data.items.slice(),
                selectedKeys: data.selectedKeys,
                sortDescriptor: (_action$sortDescripto4 = action.sortDescriptor) != null ? _action$sortDescripto4 : data.sortDescriptor,
                signal: abortController.signal,
                cursor: action.type === 'loadingMore' ? data.cursor : null,
                filterText: previousFilterText
            });
            let filterText = (_response$filterText = response.filterText) != null ? _response$filterText : previousFilterText;
            dispatch(_babelRuntimeHelpersExtends({
                type: 'success'
            }, response, {
                abortController
            })); // Fetch a new filtered list if filterText is updated via `load` response func rather than list.setFilterText
            // Only do this if not aborted (e.g. user triggers another filter action before load completes)
            if (filterText && filterText !== previousFilterText && !abortController.signal.aborted) dispatchFetch({
                type: 'filtering',
                filterText
            }, load);
        } catch (e) {
            dispatch({
                type: 'error',
                error: e,
                abortController
            });
        }
    };
    useEffect(()=>{
        dispatchFetch({
            type: 'loading'
        }, load); // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    return _babelRuntimeHelpersExtends({
        items: data.items,
        selectedKeys: data.selectedKeys,
        sortDescriptor: data.sortDescriptor,
        isLoading: data.state === 'loading' || data.state === 'loadingMore' || data.state === 'sorting' || data.state === 'filtering',
        loadingState: data.state,
        error: data.error,
        filterText: data.filterText,
        getItem (key) {
            return data.items.find((item)=>getKey(item) === key
            );
        },
        reload () {
            dispatchFetch({
                type: 'loading'
            }, load);
        },
        loadMore () {
            // Ignore if already loading more or if performing server side filtering.
            if (data.state === 'loadingMore' || data.state === 'filtering' || data.cursor == null) return;
            dispatchFetch({
                type: 'loadingMore'
            }, load);
        },
        sort (sortDescriptor) {
            dispatchFetch({
                type: 'sorting',
                sortDescriptor
            }, sort || load);
        }
    }, $f237d9b45bc5fe911ce76292c069bdd7$export$createListActions(_babelRuntimeHelpersExtends({
    }, options, {
        getKey
    }), (fn)=>{
        dispatch({
            type: 'update',
            updater: fn
        });
    }), {
        setFilterText (filterText) {
            dispatchFetch({
                type: 'filtering',
                filterText
            }, load);
        }
    });
}
exports.useAsyncList = useAsyncList;
/**
 * Manages state for an immutable tree data structure, and provides convenience methods to
 * update the data over time.
 */ function useTreeData(options) {
    let { initialItems =[] , initialSelectedKeys , getKey =(item)=>item.id || item.key
     , getChildren =(item)=>item.children || []
      } = options;
    let map = useMemo(()=>new Map()
    , []); // We only want to compute this on initial render.
    // eslint-disable-next-line react-hooks/exhaustive-deps
    let initialNodes = useMemo(()=>buildTree(initialItems)
    , []);
    let [items, setItems] = useState(initialNodes);
    let [selectedKeys, setSelectedKeys] = useState(new Set(initialSelectedKeys || []));
    function buildTree(initialItems1, parentKey) {
        return initialItems1.map((item)=>{
            let node = {
                key: getKey(item),
                parentKey: parentKey,
                value: item,
                children: null
            };
            node.children = buildTree(getChildren(item), node.key);
            map.set(node.key, node);
            return node;
        });
    }
    function updateTree(items1, key, update) {
        let node = map.get(key);
        if (!node) return items1;
         // Create a new node. If null, then delete the node, otherwise replace.
        let newNode = update(node);
        if (newNode == null) deleteNode(node);
        else addNode(newNode);
         // Walk up the tree and update each parent to refer to the new chilren.
        while(node.parentKey){
            let nextParent = map.get(node.parentKey);
            let copy = {
                key: nextParent.key,
                parentKey: nextParent.parentKey,
                value: nextParent.value,
                children: null
            };
            let children = nextParent.children;
            if (newNode == null) children = children.filter((c)=>c !== node
            );
            copy.children = children.map((child)=>{
                if (child === node) return newNode;
                return child;
            });
            map.set(copy.key, copy);
            newNode = copy;
            node = nextParent;
        }
        if (newNode == null) items1 = items1.filter((c)=>c !== node
        );
        return items1.map((item)=>{
            if (item === node) return newNode;
            return item;
        });
    }
    function addNode(node) {
        map.set(node.key, node);
        for (let child of node.children)addNode(child);
    }
    function deleteNode(node) {
        map.delete(node.key);
        for (let child of node.children)deleteNode(child);
    }
    return {
        items,
        selectedKeys,
        setSelectedKeys,
        getItem (key) {
            return map.get(key);
        },
        insert (parentKey, index) {
            for(var _len = arguments.length, values = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++)values[_key - 2] = arguments[_key];
            setItems((items1)=>{
                let nodes = buildTree(values, parentKey); // If parentKey is null, insert into the root.
                if (parentKey == null) return [
                    ...items1.slice(0, index),
                    ...nodes,
                    ...items1.slice(index)
                ];
                 // Otherwise, update the parent node and its ancestors.
                return updateTree(items1, parentKey, (parentNode)=>({
                        key: parentNode.key,
                        parentKey: parentNode.parentKey,
                        value: parentNode.value,
                        children: [
                            ...parentNode.children.slice(0, index),
                            ...nodes,
                            ...parentNode.children.slice(index)
                        ]
                    })
                );
            });
        },
        insertBefore (key) {
            let node = map.get(key);
            if (!node) return;
            let parentNode = map.get(node.parentKey);
            let nodes = parentNode ? parentNode.children : items;
            let index = nodes.indexOf(node);
            for(var _len2 = arguments.length, values = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)values[_key2 - 1] = arguments[_key2];
            this.insert(parentNode == null ? void 0 : parentNode.key, index, ...values);
        },
        insertAfter (key) {
            let node = map.get(key);
            if (!node) return;
            let parentNode = map.get(node.parentKey);
            let nodes = parentNode ? parentNode.children : items;
            let index = nodes.indexOf(node);
            for(var _len3 = arguments.length, values = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++)values[_key3 - 1] = arguments[_key3];
            this.insert(parentNode == null ? void 0 : parentNode.key, index + 1, ...values);
        },
        prepend (parentKey) {
            for(var _len4 = arguments.length, values = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++)values[_key4 - 1] = arguments[_key4];
            this.insert(parentKey, 0, ...values);
        },
        append (parentKey) {
            for(var _len5 = arguments.length, values = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++)values[_key5 - 1] = arguments[_key5];
            if (parentKey == null) this.insert(null, items.length, ...values);
            else {
                let parentNode = map.get(parentKey);
                if (!parentNode) return;
                this.insert(parentKey, parentNode.children.length, ...values);
            }
        },
        remove () {
            let newItems = items;
            for(var _len6 = arguments.length, keys = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++)keys[_key6] = arguments[_key6];
            for (let key of keys)newItems = updateTree(newItems, key, ()=>null
            );
            setItems(newItems);
            let selection = new Set(selectedKeys);
            for (let key1 of selectedKeys)if (!map.has(key1)) selection.delete(key1);
            setSelectedKeys(selection);
        },
        removeSelectedItems () {
            this.remove(...selectedKeys);
        },
        move (key, toParentKey, index) {
            setItems((items1)=>{
                let node = map.get(key);
                if (!node) return items1;
                items1 = updateTree(items1, key, ()=>null
                );
                return updateTree(items1, toParentKey, (parentNode)=>({
                        key: parentNode.key,
                        parentKey: parentNode.parentKey,
                        value: parentNode.value,
                        children: [
                            ...parentNode.children.slice(0, index),
                            node,
                            ...parentNode.children.slice(index)
                        ]
                    })
                );
            });
        },
        update (oldKey, newValue) {
            setItems((items1)=>updateTree(items1, oldKey, (oldNode)=>{
                    let node = {
                        key: oldNode.key,
                        parentKey: oldNode.parentKey,
                        value: newValue,
                        children: null
                    };
                    node.children = buildTree(getChildren(newValue), node.key);
                    return node;
                })
            );
        }
    };
}
exports.useTreeData = useTreeData;

},{"react":"a6qBW","@babel/runtime/helpers/extends":"5xz6u"}],"1mLoQ":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ErrorBoundaryFallbackComponent = exports.withErrorBoundary = exports.ErrorBoundary = undefined;
var _ErrorBoundaryFallbackComponent = require('./ErrorBoundaryFallbackComponent');
var _ErrorBoundaryFallbackComponent2 = _interopRequireDefault(_ErrorBoundaryFallbackComponent);
var _ErrorBoundary = require('./ErrorBoundary');
var _ErrorBoundary2 = _interopRequireDefault(_ErrorBoundary);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
exports.default = _ErrorBoundary2.default;
exports.ErrorBoundary = _ErrorBoundary2.default;
exports.withErrorBoundary = _ErrorBoundary.withErrorBoundary;
exports.ErrorBoundaryFallbackComponent = _ErrorBoundaryFallbackComponent2.default;

},{"./ErrorBoundaryFallbackComponent":"65Xc9","./ErrorBoundary":"4nT63"}],"65Xc9":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _react = require("react");
var _react2 = _interopRequireDefault(_react);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var toTitle = function toTitle1(error, componentStack) {
    return error.toString() + "\n\nThis is located at:" + componentStack;
};
var ErrorBoundaryFallbackComponent = function ErrorBoundaryFallbackComponent1(_ref) {
    var componentStack = _ref.componentStack, error = _ref.error;
    return _react2.default.createElement("div", {
        style: style,
        title: toTitle(error, componentStack)
    }, _react2.default.createElement("svg", {
        style: svgStyle,
        viewBox: "0 0 24 24",
        preserveAspectRatio: "xMidYMid"
    }, _react2.default.createElement("path", {
        d: "M20,12A8,8 0 0,0 12,4A8,8 0 0,0 4,12A8,8 0 0,0 12,20A8,8 0 0,0 20,\n        12M22,12A10,10 0 0,1 12,22A10,10 0 0,1 2,12A10,10 0 0,1 12,2A10,10 0 0,1 22,\n        12M15.5,8C16.3,8 17,8.7 17,9.5C17,10.3 16.3,11 15.5,11C14.7,11 14,10.3 14,\n        9.5C14,8.7 14.7,8 15.5,8M10,9.5C10,10.3 9.3,11 8.5,11C7.7,11 7,10.3 7,9.5C7,\n        8.7 7.7,8 8.5,8C9.3,8 10,8.7 10,9.5M12,14C13.75,14 15.29,14.72 16.19,\n        15.81L14.77,17.23C14.32,16.5 13.25,16 12,16C10.75,16 9.68,16.5 9.23,\n        17.23L7.81,15.81C8.71,14.72 10.25,14 12,14Z"
    })));
};
ErrorBoundaryFallbackComponent.propTypes = {
    componentStack: require("prop-types").string.isRequired,
    error: typeof Error === "function" ? require("prop-types").instanceOf(Error).isRequired : require("prop-types").any.isRequired
};
var style = {
    height: '100%',
    maxHeight: '100vh',
    width: '100%',
    maxWidth: '100vw',
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    textAlign: 'center',
    backgroundColor: '#C00',
    color: '#FFF',
    boxSizing: 'border-box',
    cursor: 'help'
};
var svgStyle = {
    fill: 'currentColor',
    flex: '1 1 auto'
};
exports.default = ErrorBoundaryFallbackComponent;

},{"react":"a6qBW","prop-types":"22hk3"}],"4nT63":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.withErrorBoundary = undefined;
var _createClass = function() {
    function defineProperties(target, props) {
        for(var i = 0; i < props.length; i++){
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}();
var _react = require('react');
var _react2 = _interopRequireDefault(_react);
var _ErrorBoundaryFallbackComponent = require('./ErrorBoundaryFallbackComponent');
var _ErrorBoundaryFallbackComponent2 = _interopRequireDefault(_ErrorBoundaryFallbackComponent);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
function _possibleConstructorReturn(self, call) {
    if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return call && (typeof call === "object" || typeof call === "function") ? call : self;
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
        }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}
var babelPluginFlowReactPropTypes_proptype_ComponentType = require('react').babelPluginFlowReactPropTypes_proptype_ComponentType || require('prop-types').any;
var ErrorBoundary1 = function(_Component) {
    _inherits(ErrorBoundary2, _Component);
    function ErrorBoundary2() {
        var _ref;
        var _temp, _this, _ret;
        _classCallCheck(this, ErrorBoundary2);
        for(var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ErrorBoundary2.__proto__ || Object.getPrototypeOf(ErrorBoundary2)).call.apply(_ref, [
            this
        ].concat(args))), _this), _this.state = {
            error: null,
            info: null
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }
    _createClass(ErrorBoundary2, [
        {
            key: 'componentDidCatch',
            value: function componentDidCatch(error, info) {
                var onError = this.props.onError;
                if (typeof onError === 'function') try {
                    /* istanbul ignore next: Ignoring ternary; can’t reproduce missing info in test environment. */ onError.call(this, error, info ? info.componentStack : '');
                } catch (ignoredError) {
                }
                this.setState({
                    error: error,
                    info: info
                });
            }
        },
        {
            key: 'render',
            value: function render() {
                var _props = this.props, children = _props.children, FallbackComponent = _props.FallbackComponent;
                var _state = this.state, error = _state.error, info = _state.info;
                if (error !== null) return _react2.default.createElement(FallbackComponent, {
                    componentStack: // istanbul ignore next: Ignoring ternary; can’t reproduce missing info in test environment.
                    info ? info.componentStack : '',
                    error: error
                });
                return children || null;
            }
        }
    ]);
    return ErrorBoundary2;
}(_react.Component);
ErrorBoundary1.defaultProps = {
    FallbackComponent: _ErrorBoundaryFallbackComponent2.default
};
ErrorBoundary1.propTypes = {
    error: typeof Error === 'function' ? require('prop-types').instanceOf(Error) : require('prop-types').any,
    info: require('prop-types').shape({
        componentStack: require('prop-types').string.isRequired
    })
};
var withErrorBoundary = exports.withErrorBoundary = function withErrorBoundary1(Component, FallbackComponent, onError) {
    var Wrapped = function Wrapped1(props) {
        return _react2.default.createElement(ErrorBoundary1, {
            FallbackComponent: FallbackComponent,
            onError: onError
        }, _react2.default.createElement(Component, props));
    };
    // Format for display in DevTools
    var name = Component.displayName || Component.name;
    Wrapped.displayName = name ? 'WithErrorBoundary(' + name + ')' : 'WithErrorBoundary';
    return Wrapped;
};
withErrorBoundary.propTypes = babelPluginFlowReactPropTypes_proptype_ComponentType === require('prop-types').any ? {
} : babelPluginFlowReactPropTypes_proptype_ComponentType;
exports.default = ErrorBoundary1;

},{"react":"a6qBW","./ErrorBoundaryFallbackComponent":"65Xc9","prop-types":"22hk3"}],"CKZ3k":[function(require,module,exports) {
"use strict";
module.exports = require("./cjs/react-router-dom.js");

},{"./cjs/react-router-dom.js":"2cHoo"}],"2cHoo":[function(require,module,exports) {
'use strict';
function _interopDefault(ex) {
    return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}
var reactRouter = require('react-router');
var React = _interopDefault(require('react'));
var history = require('history');
var PropTypes = _interopDefault(require('prop-types'));
var warning = _interopDefault(require('tiny-warning'));
var invariant = _interopDefault(require('tiny-invariant'));
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
/**
 * The public API for a <Router> that uses HTML5 history.
 */ var BrowserRouter1 = /*#__PURE__*/ function(_React$Component) {
    _inheritsLoose(BrowserRouter2, _React$Component);
    function BrowserRouter2() {
        var _this;
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        _this = _React$Component.call.apply(_React$Component, [
            this
        ].concat(args)) || this;
        _this.history = history.createBrowserHistory(_this.props);
        return _this;
    }
    var _proto = BrowserRouter2.prototype;
    _proto.render = function render() {
        return React.createElement(reactRouter.Router, {
            history: this.history,
            children: this.props.children
        });
    };
    return BrowserRouter2;
}(React.Component);
BrowserRouter1.propTypes = {
    basename: PropTypes.string,
    children: PropTypes.node,
    forceRefresh: PropTypes.bool,
    getUserConfirmation: PropTypes.func,
    keyLength: PropTypes.number
};
BrowserRouter1.prototype.componentDidMount = function() {
    warning(!this.props.history, "<BrowserRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { BrowserRouter as Router }`.");
};
/**
 * The public API for a <Router> that uses window.location.hash.
 */ var HashRouter1 = /*#__PURE__*/ function(_React$Component) {
    _inheritsLoose(HashRouter2, _React$Component);
    function HashRouter2() {
        var _this;
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        _this = _React$Component.call.apply(_React$Component, [
            this
        ].concat(args)) || this;
        _this.history = history.createHashHistory(_this.props);
        return _this;
    }
    var _proto = HashRouter2.prototype;
    _proto.render = function render() {
        return React.createElement(reactRouter.Router, {
            history: this.history,
            children: this.props.children
        });
    };
    return HashRouter2;
}(React.Component);
HashRouter1.propTypes = {
    basename: PropTypes.string,
    children: PropTypes.node,
    getUserConfirmation: PropTypes.func,
    hashType: PropTypes.oneOf([
        "hashbang",
        "noslash",
        "slash"
    ])
};
HashRouter1.prototype.componentDidMount = function() {
    warning(!this.props.history, "<HashRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { HashRouter as Router }`.");
};
var resolveToLocation = function resolveToLocation1(to, currentLocation) {
    return typeof to === "function" ? to(currentLocation) : to;
};
var normalizeToLocation = function normalizeToLocation1(to, currentLocation) {
    return typeof to === "string" ? history.createLocation(to, null, null, currentLocation) : to;
};
var forwardRefShim = function forwardRefShim1(C) {
    return C;
};
var forwardRef = React.forwardRef;
if (typeof forwardRef === "undefined") forwardRef = forwardRefShim;
function isModifiedEvent(event) {
    return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
}
var LinkAnchor = forwardRef(function(_ref, forwardedRef) {
    var innerRef = _ref.innerRef, navigate = _ref.navigate, _onClick = _ref.onClick, rest = _objectWithoutPropertiesLoose(_ref, [
        "innerRef",
        "navigate",
        "onClick"
    ]);
    var target = rest.target;
    var props = _extends({
    }, rest, {
        onClick: function onClick(event) {
            try {
                if (_onClick) _onClick(event);
            } catch (ex) {
                event.preventDefault();
                throw ex;
            }
            if (!event.defaultPrevented && event.button === 0 && (!target || target === "_self") && !isModifiedEvent(event)) {
                event.preventDefault();
                navigate();
            }
        }
    }); // React 15 compat
    if (forwardRefShim !== forwardRef) props.ref = forwardedRef || innerRef;
    else props.ref = innerRef;
    /* eslint-disable-next-line jsx-a11y/anchor-has-content */ return React.createElement("a", props);
});
LinkAnchor.displayName = "LinkAnchor";
/**
 * The public API for rendering a history-aware <a>.
 */ var Link = forwardRef(function(_ref2, forwardedRef) {
    var _ref2$component = _ref2.component, component = _ref2$component === void 0 ? LinkAnchor : _ref2$component, replace = _ref2.replace, to = _ref2.to, innerRef = _ref2.innerRef, rest = _objectWithoutPropertiesLoose(_ref2, [
        "component",
        "replace",
        "to",
        "innerRef"
    ]);
    return React.createElement(reactRouter.__RouterContext.Consumer, null, function(context) {
        !context && invariant(false, "You should not use <Link> outside a <Router>");
        var history1 = context.history;
        var location = normalizeToLocation(resolveToLocation(to, context.location), context.location);
        var href = location ? history1.createHref(location) : "";
        var props = _extends({
        }, rest, {
            href: href,
            navigate: function navigate() {
                var location1 = resolveToLocation(to, context.location);
                var method = replace ? history1.replace : history1.push;
                method(location1);
            }
        }); // React 15 compat
        if (forwardRefShim !== forwardRef) props.ref = forwardedRef || innerRef;
        else props.innerRef = innerRef;
        return React.createElement(component, props);
    });
});
var toType = PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.object,
    PropTypes.func
]);
var refType = PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.func,
    PropTypes.shape({
        current: PropTypes.any
    })
]);
Link.displayName = "Link";
Link.propTypes = {
    innerRef: refType,
    onClick: PropTypes.func,
    replace: PropTypes.bool,
    target: PropTypes.string,
    to: toType.isRequired
};
var forwardRefShim$1 = function forwardRefShim2(C) {
    return C;
};
var forwardRef$1 = React.forwardRef;
if (typeof forwardRef$1 === "undefined") forwardRef$1 = forwardRefShim$1;
function joinClassnames() {
    for(var _len = arguments.length, classnames = new Array(_len), _key = 0; _key < _len; _key++)classnames[_key] = arguments[_key];
    return classnames.filter(function(i) {
        return i;
    }).join(" ");
}
/**
 * A <Link> wrapper that knows if it's "active" or not.
 */ var NavLink = forwardRef$1(function(_ref, forwardedRef) {
    var _ref$ariaCurrent = _ref["aria-current"], ariaCurrent = _ref$ariaCurrent === void 0 ? "page" : _ref$ariaCurrent, _ref$activeClassName = _ref.activeClassName, activeClassName = _ref$activeClassName === void 0 ? "active" : _ref$activeClassName, activeStyle = _ref.activeStyle, classNameProp = _ref.className, exact = _ref.exact, isActiveProp = _ref.isActive, locationProp = _ref.location, sensitive = _ref.sensitive, strict = _ref.strict, styleProp = _ref.style, to = _ref.to, innerRef = _ref.innerRef, rest = _objectWithoutPropertiesLoose(_ref, [
        "aria-current",
        "activeClassName",
        "activeStyle",
        "className",
        "exact",
        "isActive",
        "location",
        "sensitive",
        "strict",
        "style",
        "to",
        "innerRef"
    ]);
    return React.createElement(reactRouter.__RouterContext.Consumer, null, function(context) {
        !context && invariant(false, "You should not use <NavLink> outside a <Router>");
        var currentLocation = locationProp || context.location;
        var toLocation = normalizeToLocation(resolveToLocation(to, currentLocation), currentLocation);
        var path = toLocation.pathname; // Regex taken from: https://github.com/pillarjs/path-to-regexp/blob/master/index.js#L202
        var escapedPath = path && path.replace(/([.+*?=^!:${}()[\]|/\\])/g, "\\$1");
        var match = escapedPath ? reactRouter.matchPath(currentLocation.pathname, {
            path: escapedPath,
            exact: exact,
            sensitive: sensitive,
            strict: strict
        }) : null;
        var isActive = !!(isActiveProp ? isActiveProp(match, currentLocation) : match);
        var className = isActive ? joinClassnames(classNameProp, activeClassName) : classNameProp;
        var style = isActive ? _extends({
        }, styleProp, {
        }, activeStyle) : styleProp;
        var props = _extends({
            "aria-current": isActive && ariaCurrent || null,
            className: className,
            style: style,
            to: toLocation
        }, rest); // React 15 compat
        if (forwardRefShim$1 !== forwardRef$1) props.ref = forwardedRef || innerRef;
        else props.innerRef = innerRef;
        return React.createElement(Link, props);
    });
});
NavLink.displayName = "NavLink";
var ariaCurrentType = PropTypes.oneOf([
    "page",
    "step",
    "location",
    "date",
    "time",
    "true"
]);
NavLink.propTypes = _extends({
}, Link.propTypes, {
    "aria-current": ariaCurrentType,
    activeClassName: PropTypes.string,
    activeStyle: PropTypes.object,
    className: PropTypes.string,
    exact: PropTypes.bool,
    isActive: PropTypes.func,
    location: PropTypes.object,
    sensitive: PropTypes.bool,
    strict: PropTypes.bool,
    style: PropTypes.object
});
Object.defineProperty(exports, 'MemoryRouter', {
    enumerable: true,
    get: function() {
        return reactRouter.MemoryRouter;
    }
});
Object.defineProperty(exports, 'Prompt', {
    enumerable: true,
    get: function() {
        return reactRouter.Prompt;
    }
});
Object.defineProperty(exports, 'Redirect', {
    enumerable: true,
    get: function() {
        return reactRouter.Redirect;
    }
});
Object.defineProperty(exports, 'Route', {
    enumerable: true,
    get: function() {
        return reactRouter.Route;
    }
});
Object.defineProperty(exports, 'Router', {
    enumerable: true,
    get: function() {
        return reactRouter.Router;
    }
});
Object.defineProperty(exports, 'StaticRouter', {
    enumerable: true,
    get: function() {
        return reactRouter.StaticRouter;
    }
});
Object.defineProperty(exports, 'Switch', {
    enumerable: true,
    get: function() {
        return reactRouter.Switch;
    }
});
Object.defineProperty(exports, 'generatePath', {
    enumerable: true,
    get: function() {
        return reactRouter.generatePath;
    }
});
Object.defineProperty(exports, 'matchPath', {
    enumerable: true,
    get: function() {
        return reactRouter.matchPath;
    }
});
Object.defineProperty(exports, 'useHistory', {
    enumerable: true,
    get: function() {
        return reactRouter.useHistory;
    }
});
Object.defineProperty(exports, 'useLocation', {
    enumerable: true,
    get: function() {
        return reactRouter.useLocation;
    }
});
Object.defineProperty(exports, 'useParams', {
    enumerable: true,
    get: function() {
        return reactRouter.useParams;
    }
});
Object.defineProperty(exports, 'useRouteMatch', {
    enumerable: true,
    get: function() {
        return reactRouter.useRouteMatch;
    }
});
Object.defineProperty(exports, 'withRouter', {
    enumerable: true,
    get: function() {
        return reactRouter.withRouter;
    }
});
exports.BrowserRouter = BrowserRouter1;
exports.HashRouter = HashRouter1;
exports.Link = Link;
exports.NavLink = NavLink;

},{"react-router":"HBDl9","react":"a6qBW","history":"2MzH8","prop-types":"22hk3","tiny-warning":"3bpKA","tiny-invariant":"6vrfg"}],"HBDl9":[function(require,module,exports) {
"use strict";
module.exports = require("./cjs/react-router.js");

},{"./cjs/react-router.js":"6ij71"}],"6ij71":[function(require,module,exports) {
'use strict';
function _interopDefault(ex) {
    return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}
var React = _interopDefault(require('react'));
var PropTypes = _interopDefault(require('prop-types'));
var history = require('history');
var warning = _interopDefault(require('tiny-warning'));
var createContext = _interopDefault(require('mini-create-react-context'));
var invariant = _interopDefault(require('tiny-invariant'));
var pathToRegexp = _interopDefault(require('path-to-regexp'));
var reactIs = require('react-is');
var hoistStatics = _interopDefault(require('hoist-non-react-statics'));
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
// TODO: Replace with React.createContext once we can assume React 16+
var createNamedContext = function createNamedContext1(name) {
    var context = createContext();
    context.displayName = name;
    return context;
};
var historyContext = /*#__PURE__*/ createNamedContext("Router-History");
// TODO: Replace with React.createContext once we can assume React 16+
var createNamedContext$1 = function createNamedContext2(name) {
    var context = createContext();
    context.displayName = name;
    return context;
};
var context = /*#__PURE__*/ createNamedContext$1("Router");
/**
 * The public API for putting history on context.
 */ var Router1 = /*#__PURE__*/ function(_React$Component) {
    _inheritsLoose(Router2, _React$Component);
    Router2.computeRootMatch = function computeRootMatch(pathname) {
        return {
            path: "/",
            url: "/",
            params: {
            },
            isExact: pathname === "/"
        };
    };
    function Router2(props) {
        var _this;
        _this = _React$Component.call(this, props) || this;
        _this.state = {
            location: props.history.location
        }; // This is a bit of a hack. We have to start listening for location
        // changes here in the constructor in case there are any <Redirect>s
        // on the initial render. If there are, they will replace/push when
        // they mount and since cDM fires in children before parents, we may
        // get a new location before the <Router> is mounted.
        _this._isMounted = false;
        _this._pendingLocation = null;
        if (!props.staticContext) _this.unlisten = props.history.listen(function(location) {
            if (_this._isMounted) _this.setState({
                location: location
            });
            else _this._pendingLocation = location;
        });
        return _this;
    }
    var _proto = Router2.prototype;
    _proto.componentDidMount = function componentDidMount() {
        this._isMounted = true;
        if (this._pendingLocation) this.setState({
            location: this._pendingLocation
        });
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
        if (this.unlisten) this.unlisten();
    };
    _proto.render = function render() {
        return React.createElement(context.Provider, {
            value: {
                history: this.props.history,
                location: this.state.location,
                match: Router2.computeRootMatch(this.state.location.pathname),
                staticContext: this.props.staticContext
            }
        }, React.createElement(historyContext.Provider, {
            children: this.props.children || null,
            value: this.props.history
        }));
    };
    return Router2;
}(React.Component);
Router1.propTypes = {
    children: PropTypes.node,
    history: PropTypes.object.isRequired,
    staticContext: PropTypes.object
};
Router1.prototype.componentDidUpdate = function(prevProps) {
    warning(prevProps.history === this.props.history, "You cannot change <Router history>");
};
/**
 * The public API for a <Router> that stores location in memory.
 */ var MemoryRouter1 = /*#__PURE__*/ function(_React$Component) {
    _inheritsLoose(MemoryRouter2, _React$Component);
    function MemoryRouter2() {
        var _this;
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        _this = _React$Component.call.apply(_React$Component, [
            this
        ].concat(args)) || this;
        _this.history = history.createMemoryHistory(_this.props);
        return _this;
    }
    var _proto = MemoryRouter2.prototype;
    _proto.render = function render() {
        return React.createElement(Router1, {
            history: this.history,
            children: this.props.children
        });
    };
    return MemoryRouter2;
}(React.Component);
MemoryRouter1.propTypes = {
    initialEntries: PropTypes.array,
    initialIndex: PropTypes.number,
    getUserConfirmation: PropTypes.func,
    keyLength: PropTypes.number,
    children: PropTypes.node
};
MemoryRouter1.prototype.componentDidMount = function() {
    warning(!this.props.history, "<MemoryRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { MemoryRouter as Router }`.");
};
var Lifecycle1 = /*#__PURE__*/ function(_React$Component) {
    _inheritsLoose(Lifecycle2, _React$Component);
    function Lifecycle2() {
        return _React$Component.apply(this, arguments) || this;
    }
    var _proto = Lifecycle2.prototype;
    _proto.componentDidMount = function componentDidMount() {
        if (this.props.onMount) this.props.onMount.call(this, this);
    };
    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
        if (this.props.onUpdate) this.props.onUpdate.call(this, this, prevProps);
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
        if (this.props.onUnmount) this.props.onUnmount.call(this, this);
    };
    _proto.render = function render() {
        return null;
    };
    return Lifecycle2;
}(React.Component);
/**
 * The public API for prompting the user before navigating away from a screen.
 */ function Prompt(_ref) {
    var message = _ref.message, _ref$when = _ref.when, when = _ref$when === void 0 ? true : _ref$when;
    return React.createElement(context.Consumer, null, function(context1) {
        !context1 && invariant(false, "You should not use <Prompt> outside a <Router>");
        if (!when || context1.staticContext) return null;
        var method = context1.history.block;
        return React.createElement(Lifecycle1, {
            onMount: function onMount(self) {
                self.release = method(message);
            },
            onUpdate: function onUpdate(self, prevProps) {
                if (prevProps.message !== message) {
                    self.release();
                    self.release = method(message);
                }
            },
            onUnmount: function onUnmount(self) {
                self.release();
            },
            message: message
        });
    });
}
var messageType = PropTypes.oneOfType([
    PropTypes.func,
    PropTypes.string
]);
Prompt.propTypes = {
    when: PropTypes.bool,
    message: messageType.isRequired
};
var cache = {
};
var cacheLimit = 10000;
var cacheCount = 0;
function compilePath(path) {
    if (cache[path]) return cache[path];
    var generator = pathToRegexp.compile(path);
    if (cacheCount < cacheLimit) {
        cache[path] = generator;
        cacheCount++;
    }
    return generator;
}
/**
 * Public API for generating a URL pathname from a path and parameters.
 */ function generatePath(path, params) {
    if (path === void 0) path = "/";
    if (params === void 0) params = {
    };
    return path === "/" ? path : compilePath(path)(params, {
        pretty: true
    });
}
/**
 * The public API for navigating programmatically with a component.
 */ function Redirect(_ref) {
    var computedMatch = _ref.computedMatch, to = _ref.to, _ref$push = _ref.push, push = _ref$push === void 0 ? false : _ref$push;
    return React.createElement(context.Consumer, null, function(context1) {
        !context1 && invariant(false, "You should not use <Redirect> outside a <Router>");
        var history$1 = context1.history, staticContext = context1.staticContext;
        var method = push ? history$1.push : history$1.replace;
        var location = history.createLocation(computedMatch ? typeof to === "string" ? generatePath(to, computedMatch.params) : _extends({
        }, to, {
            pathname: generatePath(to.pathname, computedMatch.params)
        }) : to); // When rendering in a static context,
        // set the new location immediately.
        if (staticContext) {
            method(location);
            return null;
        }
        return React.createElement(Lifecycle1, {
            onMount: function onMount() {
                method(location);
            },
            onUpdate: function onUpdate(self, prevProps) {
                var prevLocation = history.createLocation(prevProps.to);
                if (!history.locationsAreEqual(prevLocation, _extends({
                }, location, {
                    key: prevLocation.key
                }))) method(location);
            },
            to: to
        });
    });
}
Redirect.propTypes = {
    push: PropTypes.bool,
    from: PropTypes.string,
    to: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.object
    ]).isRequired
};
var cache$1 = {
};
var cacheLimit$1 = 10000;
var cacheCount$1 = 0;
function compilePath$1(path, options) {
    var cacheKey = "" + options.end + options.strict + options.sensitive;
    var pathCache = cache$1[cacheKey] || (cache$1[cacheKey] = {
    });
    if (pathCache[path]) return pathCache[path];
    var keys = [];
    var regexp = pathToRegexp(path, keys, options);
    var result = {
        regexp: regexp,
        keys: keys
    };
    if (cacheCount$1 < cacheLimit$1) {
        pathCache[path] = result;
        cacheCount$1++;
    }
    return result;
}
/**
 * Public API for matching a URL pathname to a path.
 */ function matchPath(pathname, options) {
    if (options === void 0) options = {
    };
    if (typeof options === "string" || Array.isArray(options)) options = {
        path: options
    };
    var _options = options, path = _options.path, _options$exact = _options.exact, exact = _options$exact === void 0 ? false : _options$exact, _options$strict = _options.strict, strict = _options$strict === void 0 ? false : _options$strict, _options$sensitive = _options.sensitive, sensitive = _options$sensitive === void 0 ? false : _options$sensitive;
    var paths = [].concat(path);
    return paths.reduce(function(matched, path1) {
        if (!path1 && path1 !== "") return null;
        if (matched) return matched;
        var _compilePath = compilePath$1(path1, {
            end: exact,
            strict: strict,
            sensitive: sensitive
        }), regexp = _compilePath.regexp, keys = _compilePath.keys;
        var match = regexp.exec(pathname);
        if (!match) return null;
        var url = match[0], values = match.slice(1);
        var isExact = pathname === url;
        if (exact && !isExact) return null;
        return {
            path: path1,
            // the path used to match
            url: path1 === "/" && url === "" ? "/" : url,
            // the matched portion of the URL
            isExact: isExact,
            // whether or not we matched exactly
            params: keys.reduce(function(memo, key, index) {
                memo[key.name] = values[index];
                return memo;
            }, {
            })
        };
    }, null);
}
function isEmptyChildren(children) {
    return React.Children.count(children) === 0;
}
function evalChildrenDev(children, props, path) {
    var value = children(props);
    warning(value !== undefined, "You returned `undefined` from the `children` function of " + ("<Route" + (path ? " path=\"" + path + "\"" : "") + ">, but you ") + "should have returned a React element or `null`");
    return value || null;
}
/**
 * The public API for matching a single path and rendering.
 */ var Route1 = /*#__PURE__*/ function(_React$Component) {
    _inheritsLoose(Route2, _React$Component);
    function Route2() {
        return _React$Component.apply(this, arguments) || this;
    }
    var _proto = Route2.prototype;
    _proto.render = function render() {
        var _this = this;
        return React.createElement(context.Consumer, null, function(context$1) {
            !context$1 && invariant(false, "You should not use <Route> outside a <Router>");
            var location = _this.props.location || context$1.location;
            var match = _this.props.computedMatch ? _this.props.computedMatch : _this.props.path ? matchPath(location.pathname, _this.props) : context$1.match;
            var props = _extends({
            }, context$1, {
                location: location,
                match: match
            });
            var _this$props = _this.props, children = _this$props.children, component = _this$props.component, render1 = _this$props.render; // Preact uses an empty array as children by
            // default, so use null if that's the case.
            if (Array.isArray(children) && children.length === 0) children = null;
            return React.createElement(context.Provider, {
                value: props
            }, props.match ? children ? typeof children === "function" ? evalChildrenDev(children, props, _this.props.path) : children : component ? React.createElement(component, props) : render1 ? render1(props) : null : typeof children === "function" ? evalChildrenDev(children, props, _this.props.path) : null);
        });
    };
    return Route2;
}(React.Component);
Route1.propTypes = {
    children: PropTypes.oneOfType([
        PropTypes.func,
        PropTypes.node
    ]),
    component: function component(props, propName) {
        if (props[propName] && !reactIs.isValidElementType(props[propName])) return new Error("Invalid prop 'component' supplied to 'Route': the prop is not a valid React component");
    },
    exact: PropTypes.bool,
    location: PropTypes.object,
    path: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.arrayOf(PropTypes.string)
    ]),
    render: PropTypes.func,
    sensitive: PropTypes.bool,
    strict: PropTypes.bool
};
Route1.prototype.componentDidMount = function() {
    warning(!(this.props.children && !isEmptyChildren(this.props.children) && this.props.component), "You should not use <Route component> and <Route children> in the same route; <Route component> will be ignored");
    warning(!(this.props.children && !isEmptyChildren(this.props.children) && this.props.render), "You should not use <Route render> and <Route children> in the same route; <Route render> will be ignored");
    warning(!(this.props.component && this.props.render), "You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored");
};
Route1.prototype.componentDidUpdate = function(prevProps) {
    warning(!(this.props.location && !prevProps.location), '<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.');
    warning(!(!this.props.location && prevProps.location), '<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.');
};
function addLeadingSlash(path) {
    return path.charAt(0) === "/" ? path : "/" + path;
}
function addBasename(basename, location) {
    if (!basename) return location;
    return _extends({
    }, location, {
        pathname: addLeadingSlash(basename) + location.pathname
    });
}
function stripBasename(basename, location) {
    if (!basename) return location;
    var base = addLeadingSlash(basename);
    if (location.pathname.indexOf(base) !== 0) return location;
    return _extends({
    }, location, {
        pathname: location.pathname.substr(base.length)
    });
}
function createURL(location) {
    return typeof location === "string" ? location : history.createPath(location);
}
function staticHandler(methodName) {
    return function() {
        invariant(false, "You cannot %s with <StaticRouter>", methodName);
    };
}
function noop() {
}
/**
 * The public top-level API for a "static" <Router>, so-called because it
 * can't actually change the current location. Instead, it just records
 * location changes in a context object. Useful mainly in testing and
 * server-rendering scenarios.
 */ var StaticRouter1 = /*#__PURE__*/ function(_React$Component) {
    _inheritsLoose(StaticRouter2, _React$Component);
    function StaticRouter2() {
        var _this;
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        _this = _React$Component.call.apply(_React$Component, [
            this
        ].concat(args)) || this;
        _this.handlePush = function(location) {
            return _this.navigateTo(location, "PUSH");
        };
        _this.handleReplace = function(location) {
            return _this.navigateTo(location, "REPLACE");
        };
        _this.handleListen = function() {
            return noop;
        };
        _this.handleBlock = function() {
            return noop;
        };
        return _this;
    }
    var _proto = StaticRouter2.prototype;
    _proto.navigateTo = function navigateTo(location, action) {
        var _this$props = this.props, _this$props$basename = _this$props.basename, basename = _this$props$basename === void 0 ? "" : _this$props$basename, _this$props$context = _this$props.context, context1 = _this$props$context === void 0 ? {
        } : _this$props$context;
        context1.action = action;
        context1.location = addBasename(basename, history.createLocation(location));
        context1.url = createURL(context1.location);
    };
    _proto.render = function render() {
        var _this$props2 = this.props, _this$props2$basename = _this$props2.basename, basename = _this$props2$basename === void 0 ? "" : _this$props2$basename, _this$props2$context = _this$props2.context, context1 = _this$props2$context === void 0 ? {
        } : _this$props2$context, _this$props2$location = _this$props2.location, location = _this$props2$location === void 0 ? "/" : _this$props2$location, rest = _objectWithoutPropertiesLoose(_this$props2, [
            "basename",
            "context",
            "location"
        ]);
        var history$1 = {
            createHref: function createHref(path) {
                return addLeadingSlash(basename + createURL(path));
            },
            action: "POP",
            location: stripBasename(basename, history.createLocation(location)),
            push: this.handlePush,
            replace: this.handleReplace,
            go: staticHandler("go"),
            goBack: staticHandler("goBack"),
            goForward: staticHandler("goForward"),
            listen: this.handleListen,
            block: this.handleBlock
        };
        return React.createElement(Router1, _extends({
        }, rest, {
            history: history$1,
            staticContext: context1
        }));
    };
    return StaticRouter2;
}(React.Component);
StaticRouter1.propTypes = {
    basename: PropTypes.string,
    context: PropTypes.object,
    location: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.object
    ])
};
StaticRouter1.prototype.componentDidMount = function() {
    warning(!this.props.history, "<StaticRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { StaticRouter as Router }`.");
};
/**
 * The public API for rendering the first <Route> that matches.
 */ var Switch1 = /*#__PURE__*/ function(_React$Component) {
    _inheritsLoose(Switch2, _React$Component);
    function Switch2() {
        return _React$Component.apply(this, arguments) || this;
    }
    var _proto = Switch2.prototype;
    _proto.render = function render() {
        var _this = this;
        return React.createElement(context.Consumer, null, function(context1) {
            !context1 && invariant(false, "You should not use <Switch> outside a <Router>");
            var location = _this.props.location || context1.location;
            var element, match; // We use React.Children.forEach instead of React.Children.toArray().find()
            // here because toArray adds keys to all child elements and we do not want
            // to trigger an unmount/remount for two <Route>s that render the same
            // component at different URLs.
            React.Children.forEach(_this.props.children, function(child) {
                if (match == null && React.isValidElement(child)) {
                    element = child;
                    var path = child.props.path || child.props.from;
                    match = path ? matchPath(location.pathname, _extends({
                    }, child.props, {
                        path: path
                    })) : context1.match;
                }
            });
            return match ? React.cloneElement(element, {
                location: location,
                computedMatch: match
            }) : null;
        });
    };
    return Switch2;
}(React.Component);
Switch1.propTypes = {
    children: PropTypes.node,
    location: PropTypes.object
};
Switch1.prototype.componentDidUpdate = function(prevProps) {
    warning(!(this.props.location && !prevProps.location), '<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.');
    warning(!(!this.props.location && prevProps.location), '<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.');
};
/**
 * A public higher-order component to access the imperative API
 */ function withRouter(Component) {
    var displayName = "withRouter(" + (Component.displayName || Component.name) + ")";
    var C = function C1(props) {
        var wrappedComponentRef = props.wrappedComponentRef, remainingProps = _objectWithoutPropertiesLoose(props, [
            "wrappedComponentRef"
        ]);
        return React.createElement(context.Consumer, null, function(context1) {
            !context1 && invariant(false, "You should not use <" + displayName + " /> outside a <Router>");
            return React.createElement(Component, _extends({
            }, remainingProps, context1, {
                ref: wrappedComponentRef
            }));
        });
    };
    C.displayName = displayName;
    C.WrappedComponent = Component;
    C.propTypes = {
        wrappedComponentRef: PropTypes.oneOfType([
            PropTypes.string,
            PropTypes.func,
            PropTypes.object
        ])
    };
    return hoistStatics(C, Component);
}
var useContext = React.useContext;
function useHistory() {
    !(typeof useContext === "function") && invariant(false, "You must use React >= 16.8 in order to use useHistory()");
    return useContext(historyContext);
}
function useLocation() {
    !(typeof useContext === "function") && invariant(false, "You must use React >= 16.8 in order to use useLocation()");
    return useContext(context).location;
}
function useParams() {
    !(typeof useContext === "function") && invariant(false, "You must use React >= 16.8 in order to use useParams()");
    var match = useContext(context).match;
    return match ? match.params : {
    };
}
function useRouteMatch(path) {
    !(typeof useContext === "function") && invariant(false, "You must use React >= 16.8 in order to use useRouteMatch()");
    var location = useLocation();
    var match = useContext(context).match;
    return path ? matchPath(location.pathname, path) : match;
}
if (typeof window !== "undefined") {
    var global = window;
    var key = "__react_router_build__";
    var buildNames = {
        cjs: "CommonJS",
        esm: "ES modules",
        umd: "UMD"
    };
    if (global[key] && global[key] !== "cjs") {
        var initialBuildName = buildNames[global[key]];
        var secondaryBuildName = buildNames["cjs"]; // TODO: Add link to article that explains in detail how to avoid
        // loading 2 different builds.
        throw new Error("You are loading the " + secondaryBuildName + " build of React Router " + ("on a page that is already running the " + initialBuildName + " ") + "build, so things won't work right.");
    }
    global[key] = "cjs";
}
exports.MemoryRouter = MemoryRouter1;
exports.Prompt = Prompt;
exports.Redirect = Redirect;
exports.Route = Route1;
exports.Router = Router1;
exports.StaticRouter = StaticRouter1;
exports.Switch = Switch1;
exports.__HistoryContext = historyContext;
exports.__RouterContext = context;
exports.generatePath = generatePath;
exports.matchPath = matchPath;
exports.useHistory = useHistory;
exports.useLocation = useLocation;
exports.useParams = useParams;
exports.useRouteMatch = useRouteMatch;
exports.withRouter = withRouter;

},{"react":"a6qBW","prop-types":"22hk3","history":"2MzH8","tiny-warning":"3bpKA","mini-create-react-context":"5hqvX","tiny-invariant":"6vrfg","path-to-regexp":"5Ubn6","react-is":"3a6ZL","hoist-non-react-statics":"SF7VS"}],"2MzH8":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/history.js');

},{"./cjs/history.js":"6gtfi"}],"6gtfi":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
function _interopDefault(ex) {
    return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}
var resolvePathname = _interopDefault(require('resolve-pathname'));
var valueEqual = _interopDefault(require('value-equal'));
var warning = _interopDefault(require('tiny-warning'));
var invariant = _interopDefault(require('tiny-invariant'));
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function addLeadingSlash(path) {
    return path.charAt(0) === '/' ? path : '/' + path;
}
function stripLeadingSlash(path) {
    return path.charAt(0) === '/' ? path.substr(1) : path;
}
function hasBasename(path, prefix) {
    return path.toLowerCase().indexOf(prefix.toLowerCase()) === 0 && '/?#'.indexOf(path.charAt(prefix.length)) !== -1;
}
function stripBasename(path, prefix) {
    return hasBasename(path, prefix) ? path.substr(prefix.length) : path;
}
function stripTrailingSlash(path) {
    return path.charAt(path.length - 1) === '/' ? path.slice(0, -1) : path;
}
function parsePath(path) {
    var pathname = path || '/';
    var search = '';
    var hash = '';
    var hashIndex = pathname.indexOf('#');
    if (hashIndex !== -1) {
        hash = pathname.substr(hashIndex);
        pathname = pathname.substr(0, hashIndex);
    }
    var searchIndex = pathname.indexOf('?');
    if (searchIndex !== -1) {
        search = pathname.substr(searchIndex);
        pathname = pathname.substr(0, searchIndex);
    }
    return {
        pathname: pathname,
        search: search === '?' ? '' : search,
        hash: hash === '#' ? '' : hash
    };
}
function createPath(location) {
    var pathname = location.pathname, search = location.search, hash = location.hash;
    var path = pathname || '/';
    if (search && search !== '?') path += search.charAt(0) === '?' ? search : "?" + search;
    if (hash && hash !== '#') path += hash.charAt(0) === '#' ? hash : "#" + hash;
    return path;
}
function createLocation(path, state, key, currentLocation) {
    var location;
    if (typeof path === 'string') {
        // Two-arg form: push(path, state)
        location = parsePath(path);
        location.state = state;
    } else {
        // One-arg form: push(location)
        location = _extends({
        }, path);
        if (location.pathname === undefined) location.pathname = '';
        if (location.search) {
            if (location.search.charAt(0) !== '?') location.search = '?' + location.search;
        } else location.search = '';
        if (location.hash) {
            if (location.hash.charAt(0) !== '#') location.hash = '#' + location.hash;
        } else location.hash = '';
        if (state !== undefined && location.state === undefined) location.state = state;
    }
    try {
        location.pathname = decodeURI(location.pathname);
    } catch (e) {
        if (e instanceof URIError) throw new URIError('Pathname "' + location.pathname + '" could not be decoded. ' + 'This is likely caused by an invalid percent-encoding.');
        else throw e;
    }
    if (key) location.key = key;
    if (currentLocation) {
        // Resolve incomplete/relative pathname relative to current location.
        if (!location.pathname) location.pathname = currentLocation.pathname;
        else if (location.pathname.charAt(0) !== '/') location.pathname = resolvePathname(location.pathname, currentLocation.pathname);
    } else // When there is no prior location and pathname is empty, set it to /
    if (!location.pathname) location.pathname = '/';
    return location;
}
function locationsAreEqual(a, b) {
    return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash && a.key === b.key && valueEqual(a.state, b.state);
}
function createTransitionManager() {
    var prompt = null;
    function setPrompt(nextPrompt) {
        warning(prompt == null, 'A history supports only one prompt at a time');
        prompt = nextPrompt;
        return function() {
            if (prompt === nextPrompt) prompt = null;
        };
    }
    function confirmTransitionTo(location, action, getUserConfirmation, callback) {
        // TODO: If another transition starts while we're still confirming
        // the previous one, we may end up in a weird state. Figure out the
        // best way to handle this.
        if (prompt != null) {
            var result = typeof prompt === 'function' ? prompt(location, action) : prompt;
            if (typeof result === 'string') {
                if (typeof getUserConfirmation === 'function') getUserConfirmation(result, callback);
                else {
                    warning(false, 'A history needs a getUserConfirmation function in order to use a prompt message');
                    callback(true);
                }
            } else // Return false from a transition hook to cancel the transition.
            callback(result !== false);
        } else callback(true);
    }
    var listeners = [];
    function appendListener(fn) {
        var isActive = true;
        function listener() {
            if (isActive) fn.apply(void 0, arguments);
        }
        listeners.push(listener);
        return function() {
            isActive = false;
            listeners = listeners.filter(function(item) {
                return item !== listener;
            });
        };
    }
    function notifyListeners() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        listeners.forEach(function(listener) {
            return listener.apply(void 0, args);
        });
    }
    return {
        setPrompt: setPrompt,
        confirmTransitionTo: confirmTransitionTo,
        appendListener: appendListener,
        notifyListeners: notifyListeners
    };
}
var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
function getConfirmation(message, callback) {
    callback(window.confirm(message)); // eslint-disable-line no-alert
}
/**
 * Returns true if the HTML5 history API is supported. Taken from Modernizr.
 *
 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
 * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586
 */ function supportsHistory() {
    var ua = window.navigator.userAgent;
    if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) return false;
    return window.history && 'pushState' in window.history;
}
/**
 * Returns true if browser fires popstate on hash change.
 * IE10 and IE11 do not.
 */ function supportsPopStateOnHashChange() {
    return window.navigator.userAgent.indexOf('Trident') === -1;
}
/**
 * Returns false if using go(n) with hash history causes a full page reload.
 */ function supportsGoWithoutReloadUsingHash() {
    return window.navigator.userAgent.indexOf('Firefox') === -1;
}
/**
 * Returns true if a given popstate event is an extraneous WebKit event.
 * Accounts for the fact that Chrome on iOS fires real popstate events
 * containing undefined state when pressing the back button.
 */ function isExtraneousPopstateEvent(event) {
    return event.state === undefined && navigator.userAgent.indexOf('CriOS') === -1;
}
var PopStateEvent1 = 'popstate';
var HashChangeEvent1 = 'hashchange';
function getHistoryState() {
    try {
        return window.history.state || {
        };
    } catch (e) {
        // IE 11 sometimes throws when accessing window.history.state
        // See https://github.com/ReactTraining/history/pull/289
        return {
        };
    }
}
/**
 * Creates a history object that uses the HTML5 history API including
 * pushState, replaceState, and the popstate event.
 */ function createBrowserHistory(props) {
    if (props === void 0) props = {
    };
    !canUseDOM && invariant(false, 'Browser history needs a DOM');
    var globalHistory = window.history;
    var canUseHistory = supportsHistory();
    var needsHashChangeListener = !supportsPopStateOnHashChange();
    var _props = props, _props$forceRefresh = _props.forceRefresh, forceRefresh = _props$forceRefresh === void 0 ? false : _props$forceRefresh, _props$getUserConfirm = _props.getUserConfirmation, getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm, _props$keyLength = _props.keyLength, keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;
    var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : '';
    function getDOMLocation(historyState) {
        var _ref = historyState || {
        }, key = _ref.key, state = _ref.state;
        var _window$location = window.location, pathname = _window$location.pathname, search = _window$location.search, hash = _window$location.hash;
        var path = pathname + search + hash;
        warning(!basename || hasBasename(path, basename), "You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path \"" + path + '" to begin with "' + basename + '".');
        if (basename) path = stripBasename(path, basename);
        return createLocation(path, state, key);
    }
    function createKey() {
        return Math.random().toString(36).substr(2, keyLength);
    }
    var transitionManager = createTransitionManager();
    function setState(nextState) {
        _extends(history, nextState);
        history.length = globalHistory.length;
        transitionManager.notifyListeners(history.location, history.action);
    }
    function handlePopState(event) {
        // Ignore extraneous popstate events in WebKit.
        if (isExtraneousPopstateEvent(event)) return;
        handlePop(getDOMLocation(event.state));
    }
    function handleHashChange() {
        handlePop(getDOMLocation(getHistoryState()));
    }
    var forceNextPop = false;
    function handlePop(location) {
        if (forceNextPop) {
            forceNextPop = false;
            setState();
        } else {
            var action = 'POP';
            transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function(ok) {
                if (ok) setState({
                    action: action,
                    location: location
                });
                else revertPop(location);
            });
        }
    }
    function revertPop(fromLocation) {
        var toLocation = history.location; // TODO: We could probably make this more reliable by
        // keeping a list of keys we've seen in sessionStorage.
        // Instead, we just default to 0 for keys we don't know.
        var toIndex = allKeys.indexOf(toLocation.key);
        if (toIndex === -1) toIndex = 0;
        var fromIndex = allKeys.indexOf(fromLocation.key);
        if (fromIndex === -1) fromIndex = 0;
        var delta = toIndex - fromIndex;
        if (delta) {
            forceNextPop = true;
            go(delta);
        }
    }
    var initialLocation = getDOMLocation(getHistoryState());
    var allKeys = [
        initialLocation.key
    ]; // Public interface
    function createHref(location) {
        return basename + createPath(location);
    }
    function push(path, state) {
        warning(!(typeof path === 'object' && path.state !== undefined && state !== undefined), "You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");
        var action = 'PUSH';
        var location = createLocation(path, state, createKey(), history.location);
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function(ok) {
            if (!ok) return;
            var href = createHref(location);
            var key = location.key, state1 = location.state;
            if (canUseHistory) {
                globalHistory.pushState({
                    key: key,
                    state: state1
                }, null, href);
                if (forceRefresh) window.location.href = href;
                else {
                    var prevIndex = allKeys.indexOf(history.location.key);
                    var nextKeys = allKeys.slice(0, prevIndex + 1);
                    nextKeys.push(location.key);
                    allKeys = nextKeys;
                    setState({
                        action: action,
                        location: location
                    });
                }
            } else {
                warning(state1 === undefined, 'Browser history cannot push state in browsers that do not support HTML5 history');
                window.location.href = href;
            }
        });
    }
    function replace(path, state) {
        warning(!(typeof path === 'object' && path.state !== undefined && state !== undefined), "You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");
        var action = 'REPLACE';
        var location = createLocation(path, state, createKey(), history.location);
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function(ok) {
            if (!ok) return;
            var href = createHref(location);
            var key = location.key, state1 = location.state;
            if (canUseHistory) {
                globalHistory.replaceState({
                    key: key,
                    state: state1
                }, null, href);
                if (forceRefresh) window.location.replace(href);
                else {
                    var prevIndex = allKeys.indexOf(history.location.key);
                    if (prevIndex !== -1) allKeys[prevIndex] = location.key;
                    setState({
                        action: action,
                        location: location
                    });
                }
            } else {
                warning(state1 === undefined, 'Browser history cannot replace state in browsers that do not support HTML5 history');
                window.location.replace(href);
            }
        });
    }
    function go(n) {
        globalHistory.go(n);
    }
    function goBack() {
        go(-1);
    }
    function goForward() {
        go(1);
    }
    var listenerCount = 0;
    function checkDOMListeners(delta) {
        listenerCount += delta;
        if (listenerCount === 1 && delta === 1) {
            window.addEventListener(PopStateEvent1, handlePopState);
            if (needsHashChangeListener) window.addEventListener(HashChangeEvent1, handleHashChange);
        } else if (listenerCount === 0) {
            window.removeEventListener(PopStateEvent1, handlePopState);
            if (needsHashChangeListener) window.removeEventListener(HashChangeEvent1, handleHashChange);
        }
    }
    var isBlocked = false;
    function block(prompt) {
        if (prompt === void 0) prompt = false;
        var unblock = transitionManager.setPrompt(prompt);
        if (!isBlocked) {
            checkDOMListeners(1);
            isBlocked = true;
        }
        return function() {
            if (isBlocked) {
                isBlocked = false;
                checkDOMListeners(-1);
            }
            return unblock();
        };
    }
    function listen(listener) {
        var unlisten = transitionManager.appendListener(listener);
        checkDOMListeners(1);
        return function() {
            checkDOMListeners(-1);
            unlisten();
        };
    }
    var history = {
        length: globalHistory.length,
        action: 'POP',
        location: initialLocation,
        createHref: createHref,
        push: push,
        replace: replace,
        go: go,
        goBack: goBack,
        goForward: goForward,
        block: block,
        listen: listen
    };
    return history;
}
var HashChangeEvent$1 = 'hashchange';
var HashPathCoders = {
    hashbang: {
        encodePath: function encodePath(path) {
            return path.charAt(0) === '!' ? path : '!/' + stripLeadingSlash(path);
        },
        decodePath: function decodePath(path) {
            return path.charAt(0) === '!' ? path.substr(1) : path;
        }
    },
    noslash: {
        encodePath: stripLeadingSlash,
        decodePath: addLeadingSlash
    },
    slash: {
        encodePath: addLeadingSlash,
        decodePath: addLeadingSlash
    }
};
function stripHash(url) {
    var hashIndex = url.indexOf('#');
    return hashIndex === -1 ? url : url.slice(0, hashIndex);
}
function getHashPath() {
    // We can't use window.location.hash here because it's not
    // consistent across browsers - Firefox will pre-decode it!
    var href = window.location.href;
    var hashIndex = href.indexOf('#');
    return hashIndex === -1 ? '' : href.substring(hashIndex + 1);
}
function pushHashPath(path) {
    window.location.hash = path;
}
function replaceHashPath(path) {
    window.location.replace(stripHash(window.location.href) + '#' + path);
}
function createHashHistory(props) {
    if (props === void 0) props = {
    };
    !canUseDOM && invariant(false, 'Hash history needs a DOM');
    var globalHistory = window.history;
    var canGoWithoutReload = supportsGoWithoutReloadUsingHash();
    var _props = props, _props$getUserConfirm = _props.getUserConfirmation, getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm, _props$hashType = _props.hashType, hashType = _props$hashType === void 0 ? 'slash' : _props$hashType;
    var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : '';
    var _HashPathCoders$hashT = HashPathCoders[hashType], encodePath = _HashPathCoders$hashT.encodePath, decodePath = _HashPathCoders$hashT.decodePath;
    function getDOMLocation() {
        var path = decodePath(getHashPath());
        warning(!basename || hasBasename(path, basename), "You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path \"" + path + '" to begin with "' + basename + '".');
        if (basename) path = stripBasename(path, basename);
        return createLocation(path);
    }
    var transitionManager = createTransitionManager();
    function setState(nextState) {
        _extends(history, nextState);
        history.length = globalHistory.length;
        transitionManager.notifyListeners(history.location, history.action);
    }
    var forceNextPop = false;
    var ignorePath = null;
    function locationsAreEqual$$1(a, b) {
        return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash;
    }
    function handleHashChange() {
        var path = getHashPath();
        var encodedPath = encodePath(path);
        if (path !== encodedPath) // Ensure we always have a properly-encoded hash.
        replaceHashPath(encodedPath);
        else {
            var location = getDOMLocation();
            var prevLocation = history.location;
            if (!forceNextPop && locationsAreEqual$$1(prevLocation, location)) return; // A hashchange doesn't always == location change.
            if (ignorePath === createPath(location)) return; // Ignore this change; we already setState in push/replace.
            ignorePath = null;
            handlePop(location);
        }
    }
    function handlePop(location) {
        if (forceNextPop) {
            forceNextPop = false;
            setState();
        } else {
            var action = 'POP';
            transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function(ok) {
                if (ok) setState({
                    action: action,
                    location: location
                });
                else revertPop(location);
            });
        }
    }
    function revertPop(fromLocation) {
        var toLocation = history.location; // TODO: We could probably make this more reliable by
        // keeping a list of paths we've seen in sessionStorage.
        // Instead, we just default to 0 for paths we don't know.
        var toIndex = allPaths.lastIndexOf(createPath(toLocation));
        if (toIndex === -1) toIndex = 0;
        var fromIndex = allPaths.lastIndexOf(createPath(fromLocation));
        if (fromIndex === -1) fromIndex = 0;
        var delta = toIndex - fromIndex;
        if (delta) {
            forceNextPop = true;
            go(delta);
        }
    } // Ensure the hash is encoded properly before doing anything else.
    var path = getHashPath();
    var encodedPath = encodePath(path);
    if (path !== encodedPath) replaceHashPath(encodedPath);
    var initialLocation = getDOMLocation();
    var allPaths = [
        createPath(initialLocation)
    ]; // Public interface
    function createHref(location) {
        var baseTag = document.querySelector('base');
        var href = '';
        if (baseTag && baseTag.getAttribute('href')) href = stripHash(window.location.href);
        return href + '#' + encodePath(basename + createPath(location));
    }
    function push(path1, state) {
        warning(state === undefined, 'Hash history cannot push state; it is ignored');
        var action = 'PUSH';
        var location = createLocation(path1, undefined, undefined, history.location);
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function(ok) {
            if (!ok) return;
            var path2 = createPath(location);
            var encodedPath1 = encodePath(basename + path2);
            var hashChanged = getHashPath() !== encodedPath1;
            if (hashChanged) {
                // We cannot tell if a hashchange was caused by a PUSH, so we'd
                // rather setState here and ignore the hashchange. The caveat here
                // is that other hash histories in the page will consider it a POP.
                ignorePath = path2;
                pushHashPath(encodedPath1);
                var prevIndex = allPaths.lastIndexOf(createPath(history.location));
                var nextPaths = allPaths.slice(0, prevIndex + 1);
                nextPaths.push(path2);
                allPaths = nextPaths;
                setState({
                    action: action,
                    location: location
                });
            } else {
                warning(false, 'Hash history cannot PUSH the same path; a new entry will not be added to the history stack');
                setState();
            }
        });
    }
    function replace(path1, state) {
        warning(state === undefined, 'Hash history cannot replace state; it is ignored');
        var action = 'REPLACE';
        var location = createLocation(path1, undefined, undefined, history.location);
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function(ok) {
            if (!ok) return;
            var path2 = createPath(location);
            var encodedPath1 = encodePath(basename + path2);
            var hashChanged = getHashPath() !== encodedPath1;
            if (hashChanged) {
                // We cannot tell if a hashchange was caused by a REPLACE, so we'd
                // rather setState here and ignore the hashchange. The caveat here
                // is that other hash histories in the page will consider it a POP.
                ignorePath = path2;
                replaceHashPath(encodedPath1);
            }
            var prevIndex = allPaths.indexOf(createPath(history.location));
            if (prevIndex !== -1) allPaths[prevIndex] = path2;
            setState({
                action: action,
                location: location
            });
        });
    }
    function go(n) {
        warning(canGoWithoutReload, 'Hash history go(n) causes a full page reload in this browser');
        globalHistory.go(n);
    }
    function goBack() {
        go(-1);
    }
    function goForward() {
        go(1);
    }
    var listenerCount = 0;
    function checkDOMListeners(delta) {
        listenerCount += delta;
        if (listenerCount === 1 && delta === 1) window.addEventListener(HashChangeEvent$1, handleHashChange);
        else if (listenerCount === 0) window.removeEventListener(HashChangeEvent$1, handleHashChange);
    }
    var isBlocked = false;
    function block(prompt) {
        if (prompt === void 0) prompt = false;
        var unblock = transitionManager.setPrompt(prompt);
        if (!isBlocked) {
            checkDOMListeners(1);
            isBlocked = true;
        }
        return function() {
            if (isBlocked) {
                isBlocked = false;
                checkDOMListeners(-1);
            }
            return unblock();
        };
    }
    function listen(listener) {
        var unlisten = transitionManager.appendListener(listener);
        checkDOMListeners(1);
        return function() {
            checkDOMListeners(-1);
            unlisten();
        };
    }
    var history = {
        length: globalHistory.length,
        action: 'POP',
        location: initialLocation,
        createHref: createHref,
        push: push,
        replace: replace,
        go: go,
        goBack: goBack,
        goForward: goForward,
        block: block,
        listen: listen
    };
    return history;
}
function clamp(n, lowerBound, upperBound) {
    return Math.min(Math.max(n, lowerBound), upperBound);
}
/**
 * Creates a history object that stores locations in memory.
 */ function createMemoryHistory(props) {
    if (props === void 0) props = {
    };
    var _props = props, getUserConfirmation = _props.getUserConfirmation, _props$initialEntries = _props.initialEntries, initialEntries = _props$initialEntries === void 0 ? [
        '/'
    ] : _props$initialEntries, _props$initialIndex = _props.initialIndex, initialIndex = _props$initialIndex === void 0 ? 0 : _props$initialIndex, _props$keyLength = _props.keyLength, keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;
    var transitionManager = createTransitionManager();
    function setState(nextState) {
        _extends(history, nextState);
        history.length = history.entries.length;
        transitionManager.notifyListeners(history.location, history.action);
    }
    function createKey() {
        return Math.random().toString(36).substr(2, keyLength);
    }
    var index = clamp(initialIndex, 0, initialEntries.length - 1);
    var entries = initialEntries.map(function(entry) {
        return typeof entry === 'string' ? createLocation(entry, undefined, createKey()) : createLocation(entry, undefined, entry.key || createKey());
    }); // Public interface
    var createHref = createPath;
    function push(path, state) {
        warning(!(typeof path === 'object' && path.state !== undefined && state !== undefined), "You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");
        var action = 'PUSH';
        var location = createLocation(path, state, createKey(), history.location);
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function(ok) {
            if (!ok) return;
            var prevIndex = history.index;
            var nextIndex = prevIndex + 1;
            var nextEntries = history.entries.slice(0);
            if (nextEntries.length > nextIndex) nextEntries.splice(nextIndex, nextEntries.length - nextIndex, location);
            else nextEntries.push(location);
            setState({
                action: action,
                location: location,
                index: nextIndex,
                entries: nextEntries
            });
        });
    }
    function replace(path, state) {
        warning(!(typeof path === 'object' && path.state !== undefined && state !== undefined), "You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");
        var action = 'REPLACE';
        var location = createLocation(path, state, createKey(), history.location);
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function(ok) {
            if (!ok) return;
            history.entries[history.index] = location;
            setState({
                action: action,
                location: location
            });
        });
    }
    function go(n) {
        var nextIndex = clamp(history.index + n, 0, history.entries.length - 1);
        var action = 'POP';
        var location = history.entries[nextIndex];
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function(ok) {
            if (ok) setState({
                action: action,
                location: location,
                index: nextIndex
            });
            else // Mimic the behavior of DOM histories by
            // causing a render after a cancelled POP.
            setState();
        });
    }
    function goBack() {
        go(-1);
    }
    function goForward() {
        go(1);
    }
    function canGo(n) {
        var nextIndex = history.index + n;
        return nextIndex >= 0 && nextIndex < history.entries.length;
    }
    function block(prompt) {
        if (prompt === void 0) prompt = false;
        return transitionManager.setPrompt(prompt);
    }
    function listen(listener) {
        return transitionManager.appendListener(listener);
    }
    var history = {
        length: entries.length,
        action: 'POP',
        location: entries[index],
        index: index,
        entries: entries,
        createHref: createHref,
        push: push,
        replace: replace,
        go: go,
        goBack: goBack,
        goForward: goForward,
        canGo: canGo,
        block: block,
        listen: listen
    };
    return history;
}
exports.createBrowserHistory = createBrowserHistory;
exports.createHashHistory = createHashHistory;
exports.createMemoryHistory = createMemoryHistory;
exports.createLocation = createLocation;
exports.locationsAreEqual = locationsAreEqual;
exports.parsePath = parsePath;
exports.createPath = createPath;

},{"resolve-pathname":"3mPk8","value-equal":"5Xzw5","tiny-warning":"3bpKA","tiny-invariant":"6vrfg"}],"3mPk8":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/resolve-pathname.js');

},{"./cjs/resolve-pathname.js":"3sH4L"}],"3sH4L":[function(require,module,exports) {
'use strict';
function isAbsolute(pathname) {
    return pathname.charAt(0) === '/';
}
// About 1.5x faster than the two-arg version of Array#splice()
function spliceOne(list, index) {
    for(var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)list[i] = list[k];
    list.pop();
}
// This implementation is based heavily on node's url.parse
function resolvePathname(to, from) {
    if (from === undefined) from = '';
    var toParts = to && to.split('/') || [];
    var fromParts = from && from.split('/') || [];
    var isToAbs = to && isAbsolute(to);
    var isFromAbs = from && isAbsolute(from);
    var mustEndAbs = isToAbs || isFromAbs;
    if (to && isAbsolute(to)) // to is absolute
    fromParts = toParts;
    else if (toParts.length) {
        // to is relative, drop the filename
        fromParts.pop();
        fromParts = fromParts.concat(toParts);
    }
    if (!fromParts.length) return '/';
    var hasTrailingSlash;
    if (fromParts.length) {
        var last = fromParts[fromParts.length - 1];
        hasTrailingSlash = last === '.' || last === '..' || last === '';
    } else hasTrailingSlash = false;
    var up = 0;
    for(var i = fromParts.length; i >= 0; i--){
        var part = fromParts[i];
        if (part === '.') spliceOne(fromParts, i);
        else if (part === '..') {
            spliceOne(fromParts, i);
            up++;
        } else if (up) {
            spliceOne(fromParts, i);
            up--;
        }
    }
    if (!mustEndAbs) for(; up--;)fromParts.unshift('..');
    if (mustEndAbs && fromParts[0] !== '' && (!fromParts[0] || !isAbsolute(fromParts[0]))) fromParts.unshift('');
    var result = fromParts.join('/');
    if (hasTrailingSlash && result.substr(-1) !== '/') result += '/';
    return result;
}
module.exports = resolvePathname;

},{}],"5Xzw5":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/value-equal.js');

},{"./cjs/value-equal.js":"7bK2a"}],"7bK2a":[function(require,module,exports) {
'use strict';
function valueOf(obj) {
    return obj.valueOf ? obj.valueOf() : Object.prototype.valueOf.call(obj);
}
function valueEqual(a, b) {
    // Test for strict equality first.
    if (a === b) return true;
    // Otherwise, if either of them == null they are not equal.
    if (a == null || b == null) return false;
    if (Array.isArray(a)) return Array.isArray(b) && a.length === b.length && a.every(function(item, index) {
        return valueEqual(item, b[index]);
    });
    if (typeof a === 'object' || typeof b === 'object') {
        var aValue = valueOf(a);
        var bValue = valueOf(b);
        if (aValue !== a || bValue !== b) return valueEqual(aValue, bValue);
        return Object.keys(Object.assign({
        }, a, b)).every(function(key) {
            return valueEqual(a[key], b[key]);
        });
    }
    return false;
}
module.exports = valueEqual;

},{}],"3bpKA":[function(require,module,exports) {
'use strict';
var isProduction = false;
function warning(condition, message) {
    if (!isProduction) {
        if (condition) return;
        var text = "Warning: " + message;
        if (typeof console !== 'undefined') console.warn(text);
        try {
            throw Error(text);
        } catch (x) {
        }
    }
}
module.exports = warning;

},{}],"6vrfg":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, "__esModule", {
    value: true
});
var isProduction = false;
var prefix = 'Invariant failed';
function invariant(condition, message) {
    if (condition) return;
    if (isProduction) throw new Error(prefix);
    throw new Error(prefix + ": " + (message || ''));
}
exports.default = invariant;

},{}],"5hqvX":[function(require,module,exports) {
var global = arguments[3];
'use strict';
var React = require('react'), _inheritsLoose = require('@babel/runtime/helpers/inheritsLoose'), PropTypes = require('prop-types'), warning = require('tiny-warning');
function _interopDefaultLegacy(e) {
    return e && typeof e === 'object' && 'default' in e ? e : {
        'default': e
    };
}
var React__default = /*#__PURE__*/ _interopDefaultLegacy(React);
var _inheritsLoose__default = /*#__PURE__*/ _interopDefaultLegacy(_inheritsLoose);
var PropTypes__default = /*#__PURE__*/ _interopDefaultLegacy(PropTypes);
var warning__default = /*#__PURE__*/ _interopDefaultLegacy(warning);
var MAX_SIGNED_31_BIT_INT = 1073741823;
var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : {
};
function getUniqueId() {
    var key = '__global_unique_id__';
    return commonjsGlobal[key] = (commonjsGlobal[key] || 0) + 1;
}
function objectIs(x, y) {
    if (x === y) return x !== 0 || 1 / x === 1 / y;
    else return x !== x && y !== y;
}
function createEventEmitter(value) {
    var handlers = [];
    return {
        on: function on(handler) {
            handlers.push(handler);
        },
        off: function off(handler) {
            handlers = handlers.filter(function(h) {
                return h !== handler;
            });
        },
        get: function get() {
            return value;
        },
        set: function set(newValue, changedBits) {
            value = newValue;
            handlers.forEach(function(handler) {
                return handler(value, changedBits);
            });
        }
    };
}
function onlyChild(children) {
    return Array.isArray(children) ? children[0] : children;
}
function createReactContext(defaultValue, calculateChangedBits) {
    var _Provider$childContex, _Consumer$contextType;
    var contextProp = '__create-react-context-' + getUniqueId() + '__';
    var Provider1 = /*#__PURE__*/ function(_Component) {
        _inheritsLoose__default['default'](Provider2, _Component);
        function Provider2() {
            var _this;
            _this = _Component.apply(this, arguments) || this;
            _this.emitter = createEventEmitter(_this.props.value);
            return _this;
        }
        var _proto = Provider2.prototype;
        _proto.getChildContext = function getChildContext() {
            var _ref;
            return _ref = {
            }, _ref[contextProp] = this.emitter, _ref;
        };
        _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
            if (this.props.value !== nextProps.value) {
                var oldValue = this.props.value;
                var newValue = nextProps.value;
                var changedBits;
                if (objectIs(oldValue, newValue)) changedBits = 0;
                else {
                    changedBits = typeof calculateChangedBits === 'function' ? calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
                    warning__default['default']((changedBits & MAX_SIGNED_31_BIT_INT) === changedBits, "calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: " + changedBits);
                    changedBits |= 0;
                    if (changedBits !== 0) this.emitter.set(nextProps.value, changedBits);
                }
            }
        };
        _proto.render = function render() {
            return this.props.children;
        };
        return Provider2;
    }(React.Component);
    Provider1.childContextTypes = (_Provider$childContex = {
    }, _Provider$childContex[contextProp] = PropTypes__default['default'].object.isRequired, _Provider$childContex);
    var Consumer1 = /*#__PURE__*/ function(_Component2) {
        _inheritsLoose__default['default'](Consumer2, _Component2);
        function Consumer2() {
            var _this2;
            _this2 = _Component2.apply(this, arguments) || this;
            _this2.state = {
                value: _this2.getValue()
            };
            _this2.onUpdate = function(newValue, changedBits) {
                var observedBits = _this2.observedBits | 0;
                if ((observedBits & changedBits) !== 0) _this2.setState({
                    value: _this2.getValue()
                });
            };
            return _this2;
        }
        var _proto2 = Consumer2.prototype;
        _proto2.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
            var observedBits = nextProps.observedBits;
            this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;
        };
        _proto2.componentDidMount = function componentDidMount() {
            if (this.context[contextProp]) this.context[contextProp].on(this.onUpdate);
            var observedBits = this.props.observedBits;
            this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;
        };
        _proto2.componentWillUnmount = function componentWillUnmount() {
            if (this.context[contextProp]) this.context[contextProp].off(this.onUpdate);
        };
        _proto2.getValue = function getValue() {
            if (this.context[contextProp]) return this.context[contextProp].get();
            else return defaultValue;
        };
        _proto2.render = function render() {
            return onlyChild(this.props.children)(this.state.value);
        };
        return Consumer2;
    }(React.Component);
    Consumer1.contextTypes = (_Consumer$contextType = {
    }, _Consumer$contextType[contextProp] = PropTypes__default['default'].object, _Consumer$contextType);
    return {
        Provider: Provider1,
        Consumer: Consumer1
    };
}
var index = React__default['default'].createContext || createReactContext;
module.exports = index;

},{"react":"a6qBW","@babel/runtime/helpers/inheritsLoose":"6lEsI","prop-types":"22hk3","tiny-warning":"3bpKA"}],"6lEsI":[function(require,module,exports) {
var setPrototypeOf = require("./setPrototypeOf.js");
function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    setPrototypeOf(subClass, superClass);
}
module.exports = _inheritsLoose;
module.exports["default"] = module.exports, module.exports.__esModule = true;

},{"./setPrototypeOf.js":"5CmvS"}],"5CmvS":[function(require,module,exports) {
function _setPrototypeOf(o, p) {
    module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf1(o1, p1) {
        o1.__proto__ = p1;
        return o1;
    };
    module.exports["default"] = module.exports, module.exports.__esModule = true;
    return _setPrototypeOf(o, p);
}
module.exports = _setPrototypeOf;
module.exports["default"] = module.exports, module.exports.__esModule = true;

},{}],"5Ubn6":[function(require,module,exports) {
var isarray = require('isarray');
/**
 * Expose `pathToRegexp`.
 */ module.exports = pathToRegexp;
module.exports.parse = parse;
module.exports.compile = compile;
module.exports.tokensToFunction = tokensToFunction;
module.exports.tokensToRegExp = tokensToRegExp;
/**
 * The main path matching regexp utility.
 *
 * @type {RegExp}
 */ var PATH_REGEXP = new RegExp([
    // Match escaped characters that would otherwise appear in future matches.
    // This allows the user to escape special characters that won't transform.
    '(\\\\.)',
    // Match Express-style parameters and un-named parameters with a prefix
    // and optional suffixes. Matches appear as:
    //
    // "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
    // "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
    // "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
    '([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))'
].join('|'), 'g');
/**
 * Parse a string for the raw tokens.
 *
 * @param  {string}  str
 * @param  {Object=} options
 * @return {!Array}
 */ function parse(str, options) {
    var tokens = [];
    var key = 0;
    var index = 0;
    var path = '';
    var defaultDelimiter = options && options.delimiter || '/';
    var res;
    while((res = PATH_REGEXP.exec(str)) != null){
        var m = res[0];
        var escaped = res[1];
        var offset = res.index;
        path += str.slice(index, offset);
        index = offset + m.length;
        // Ignore already escaped sequences.
        if (escaped) {
            path += escaped[1];
            continue;
        }
        var next = str[index];
        var prefix = res[2];
        var name = res[3];
        var capture = res[4];
        var group = res[5];
        var modifier = res[6];
        var asterisk = res[7];
        // Push the current path onto the tokens.
        if (path) {
            tokens.push(path);
            path = '';
        }
        var partial = prefix != null && next != null && next !== prefix;
        var repeat = modifier === '+' || modifier === '*';
        var optional = modifier === '?' || modifier === '*';
        var delimiter = res[2] || defaultDelimiter;
        var pattern = capture || group;
        tokens.push({
            name: name || key++,
            prefix: prefix || '',
            delimiter: delimiter,
            optional: optional,
            repeat: repeat,
            partial: partial,
            asterisk: !!asterisk,
            pattern: pattern ? escapeGroup(pattern) : asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?'
        });
    }
    // Match any characters still remaining.
    if (index < str.length) path += str.substr(index);
    // If the path exists, push it onto the end.
    if (path) tokens.push(path);
    return tokens;
}
/**
 * Compile a string to a template function for the path.
 *
 * @param  {string}             str
 * @param  {Object=}            options
 * @return {!function(Object=, Object=)}
 */ function compile(str, options) {
    return tokensToFunction(parse(str, options), options);
}
/**
 * Prettier encoding of URI path segments.
 *
 * @param  {string}
 * @return {string}
 */ function encodeURIComponentPretty(str) {
    return encodeURI(str).replace(/[\/?#]/g, function(c) {
        return '%' + c.charCodeAt(0).toString(16).toUpperCase();
    });
}
/**
 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
 *
 * @param  {string}
 * @return {string}
 */ function encodeAsterisk(str) {
    return encodeURI(str).replace(/[?#]/g, function(c) {
        return '%' + c.charCodeAt(0).toString(16).toUpperCase();
    });
}
/**
 * Expose a method for transforming tokens into the path function.
 */ function tokensToFunction(tokens, options) {
    // Compile all the tokens into regexps.
    var matches = new Array(tokens.length);
    // Compile all the patterns before compilation.
    for(var i = 0; i < tokens.length; i++)if (typeof tokens[i] === 'object') matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$', flags(options));
    return function(obj, opts) {
        var path = '';
        var data = obj || {
        };
        var options1 = opts || {
        };
        var encode = options1.pretty ? encodeURIComponentPretty : encodeURIComponent;
        for(var i1 = 0; i1 < tokens.length; i1++){
            var token = tokens[i1];
            if (typeof token === 'string') {
                path += token;
                continue;
            }
            var value = data[token.name];
            var segment;
            if (value == null) {
                if (token.optional) {
                    // Prepend partial segment prefixes.
                    if (token.partial) path += token.prefix;
                    continue;
                } else throw new TypeError('Expected "' + token.name + '" to be defined');
            }
            if (isarray(value)) {
                if (!token.repeat) throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + '`');
                if (value.length === 0) {
                    if (token.optional) continue;
                    else throw new TypeError('Expected "' + token.name + '" to not be empty');
                }
                for(var j = 0; j < value.length; j++){
                    segment = encode(value[j]);
                    if (!matches[i1].test(segment)) throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + '`');
                    path += (j === 0 ? token.prefix : token.delimiter) + segment;
                }
                continue;
            }
            segment = token.asterisk ? encodeAsterisk(value) : encode(value);
            if (!matches[i1].test(segment)) throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"');
            path += token.prefix + segment;
        }
        return path;
    };
}
/**
 * Escape a regular expression string.
 *
 * @param  {string} str
 * @return {string}
 */ function escapeString(str) {
    return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, '\\$1');
}
/**
 * Escape the capturing group by escaping special characters and meaning.
 *
 * @param  {string} group
 * @return {string}
 */ function escapeGroup(group) {
    return group.replace(/([=!:$\/()])/g, '\\$1');
}
/**
 * Attach the keys as a property of the regexp.
 *
 * @param  {!RegExp} re
 * @param  {Array}   keys
 * @return {!RegExp}
 */ function attachKeys(re, keys) {
    re.keys = keys;
    return re;
}
/**
 * Get the flags for a regexp from the options.
 *
 * @param  {Object} options
 * @return {string}
 */ function flags(options) {
    return options && options.sensitive ? '' : 'i';
}
/**
 * Pull out keys from a regexp.
 *
 * @param  {!RegExp} path
 * @param  {!Array}  keys
 * @return {!RegExp}
 */ function regexpToRegexp(path, keys) {
    // Use a negative lookahead to match only capturing groups.
    var groups = path.source.match(/\((?!\?)/g);
    if (groups) for(var i = 0; i < groups.length; i++)keys.push({
        name: i,
        prefix: null,
        delimiter: null,
        optional: false,
        repeat: false,
        partial: false,
        asterisk: false,
        pattern: null
    });
    return attachKeys(path, keys);
}
/**
 * Transform an array into a regexp.
 *
 * @param  {!Array}  path
 * @param  {Array}   keys
 * @param  {!Object} options
 * @return {!RegExp}
 */ function arrayToRegexp(path, keys, options) {
    var parts = [];
    for(var i = 0; i < path.length; i++)parts.push(pathToRegexp(path[i], keys, options).source);
    var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));
    return attachKeys(regexp, keys);
}
/**
 * Create a path regexp from string input.
 *
 * @param  {string}  path
 * @param  {!Array}  keys
 * @param  {!Object} options
 * @return {!RegExp}
 */ function stringToRegexp(path, keys, options) {
    return tokensToRegExp(parse(path, options), keys, options);
}
/**
 * Expose a function for taking tokens and returning a RegExp.
 *
 * @param  {!Array}          tokens
 * @param  {(Array|Object)=} keys
 * @param  {Object=}         options
 * @return {!RegExp}
 */ function tokensToRegExp(tokens, keys, options) {
    if (!isarray(keys)) {
        options = keys || options;
        keys = [];
    }
    options = options || {
    };
    var strict = options.strict;
    var end = options.end !== false;
    var route = '';
    // Iterate over the tokens and create our regexp string.
    for(var i = 0; i < tokens.length; i++){
        var token = tokens[i];
        if (typeof token === 'string') route += escapeString(token);
        else {
            var prefix = escapeString(token.prefix);
            var capture = '(?:' + token.pattern + ')';
            keys.push(token);
            if (token.repeat) capture += '(?:' + prefix + capture + ')*';
            if (token.optional) {
                if (!token.partial) capture = '(?:' + prefix + '(' + capture + '))?';
                else capture = prefix + '(' + capture + ')?';
            } else capture = prefix + '(' + capture + ')';
            route += capture;
        }
    }
    var delimiter = escapeString(options.delimiter || '/');
    var endsWithDelimiter = route.slice(-delimiter.length) === delimiter;
    // In non-strict mode we allow a slash at the end of match. If the path to
    // match already ends with a slash, we remove it for consistency. The slash
    // is valid at the end of a path match, not in the middle. This is important
    // in non-ending mode, where "/test/" shouldn't match "/test//route".
    if (!strict) route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?';
    if (end) route += '$';
    else // In non-ending mode, we need the capturing groups to match as much as
    // possible by using a positive lookahead to the end or next path segment.
    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)';
    return attachKeys(new RegExp('^' + route, flags(options)), keys);
}
/**
 * Normalize the given path string, returning a regular expression.
 *
 * An empty array can be passed in for the keys, which will hold the
 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
 *
 * @param  {(string|RegExp|Array)} path
 * @param  {(Array|Object)=}       keys
 * @param  {Object=}               options
 * @return {!RegExp}
 */ function pathToRegexp(path, keys, options) {
    if (!isarray(keys)) {
        options = keys || options;
        keys = [];
    }
    options = options || {
    };
    if (path instanceof RegExp) return regexpToRegexp(path, keys);
    if (isarray(path)) return arrayToRegexp(path, keys, options);
    return stringToRegexp(path, keys, options);
}

},{"isarray":"57rw6"}],"57rw6":[function(require,module,exports) {
module.exports = Array.isArray || function(arr) {
    return Object.prototype.toString.call(arr) == '[object Array]';
};

},{}],"SF7VS":[function(require,module,exports) {
'use strict';
var reactIs = require('react-is');
/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */ var REACT_STATICS = {
    childContextTypes: true,
    contextType: true,
    contextTypes: true,
    defaultProps: true,
    displayName: true,
    getDefaultProps: true,
    getDerivedStateFromError: true,
    getDerivedStateFromProps: true,
    mixins: true,
    propTypes: true,
    type: true
};
var KNOWN_STATICS = {
    name: true,
    length: true,
    prototype: true,
    caller: true,
    callee: true,
    arguments: true,
    arity: true
};
var FORWARD_REF_STATICS = {
    '$$typeof': true,
    render: true,
    defaultProps: true,
    displayName: true,
    propTypes: true
};
var MEMO_STATICS = {
    '$$typeof': true,
    compare: true,
    defaultProps: true,
    displayName: true,
    propTypes: true,
    type: true
};
var TYPE_STATICS = {
};
TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
function getStatics(component) {
    // React v16.11 and below
    if (reactIs.isMemo(component)) return MEMO_STATICS;
     // React v16.12 and above
    return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
}
var defineProperty = Object.defineProperty;
var getOwnPropertyNames = Object.getOwnPropertyNames;
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var getPrototypeOf = Object.getPrototypeOf;
var objectPrototype = Object.prototype;
function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
    if (typeof sourceComponent !== 'string') {
        // don't hoist over string (html) components
        if (objectPrototype) {
            var inheritedComponent = getPrototypeOf(sourceComponent);
            if (inheritedComponent && inheritedComponent !== objectPrototype) hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
        }
        var keys = getOwnPropertyNames(sourceComponent);
        if (getOwnPropertySymbols) keys = keys.concat(getOwnPropertySymbols(sourceComponent));
        var targetStatics = getStatics(targetComponent);
        var sourceStatics = getStatics(sourceComponent);
        for(var i = 0; i < keys.length; ++i){
            var key = keys[i];
            if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
                var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
                try {
                    // Avoid failures from read-only properties
                    defineProperty(targetComponent, key, descriptor);
                } catch (e) {
                }
            }
        }
    }
    return targetComponent;
}
module.exports = hoistNonReactStatics;

},{"react-is":"3a6ZL"}],"pPBmc":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactRouterDom = require("react-router-dom");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/*
 * <license header>
 */ function SideBar() {
    return(/*#__PURE__*/ React.createElement("ul", {
        className: "SideNav",
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\SideBar.js",
            lineNumber: 18
        },
        __self: this
    }, /*#__PURE__*/ React.createElement("li", {
        className: "SideNav-item",
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\SideBar.js",
            lineNumber: 19
        },
        __self: this
    }, /*#__PURE__*/ React.createElement(_reactRouterDom.NavLink, {
        className: "SideNav-itemLink",
        activeClassName: "is-selected",
        "aria-current": "page",
        exact: true,
        to: "/",
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\SideBar.js",
            lineNumber: 20
        },
        __self: this
    }, "Home")), /*#__PURE__*/ React.createElement("li", {
        className: "SideNav-item",
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\SideBar.js",
            lineNumber: 24
        },
        __self: this
    }, /*#__PURE__*/ React.createElement(_reactRouterDom.NavLink, {
        className: "SideNav-itemLink",
        activeClassName: "is-selected",
        "aria-current": "page",
        to: "/create",
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\SideBar.js",
            lineNumber: 25
        },
        __self: this
    }, "New brief")), /*#__PURE__*/ React.createElement("li", {
        className: "SideNav-item",
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\SideBar.js",
            lineNumber: 29
        },
        __self: this
    }, /*#__PURE__*/ React.createElement(_reactRouterDom.NavLink, {
        className: "SideNav-itemLink",
        activeClassName: "is-selected",
        "aria-current": "page",
        to: "/list",
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\SideBar.js",
            lineNumber: 30
        },
        __self: this
    }, "List briefs"))));
}
var _default = SideBar;
exports.default = _default;

},{"react":"a6qBW","react-router-dom":"CKZ3k"}],"3II2D":[function(require,module,exports) {
var _helpers = require("@swc/helpers");
"use strict";
var regeneratorRuntime = require("regenerator-runtime");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.WelcomeView = void 0;
var _react = _interopRequireWildcard(require("react"));
require("@spectrum-css/typography");
var _reactSpectrum = require("@adobe/react-spectrum");
var _reactRouterDom = require("react-router-dom");
var _utils = _interopRequireDefault(require("../utils"));
var _config = _interopRequireDefault(require("../config"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop1) {
        return nodeInterop1 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        default: obj
    };
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj.default = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
/*
 * <license header>
 */ var WelcomeView = (function(param) {
    var ims = param.ims;
    var ref = _helpers.slicedToArray(_react.useState(true), 2), isLoading = ref[0], setIsLoading = ref[1];
    var ref1 = _helpers.slicedToArray(_react.useState(''), 2), message = ref1[0], setMessage = ref1[1];
    var history = _reactRouterDom.useHistory();
    _react.useEffect(function() {
        _helpers.asyncToGenerator(regeneratorRuntime.mark(function _callee() {
            var res;
            return regeneratorRuntime.wrap(function _callee$(_ctx) {
                while(1)switch(_ctx.prev = _ctx.next){
                    case 0:
                        _ctx.next = 2;
                        return _utils.default(ims, _config.default['welcome-state'], {
                        }, {
                            userId: ims.profile.userId,
                            userName: ims.profile.name
                        });
                    case 2:
                        res = _ctx.sent;
                        if (res.error) alert(res.error.message);
                        else setMessage(res.message);
                        console.log(res);
                        setIsLoading(false);
                    case 6:
                    case "end":
                        return _ctx.stop();
                }
            }, _callee);
        }))();
    }, []);
    return(/*#__PURE__*/ React.createElement(_reactSpectrum.View, {
        elementType: "main",
        height: "100vh",
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\WelcomeView.js",
            lineNumber: 52
        },
        __self: this
    }, isLoading ? /*#__PURE__*/ React.createElement(_reactSpectrum.Flex, {
        alignItems: "center",
        justifyContent: "center",
        height: "100vh",
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\WelcomeView.js",
            lineNumber: 53
        },
        __self: this
    }, /*#__PURE__*/ React.createElement(_reactSpectrum.ProgressCircle, {
        size: "L",
        "aria-label": "Loading\u2026",
        isIndeterminate: true,
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\WelcomeView.js",
            lineNumber: 54
        },
        __self: this
    })) : /*#__PURE__*/ React.createElement(_reactSpectrum.Flex, {
        justifyContent: "center",
        alignItems: "center",
        direction: "column",
        height: "100%",
        gap: "size-400",
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\WelcomeView.js",
            lineNumber: 55
        },
        __self: this
    }, /*#__PURE__*/ React.createElement("h2", {
        className: "spectrum-Heading spectrum-Heading--sizeL spectrum-Heading--serif",
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\WelcomeView.js",
            lineNumber: 56
        },
        __self: this
    }, message), /*#__PURE__*/ React.createElement("p", {
        className: "spectrum-Body spectrum-Body--sizeL",
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\WelcomeView.js",
            lineNumber: 57
        },
        __self: this
    }, "Get started by listing all briefs or create a new brief."), /*#__PURE__*/ React.createElement(_reactSpectrum.ButtonGroup, {
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\WelcomeView.js",
            lineNumber: 58
        },
        __self: this
    }, /*#__PURE__*/ React.createElement(_reactSpectrum.Button, {
        variant: "cta",
        onPress: function() {
            history.push('/create');
        },
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\WelcomeView.js",
            lineNumber: 59
        },
        __self: this
    }, "New brief"), /*#__PURE__*/ React.createElement(_reactSpectrum.Button, {
        variant: "primary",
        onPress: function() {
            history.push('/list');
        },
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\WelcomeView.js",
            lineNumber: 64
        },
        __self: this
    }, "List briefs")))));
}).bind(undefined);
exports.WelcomeView = WelcomeView;

},{"@swc/helpers":"5eKpN","regenerator-runtime":"2ZDSP","react":"a6qBW","@spectrum-css/typography":"6HrtQ","@adobe/react-spectrum":"3fLzW","react-router-dom":"CKZ3k","../utils":"1wIxb","../config":"2sGbH"}],"5eKpN":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _applyDecoratedDescriptor = _interopRequireDefault2(require("./_apply_decorated_descriptor"));
var _arrayWithHoles = _interopRequireDefault2(require("./_array_with_holes"));
var _arrayWithoutHoles = _interopRequireDefault2(require("./_array_without_holes"));
var _assertThisInitialized = _interopRequireDefault2(require("./_assert_this_initialized"));
var _asyncGenerator = _interopRequireDefault2(require("./_async_generator"));
var _asyncGeneratorDelegate = _interopRequireDefault2(require("./_async_generator_delegate"));
var _asyncIterator = _interopRequireDefault2(require("./_async_iterator"));
var _asyncToGenerator = _interopRequireDefault2(require("./_async_to_generator"));
var _awaitAsyncGenerator = _interopRequireDefault2(require("./_await_async_generator"));
var _awaitValue = _interopRequireDefault2(require("./_await_value"));
var _classCallCheck = _interopRequireDefault2(require("./_class_call_check"));
var _classNameTdzError = _interopRequireDefault2(require("./_class_name_tdz_error"));
var _classPrivateFieldGet = _interopRequireDefault2(require("./_class_private_field_get"));
var _classPrivateFieldLooseBase = _interopRequireDefault2(require("./_class_private_field_loose_base"));
var _classPrivateFieldSet = _interopRequireDefault2(require("./_class_private_field_set"));
var _classPrivateMethodGet = _interopRequireDefault2(require("./_class_private_method_get"));
var _classPrivateMethodSet = _interopRequireDefault2(require("./_class_private_method_set"));
var _classStaticPrivateFieldSpecGet = _interopRequireDefault2(require("./_class_static_private_field_spec_get"));
var _classStaticPrivateFieldSpecSet = _interopRequireDefault2(require("./_class_static_private_field_spec_set"));
var _construct = _interopRequireDefault2(require("./_construct"));
var _createClass = _interopRequireDefault2(require("./_create_class"));
var _decorate = _interopRequireDefault2(require("./_decorate"));
var _defaults = _interopRequireDefault2(require("./_defaults"));
var _defineEnumerableProperties = _interopRequireDefault2(require("./_define_enumerable_properties"));
var _defineProperty = _interopRequireDefault2(require("./_define_property"));
var _extends = _interopRequireDefault2(require("./_extends"));
var _get = _interopRequireDefault2(require("./_get"));
var _getPrototypeOf = _interopRequireDefault2(require("./_get_prototype_of"));
var _inherits = _interopRequireDefault2(require("./_inherits"));
var _inheritsLoose = _interopRequireDefault2(require("./_inherits_loose"));
var _initializerDefineProperty = _interopRequireDefault2(require("./_initializer_define_property"));
var _initializerWarningHelper = _interopRequireDefault2(require("./_initializer_warning_helper"));
var _instanceof = _interopRequireDefault2(require("./_instanceof"));
var _interopRequireDefault1 = _interopRequireDefault2(require("./_interop_require_default"));
var _interopRequireWildcard = _interopRequireDefault2(require("./_interop_require_wildcard"));
var _isNativeFunction = _interopRequireDefault2(require("./_is_native_function"));
var _iterableToArray = _interopRequireDefault2(require("./_iterable_to_array"));
var _iterableToArrayLimit = _interopRequireDefault2(require("./_iterable_to_array_limit"));
var _iterableToArrayLimitLoose = _interopRequireDefault2(require("./_iterable_to_array_limit_loose"));
var _jsx = _interopRequireDefault2(require("./_jsx"));
var _newArrowCheck = _interopRequireDefault2(require("./_new_arrow_check"));
var _nonIterableRest = _interopRequireDefault2(require("./_non_iterable_rest"));
var _nonIterableSpread = _interopRequireDefault2(require("./_non_iterable_spread"));
var _objectSpread = _interopRequireDefault2(require("./_object_spread"));
var _objectWithoutProperties = _interopRequireDefault2(require("./_object_without_properties"));
var _objectWithoutPropertiesLoose = _interopRequireDefault2(require("./_object_without_properties_loose"));
var _possibleConstructorReturn = _interopRequireDefault2(require("./_possible_constructor_return"));
var _readOnlyError = _interopRequireDefault2(require("./_read_only_error"));
var _set = _interopRequireDefault2(require("./_set"));
var _setPrototypeOf = _interopRequireDefault2(require("./_set_prototype_of"));
var _skipFirstGeneratorNext = _interopRequireDefault2(require("./_skip_first_generator_next"));
var _slicedToArray = _interopRequireDefault2(require("./_sliced_to_array"));
var _slicedToArrayLoose = _interopRequireDefault2(require("./_sliced_to_array_loose"));
var _superPropBase = _interopRequireDefault2(require("./_super_prop_base"));
var _taggedTemplateLiteral = _interopRequireDefault2(require("./_tagged_template_literal"));
var _taggedTemplateLiteralLoose = _interopRequireDefault2(require("./_tagged_template_literal_loose"));
var _throw = _interopRequireDefault2(require("./_throw"));
var _toArray = _interopRequireDefault2(require("./_to_array"));
var _toConsumableArray = _interopRequireDefault2(require("./_to_consumable_array"));
var _toPrimitive = _interopRequireDefault2(require("./_to_primitive"));
var _toPropertyKey = _interopRequireDefault2(require("./_to_property_key"));
var _typeOf = _interopRequireDefault2(require("./_type_of"));
var _wrapAsyncGenerator = _interopRequireDefault2(require("./_wrap_async_generator"));
var _wrapNativeSuper = _interopRequireDefault2(require("./_wrap_native_super"));
function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
Object.defineProperty(exports, "applyDecoratedDescriptor", {
    enumerable: true,
    get: function() {
        return _applyDecoratedDescriptor.default;
    }
});
Object.defineProperty(exports, "arrayWithHoles", {
    enumerable: true,
    get: function() {
        return _arrayWithHoles.default;
    }
});
Object.defineProperty(exports, "arrayWithoutHoles", {
    enumerable: true,
    get: function() {
        return _arrayWithoutHoles.default;
    }
});
Object.defineProperty(exports, "assertThisInitialized", {
    enumerable: true,
    get: function() {
        return _assertThisInitialized.default;
    }
});
Object.defineProperty(exports, "asyncGenerator", {
    enumerable: true,
    get: function() {
        return _asyncGenerator.default;
    }
});
Object.defineProperty(exports, "asyncGeneratorDelegate", {
    enumerable: true,
    get: function() {
        return _asyncGeneratorDelegate.default;
    }
});
Object.defineProperty(exports, "asyncIterator", {
    enumerable: true,
    get: function() {
        return _asyncIterator.default;
    }
});
Object.defineProperty(exports, "asyncToGenerator", {
    enumerable: true,
    get: function() {
        return _asyncToGenerator.default;
    }
});
Object.defineProperty(exports, "awaitAsyncGenerator", {
    enumerable: true,
    get: function() {
        return _awaitAsyncGenerator.default;
    }
});
Object.defineProperty(exports, "awaitValue", {
    enumerable: true,
    get: function() {
        return _awaitValue.default;
    }
});
Object.defineProperty(exports, "classCallCheck", {
    enumerable: true,
    get: function() {
        return _classCallCheck.default;
    }
});
Object.defineProperty(exports, "classNameTDZError", {
    enumerable: true,
    get: function() {
        return _classNameTdzError.default;
    }
});
Object.defineProperty(exports, "classPrivateFieldGet", {
    enumerable: true,
    get: function() {
        return _classPrivateFieldGet.default;
    }
});
Object.defineProperty(exports, "classPrivateFieldLooseBase", {
    enumerable: true,
    get: function() {
        return _classPrivateFieldLooseBase.default;
    }
});
Object.defineProperty(exports, "classPrivateFieldSet", {
    enumerable: true,
    get: function() {
        return _classPrivateFieldSet.default;
    }
});
Object.defineProperty(exports, "classPrivateMethodGet", {
    enumerable: true,
    get: function() {
        return _classPrivateMethodGet.default;
    }
});
Object.defineProperty(exports, "classPrivateMethodSet", {
    enumerable: true,
    get: function() {
        return _classPrivateMethodSet.default;
    }
});
Object.defineProperty(exports, "classStaticPrivateFieldSpecGet", {
    enumerable: true,
    get: function() {
        return _classStaticPrivateFieldSpecGet.default;
    }
});
Object.defineProperty(exports, "classStaticPrivateFieldSpecSet", {
    enumerable: true,
    get: function() {
        return _classStaticPrivateFieldSpecSet.default;
    }
});
Object.defineProperty(exports, "construct", {
    enumerable: true,
    get: function() {
        return _construct.default;
    }
});
Object.defineProperty(exports, "createClass", {
    enumerable: true,
    get: function() {
        return _createClass.default;
    }
});
Object.defineProperty(exports, "decorate", {
    enumerable: true,
    get: function() {
        return _decorate.default;
    }
});
Object.defineProperty(exports, "defaults", {
    enumerable: true,
    get: function() {
        return _defaults.default;
    }
});
Object.defineProperty(exports, "defineEnumerableProperties", {
    enumerable: true,
    get: function() {
        return _defineEnumerableProperties.default;
    }
});
Object.defineProperty(exports, "defineProperty", {
    enumerable: true,
    get: function() {
        return _defineProperty.default;
    }
});
Object.defineProperty(exports, "extends", {
    enumerable: true,
    get: function() {
        return _extends.default;
    }
});
Object.defineProperty(exports, "get", {
    enumerable: true,
    get: function() {
        return _get.default;
    }
});
Object.defineProperty(exports, "getPrototypeOf", {
    enumerable: true,
    get: function() {
        return _getPrototypeOf.default;
    }
});
Object.defineProperty(exports, "inherits", {
    enumerable: true,
    get: function() {
        return _inherits.default;
    }
});
Object.defineProperty(exports, "inheritsLoose", {
    enumerable: true,
    get: function() {
        return _inheritsLoose.default;
    }
});
Object.defineProperty(exports, "initializerDefineProperty", {
    enumerable: true,
    get: function() {
        return _initializerDefineProperty.default;
    }
});
Object.defineProperty(exports, "initializerWarningHelper", {
    enumerable: true,
    get: function() {
        return _initializerWarningHelper.default;
    }
});
Object.defineProperty(exports, "_instanceof", {
    enumerable: true,
    get: function() {
        return _instanceof.default;
    }
});
Object.defineProperty(exports, "interopRequireDefault", {
    enumerable: true,
    get: function() {
        return _interopRequireDefault1.default;
    }
});
Object.defineProperty(exports, "interopRequireWildcard", {
    enumerable: true,
    get: function() {
        return _interopRequireWildcard.default;
    }
});
Object.defineProperty(exports, "isNativeFunction", {
    enumerable: true,
    get: function() {
        return _isNativeFunction.default;
    }
});
Object.defineProperty(exports, "iterableToArray", {
    enumerable: true,
    get: function() {
        return _iterableToArray.default;
    }
});
Object.defineProperty(exports, "iterableToArrayLimit", {
    enumerable: true,
    get: function() {
        return _iterableToArrayLimit.default;
    }
});
Object.defineProperty(exports, "iterableToArrayLimitLoose", {
    enumerable: true,
    get: function() {
        return _iterableToArrayLimitLoose.default;
    }
});
Object.defineProperty(exports, "jsx", {
    enumerable: true,
    get: function() {
        return _jsx.default;
    }
});
Object.defineProperty(exports, "newArrowCheck", {
    enumerable: true,
    get: function() {
        return _newArrowCheck.default;
    }
});
Object.defineProperty(exports, "nonIterableRest", {
    enumerable: true,
    get: function() {
        return _nonIterableRest.default;
    }
});
Object.defineProperty(exports, "nonIterableSpread", {
    enumerable: true,
    get: function() {
        return _nonIterableSpread.default;
    }
});
Object.defineProperty(exports, "objectSpread", {
    enumerable: true,
    get: function() {
        return _objectSpread.default;
    }
});
Object.defineProperty(exports, "objectWithoutProperties", {
    enumerable: true,
    get: function() {
        return _objectWithoutProperties.default;
    }
});
Object.defineProperty(exports, "objectWithoutPropertiesLoose", {
    enumerable: true,
    get: function() {
        return _objectWithoutPropertiesLoose.default;
    }
});
Object.defineProperty(exports, "possibleConstructorReturn", {
    enumerable: true,
    get: function() {
        return _possibleConstructorReturn.default;
    }
});
Object.defineProperty(exports, "readOnlyError", {
    enumerable: true,
    get: function() {
        return _readOnlyError.default;
    }
});
Object.defineProperty(exports, "set", {
    enumerable: true,
    get: function() {
        return _set.default;
    }
});
Object.defineProperty(exports, "setPrototypeOf", {
    enumerable: true,
    get: function() {
        return _setPrototypeOf.default;
    }
});
Object.defineProperty(exports, "skipFirstGeneratorNext", {
    enumerable: true,
    get: function() {
        return _skipFirstGeneratorNext.default;
    }
});
Object.defineProperty(exports, "slicedToArray", {
    enumerable: true,
    get: function() {
        return _slicedToArray.default;
    }
});
Object.defineProperty(exports, "slicedToArrayLoose", {
    enumerable: true,
    get: function() {
        return _slicedToArrayLoose.default;
    }
});
Object.defineProperty(exports, "superPropBase", {
    enumerable: true,
    get: function() {
        return _superPropBase.default;
    }
});
Object.defineProperty(exports, "taggedTemplateLiteral", {
    enumerable: true,
    get: function() {
        return _taggedTemplateLiteral.default;
    }
});
Object.defineProperty(exports, "taggedTemplateLiteralLoose", {
    enumerable: true,
    get: function() {
        return _taggedTemplateLiteralLoose.default;
    }
});
Object.defineProperty(exports, "_throw", {
    enumerable: true,
    get: function() {
        return _throw.default;
    }
});
Object.defineProperty(exports, "toArray", {
    enumerable: true,
    get: function() {
        return _toArray.default;
    }
});
Object.defineProperty(exports, "toConsumableArray", {
    enumerable: true,
    get: function() {
        return _toConsumableArray.default;
    }
});
Object.defineProperty(exports, "toPrimitive", {
    enumerable: true,
    get: function() {
        return _toPrimitive.default;
    }
});
Object.defineProperty(exports, "toPropertyKey", {
    enumerable: true,
    get: function() {
        return _toPropertyKey.default;
    }
});
Object.defineProperty(exports, "typeOf", {
    enumerable: true,
    get: function() {
        return _typeOf.default;
    }
});
Object.defineProperty(exports, "wrapAsyncGenerator", {
    enumerable: true,
    get: function() {
        return _wrapAsyncGenerator.default;
    }
});
Object.defineProperty(exports, "wrapNativeSuper", {
    enumerable: true,
    get: function() {
        return _wrapNativeSuper.default;
    }
});

},{"./_apply_decorated_descriptor":"6VnFY","./_array_with_holes":"4lzvs","./_array_without_holes":"P6sIl","./_assert_this_initialized":"4P51R","./_async_generator":"4Y8xZ","./_async_generator_delegate":"4dyJc","./_async_iterator":"dyWim","./_async_to_generator":"iWm0y","./_await_async_generator":"1VIvf","./_await_value":"1bmZk","./_class_call_check":"6fEZM","./_class_name_tdz_error":"2DjIp","./_class_private_field_get":"3gO8v","./_class_private_field_loose_base":"7dJoW","./_class_private_field_set":"3o37z","./_class_private_method_get":"57tTj","./_class_private_method_set":"2Y4Ro","./_class_static_private_field_spec_get":"6ZN4Z","./_class_static_private_field_spec_set":"d16wb","./_construct":"4JSOl","./_create_class":"25Nix","./_decorate":"7DrZT","./_defaults":"7Dwi8","./_define_enumerable_properties":"5Kh1Q","./_define_property":"7bvVj","./_extends":"6kCxE","./_get":"2zxhz","./_get_prototype_of":"6SgC2","./_inherits":"3bcO4","./_inherits_loose":"Wo2rH","./_initializer_define_property":"0T3NF","./_initializer_warning_helper":"6Ea1T","./_instanceof":"4B0Ph","./_interop_require_default":"2Iylq","./_interop_require_wildcard":"4aEAx","./_is_native_function":"2Z32d","./_iterable_to_array":"2nD92","./_iterable_to_array_limit":"5b0Oi","./_iterable_to_array_limit_loose":"1QlWC","./_jsx":"6VAcV","./_new_arrow_check":"5VIi5","./_non_iterable_rest":"68KXZ","./_non_iterable_spread":"7rKRl","./_object_spread":"5KclU","./_object_without_properties":"VefNW","./_object_without_properties_loose":"6ji60","./_possible_constructor_return":"3VJbe","./_read_only_error":"6ciYK","./_set":"5xmGq","./_set_prototype_of":"7H5pC","./_skip_first_generator_next":"7Jehp","./_sliced_to_array":"6TQbp","./_sliced_to_array_loose":"1S4Vh","./_super_prop_base":"2OBIv","./_tagged_template_literal":"1ev2a","./_tagged_template_literal_loose":"6l5te","./_throw":"21CQb","./_to_array":"1bxcr","./_to_consumable_array":"1qepD","./_to_primitive":"eLoiy","./_to_property_key":"4a3un","./_type_of":"5iXKZ","./_wrap_async_generator":"78hQl","./_wrap_native_super":"4OMci"}],"6VnFY":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _applyDecoratedDescriptor;
function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {
    };
    Object["keys"](descriptor).forEach(function(key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;
    if ('value' in desc || desc.initializer) desc.writable = true;
    desc = decorators.slice().reverse().reduce(function(desc1, decorator) {
        return decorator(target, property, desc1) || desc1;
    }, desc);
    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }
    if (desc.initializer === void 0) {
        Object["defineProperty"](target, property, desc);
        desc = null;
    }
    return desc;
}

},{}],"4lzvs":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _arrayWithHoles;
function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
}

},{}],"P6sIl":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _arrayWithoutHoles;
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) {
        for(var i = 0, arr2 = new Array(arr.length); i < arr.length; i++)arr2[i] = arr[i];
        return arr2;
    }
}

},{}],"4P51R":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _assertThisInitialized;
function _assertThisInitialized(self) {
    if (self === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return self;
}

},{}],"4Y8xZ":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = AsyncGenerator;
var _awaitValue = _interopRequireDefault(require("./_await_value"));
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) return right[Symbol.hasInstance](left);
    else return left instanceof right;
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function AsyncGenerator(gen) {
    var send = function send1(key, arg) {
        return new Promise(function(resolve, reject) {
            var request = {
                key: key,
                arg: arg,
                resolve: resolve,
                reject: reject,
                next: null
            };
            if (back) back = back.next = request;
            else {
                front = back = request;
                resume(key, arg);
            }
        });
    };
    var settle = function settle1(type, value) {
        switch(type){
            case "return":
                front.resolve({
                    value: value,
                    done: true
                });
                break;
            case "throw":
                front.reject(value);
                break;
            default:
                front.resolve({
                    value: value,
                    done: false
                });
                break;
        }
        front = front.next;
        if (front) resume(front.key, front.arg);
        else back = null;
    };
    var front, back;
    function resume(key, arg) {
        try {
            var result = gen[key](arg);
            var value = result.value;
            var wrappedAwait = _instanceof(value, _awaitValue.default);
            Promise.resolve(wrappedAwait ? value.wrapped : value).then(function(arg1) {
                if (wrappedAwait) {
                    resume("next", arg1);
                    return;
                }
                settle(result.done ? "return" : "normal", arg1);
            }, function(err) {
                resume("throw", err);
            });
        } catch (err) {
            settle("throw", err);
        }
    }
    this._invoke = send;
    if (typeof gen.return !== "function") this.return = undefined;
}
if (typeof Symbol === "function" && Symbol.asyncIterator) AsyncGenerator.prototype[Symbol.asyncIterator] = function() {
    return this;
};
AsyncGenerator.prototype.next = function(arg) {
    return this._invoke("next", arg);
};
AsyncGenerator.prototype.throw = function(arg) {
    return this._invoke("throw", arg);
};
AsyncGenerator.prototype.return = function(arg) {
    return this._invoke("return", arg);
};

},{"./_await_value":"1bmZk"}],"1bmZk":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _AwaitValue;
function _AwaitValue(value) {
    this.wrapped = value;
}

},{}],"4dyJc":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _asyncGeneratorDelegate;
function _asyncGeneratorDelegate(inner, awaitWrap) {
    var pump = function pump1(key, value) {
        waiting = true;
        value = new Promise(function(resolve) {
            resolve(inner[key](value));
        });
        return {
            done: false,
            value: awaitWrap(value)
        };
    };
    var iter = {
    }, waiting = false;
    if (typeof Symbol === "function" && Symbol.iterator) iter[Symbol.iterator] = function() {
        return this;
    };
    iter.next = function(value) {
        if (waiting) {
            waiting = false;
            return value;
        }
        return pump("next", value);
    };
    if (typeof inner.throw === "function") iter.throw = function(value) {
        if (waiting) {
            waiting = false;
            throw value;
        }
        return pump("throw", value);
    };
    if (typeof inner.return === "function") iter.return = function(value) {
        return pump("return", value);
    };
    return iter;
}

},{}],"dyWim":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _asyncIterator;
function _asyncIterator(iterable) {
    var method;
    if (typeof Symbol === "function") {
        if (Symbol.asyncIterator) {
            method = iterable[Symbol.asyncIterator];
            if (method != null) return method.call(iterable);
        }
        if (Symbol.iterator) {
            method = iterable[Symbol.iterator];
            if (method != null) return method.call(iterable);
        }
    }
    throw new TypeError("Object is not async iterable");
}

},{}],"iWm0y":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _asyncToGenerator;
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) resolve(value);
    else Promise.resolve(value).then(_next, _throw);
}
function _asyncToGenerator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}

},{}],"1VIvf":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _awaitAsyncGenerator;
var _awaitValue = _interopRequireDefault(require("./_await_value"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _awaitAsyncGenerator(value) {
    return new _awaitValue.default(value);
}

},{"./_await_value":"1bmZk"}],"6fEZM":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _classCallCheck;
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) return right[Symbol.hasInstance](left);
    else return left instanceof right;
}
function _classCallCheck(instance, Constructor) {
    if (!_instanceof(instance, Constructor)) throw new TypeError("Cannot call a class as a function");
}

},{}],"2DjIp":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _classNameTDZError;
function _classNameTDZError(name) {
    throw new Error("Class \"" + name + "\" cannot be referenced in computed property keys.");
}

},{}],"3gO8v":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _classPrivateFieldGet;
function _classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver).value;
}

},{}],"7dJoW":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _classPrivateFieldBase;
function _classPrivateFieldBase(receiver, privateKey) {
    if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) throw new TypeError("attempted to use private field on non-instance");
    return receiver;
}

},{}],"3o37z":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _classPrivateFieldSet;
function _classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    var descriptor = privateMap.get(receiver);
    if (!descriptor.writable) throw new TypeError("attempted to set read only private field");
    descriptor.value = value;
    return value;
}

},{}],"57tTj":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _classPrivateMethodGet;
function _classPrivateMethodGet(receiver, privateSet, fn) {
    if (!privateSet.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return fn;
}

},{}],"2Y4Ro":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _classPrivateMethodSet;
function _classPrivateMethodSet() {
    throw new TypeError("attempted to reassign private method");
}

},{}],"6ZN4Z":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _classStaticPrivateFieldSpecGet;
function _classStaticPrivateFieldSpecGet(receiver, classConstructor, descriptor) {
    if (receiver !== classConstructor) throw new TypeError("Private static access of wrong provenance");
    return descriptor.value;
}

},{}],"d16wb":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _classStaticPrivateFieldSpecSet;
function _classStaticPrivateFieldSpecSet(receiver, classConstructor, descriptor, value) {
    if (receiver !== classConstructor) throw new TypeError("Private static access of wrong provenance");
    if (!descriptor.writable) throw new TypeError("attempted to set read only private field");
    descriptor.value = value;
    return value;
}

},{}],"4JSOl":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _construct;
function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
    } catch (e) {
        return false;
    }
}
function construct(Parent, args, Class) {
    if (isNativeReflectConstruct()) construct = Reflect.construct;
    else construct = function construct1(Parent1, args1, Class1) {
        var a = [
            null
        ];
        a.push.apply(a, args1);
        var Constructor = Function.bind.apply(Parent1, a);
        var instance = new Constructor();
        if (Class1) _setPrototypeOf(instance, Class1.prototype);
        return instance;
    };
    return construct.apply(null, arguments);
}
function _construct(Parent, args, Class) {
    return construct.apply(null, arguments);
}

},{}],"25Nix":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _createClass;
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}

},{}],"7DrZT":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _decorate;
var _toArray = _interopRequireDefault(require("./_to_array"));
var _toPropertyKey = _interopRequireDefault(require("./_to_property_key"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _decorate(decorators, factory, superClass) {
    var r = factory(function initialize(O) {
        _initializeInstanceElements(O, decorated.elements);
    }, superClass);
    var decorated = _decorateClass(_coalesceClassElements(r.d.map(_createElementDescriptor)), decorators);
    _initializeClassElements(r.F, decorated.elements);
    return _runClassFinishers(r.F, decorated.finishers);
}
function _createElementDescriptor(def) {
    var key = _toPropertyKey.default(def.key);
    var descriptor;
    if (def.kind === "method") {
        descriptor = {
            value: def.value,
            writable: true,
            configurable: true,
            enumerable: false
        };
        Object.defineProperty(def.value, "name", {
            value: _typeof(key) === "symbol" ? "" : key,
            configurable: true
        });
    } else if (def.kind === "get") descriptor = {
        get: def.value,
        configurable: true,
        enumerable: false
    };
    else if (def.kind === "set") descriptor = {
        set: def.value,
        configurable: true,
        enumerable: false
    };
    else if (def.kind === "field") descriptor = {
        configurable: true,
        writable: true,
        enumerable: true
    };
    var element = {
        kind: def.kind === "field" ? "field" : "method",
        key: key,
        placement: def.static ? "static" : def.kind === "field" ? "own" : "prototype",
        descriptor: descriptor
    };
    if (def.decorators) element.decorators = def.decorators;
    if (def.kind === "field") element.initializer = def.value;
    return element;
}
function _coalesceGetterSetter(element, other) {
    if (element.descriptor.get !== undefined) other.descriptor.get = element.descriptor.get;
    else other.descriptor.set = element.descriptor.set;
}
function _coalesceClassElements(elements) {
    var newElements = [];
    var isSameElement = function isSameElement1(other) {
        return other.kind === "method" && other.key === element.key && other.placement === element.placement;
    };
    for(var i = 0; i < elements.length; i++){
        var element = elements[i];
        var other;
        if (element.kind === "method" && (other = newElements.find(isSameElement))) {
            if (_isDataDescriptor(element.descriptor) || _isDataDescriptor(other.descriptor)) {
                if (_hasDecorators(element) || _hasDecorators(other)) throw new ReferenceError("Duplicated methods (" + element.key + ") can't be decorated.");
                other.descriptor = element.descriptor;
            } else {
                if (_hasDecorators(element)) {
                    if (_hasDecorators(other)) throw new ReferenceError("Decorators can't be placed on different accessors with for the same property (" + element.key + ").");
                    other.decorators = element.decorators;
                }
                _coalesceGetterSetter(element, other);
            }
        } else newElements.push(element);
    }
    return newElements;
}
function _hasDecorators(element) {
    return element.decorators && element.decorators.length;
}
function _isDataDescriptor(desc) {
    return desc !== undefined && !(desc.value === undefined && desc.writable === undefined);
}
function _initializeClassElements(F, elements) {
    var proto = F.prototype;
    [
        "method",
        "field"
    ].forEach(function(kind) {
        elements.forEach(function(element) {
            var placement = element.placement;
            if (element.kind === kind && (placement === "static" || placement === "prototype")) {
                var receiver = placement === "static" ? F : proto;
                _defineClassElement(receiver, element);
            }
        });
    });
}
function _initializeInstanceElements(O, elements) {
    [
        "method",
        "field"
    ].forEach(function(kind) {
        elements.forEach(function(element) {
            if (element.kind === kind && element.placement === "own") _defineClassElement(O, element);
        });
    });
}
function _defineClassElement(receiver, element) {
    var descriptor = element.descriptor;
    if (element.kind === "field") {
        var initializer = element.initializer;
        descriptor = {
            enumerable: descriptor.enumerable,
            writable: descriptor.writable,
            configurable: descriptor.configurable,
            value: initializer === void 0 ? void 0 : initializer.call(receiver)
        };
    }
    Object.defineProperty(receiver, element.key, descriptor);
}
function _decorateClass(elements, decorators) {
    var newElements = [];
    var finishers = [];
    var placements = {
        static: [],
        prototype: [],
        own: []
    };
    elements.forEach(function(element) {
        _addElementPlacement(element, placements);
    });
    elements.forEach(function(element) {
        if (!_hasDecorators(element)) return newElements.push(element);
        var elementFinishersExtras = _decorateElement(element, placements);
        newElements.push(elementFinishersExtras.element);
        newElements.push.apply(newElements, elementFinishersExtras.extras);
        finishers.push.apply(finishers, elementFinishersExtras.finishers);
    });
    if (!decorators) return {
        elements: newElements,
        finishers: finishers
    };
    var result = _decorateConstructor(newElements, decorators);
    finishers.push.apply(finishers, result.finishers);
    result.finishers = finishers;
    return result;
}
function _addElementPlacement(element, placements, silent) {
    var keys = placements[element.placement];
    if (!silent && keys.indexOf(element.key) !== -1) throw new TypeError("Duplicated element (" + element.key + ")");
    keys.push(element.key);
}
function _decorateElement(element, placements) {
    var extras = [];
    var finishers = [];
    for(var decorators = element.decorators, i = decorators.length - 1; i >= 0; i--){
        var keys = placements[element.placement];
        keys.splice(keys.indexOf(element.key), 1);
        var elementObject = _fromElementDescriptor(element);
        var elementFinisherExtras = _toElementFinisherExtras(decorators[i](elementObject) || elementObject);
        element = elementFinisherExtras.element;
        _addElementPlacement(element, placements);
        if (elementFinisherExtras.finisher) finishers.push(elementFinisherExtras.finisher);
        var newExtras = elementFinisherExtras.extras;
        if (newExtras) {
            for(var j = 0; j < newExtras.length; j++)_addElementPlacement(newExtras[j], placements);
            extras.push.apply(extras, newExtras);
        }
    }
    return {
        element: element,
        finishers: finishers,
        extras: extras
    };
}
function _decorateConstructor(elements, decorators) {
    var finishers = [];
    for(var i = decorators.length - 1; i >= 0; i--){
        var obj = _fromClassDescriptor(elements);
        var elementsAndFinisher = _toClassDescriptor(decorators[i](obj) || obj);
        if (elementsAndFinisher.finisher !== undefined) finishers.push(elementsAndFinisher.finisher);
        if (elementsAndFinisher.elements !== undefined) {
            elements = elementsAndFinisher.elements;
            for(var j = 0; j < elements.length - 1; j++)for(var k = j + 1; k < elements.length; k++){
                if (elements[j].key === elements[k].key && elements[j].placement === elements[k].placement) throw new TypeError("Duplicated element (" + elements[j].key + ")");
            }
        }
    }
    return {
        elements: elements,
        finishers: finishers
    };
}
function _fromElementDescriptor(element) {
    var obj = {
        kind: element.kind,
        key: element.key,
        placement: element.placement,
        descriptor: element.descriptor
    };
    var desc = {
        value: "Descriptor",
        configurable: true
    };
    Object.defineProperty(obj, Symbol.toStringTag, desc);
    if (element.kind === "field") obj.initializer = element.initializer;
    return obj;
}
function _toElementDescriptors(elementObjects) {
    if (elementObjects === undefined) return;
    return _toArray.default(elementObjects).map(function(elementObject) {
        var element = _toElementDescriptor(elementObject);
        _disallowProperty(elementObject, "finisher", "An element descriptor");
        _disallowProperty(elementObject, "extras", "An element descriptor");
        return element;
    });
}
function _toElementDescriptor(elementObject) {
    var kind = String(elementObject.kind);
    if (kind !== "method" && kind !== "field") throw new TypeError("An element descriptor's .kind property must be either \"method\" or \"field\", but a decorator created an element descriptor with .kind \"" + kind + '"');
    var key = _toPropertyKey.default(elementObject.key);
    var placement = String(elementObject.placement);
    if (placement !== "static" && placement !== "prototype" && placement !== "own") throw new TypeError("An element descriptor's .placement property must be one of \"static\", \"prototype\" or \"own\", but a decorator created an element descriptor with .placement \"" + placement + '"');
    var descriptor = elementObject.descriptor;
    _disallowProperty(elementObject, "elements", "An element descriptor");
    var element = {
        kind: kind,
        key: key,
        placement: placement,
        descriptor: Object.assign({
        }, descriptor)
    };
    if (kind !== "field") _disallowProperty(elementObject, "initializer", "A method descriptor");
    else {
        _disallowProperty(descriptor, "get", "The property descriptor of a field descriptor");
        _disallowProperty(descriptor, "set", "The property descriptor of a field descriptor");
        _disallowProperty(descriptor, "value", "The property descriptor of a field descriptor");
        element.initializer = elementObject.initializer;
    }
    return element;
}
function _toElementFinisherExtras(elementObject) {
    var element = _toElementDescriptor(elementObject);
    var finisher = _optionalCallableProperty(elementObject, "finisher");
    var extras = _toElementDescriptors(elementObject.extras);
    return {
        element: element,
        finisher: finisher,
        extras: extras
    };
}
function _fromClassDescriptor(elements) {
    var obj = {
        kind: "class",
        elements: elements.map(_fromElementDescriptor)
    };
    var desc = {
        value: "Descriptor",
        configurable: true
    };
    Object.defineProperty(obj, Symbol.toStringTag, desc);
    return obj;
}
function _toClassDescriptor(obj) {
    var kind = String(obj.kind);
    if (kind !== "class") throw new TypeError("A class descriptor's .kind property must be \"class\", but a decorator created a class descriptor with .kind \"" + kind + '"');
    _disallowProperty(obj, "key", "A class descriptor");
    _disallowProperty(obj, "placement", "A class descriptor");
    _disallowProperty(obj, "descriptor", "A class descriptor");
    _disallowProperty(obj, "initializer", "A class descriptor");
    _disallowProperty(obj, "extras", "A class descriptor");
    var finisher = _optionalCallableProperty(obj, "finisher");
    var elements = _toElementDescriptors(obj.elements);
    return {
        elements: elements,
        finisher: finisher
    };
}
function _disallowProperty(obj, name, objectType) {
    if (obj[name] !== undefined) throw new TypeError(objectType + " can't have a ." + name + " property.");
}
function _optionalCallableProperty(obj, name) {
    var value = obj[name];
    if (value !== undefined && typeof value !== "function") throw new TypeError("Expected '" + name + "' to be a function");
    return value;
}
function _runClassFinishers(constructor, finishers) {
    for(var i = 0; i < finishers.length; i++){
        var newConstructor = finishers[i](constructor);
        if (newConstructor !== undefined) {
            if (typeof newConstructor !== "function") throw new TypeError("Finishers must return a constructor.");
            constructor = newConstructor;
        }
    }
    return constructor;
}

},{"./_to_array":"1bxcr","./_to_property_key":"4a3un"}],"1bxcr":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _toArray;
var _arrayWithHoles = _interopRequireDefault(require("./_array_with_holes"));
var _iterableToArray = _interopRequireDefault(require("./_iterable_to_array"));
var _nonIterableRest = _interopRequireDefault(require("./_non_iterable_rest"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _toArray(arr) {
    return _arrayWithHoles.default(arr) || _iterableToArray.default(arr) || _nonIterableRest.default();
}

},{"./_array_with_holes":"4lzvs","./_iterable_to_array":"2nD92","./_non_iterable_rest":"68KXZ"}],"2nD92":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _iterableToArray;
function _iterableToArray(iter) {
    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

},{}],"68KXZ":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _nonIterableRest;
function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

},{}],"4a3un":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _toPropertyKey;
var _typeOf = _interopRequireDefault(require("./_type_of"));
var _toPrimitive = _interopRequireDefault(require("./_to_primitive"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _toPropertyKey(arg) {
    var key = _toPrimitive.default(arg, "string");
    return _typeOf.default(key) === "symbol" ? key : String(key);
}

},{"./_type_of":"5iXKZ","./_to_primitive":"eLoiy"}],"5iXKZ":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _typeof1;
var _typeof = function(obj) {
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
};
function _typeof1(obj) {
    return obj && obj.constructor === Symbol ? "symbol" : _typeof(obj);
}

},{}],"eLoiy":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _toPrimitive;
var _typeOf = _interopRequireDefault(require("./_type_of"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _toPrimitive(input, hint) {
    if (_typeOf.default(input) !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
        var res = prim.call(input, hint || "default");
        if (_typeOf.default(res) !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
}

},{"./_type_of":"5iXKZ"}],"7Dwi8":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _defaults;
function _defaults(obj, defaults) {
    var keys = Object.getOwnPropertyNames(defaults);
    for(var i = 0; i < keys.length; i++){
        var key = keys[i];
        var value = Object.getOwnPropertyDescriptor(defaults, key);
        if (value && value.configurable && obj[key] === undefined) Object.defineProperty(obj, key, value);
    }
    return obj;
}

},{}],"5Kh1Q":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _defineEnumerableProperties;
function _defineEnumerableProperties(obj, descs) {
    for(var key in descs){
        var desc = descs[key];
        desc.configurable = desc.enumerable = true;
        if ("value" in desc) desc.writable = true;
        Object.defineProperty(obj, key, desc);
    }
    if (Object.getOwnPropertySymbols) {
        var objectSymbols = Object.getOwnPropertySymbols(descs);
        for(var i = 0; i < objectSymbols.length; i++){
            var sym = objectSymbols[i];
            var desc = descs[sym];
            desc.configurable = desc.enumerable = true;
            if ("value" in desc) desc.writable = true;
            Object.defineProperty(obj, sym, desc);
        }
    }
    return obj;
}

},{}],"7bvVj":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _defineProperty;
function _defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}

},{}],"6kCxE":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _extends;
function extends_() {
    extends_ = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return extends_.apply(this, arguments);
}
function _extends() {
    return extends_.apply(this, arguments);
}

},{}],"2zxhz":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _get;
var _superPropBase = _interopRequireDefault(require("./_super_prop_base"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function get(target, property, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.get) get = Reflect.get;
    else get = function get1(target1, property1, receiver1) {
        var base = _superPropBase.default(target1, property1);
        if (!base) return;
        var desc = Object.getOwnPropertyDescriptor(base, property1);
        if (desc.get) return desc.get.call(receiver1 || target1);
        return desc.value;
    };
    return get(target, property, receiver);
}
function _get(target, property, reciever) {
    return get(target, property, reciever);
}

},{"./_super_prop_base":"2OBIv"}],"2OBIv":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _superPropBase;
var _getPrototypeOf = _interopRequireDefault(require("./_get_prototype_of"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _superPropBase(object, property) {
    while(!Object.prototype.hasOwnProperty.call(object, property)){
        object = _getPrototypeOf.default(object);
        if (object === null) break;
    }
    return object;
}

},{"./_get_prototype_of":"6SgC2"}],"6SgC2":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _getPrototypeOf;
function getPrototypeOf(o) {
    getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function getPrototypeOf1(o1) {
        return o1.__proto__ || Object.getPrototypeOf(o1);
    };
    return getPrototypeOf(o);
}
function _getPrototypeOf(o) {
    return getPrototypeOf(o);
}

},{}],"3bcO4":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _inherits;
var _setPrototypeOf = _interopRequireDefault(require("./_set_prototype_of"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) throw new TypeError("Super expression must either be null or a function");
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _setPrototypeOf.default(subClass, superClass);
}

},{"./_set_prototype_of":"7H5pC"}],"7H5pC":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _setPrototypeOf;
function setPrototypeOf(o, p) {
    setPrototypeOf = Object.setPrototypeOf || function setPrototypeOf1(o1, p1) {
        o1.__proto__ = p1;
        return o1;
    };
    return setPrototypeOf(o, p);
}
function _setPrototypeOf(o, p) {
    return setPrototypeOf(o, p);
}

},{}],"Wo2rH":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _inheritsLoose;
function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
}

},{}],"0T3NF":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _initializerDefineProperty;
function _initializerDefineProperty(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

},{}],"6Ea1T":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _initializerWarningHelper;
function _initializerWarningHelper(descriptor, context) {
    throw new Error("Decorating class property failed. Please ensure that proposal-class-properties is enabled and set to use loose mode. To use proposal-class-properties in spec mode with decorators, wait for the next major version of decorators in stage 2.");
}

},{}],"4B0Ph":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _instanceof1;
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) return right[Symbol.hasInstance](left);
    else return left instanceof right;
}
function _instanceof1(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) return right[Symbol.hasInstance](left);
    else return _instanceof(left, right);
}

},{}],"2Iylq":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _interopRequireDefault;
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}

},{}],"4aEAx":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _interopRequireWildcard;
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    else {
        var newObj = {
        };
        if (obj != null) {
            for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
                var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {
                };
                if (desc.get || desc.set) Object.defineProperty(newObj, key, desc);
                else newObj[key] = obj[key];
            }
        }
        newObj.default = obj;
        return newObj;
    }
}

},{}],"2Z32d":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _isNativeFunction;
function _isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
}

},{}],"5b0Oi":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _iterableToArrayLimit;
function _iterableToArrayLimit(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;
    try {
        for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}

},{}],"1QlWC":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _iterableToArrayLimitLoose;
function _iterableToArrayLimitLoose(arr, i) {
    var _arr = [];
    for(var _iterator = arr[Symbol.iterator](), _step; !(_step = _iterator.next()).done;){
        _arr.push(_step.value);
        if (i && _arr.length === i) break;
    }
    return _arr;
}

},{}],"6VAcV":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _createRawReactElement;
var REACT_ELEMENT_TYPE;
function _createRawReactElement(type, props, key, children) {
    if (!REACT_ELEMENT_TYPE) REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 60103;
    var defaultProps = type && type.defaultProps;
    var childrenLength = arguments.length - 3;
    if (!props && childrenLength !== 0) props = {
        children: void 0
    };
    if (props && defaultProps) {
        for(var propName in defaultProps)if (props[propName] === void 0) props[propName] = defaultProps[propName];
    } else if (!props) props = defaultProps || {
    };
    if (childrenLength === 1) props.children = children;
    else if (childrenLength > 1) {
        var childArray = new Array(childrenLength);
        for(var i = 0; i < childrenLength; i++)childArray[i] = arguments[i + 3];
        props.children = childArray;
    }
    return {
        $$typeof: REACT_ELEMENT_TYPE,
        type: type,
        key: key === undefined ? null : '' + key,
        ref: null,
        props: props,
        _owner: null
    };
}

},{}],"5VIi5":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _newArrowCheck;
function _newArrowCheck(innerThis, boundThis) {
    if (innerThis !== boundThis) throw new TypeError("Cannot instantiate an arrow function");
}

},{}],"7rKRl":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _nonIterableSpread;
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance");
}

},{}],"5KclU":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _objectSpread;
var _defineProperty = _interopRequireDefault(require("./_define_property"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _objectSpread(target) {
    var _arguments = arguments, _loop = function(i) {
        var source = _arguments[i] != null ? _arguments[i] : {
        };
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === 'function') ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
            return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
        ownKeys.forEach(function(key) {
            _defineProperty.default(target, key, source[key]);
        });
    };
    for(var i = 1; i < arguments.length; i++)_loop(i);
    return target;
}

},{"./_define_property":"7bvVj"}],"VefNW":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _objectWithoutProperties;
var _objectWithoutPropertiesLoose = _interopRequireDefault(require("./_object_without_properties_loose"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _objectWithoutProperties(source, excluded) {
    if (source == null) return {
    };
    var target = _objectWithoutPropertiesLoose.default(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}

},{"./_object_without_properties_loose":"6ji60"}],"6ji60":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _objectWithoutPropertiesLoose;
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}

},{}],"3VJbe":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _possibleConstructorReturn;
var _assertThisInitialized = _interopRequireDefault(require("./_assert_this_initialized"));
var _typeOf = _interopRequireDefault(require("./_type_of"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _possibleConstructorReturn(self, call) {
    if (call && (_typeOf.default(call) === "object" || typeof call === "function")) return call;
    return _assertThisInitialized.default(self);
}

},{"./_assert_this_initialized":"4P51R","./_type_of":"5iXKZ"}],"6ciYK":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _readOnlyError;
function _readOnlyError(name) {
    throw new Error("\"" + name + "\" is read-only");
}

},{}],"5xmGq":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _set;
var _defineProperty = _interopRequireDefault(require("./_define_property"));
var _superPropBase = _interopRequireDefault(require("./_super_prop_base"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function set(target, property, value, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.set) set = Reflect.set;
    else set = function set1(target1, property1, value1, receiver1) {
        var base = _superPropBase.default(target1, property1);
        var desc;
        if (base) {
            desc = Object.getOwnPropertyDescriptor(base, property1);
            if (desc.set) {
                desc.set.call(receiver1, value1);
                return true;
            } else if (!desc.writable) return false;
        }
        desc = Object.getOwnPropertyDescriptor(receiver1, property1);
        if (desc) {
            if (!desc.writable) return false;
            desc.value = value1;
            Object.defineProperty(receiver1, property1, desc);
        } else _defineProperty.default(receiver1, property1, value1);
        return true;
    };
    return set(target, property, value, receiver);
}
function _set(target, property, value, receiver, isStrict) {
    var s = set(target, property, value, receiver || target);
    if (!s && isStrict) throw new Error('failed to set property');
    return value;
}

},{"./_define_property":"7bvVj","./_super_prop_base":"2OBIv"}],"7Jehp":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _skipFirstGeneratorNext;
function _skipFirstGeneratorNext(fn) {
    return function() {
        var it = fn.apply(this, arguments);
        it.next();
        return it;
    };
}

},{}],"6TQbp":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _slicedToArray;
var _arrayWithHoles = _interopRequireDefault(require("./_array_with_holes"));
var _iterableToArray = _interopRequireDefault(require("./_iterable_to_array"));
var _nonIterableRest = _interopRequireDefault(require("./_non_iterable_rest"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _slicedToArray(arr, i) {
    return _arrayWithHoles.default(arr) || _iterableToArray.default(arr, i) || _nonIterableRest.default();
}

},{"./_array_with_holes":"4lzvs","./_iterable_to_array":"2nD92","./_non_iterable_rest":"68KXZ"}],"1S4Vh":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _slicedToArrayLoose;
var _arrayWithHoles = _interopRequireDefault(require("./_array_with_holes"));
var _iterableToArrayLimitLoose = _interopRequireDefault(require("./_iterable_to_array_limit_loose"));
var _nonIterableRest = _interopRequireDefault(require("./_non_iterable_rest"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _slicedToArrayLoose(arr, i) {
    return _arrayWithHoles.default(arr) || _iterableToArrayLimitLoose.default(arr, i) || _nonIterableRest.default();
}

},{"./_array_with_holes":"4lzvs","./_iterable_to_array_limit_loose":"1QlWC","./_non_iterable_rest":"68KXZ"}],"1ev2a":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _taggedTemplateLiteral;
function _taggedTemplateLiteral(strings, raw) {
    if (!raw) raw = strings.slice(0);
    return Object.freeze(Object.defineProperties(strings, {
        raw: {
            value: Object.freeze(raw)
        }
    }));
}

},{}],"6l5te":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _taggedTemplateLiteralLoose;
function _taggedTemplateLiteralLoose(strings, raw) {
    if (!raw) raw = strings.slice(0);
    strings.raw = raw;
    return strings;
}

},{}],"21CQb":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _throw;
function _throw(e) {
    throw e;
}

},{}],"1qepD":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _toConsumableArray;
var _arrayWithoutHoles = _interopRequireDefault(require("./_array_without_holes"));
var _iterableToArray = _interopRequireDefault(require("./_iterable_to_array"));
var _nonIterableSpread = _interopRequireDefault(require("./_non_iterable_spread"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _toConsumableArray(arr) {
    return _arrayWithoutHoles.default(arr) || _iterableToArray.default(arr) || _nonIterableSpread.default();
}

},{"./_array_without_holes":"P6sIl","./_iterable_to_array":"2nD92","./_non_iterable_spread":"7rKRl"}],"78hQl":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _wrapAsyncGenerator;
var _asyncGenerator = _interopRequireDefault(require("./_async_generator"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _wrapAsyncGenerator(fn) {
    return function() {
        return new _asyncGenerator.default(fn.apply(this, arguments));
    };
}

},{"./_async_generator":"4Y8xZ"}],"4OMci":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _wrapNativeSuper;
var _construct = _interopRequireDefault(require("./_construct"));
var _isNativeFunction = _interopRequireDefault(require("./_is_native_function"));
var _getPrototypeOf = _interopRequireDefault(require("./_get_prototype_of"));
var _setPrototypeOf = _interopRequireDefault(require("./_set_prototype_of"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;
    wrapNativeSuper = function wrapNativeSuper1(Class1) {
        var Wrapper = function Wrapper1() {
            return _construct.default(Class1, arguments, _getPrototypeOf.default(this).constructor);
        };
        if (Class1 === null || !_isNativeFunction.default(Class1)) return Class1;
        if (typeof Class1 !== "function") throw new TypeError("Super expression must either be null or a function");
        if (typeof _cache !== "undefined") {
            if (_cache.has(Class1)) return _cache.get(Class1);
            _cache.set(Class1, Wrapper);
        }
        Wrapper.prototype = Object.create(Class1.prototype, {
            constructor: {
                value: Wrapper,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        return _setPrototypeOf.default(Wrapper, Class1);
    };
    return wrapNativeSuper(Class);
}
function _wrapNativeSuper(Class) {
    return wrapNativeSuper(Class);
}

},{"./_construct":"4JSOl","./_is_native_function":"2Z32d","./_get_prototype_of":"6SgC2","./_set_prototype_of":"7H5pC"}],"2ZDSP":[function(require,module,exports) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ var runtime = function(exports) {
    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var undefined; // More compressible than void 0.
    var $Symbol = typeof Symbol === "function" ? Symbol : {
    };
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
    function define(obj, key, value) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
        return obj[key];
    }
    try {
        // IE 8 has a broken Object.defineProperty that only works on DOM objects.
        define({
        }, "");
    } catch (err) {
        define = function(obj, key, value) {
            return obj[key] = value;
        };
    }
    function wrap(innerFn, outerFn, self, tryLocsList) {
        // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
        var generator = Object.create(protoGenerator.prototype);
        var context = new Context(tryLocsList || []);
        // The ._invoke method unifies the implementations of the .next,
        // .throw, and .return methods.
        generator._invoke = makeInvokeMethod(innerFn, self, context);
        return generator;
    }
    exports.wrap = wrap;
    // Try/catch helper to minimize deoptimizations. Returns a completion
    // record like context.tryEntries[i].completion. This interface could
    // have been (and was previously) designed to take a closure to be
    // invoked without arguments, but in all the cases we care about we
    // already have an existing method we want to call, so there's no need
    // to create a new function object. We can even get away with assuming
    // the method takes exactly one argument, since that happens to be true
    // in every case, so we don't have to touch the arguments object. The
    // only additional allocation required is the completion record, which
    // has a stable shape and so hopefully should be cheap to allocate.
    function tryCatch(fn, obj, arg) {
        try {
            return {
                type: "normal",
                arg: fn.call(obj, arg)
            };
        } catch (err) {
            return {
                type: "throw",
                arg: err
            };
        }
    }
    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";
    // Returning this object from the innerFn has the same effect as
    // breaking out of the dispatch switch statement.
    var ContinueSentinel = {
    };
    // Dummy constructor functions that we use as the .constructor and
    // .constructor.prototype properties for functions that return Generator
    // objects. For full spec compliance, you may wish to configure your
    // minifier not to mangle the names of these two functions.
    function Generator() {
    }
    function GeneratorFunction() {
    }
    function GeneratorFunctionPrototype() {
    }
    // This is a polyfill for %IteratorPrototype% for environments that
    // don't natively support it.
    var IteratorPrototype = {
    };
    IteratorPrototype[iteratorSymbol] = function() {
        return this;
    };
    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
    GeneratorFunctionPrototype.constructor = GeneratorFunction;
    GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction");
    // Helper for defining the .next, .throw, and .return methods of the
    // Iterator interface in terms of a single ._invoke method.
    function defineIteratorMethods(prototype) {
        [
            "next",
            "throw",
            "return"
        ].forEach(function(method) {
            define(prototype, method, function(arg) {
                return this._invoke(method, arg);
            });
        });
    }
    exports.isGeneratorFunction = function(genFun) {
        var ctor = typeof genFun === "function" && genFun.constructor;
        return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
    };
    exports.mark = function(genFun) {
        if (Object.setPrototypeOf) Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
        else {
            genFun.__proto__ = GeneratorFunctionPrototype;
            define(genFun, toStringTagSymbol, "GeneratorFunction");
        }
        genFun.prototype = Object.create(Gp);
        return genFun;
    };
    // Within the body of any async function, `await x` is transformed to
    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
    // `hasOwn.call(value, "__await")` to determine if the yielded value is
    // meant to be awaited.
    exports.awrap = function(arg) {
        return {
            __await: arg
        };
    };
    function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
            var record = tryCatch(generator[method], generator, arg);
            if (record.type === "throw") reject(record.arg);
            else {
                var result = record.arg;
                var value = result.value;
                if (value && typeof value === "object" && hasOwn.call(value, "__await")) return PromiseImpl.resolve(value.__await).then(function(value1) {
                    invoke("next", value1, resolve, reject);
                }, function(err) {
                    invoke("throw", err, resolve, reject);
                });
                return PromiseImpl.resolve(value).then(function(unwrapped) {
                    // When a yielded Promise is resolved, its final value becomes
                    // the .value of the Promise<{value,done}> result for the
                    // current iteration.
                    result.value = unwrapped;
                    resolve(result);
                }, function(error) {
                    // If a rejected Promise was yielded, throw the rejection back
                    // into the async generator function so it can be handled there.
                    return invoke("throw", error, resolve, reject);
                });
            }
        }
        var previousPromise;
        function enqueue(method, arg) {
            function callInvokeWithMethodAndArg() {
                return new PromiseImpl(function(resolve, reject) {
                    invoke(method, arg, resolve, reject);
                });
            }
            return previousPromise = // If enqueue has been called before, then we want to wait until
            // all previous Promises have been resolved before calling invoke,
            // so that results are always delivered in the correct order. If
            // enqueue has not been called before, then it is important to
            // call invoke immediately, without waiting on a callback to fire,
            // so that the async generator function has the opportunity to do
            // any necessary setup in a predictable way. This predictability
            // is why the Promise constructor synchronously invokes its
            // executor callback, and why async functions synchronously
            // execute code before the first await. Since we implement simple
            // async functions in terms of async generators, it is especially
            // important to get this right, even though it requires care.
            previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
            // invocations of the iterator.
            callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        }
        // Define the unified helper method that is used to implement .next,
        // .throw, and .return (see defineIteratorMethods).
        this._invoke = enqueue;
    }
    defineIteratorMethods(AsyncIterator.prototype);
    AsyncIterator.prototype[asyncIteratorSymbol] = function() {
        return this;
    };
    exports.AsyncIterator = AsyncIterator;
    // Note that simple async functions are implemented on top of
    // AsyncIterator objects; they just return a Promise for the value of
    // the final result produced by the iterator.
    exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        if (PromiseImpl === void 0) PromiseImpl = Promise;
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function(result) {
            return result.done ? result.value : iter.next();
        });
    };
    function makeInvokeMethod(innerFn, self, context) {
        var state = GenStateSuspendedStart;
        return function invoke(method, arg) {
            if (state === GenStateExecuting) throw new Error("Generator is already running");
            if (state === GenStateCompleted) {
                if (method === "throw") throw arg;
                // Be forgiving, per 25.3.3.3.3 of the spec:
                // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
                return doneResult();
            }
            context.method = method;
            context.arg = arg;
            while(true){
                var delegate = context.delegate;
                if (delegate) {
                    var delegateResult = maybeInvokeDelegate(delegate, context);
                    if (delegateResult) {
                        if (delegateResult === ContinueSentinel) continue;
                        return delegateResult;
                    }
                }
                if (context.method === "next") // Setting context._sent for legacy support of Babel's
                // function.sent implementation.
                context.sent = context._sent = context.arg;
                else if (context.method === "throw") {
                    if (state === GenStateSuspendedStart) {
                        state = GenStateCompleted;
                        throw context.arg;
                    }
                    context.dispatchException(context.arg);
                } else if (context.method === "return") context.abrupt("return", context.arg);
                state = GenStateExecuting;
                var record = tryCatch(innerFn, self, context);
                if (record.type === "normal") {
                    // If an exception is thrown from innerFn, we leave state ===
                    // GenStateExecuting and loop back for another invocation.
                    state = context.done ? GenStateCompleted : GenStateSuspendedYield;
                    if (record.arg === ContinueSentinel) continue;
                    return {
                        value: record.arg,
                        done: context.done
                    };
                } else if (record.type === "throw") {
                    state = GenStateCompleted;
                    // Dispatch the exception by looping back around to the
                    // context.dispatchException(context.arg) call above.
                    context.method = "throw";
                    context.arg = record.arg;
                }
            }
        };
    }
    // Call delegate.iterator[context.method](context.arg) and handle the
    // result, either by returning a { value, done } result from the
    // delegate iterator, or by modifying context.method and context.arg,
    // setting context.delegate to null, and returning the ContinueSentinel.
    function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];
        if (method === undefined) {
            // A .throw or .return when the delegate iterator has no .throw
            // method always terminates the yield* loop.
            context.delegate = null;
            if (context.method === "throw") {
                // Note: ["return"] must be used for ES3 parsing compatibility.
                if (delegate.iterator["return"]) {
                    // If the delegate iterator has a return method, give it a
                    // chance to clean up.
                    context.method = "return";
                    context.arg = undefined;
                    maybeInvokeDelegate(delegate, context);
                    if (context.method === "throw") // If maybeInvokeDelegate(context) changed context.method from
                    // "return" to "throw", let that override the TypeError below.
                    return ContinueSentinel;
                }
                context.method = "throw";
                context.arg = new TypeError("The iterator does not provide a 'throw' method");
            }
            return ContinueSentinel;
        }
        var record = tryCatch(method, delegate.iterator, context.arg);
        if (record.type === "throw") {
            context.method = "throw";
            context.arg = record.arg;
            context.delegate = null;
            return ContinueSentinel;
        }
        var info = record.arg;
        if (!info) {
            context.method = "throw";
            context.arg = new TypeError("iterator result is not an object");
            context.delegate = null;
            return ContinueSentinel;
        }
        if (info.done) {
            // Assign the result of the finished delegate to the temporary
            // variable specified by delegate.resultName (see delegateYield).
            context[delegate.resultName] = info.value;
            // Resume execution at the desired location (see delegateYield).
            context.next = delegate.nextLoc;
            // If context.method was "throw" but the delegate handled the
            // exception, let the outer generator proceed normally. If
            // context.method was "next", forget context.arg since it has been
            // "consumed" by the delegate iterator. If context.method was
            // "return", allow the original .return call to continue in the
            // outer generator.
            if (context.method !== "return") {
                context.method = "next";
                context.arg = undefined;
            }
        } else // Re-yield the result returned by the delegate method.
        return info;
        // The delegate iterator is finished, so forget it and continue with
        // the outer generator.
        context.delegate = null;
        return ContinueSentinel;
    }
    // Define Generator.prototype.{next,throw,return} in terms of the
    // unified ._invoke helper method.
    defineIteratorMethods(Gp);
    define(Gp, toStringTagSymbol, "Generator");
    // A Generator should always return itself as the iterator object when the
    // @@iterator function is called on it. Some browsers' implementations of the
    // iterator prototype chain incorrectly implement this, causing the Generator
    // object to not be returned from this call. This ensures that doesn't happen.
    // See https://github.com/facebook/regenerator/issues/274 for more details.
    Gp[iteratorSymbol] = function() {
        return this;
    };
    Gp.toString = function() {
        return "[object Generator]";
    };
    function pushTryEntry(locs) {
        var entry = {
            tryLoc: locs[0]
        };
        if (1 in locs) entry.catchLoc = locs[1];
        if (2 in locs) {
            entry.finallyLoc = locs[2];
            entry.afterLoc = locs[3];
        }
        this.tryEntries.push(entry);
    }
    function resetTryEntry(entry) {
        var record = entry.completion || {
        };
        record.type = "normal";
        delete record.arg;
        entry.completion = record;
    }
    function Context(tryLocsList) {
        // The root entry object (effectively a try statement without a catch
        // or a finally block) gives us a place to store values thrown from
        // locations where there is no enclosing try statement.
        this.tryEntries = [
            {
                tryLoc: "root"
            }
        ];
        tryLocsList.forEach(pushTryEntry, this);
        this.reset(true);
    }
    exports.keys = function(object) {
        var keys = [];
        for(var key in object)keys.push(key);
        keys.reverse();
        // Rather than returning an object with a next method, we keep
        // things simple and return the next function itself.
        return function next() {
            while(keys.length){
                var key1 = keys.pop();
                if (key1 in object) {
                    next.value = key1;
                    next.done = false;
                    return next;
                }
            }
            // To avoid creating an additional object, we just hang the .value
            // and .done properties off the next function object itself. This
            // also ensures that the minifier will not anonymize the function.
            next.done = true;
            return next;
        };
    };
    function values(iterable) {
        if (iterable) {
            var iteratorMethod = iterable[iteratorSymbol];
            if (iteratorMethod) return iteratorMethod.call(iterable);
            if (typeof iterable.next === "function") return iterable;
            if (!isNaN(iterable.length)) {
                var i = -1, next = function next1() {
                    while((++i) < iterable.length)if (hasOwn.call(iterable, i)) {
                        next1.value = iterable[i];
                        next1.done = false;
                        return next1;
                    }
                    next1.value = undefined;
                    next1.done = true;
                    return next1;
                };
                return next.next = next;
            }
        }
        // Return an iterator with no values.
        return {
            next: doneResult
        };
    }
    exports.values = values;
    function doneResult() {
        return {
            value: undefined,
            done: true
        };
    }
    Context.prototype = {
        constructor: Context,
        reset: function(skipTempReset) {
            this.prev = 0;
            this.next = 0;
            // Resetting context._sent for legacy support of Babel's
            // function.sent implementation.
            this.sent = this._sent = undefined;
            this.done = false;
            this.delegate = null;
            this.method = "next";
            this.arg = undefined;
            this.tryEntries.forEach(resetTryEntry);
            if (!skipTempReset) {
                for(var name in this)// Not sure about the optimal order of these conditions:
                if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) this[name] = undefined;
            }
        },
        stop: function() {
            this.done = true;
            var rootEntry = this.tryEntries[0];
            var rootRecord = rootEntry.completion;
            if (rootRecord.type === "throw") throw rootRecord.arg;
            return this.rval;
        },
        dispatchException: function(exception) {
            if (this.done) throw exception;
            var context = this;
            function handle(loc, caught) {
                record.type = "throw";
                record.arg = exception;
                context.next = loc;
                if (caught) {
                    // If the dispatched exception was caught by a catch block,
                    // then let that catch block handle the exception normally.
                    context.method = "next";
                    context.arg = undefined;
                }
                return !!caught;
            }
            for(var i = this.tryEntries.length - 1; i >= 0; --i){
                var entry = this.tryEntries[i];
                var record = entry.completion;
                if (entry.tryLoc === "root") // Exception thrown outside of any try block that could handle
                // it, so set the completion value of the entire function to
                // throw the exception.
                return handle("end");
                if (entry.tryLoc <= this.prev) {
                    var hasCatch = hasOwn.call(entry, "catchLoc");
                    var hasFinally = hasOwn.call(entry, "finallyLoc");
                    if (hasCatch && hasFinally) {
                        if (this.prev < entry.catchLoc) return handle(entry.catchLoc, true);
                        else if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
                    } else if (hasCatch) {
                        if (this.prev < entry.catchLoc) return handle(entry.catchLoc, true);
                    } else if (hasFinally) {
                        if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
                    } else throw new Error("try statement without catch or finally");
                }
            }
        },
        abrupt: function(type, arg) {
            for(var i = this.tryEntries.length - 1; i >= 0; --i){
                var entry = this.tryEntries[i];
                if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
                    var finallyEntry = entry;
                    break;
                }
            }
            if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) // Ignore the finally entry if control is not jumping to a
            // location outside the try/catch block.
            finallyEntry = null;
            var record = finallyEntry ? finallyEntry.completion : {
            };
            record.type = type;
            record.arg = arg;
            if (finallyEntry) {
                this.method = "next";
                this.next = finallyEntry.finallyLoc;
                return ContinueSentinel;
            }
            return this.complete(record);
        },
        complete: function(record, afterLoc) {
            if (record.type === "throw") throw record.arg;
            if (record.type === "break" || record.type === "continue") this.next = record.arg;
            else if (record.type === "return") {
                this.rval = this.arg = record.arg;
                this.method = "return";
                this.next = "end";
            } else if (record.type === "normal" && afterLoc) this.next = afterLoc;
            return ContinueSentinel;
        },
        finish: function(finallyLoc) {
            for(var i = this.tryEntries.length - 1; i >= 0; --i){
                var entry = this.tryEntries[i];
                if (entry.finallyLoc === finallyLoc) {
                    this.complete(entry.completion, entry.afterLoc);
                    resetTryEntry(entry);
                    return ContinueSentinel;
                }
            }
        },
        "catch": function(tryLoc) {
            for(var i = this.tryEntries.length - 1; i >= 0; --i){
                var entry = this.tryEntries[i];
                if (entry.tryLoc === tryLoc) {
                    var record = entry.completion;
                    if (record.type === "throw") {
                        var thrown = record.arg;
                        resetTryEntry(entry);
                    }
                    return thrown;
                }
            }
            // The context.catch method must only be called with a location
            // argument that corresponds to a known catch block.
            throw new Error("illegal catch attempt");
        },
        delegateYield: function(iterable, resultName, nextLoc) {
            this.delegate = {
                iterator: values(iterable),
                resultName: resultName,
                nextLoc: nextLoc
            };
            if (this.method === "next") // Deliberately forget the last sent value so that we don't
            // accidentally pass it on to the delegate.
            this.arg = undefined;
            return ContinueSentinel;
        }
    };
    // Regardless of whether this script is executing as a CommonJS module
    // or not, return the runtime object so that we can declare the variable
    // regeneratorRuntime in the outer scope, which allows this module to be
    // injected easily by `bin/regenerator --include-runtime script.js`.
    return exports;
}(// If this script is executing as a CommonJS module, use module.exports
// as the regeneratorRuntime namespace. Otherwise create a new empty
// object. Either way, the resulting object will be used to initialize
// the regeneratorRuntime variable at the top of this file.
typeof module === "object" ? module.exports : {
});
try {
    regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
    // This module should not be running in strict mode, so the above
    // assignment should always work unless something is misconfigured. Just
    // in case runtime.js accidentally runs in strict mode, we can escape
    // strict mode using a global Function call. This could conceivably fail
    // if a Content Security Policy forbids using Function, but in that case
    // the proper solution is to fix the accidental strict mode problem. If
    // you've misconfigured your bundler to force strict mode and applied a
    // CSP to forbid Function, and you're not willing to fix either of those
    // problems, please detail your unique predicament in a GitHub issue.
    Function("r", "regeneratorRuntime = r")(runtime);
}

},{}],"6HrtQ":[function() {},{}],"1wIxb":[function(require,module,exports) {
var _helpers = require("@swc/helpers");
"use strict";
var regeneratorRuntime = require("regenerator-runtime");
var _marked = regeneratorRuntime.mark(_actionWebInvoke);
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
function _actionWebInvoke() {
    _actionWebInvoke = /*
 * <license header>
 */ /* global fetch */ /**
 *
 * Invokes a web action
 *
 * @param  {object} ims
 * @param  {string} actionUrl
 * @param {object} headers
 * @param  {object} params
 *
 * @returns {Promise<string|object>} the response
 *
 */ _helpers.asyncToGenerator(regeneratorRuntime.mark(function _callee(ims, actionUrl, param, param1) {
        var headers, params, actionHeaders, response, content;
        return regeneratorRuntime.wrap(function _callee$(_ctx) {
            while(1)switch(_ctx.prev = _ctx.next){
                case 0:
                    headers = param === void 0 ? {
                    } : param, params = param1 === void 0 ? {
                    } : param1;
                    _ctx.prev = 1;
                    // set the authorization header and org from the ims props object
                    if (ims.token && !headers.authorization) headers.authorization = "Bearer ".concat(ims.token);
                    if (ims.org && !headers['x-gw-ims-org-id']) headers['x-gw-ims-org-id'] = ims.org;
                    actionHeaders = _helpers.objectSpread({
                        'Content-Type': 'application/json'
                    }, headers);
                    if (window.location.hostname === 'localhost') actionHeaders['x-ow-extra-logging'] = 'on';
                    _ctx.next = 8;
                    return fetch(actionUrl, {
                        method: 'post',
                        headers: actionHeaders,
                        body: JSON.stringify(params)
                    });
                case 8:
                    response = _ctx.sent;
                    _ctx.next = 11;
                    return response.text();
                case 11:
                    content = _ctx.sent;
                    if (response.ok) {
                        _ctx.next = 14;
                        break;
                    }
                    throw new Error("failed request to '".concat(actionUrl, "' with status: ").concat(response.status, " and message: ").concat(content));
                case 14:
                    return _ctx.abrupt("return", JSON.parse(content));
                case 17:
                    _ctx.prev = 17;
                    _ctx.t0 = _ctx["catch"](1);
                    return _ctx.abrupt("return", {
                        error: _ctx.t0
                    });
                case 20:
                case "end":
                    return _ctx.stop();
            }
        }, _callee, null, [
            [
                1,
                17
            ]
        ]);
    }));
    return _actionWebInvoke.apply(this, arguments);
}
function actionWebInvoke(ims, actionUrl) {
    return _actionWebInvoke.apply(this, arguments);
}
var _default = actionWebInvoke;
exports.default = _default;

},{"@swc/helpers":"5eKpN","regenerator-runtime":"2ZDSP"}],"2sGbH":[function(require,module,exports) {
"use strict";
module.exports = JSON.parse("{\"publish-events\":\"https://301276-trainingproject-stage.adobeio-static.net/api/v1/web/trainingproject-0.0.1/publish-events\",\"stock-search\":\"https://301276-trainingproject-stage.adobeio-static.net/api/v1/web/trainingproject-0.0.1/stock-search\",\"welcome-state\":\"https://301276-trainingproject-stage.adobeio-static.net/api/v1/web/trainingproject-0.0.1/welcome-state\",\"brief-save\":\"https://301276-trainingproject-stage.adobeio-static.net/api/v1/web/trainingproject-0.0.1/brief-save\",\"brief-list\":\"https://301276-trainingproject-stage.adobeio-static.net/api/v1/web/trainingproject-0.0.1/brief-list\",\"product-event\":\"https://301276-trainingproject-stage.adobeio-static.net/api/v1/web/trainingproject-0.0.1/product-event\",\"brief-delete\":\"https://301276-trainingproject-stage.adobeio-static.net/api/v1/web/trainingproject-0.0.1/brief-delete\"}");

},{}],"13SBc":[function(require,module,exports) {
var _helpers = require("@swc/helpers");
"use strict";
var regeneratorRuntime = require("regenerator-runtime");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CreateView = void 0;
var _react = _interopRequireWildcard(require("react"));
require("@spectrum-css/typography");
var _reactSpectrum = require("@adobe/react-spectrum");
var _Masonry = require("./Masonry");
var _useDebounce = require("use-debounce");
var _utils = _interopRequireDefault(require("../utils"));
var _config = _interopRequireDefault(require("../config"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop1) {
        return nodeInterop1 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        default: obj
    };
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj.default = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
var selectedAssets = new Set();
var CreateView = (function(param) {
    var ims = param.ims;
    // Brief fields
    var ref = _helpers.slicedToArray(_react.useState(''), 2), briefDate = ref[0], setBriefDate = ref[1];
    var ref1 = _helpers.slicedToArray(_react.useState(''), 2), copyDate = ref1[0], setCopyDate = ref1[1];
    var ref2 = _helpers.slicedToArray(_react.useState(''), 2), releasePrintDate = ref2[0], setReleasePrintDate = ref2[1];
    var ref3 = _helpers.slicedToArray(_react.useState(''), 2), requestType = ref3[0], setRequestType = ref3[1];
    var ref4 = _helpers.slicedToArray(_react.useState(''), 2), campaign = ref4[0], setCampaign = ref4[1];
    var ref5 = _helpers.slicedToArray(_react.useState(''), 2), deliverables = ref5[0], setDeliverables = ref5[1];
    var ref6 = _helpers.slicedToArray(_react.useState(''), 2), description = ref6[0], setDescription = ref6[1];
    var ref7 = _helpers.slicedToArray(_react.useState(''), 2), searchTerm = ref7[0], setSearchTerm = ref7[1]; // Asset handling
    var ref8 = _helpers.slicedToArray(_react.useState(false), 2), isLoadingAssets = ref8[0], setIsLoadingAssets = ref8[1];
    var ref9 = _helpers.slicedToArray(_react.useState([]), 2), suggestedAssets = ref9[0], setSuggestedAssets = ref9[1]; // Action state
    var ref10 = _helpers.slicedToArray(_react.useState(-1), 2), briefId = ref10[0], setBriefId = ref10[1];
    var ref11 = _helpers.slicedToArray(_react.useState(false), 2), isSubmitting = ref11[0], setIsSubmitting = ref11[1];
    var ref12 = _helpers.slicedToArray(_react.useState(false), 2), isDialogOpen = ref12[0], setDialogIsOpen = ref12[1]; // Stock Search
    var ref13 = _helpers.slicedToArray(_useDebounce.useDebounce(searchTerm, 500), 1), keyword = ref13[0];
    var reset = function() {
        setBriefDate('');
        setCopyDate('');
        setReleasePrintDate('');
        setRequestType('');
        setCampaign('');
        setDeliverables('');
        setDescription('');
        setSearchTerm('');
    };
    var isValidForm = function() {
        return briefDate && copyDate && releasePrintDate && requestType && campaign && deliverables && description;
    };
    _react.useEffect(function() {
        if (keyword) _helpers.asyncToGenerator(regeneratorRuntime.mark(function _callee() {
            var res;
            return regeneratorRuntime.wrap(function _callee$(_ctx) {
                while(1)switch(_ctx.prev = _ctx.next){
                    case 0:
                        setIsLoadingAssets(true);
                        selectedAssets.clear();
                        _ctx.next = 4;
                        return _utils.default(ims, _config.default['stock-search'], {
                        }, {
                            keyword: keyword
                        });
                    case 4:
                        res = _ctx.sent;
                        if (res.error) alert(res.error.message);
                        else setSuggestedAssets(res.files);
                        console.log(res);
                        setIsLoadingAssets(false);
                    case 8:
                    case "end":
                        return _ctx.stop();
                }
            }, _callee);
        }))();
        else setSuggestedAssets([]);
    }, [
        keyword
    ]);
    return(/*#__PURE__*/ React.createElement(_reactSpectrum.View, {
        elementType: "main",
        minHeight: "100vh",
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\CreateView.js",
            lineNumber: 87
        },
        __self: this
    }, /*#__PURE__*/ React.createElement(_reactSpectrum.Flex, {
        alignItems: "center",
        justifyContent: "center",
        direction: "column",
        marginY: "size-400",
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\CreateView.js",
            lineNumber: 88
        },
        __self: this
    }, /*#__PURE__*/ React.createElement("h2", {
        className: "spectrum-Heading spectrum-Heading--sizeL spectrum-Heading--serif",
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\CreateView.js",
            lineNumber: 89
        },
        __self: this
    }, "New brief"), /*#__PURE__*/ React.createElement("p", {
        className: "spectrum-Body spectrum-Body--sizeL",
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\CreateView.js",
            lineNumber: 90
        },
        __self: this
    }, "Create a new brief by filling out the form then press submit"), /*#__PURE__*/ React.createElement(_reactSpectrum.Form, {
        isRequired: true,
        isDisabled: isSubmitting,
        width: "size-6000",
        marginY: "size-200",
        onSubmit: _helpers.asyncToGenerator(regeneratorRuntime.mark(function _callee(e) {
            var id, res;
            return regeneratorRuntime.wrap(function _callee$(_ctx) {
                while(1)switch(_ctx.prev = _ctx.next){
                    case 0:
                        e.preventDefault();
                        setIsSubmitting(true);
                        _ctx.next = 4;
                        return _utils.default(ims, _config.default['brief-save'], {
                        }, {
                            briefDate: briefDate,
                            copyDate: copyDate,
                            releasePrintDate: releasePrintDate,
                            requestType: requestType,
                            campaign: campaign,
                            deliverables: deliverables,
                            description: description,
                            // Filter out selected assets
                            selectedAssets: suggestedAssets.filter(function(param1) {
                                id = param1.id;
                                return selectedAssets.has(id);
                            })
                        });
                    case 4:
                        res = _ctx.sent;
                        if (res.error) alert(res.error.message);
                        else {
                            setBriefId(res.id);
                            setDialogIsOpen(true);
                            reset();
                        }
                        console.log(res);
                        setIsSubmitting(false);
                    case 8:
                    case "end":
                        return _ctx.stop();
                }
            }, _callee);
        })),
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\CreateView.js",
            lineNumber: 94
        },
        __self: this
    }, /*#__PURE__*/ React.createElement(_reactSpectrum.TextField, {
        value: briefDate,
        onChange: setBriefDate,
        label: "Brief date",
        placeholder: "Brief date",
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\CreateView.js",
            lineNumber: 122
        },
        __self: this
    }), /*#__PURE__*/ React.createElement(_reactSpectrum.TextField, {
        value: copyDate,
        onChange: setCopyDate,
        label: "Copy date",
        placeholder: "Copy date",
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\CreateView.js",
            lineNumber: 123
        },
        __self: this
    }), /*#__PURE__*/ React.createElement(_reactSpectrum.TextField, {
        value: releasePrintDate,
        onChange: setReleasePrintDate,
        label: "Release print date",
        placeholder: "Release print date",
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\CreateView.js",
            lineNumber: 124
        },
        __self: this
    }), /*#__PURE__*/ React.createElement(_reactSpectrum.TextField, {
        value: requestType,
        onChange: setRequestType,
        label: "Request type",
        placeholder: "Request type",
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\CreateView.js",
            lineNumber: 125
        },
        __self: this
    }), /*#__PURE__*/ React.createElement(_reactSpectrum.TextField, {
        value: campaign,
        onChange: setCampaign,
        label: "Campaign",
        placeholder: "Campaign",
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\CreateView.js",
            lineNumber: 126
        },
        __self: this
    }), /*#__PURE__*/ React.createElement(_reactSpectrum.TextField, {
        value: deliverables,
        onChange: setDeliverables,
        label: "Deliverables",
        placeholder: "Deliverables",
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\CreateView.js",
            lineNumber: 127
        },
        __self: this
    }), /*#__PURE__*/ React.createElement(_reactSpectrum.TextArea, {
        value: description,
        onChange: setDescription,
        label: "Description",
        placeholder: "Description",
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\CreateView.js",
            lineNumber: 128
        },
        __self: this
    }), /*#__PURE__*/ React.createElement(_reactSpectrum.TextField, {
        isRequired: false,
        value: searchTerm,
        onChange: setSearchTerm,
        label: "Search Assets",
        placeholder: "Search Assets",
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\CreateView.js",
            lineNumber: 129
        },
        __self: this
    }), suggestedAssets.length > 0 ? /*#__PURE__*/ React.createElement(_Masonry.Masonry, {
        breakpointCols: 2,
        style: {
            opacity: isLoadingAssets ? 0.2 : 1
        },
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\CreateView.js",
            lineNumber: 131
        },
        __self: this
    }, suggestedAssets.slice(0, 10).map((function(file, index) {
        /*#__PURE__*/ return React.createElement(_reactSpectrum.Well, {
            key: index,
            __source: {
                fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\CreateView.js",
                lineNumber: 134
            },
            __self: this
        }, /*#__PURE__*/ React.createElement(_reactSpectrum.Flex, {
            direction: "column",
            gap: "size-100",
            __source: {
                fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\CreateView.js",
                lineNumber: 135
            },
            __self: this
        }, /*#__PURE__*/ React.createElement("img", {
            alt: file.title,
            src: file.thumbnail_url,
            __source: {
                fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\CreateView.js",
                lineNumber: 136
            },
            __self: this
        }), /*#__PURE__*/ React.createElement("p", {
            className: "spectrum-Body spectrum-Body--sizeS",
            __source: {
                fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\CreateView.js",
                lineNumber: 137
            },
            __self: this
        }, file.title), /*#__PURE__*/ React.createElement(_reactSpectrum.Checkbox, {
            isRequired: false,
            isDisabled: isSubmitting,
            isEmphasized: true,
            onChange: function() {
                // Toggle selected asset
                selectedAssets[selectedAssets.has(file.id) ? 'delete' : 'add'](file.id);
            },
            __source: {
                fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\CreateView.js",
                lineNumber: 138
            },
            __self: this
        }, "Select")));
    }).bind(this))) : /*#__PURE__*/ React.createElement("p", {
        className: "spectrum-Body spectrum-Body--sizeS",
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\CreateView.js",
            lineNumber: 146
        },
        __self: this
    }, /*#__PURE__*/ React.createElement("em", {
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\CreateView.js",
            lineNumber: 147
        },
        __self: this
    }, isLoadingAssets ? /*#__PURE__*/ React.createElement(_reactSpectrum.Flex, {
        alignItems: "center",
        gap: "size-100",
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\CreateView.js",
            lineNumber: 148
        },
        __self: this
    }, /*#__PURE__*/ React.createElement(_reactSpectrum.ProgressCircle, {
        size: "S",
        "aria-label": "Submitting\u2026",
        isIndeterminate: true,
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\CreateView.js",
            lineNumber: 149
        },
        __self: this
    }), /*#__PURE__*/ React.createElement(_reactSpectrum.View, {
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\CreateView.js",
            lineNumber: 150
        },
        __self: this
    }, "Loading suggested assets\u2026")) : 'Please enter terms to search for assets')), /*#__PURE__*/ React.createElement(_reactSpectrum.Flex, {
        width: "100%",
        justifyContent: "end",
        alignItems: "center",
        marginTop: "size-400",
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\CreateView.js",
            lineNumber: 155
        },
        __self: this
    }, isSubmitting && /*#__PURE__*/ React.createElement(_reactSpectrum.ProgressCircle, {
        size: "S",
        "aria-label": "Submitting\u2026",
        isIndeterminate: true,
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\CreateView.js",
            lineNumber: 156
        },
        __self: this
    }), /*#__PURE__*/ React.createElement(_reactSpectrum.ButtonGroup, {
        marginStart: "size-200",
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\CreateView.js",
            lineNumber: 157
        },
        __self: this
    }, /*#__PURE__*/ React.createElement(_reactSpectrum.Button, {
        type: "reset",
        onPress: reset,
        variant: "secondary",
        isDisabled: isSubmitting,
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\CreateView.js",
            lineNumber: 158
        },
        __self: this
    }, "Reset"), /*#__PURE__*/ React.createElement(_reactSpectrum.Button, {
        type: "submit",
        variant: "cta",
        isDisabled: isSubmitting || !isValidForm(),
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\CreateView.js",
            lineNumber: 161
        },
        __self: this
    }, "Submit"))))), /*#__PURE__*/ React.createElement(_reactSpectrum.DialogContainer, {
        onDismiss: function() {
            return setDialogIsOpen(false);
        },
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\CreateView.js",
            lineNumber: 169
        },
        __self: this
    }, isDialogOpen && /*#__PURE__*/ React.createElement(_reactSpectrum.AlertDialog, {
        title: "New brief created",
        variant: "information",
        primaryActionLabel: "Close",
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\CreateView.js",
            lineNumber: 170
        },
        __self: this
    }, "A new brief was created successfully with id ", /*#__PURE__*/ React.createElement("strong", {
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\CreateView.js",
            lineNumber: 171
        },
        __self: this
    }, briefId)))));
}).bind(undefined);
exports.CreateView = CreateView;

},{"@swc/helpers":"5eKpN","regenerator-runtime":"2ZDSP","react":"a6qBW","@spectrum-css/typography":"6HrtQ","@adobe/react-spectrum":"3fLzW","./Masonry":"2UCN0","use-debounce":"3dmla","../utils":"1wIxb","../config":"2sGbH"}],"6HrtQ":[function() {},{}],"2UCN0":[function(require,module,exports) {
var _helpers = require("@swc/helpers");
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Masonry = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactMasonryCss = _interopRequireDefault(require("react-masonry-css"));
require("./Masonry.css");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * 3rd party lib example
 * */ var Masonry = (function(_param) {
    var breakpointCols = _param.breakpointCols, children = _param.children, props = _helpers.objectWithoutProperties(_param, ["breakpointCols", "children"]);
    return(/*#__PURE__*/ React.createElement(_reactMasonryCss.default, _helpers.objectSpread({
    }, props, {
        breakpointCols: breakpointCols,
        className: "masonry",
        columnClassName: "masonry-column",
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\Masonry.js",
            lineNumber: 23
        },
        __self: this
    }), children.map((function(child, index) {
        /*#__PURE__*/ return React.createElement("div", {
            key: index,
            className: "masonry-item",
            __source: {
                fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\Masonry.js",
                lineNumber: 24
            },
            __self: this
        }, child);
    }).bind(this))));
}).bind(undefined);
exports.Masonry = Masonry;

},{"@swc/helpers":"5eKpN","react":"a6qBW","react-masonry-css":"3CJ0f","./Masonry.css":"lsIHD"}],"3CJ0f":[function(require,module,exports) {
'use strict';
var React = require('react');
function _interopDefaultLegacy(e) {
    return e && typeof e === 'object' && 'default' in e ? e : {
        'default': e
    };
}
var React__default = /*#__PURE__*/ _interopDefaultLegacy(React);
function _objectWithoutProperties(source, excluded) {
    if (source == null) return {
    };
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {
        };
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
const defaultProps = {
    breakpointCols: undefined,
    // optional, number or object { default: number, [key: number]: number }
    className: undefined,
    // required, string
    columnClassName: undefined,
    // optional, string
    // Any React children. Typically an array of JSX items
    children: undefined,
    // Custom attributes, however it is advised against
    // using these to prevent unintended issues and future conflicts
    // ...any other attribute, will be added to the container
    columnAttrs: undefined,
    // object, added to the columns
    // Deprecated props
    // The column property is deprecated.
    // It is an alias of the `columnAttrs` property
    column: undefined
};
const DEFAULT_COLUMNS = 2;
class Masonry extends React__default['default'].Component {
    constructor(props){
        super(props); // Correct scope for when methods are accessed externally
        this.reCalculateColumnCount = this.reCalculateColumnCount.bind(this);
        this.reCalculateColumnCountDebounce = this.reCalculateColumnCountDebounce.bind(this); // default state
        let columnCount;
        if (this.props.breakpointCols && this.props.breakpointCols.default) columnCount = this.props.breakpointCols.default;
        else columnCount = parseInt(this.props.breakpointCols) || DEFAULT_COLUMNS;
        this.state = {
            columnCount
        };
    }
    componentDidMount() {
        this.reCalculateColumnCount(); // window may not be available in some environments
        if (window) window.addEventListener('resize', this.reCalculateColumnCountDebounce);
    }
    componentDidUpdate() {
        this.reCalculateColumnCount();
    }
    componentWillUnmount() {
        if (window) window.removeEventListener('resize', this.reCalculateColumnCountDebounce);
    }
    reCalculateColumnCountDebounce() {
        if (!window || !window.requestAnimationFrame) {
            // IE10+
            this.reCalculateColumnCount();
            return;
        }
        if (window.cancelAnimationFrame) // IE10+
        window.cancelAnimationFrame(this._lastRecalculateAnimationFrame);
        this._lastRecalculateAnimationFrame = window.requestAnimationFrame(()=>{
            this.reCalculateColumnCount();
        });
    }
    reCalculateColumnCount() {
        const windowWidth = window && window.innerWidth || Infinity;
        let breakpointColsObject = this.props.breakpointCols; // Allow passing a single number to `breakpointCols` instead of an object
        if (typeof breakpointColsObject !== 'object') breakpointColsObject = {
            default: parseInt(breakpointColsObject) || DEFAULT_COLUMNS
        };
        let matchedBreakpoint = Infinity;
        let columns = breakpointColsObject.default || DEFAULT_COLUMNS;
        for(let breakpoint in breakpointColsObject){
            const optBreakpoint = parseInt(breakpoint);
            const isCurrentBreakpoint = optBreakpoint > 0 && windowWidth <= optBreakpoint;
            if (isCurrentBreakpoint && optBreakpoint < matchedBreakpoint) {
                matchedBreakpoint = optBreakpoint;
                columns = breakpointColsObject[breakpoint];
            }
        }
        columns = Math.max(1, parseInt(columns) || 1);
        if (this.state.columnCount !== columns) this.setState({
            columnCount: columns
        });
    }
    itemsInColumns() {
        const currentColumnCount = this.state.columnCount;
        const itemsInColumns = new Array(currentColumnCount); // Force children to be handled as an array
        const items = React__default['default'].Children.toArray(this.props.children);
        for(let i = 0; i < items.length; i++){
            const columnIndex = i % currentColumnCount;
            if (!itemsInColumns[columnIndex]) itemsInColumns[columnIndex] = [];
            itemsInColumns[columnIndex].push(items[i]);
        }
        return itemsInColumns;
    }
    renderColumns() {
        const { column , columnAttrs ={
        } , columnClassName  } = this.props;
        const childrenInColumns = this.itemsInColumns();
        const columnWidth = `${100 / childrenInColumns.length}%`;
        let className = columnClassName;
        if (className && typeof className !== 'string') {
            this.logDeprecated('The property "columnClassName" requires a string'); // This is a deprecated default and will be removed soon.
            if (typeof className === 'undefined') className = 'my-masonry-grid_column';
        }
        const columnAttributes = _objectSpread(_objectSpread(_objectSpread({
        }, column), columnAttrs), {
        }, {
            style: _objectSpread(_objectSpread({
            }, columnAttrs.style), {
            }, {
                width: columnWidth
            }),
            className
        });
        return childrenInColumns.map((items, i)=>{
            return(/*#__PURE__*/ React__default['default'].createElement("div", _extends({
            }, columnAttributes, {
                key: i
            }), items));
        });
    }
    logDeprecated(message) {
        console.error('[Masonry]', message);
    }
    render() {
        const _this$props = this.props, { // ignored
        children , breakpointCols , columnClassName , columnAttrs , column , // used
        className  } = _this$props, rest = _objectWithoutProperties(_this$props, [
            "children",
            "breakpointCols",
            "columnClassName",
            "columnAttrs",
            "column",
            "className"
        ]);
        let classNameOutput = className;
        if (typeof className !== 'string') {
            this.logDeprecated('The property "className" requires a string'); // This is a deprecated default and will be removed soon.
            if (typeof className === 'undefined') classNameOutput = 'my-masonry-grid';
        }
        return(/*#__PURE__*/ React__default['default'].createElement("div", _extends({
        }, rest, {
            className: classNameOutput
        }), this.renderColumns()));
    }
}
Masonry.defaultProps = defaultProps;
module.exports = Masonry;

},{"react":"a6qBW"}],"lsIHD":[function() {},{}],"3dmla":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var useDebounce_1 = require("./useDebounce");
exports.useDebounce = useDebounce_1.default;
var useDebouncedCallback_1 = require("./useDebouncedCallback");
exports.useDebouncedCallback = useDebouncedCallback_1.default;
var useThrottledCallback_1 = require("./useThrottledCallback");
exports.useThrottledCallback = useThrottledCallback_1.default;

},{"./useDebounce":"6ZYc7","./useDebouncedCallback":"7lQRp","./useThrottledCallback":"13pBw"}],"6ZYc7":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var react_1 = require("react");
var useDebouncedCallback_1 = require("./useDebouncedCallback");
function valueEquality(left, right) {
    return left === right;
}
function adjustFunctionValueOfSetState(value) {
    return typeof value === 'function' ? function() {
        return value;
    } : value;
}
function useStateIgnoreCallback(initialState) {
    var _a = react_1.useState(adjustFunctionValueOfSetState(initialState)), state = _a[0], setState = _a[1];
    var setStateIgnoreCallback = react_1.useCallback(function(value) {
        return setState(adjustFunctionValueOfSetState(value));
    }, []);
    return [
        state,
        setStateIgnoreCallback
    ];
}
function useDebounce(value, delay, options) {
    var eq = options && options.equalityFn || valueEquality;
    var _a = useStateIgnoreCallback(value), state = _a[0], dispatch = _a[1];
    var debounced = useDebouncedCallback_1.default(react_1.useCallback(function(value1) {
        return dispatch(value1);
    }, [
        dispatch
    ]), delay, options);
    var previousValue = react_1.useRef(value);
    react_1.useEffect(function() {
        // We need to use this condition otherwise we will run debounce timer for the first render (including maxWait option)
        if (!eq(previousValue.current, value)) {
            debounced(value);
            previousValue.current = value;
        }
    }, [
        value,
        debounced,
        eq
    ]);
    return [
        state,
        {
            cancel: debounced.cancel,
            isPending: debounced.isPending,
            flush: debounced.flush
        }
    ];
}
exports.default = useDebounce;

},{"react":"a6qBW","./useDebouncedCallback":"7lQRp"}],"7lQRp":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var react_1 = require("react");
/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked, or until the next browser frame is drawn. The debounced function
 * comes with a `cancel` method to cancel delayed `func` invocations and a
 * `flush` method to immediately invoke them. Provide `options` to indicate
 * whether `func` should be invoked on the leading and/or trailing edge of the
 * `wait` timeout. The `func` is invoked with the last arguments provided to the
 * debounced function. Subsequent calls to the debounced function return the
 * result of the last `func` invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * If `wait` is omitted in an environment with `requestAnimationFrame`, `func`
 * invocation will be deferred until the next frame is drawn (typically about
 * 16ms).
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `debounce` and `throttle`.
 *
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0]
 *  The number of milliseconds to delay; if omitted, `requestAnimationFrame` is
 *  used (if available, otherwise it will be setTimeout(...,0)).
 * @param {Object} [options={}] The options object.
 *  Specify invoking on the leading edge of the timeout.
 * @param {boolean} [options.leading=false]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {number} [options.maxWait]
 *  Specify invoking on the trailing edge of the timeout.
 * @param {boolean} [options.trailing=true]
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * const resizeHandler = useDebouncedCallback(calculateLayout, 150);
 * window.addEventListener('resize', resizeHandler)
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * const clickHandler = useDebouncedCallback(sendMail, 300, {
 *   leading: true,
 *   trailing: false,
 * })
 * <button onClick={clickHandler}>click me</button>
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * const debounced = useDebouncedCallback(batchLog, 250, { 'maxWait': 1000 })
 * const source = new EventSource('/stream')
 * source.addEventListener('message', debounced)
 *
 * // Cancel the trailing debounced invocation.
 * window.addEventListener('popstate', debounced.cancel)
 *
 * // Check for pending invocations.
 * const status = debounced.pending() ? "Pending..." : "Ready"
 */ function useDebouncedCallback(func, wait, options) {
    var _this = this;
    var lastCallTime = react_1.useRef(null);
    var lastInvokeTime = react_1.useRef(0);
    var timerId = react_1.useRef(null);
    var lastArgs = react_1.useRef([]);
    var lastThis = react_1.useRef();
    var result = react_1.useRef();
    var funcRef = react_1.useRef(func);
    var mounted = react_1.useRef(true);
    funcRef.current = func;
    // Bypass `requestAnimationFrame` by explicitly setting `wait=0`.
    var useRAF = !wait && wait !== 0 && typeof window !== 'undefined';
    if (typeof func !== 'function') throw new TypeError('Expected a function');
    wait = +wait || 0;
    options = options || {
    };
    var leading = !!options.leading;
    var trailing = 'trailing' in options ? !!options.trailing : true; // `true` by default
    var maxing = 'maxWait' in options;
    var maxWait = maxing ? Math.max(+options.maxWait || 0, wait) : null;
    react_1.useEffect(function() {
        mounted.current = true;
        return function() {
            mounted.current = false;
        };
    }, []);
    // You may have a question, why we have so many code under the useMemo definition.
    //
    // This was made as we want to escape from useCallback hell and
    // not to initialize a number of functions each time useDebouncedCallback is called.
    //
    // It means that we have less garbage for our GC calls which improves performance.
    // Also, it makes this library smaller.
    //
    // And the last reason, that the code without lots of useCallback with deps is easier to read.
    // You have only one place for that.
    var debounced = react_1.useMemo(function() {
        var invokeFunc = function(time) {
            var args = lastArgs.current;
            var thisArg = lastThis.current;
            lastArgs.current = lastThis.current = null;
            lastInvokeTime.current = time;
            return result.current = funcRef.current.apply(thisArg, args);
        };
        var startTimer = function(pendingFunc, wait1) {
            if (useRAF) cancelAnimationFrame(timerId.current);
            timerId.current = useRAF ? requestAnimationFrame(pendingFunc) : setTimeout(pendingFunc, wait1);
        };
        var shouldInvoke = function(time) {
            if (!mounted.current) return false;
            var timeSinceLastCall = time - lastCallTime.current;
            var timeSinceLastInvoke = time - lastInvokeTime.current;
            // Either this is the first call, activity has stopped and we're at the
            // trailing edge, the system time has gone backwards and we're treating
            // it as the trailing edge, or we've hit the `maxWait` limit.
            return !lastCallTime.current || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
        };
        var trailingEdge = function(time) {
            timerId.current = null;
            // Only invoke if we have `lastArgs` which means `func` has been
            // debounced at least once.
            if (trailing && lastArgs.current) return invokeFunc(time);
            lastArgs.current = lastThis.current = null;
            return result.current;
        };
        var timerExpired = function() {
            var time = Date.now();
            if (shouldInvoke(time)) return trailingEdge(time);
            // https://github.com/xnimorz/use-debounce/issues/97
            if (!mounted.current) return;
            // Remaining wait calculation
            var timeSinceLastCall = time - lastCallTime.current;
            var timeSinceLastInvoke = time - lastInvokeTime.current;
            var timeWaiting = wait - timeSinceLastCall;
            var remainingWait = maxing ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
            // Restart the timer
            startTimer(timerExpired, remainingWait);
        };
        var func1 = function() {
            var args = [];
            for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
            var time = Date.now();
            var isInvoking = shouldInvoke(time);
            lastArgs.current = args;
            lastThis.current = _this;
            lastCallTime.current = time;
            if (isInvoking) {
                if (!timerId.current && mounted.current) {
                    // Reset any `maxWait` timer.
                    lastInvokeTime.current = lastCallTime.current;
                    // Start the timer for the trailing edge.
                    startTimer(timerExpired, wait);
                    // Invoke the leading edge.
                    return leading ? invokeFunc(lastCallTime.current) : result.current;
                }
                if (maxing) {
                    // Handle invocations in a tight loop.
                    startTimer(timerExpired, wait);
                    return invokeFunc(lastCallTime.current);
                }
            }
            if (!timerId.current) startTimer(timerExpired, wait);
            return result.current;
        };
        func1.cancel = function() {
            if (timerId.current) useRAF ? cancelAnimationFrame(timerId.current) : clearTimeout(timerId.current);
            lastInvokeTime.current = 0;
            lastArgs.current = lastCallTime.current = lastThis.current = timerId.current = null;
        };
        func1.isPending = function() {
            return !!timerId.current;
        };
        func1.flush = function() {
            return !timerId.current ? result.current : trailingEdge(Date.now());
        };
        return func1;
    }, [
        leading,
        maxing,
        wait,
        maxWait,
        trailing,
        useRAF
    ]);
    return debounced;
}
exports.default = useDebouncedCallback;

},{"react":"a6qBW"}],"13pBw":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var useDebouncedCallback_1 = require("./useDebouncedCallback");
/**
 * Creates a throttled function that only invokes `func` at most once per
 * every `wait` milliseconds (or once per browser frame). The throttled function
 * comes with a `cancel` method to cancel delayed `func` invocations and a
 * `flush` method to immediately invoke them. Provide `options` to indicate
 * whether `func` should be invoked on the leading and/or trailing edge of the
 * `wait` timeout. The `func` is invoked with the last arguments provided to the
 * throttled function. Subsequent calls to the throttled function return the
 * result of the last `func` invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the throttled function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * If `wait` is omitted in an environment with `requestAnimationFrame`, `func`
 * invocation will be deferred until the next frame is drawn (typically about
 * 16ms).
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `throttle` and `debounce`.
 *
 * @category Function
 * @param {Function} func The function to throttle.
 * @param {number} [wait=0]
 *  The number of milliseconds to throttle invocations to; if omitted,
 *  `requestAnimationFrame` is used (if available, otherwise it will be setTimeout(...,0)).
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=true]
 *  Specify invoking on the leading edge of the timeout.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new throttled function.
 * @example
 *
 * // Avoid excessively updating the position while scrolling.
 * const scrollHandler = useThrottledCallback(updatePosition, 100)
 * window.addEventListener('scroll', scrollHandler)
 *
 * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
 * const { callback } = useThrottledCallback(renewToken, 300000, { 'trailing': false })
 * <button onClick={callback}>click</button>
 *
 * // Cancel the trailing throttled invocation.
 * window.addEventListener('popstate', throttled.cancel);
 */ function useThrottledCallback(func, wait, _a) {
    var _b = _a === void 0 ? {
    } : _a, _c = _b.leading, leading = _c === void 0 ? true : _c, _d = _b.trailing, trailing = _d === void 0 ? true : _d;
    return useDebouncedCallback_1.default(func, wait, {
        maxWait: wait,
        leading: leading,
        trailing: trailing
    });
}
exports.default = useThrottledCallback;

},{"./useDebouncedCallback":"7lQRp"}],"50qMm":[function(require,module,exports) {
var _helpers = require("@swc/helpers");
"use strict";
var regeneratorRuntime = require("regenerator-runtime");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ListView = void 0;
var _react = _interopRequireWildcard(require("react"));
require("@spectrum-css/typography");
require("@spectrum-css/table");
var _reactSpectrum = require("@adobe/react-spectrum");
var _reactRouterDom = require("react-router-dom");
var _utils = _interopRequireDefault(require("../utils"));
var _config = _interopRequireDefault(require("../config"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop1) {
        return nodeInterop1 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        default: obj
    };
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj.default = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
/*
 * <license header>
 */ var BRIEF_FIELDS = [
    'Brief date',
    'Campaign',
    'Copy date',
    'Deliverables',
    'Description',
    'Release print date',
    'Request type',
    'Selected Assets'
];
var selection = new Set();
var ListView = (function(param) {
    var ims = param.ims;
    var ref = _helpers.slicedToArray(_react.useState(true), 2), isLoading = ref[0], setIsLoading = ref[1];
    var ref1 = _helpers.slicedToArray(_react.useState(true), 2), briefs = ref1[0], setBriefs = ref1[1];
    var ref2 = _helpers.slicedToArray(_react.useState(selection), 2), selectedBriefs = ref2[0], setSelectedBriefs = ref2[1];
    var ref3 = _helpers.slicedToArray(_react.useState(false), 2), isDialogOpen = ref3[0], setDialogIsOpen = ref3[1];
    var ref4 = _helpers.slicedToArray(_react.useState(false), 2), isDeleting = ref4[0], setIsDeleting = ref4[1];
    var history = _reactRouterDom.useHistory();
    _react.useEffect(function() {
        _helpers.asyncToGenerator(regeneratorRuntime.mark(function _callee() {
            var res;
            return regeneratorRuntime.wrap(function _callee$(_ctx) {
                while(1)switch(_ctx.prev = _ctx.next){
                    case 0:
                        _ctx.next = 2;
                        return _utils.default(ims, _config.default['brief-list']);
                    case 2:
                        res = _ctx.sent;
                        if (res.error) alert(res.error.message);
                        else setBriefs(res.reverse());
                        console.log(res);
                        setIsLoading(false);
                    case 6:
                    case "end":
                        return _ctx.stop();
                }
            }, _callee);
        }))();
    }, []);
    return(/*#__PURE__*/ React.createElement(_reactSpectrum.View, {
        elementType: "main",
        minHeight: "100vh",
        marginX: "size-400",
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\ListView.js",
            lineNumber: 57
        },
        __self: this
    }, /*#__PURE__*/ React.createElement(_reactSpectrum.Flex, {
        alignItems: "center",
        justifyContent: "center",
        direction: "column",
        marginY: "size-400",
        gap: "size-400",
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\ListView.js",
            lineNumber: 58
        },
        __self: this
    }, /*#__PURE__*/ React.createElement("h2", {
        className: "spectrum-Heading spectrum-Heading--sizeL spectrum-Heading--serif",
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\ListView.js",
            lineNumber: 59
        },
        __self: this
    }, "Browse all briefs"), /*#__PURE__*/ React.createElement(_reactSpectrum.Flex, {
        width: "100%",
        alignItems: "center",
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\ListView.js",
            lineNumber: 61
        },
        __self: this
    }, /*#__PURE__*/ React.createElement(_reactSpectrum.ButtonGroup, {
        marginEnd: "size-200",
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\ListView.js",
            lineNumber: 62
        },
        __self: this
    }, /*#__PURE__*/ React.createElement(_reactSpectrum.Button, {
        variant: "cta",
        onPress: function() {
            history.push('/create');
        },
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\ListView.js",
            lineNumber: 63
        },
        __self: this
    }, "New brief"), /*#__PURE__*/ React.createElement(_reactSpectrum.Button, {
        variant: "primary",
        isDisabled: selection.size === 0,
        onPress: function() {
            setDialogIsOpen(true);
        },
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\ListView.js",
            lineNumber: 68
        },
        __self: this
    }, "Delete selection")), isDeleting && /*#__PURE__*/ React.createElement(_reactSpectrum.ProgressCircle, {
        size: "S",
        "aria-label": "Is deleting\u2026",
        isIndeterminate: true,
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\ListView.js",
            lineNumber: 74
        },
        __self: this
    })), isLoading ? /*#__PURE__*/ React.createElement(_reactSpectrum.ProgressCircle, {
        size: "L",
        "aria-label": "Loading\u2026",
        isIndeterminate: true,
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\ListView.js",
            lineNumber: 77
        },
        __self: this
    }) : /*#__PURE__*/ React.createElement("table", {
        className: "spectrum-Table",
        style: {
            width: '100%'
        },
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\ListView.js",
            lineNumber: 77
        },
        __self: this
    }, /*#__PURE__*/ React.createElement("thead", {
        className: "spectrum-Table-head",
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\ListView.js",
            lineNumber: 80
        },
        __self: this
    }, /*#__PURE__*/ React.createElement("tr", {
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\ListView.js",
            lineNumber: 81
        },
        __self: this
    }, /*#__PURE__*/ React.createElement("th", {
        className: "spectrum-Table-headCell",
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\ListView.js",
            lineNumber: 82
        },
        __self: this
    }, /*#__PURE__*/ React.createElement(_reactSpectrum.Checkbox, {
        "aria-label": "Select All",
        onChange: function(checked) {
            selection.clear();
            if (checked) {
                selection.clear();
                briefs.forEach(function(brief) {
                    return selection.add(brief.id);
                });
            }
            setSelectedBriefs(new Set(selection));
        },
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\ListView.js",
            lineNumber: 83
        },
        __self: this
    })), BRIEF_FIELDS.map((function(field, index) {
        /*#__PURE__*/ return React.createElement("th", {
            key: index,
            className: "spectrum-Table-headCell",
            __source: {
                fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\ListView.js",
                lineNumber: 94
            },
            __self: this
        }, field);
    }).bind(this)))), /*#__PURE__*/ React.createElement("tbody", {
        className: "spectrum-Table-body",
        style: {
            verticalAlign: 'middle'
        },
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\ListView.js",
            lineNumber: 99
        },
        __self: this
    }, briefs.map((function(brief) {
        /*#__PURE__*/ return React.createElement("tr", {
            key: brief.id,
            className: "spectrum-Table-row",
            __source: {
                fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\ListView.js",
                lineNumber: 102
            },
            __self: this
        }, /*#__PURE__*/ React.createElement("td", {
            className: "spectrum-Table-cell",
            __source: {
                fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\ListView.js",
                lineNumber: 103
            },
            __self: this
        }, /*#__PURE__*/ React.createElement(_reactSpectrum.Checkbox, {
            "aria-label": "Select brief",
            isSelected: selectedBriefs.has(brief.id),
            onChange: function() {
                // Toggle brief selection
                if (selection.has(brief.id)) selection.delete(brief.id);
                else selection.add(brief.id);
                setSelectedBriefs(new Set(selection));
            },
            __source: {
                fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\ListView.js",
                lineNumber: 104
            },
            __self: this
        })), Object.keys(brief).filter(function(key) {
            return key !== 'selectedAssets' && key !== 'id';
        }).map((function(key, index) {
            /*#__PURE__*/ return React.createElement("td", {
                key: index,
                className: "spectrum-Table-cell",
                __source: {
                    fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\ListView.js",
                    lineNumber: 116
                },
                __self: this
            }, brief[key].split('\n').map((function(s, j) {
                /*#__PURE__*/ return React.createElement("span", {
                    key: j,
                    __source: {
                        fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\ListView.js",
                        lineNumber: 117
                    },
                    __self: this
                }, s, /*#__PURE__*/ React.createElement("br", {
                    __source: {
                        fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\ListView.js",
                        lineNumber: 119
                    },
                    __self: this
                }));
            }).bind(this)));
        }).bind(this)), /*#__PURE__*/ React.createElement("td", {
            className: "spectrum-Table-cell",
            __source: {
                fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\ListView.js",
                lineNumber: 123
            },
            __self: this
        }, /*#__PURE__*/ React.createElement(_reactSpectrum.Flex, {
            gap: "size-100",
            alignItems: "center",
            wrap: true,
            __source: {
                fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\ListView.js",
                lineNumber: 124
            },
            __self: this
        }, brief.selectedAssets.map((function(asset) {
            /*#__PURE__*/ return React.createElement("a", {
                key: asset.id,
                href: asset.thumbnail_url,
                target: "_blank",
                __source: {
                    fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\ListView.js",
                    lineNumber: 126
                },
                __self: this
            }, /*#__PURE__*/ React.createElement("img", {
                alt: asset.title,
                src: asset.thumbnail_url,
                width: "50px",
                __source: {
                    fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\ListView.js",
                    lineNumber: 127
                },
                __self: this
            }));
        }).bind(this)))));
    }).bind(this))))), /*#__PURE__*/ React.createElement(_reactSpectrum.DialogContainer, {
        onDismiss: function() {
            return setDialogIsOpen(false);
        },
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\ListView.js",
            lineNumber: 136
        },
        __self: this
    }, isDialogOpen && /*#__PURE__*/ React.createElement(_reactSpectrum.AlertDialog, {
        title: "Are you sure ?",
        variant: "destructive",
        primaryActionLabel: "Confirm",
        cancelLabel: "Cancel",
        onPrimaryAction: _helpers.asyncToGenerator(regeneratorRuntime.mark(function _callee() {
            var res;
            return regeneratorRuntime.wrap(function _callee$(_ctx) {
                while(1)switch(_ctx.prev = _ctx.next){
                    case 0:
                        setIsDeleting(true);
                        _ctx.next = 3;
                        return _utils.default(ims, _config.default['brief-delete'], {
                        }, {
                            briefIds: Array.from(selection)
                        });
                    case 3:
                        res = _ctx.sent;
                        if (res.error) alert(res.error.message);
                        else {
                            setBriefs(function(briefs1) {
                                return briefs1.filter(function(brief) {
                                    return !selection.has(brief.id);
                                });
                            });
                            selection.clear();
                            setSelectedBriefs(new Set());
                        }
                        console.log(res);
                        setIsDeleting(false);
                    case 7:
                    case "end":
                        return _ctx.stop();
                }
            }, _callee);
        })),
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\ListView.js",
            lineNumber: 137
        },
        __self: this
    }, /*#__PURE__*/ React.createElement("strong", {
        __source: {
            fileName: "C:\\temp\\training\\cicd_training\\adu_bcab_courseware\\web-src\\src\\components\\ListView.js",
            lineNumber: 154
        },
        __self: this
    }, selection.size, " brief", selection.size > 1 && 's'), ' ', "will be deleted. Do you want to continue ?"))));
}).bind(undefined);
exports.ListView = ListView;

},{"@swc/helpers":"5eKpN","regenerator-runtime":"2ZDSP","react":"a6qBW","@spectrum-css/typography":"6HrtQ","@spectrum-css/table":"5NNUO","@adobe/react-spectrum":"3fLzW","react-router-dom":"CKZ3k","../utils":"1wIxb","../config":"2sGbH"}],"6HrtQ":[function() {},{}],"5NNUO":[function() {},{}],"4uj55":[function() {},{}],"6Z0P9":[function(require,module,exports) {
"use strict";
/*
 * <license header>
 */ /**
 *
 * Script to load the Adobe Experience Cloud Runtime.
 *
 * @throws {Error} error in case of failure, most likely when the app is not running in
 * the Experience Cloud Shell.
 *
 */ /* eslint-disable-next-line */ (function(e, t) {
    if (t.location === t.parent.location) throw new Error('Module Runtime: Needs to be within an iframe!');
    var o = function(e1) {
        var t1 = new URL(e1.location.href).searchParams.get('_mr');
        return t1 || !e1.EXC_US_HMR ? t1 : e1.sessionStorage.getItem('unifiedShellMRScript');
    }(t);
    if (!o) throw new Error('Module Runtime: Missing script!');
    if ('https:' !== (o = new URL(decodeURIComponent(o))).protocol) throw new Error('Module Runtime: Must be HTTPS!');
    if (!/^(exc-unifiedcontent\.)?experience(-qa|-stage|-cdn|-cdn-stage)?\.adobe\.(com|net)$/.test(o.hostname) && !/localhost\.corp\.adobe\.com$/.test(o.hostname)) throw new Error('Module Runtime: Invalid domain!');
    if (!/\.js$/.test(o.pathname)) throw new Error('Module Runtime: Must be a JavaScript file!');
    t.EXC_US_HMR && t.sessionStorage.setItem('unifiedShellMRScript', o.toString());
    var n = e.createElement('script');
    n.async = 1, n.src = o.toString(), n.onload = n.onreadystatechange = function() {
        n.readyState && !/loaded|complete/.test(n.readyState) || (n.onload = n.onreadystatechange = null, n = void 0, 'EXC_MR_READY' in t && t.EXC_MR_READY());
    }, e.head.appendChild(n);
})(document, window);

},{}]},["ZC4vb"], "ZC4vb", "parcelRequire9c5f")

//# sourceMappingURL=index.HASH_REF_d2bf47ea9b7f21351e7bbdba92f6c3ff.js.map
