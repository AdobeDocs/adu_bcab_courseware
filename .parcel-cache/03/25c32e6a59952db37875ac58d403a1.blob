var { useNumberFormatter  } = require("@react-aria/i18n");
var { useLabel  } = require("@react-aria/label");
var { clamp , filterDOMProps , mergeProps  } = require("@react-aria/utils");
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
/**
 * Provides the accessibility implementation for a progress bar component.
 * Progress bars show either determinate or indeterminate progress of an operation
 * over time.
 */ function useProgressBar(props) {
    let { value =0 , minValue =0 , maxValue =100 , valueLabel , isIndeterminate , formatOptions ={
        style: 'percent'
    }  } = props;
    let domProps = filterDOMProps(props, {
        labelable: true
    });
    let { labelProps , fieldProps  } = useLabel(_babelRuntimeHelpersExtends({
    }, props, {
        // Progress bar is not an HTML input element so it
        // shouldn't be labeled by a <label> element.
        labelElementType: 'span'
    }));
    value = clamp(value, minValue, maxValue);
    let percentage = (value - minValue) / (maxValue - minValue);
    let formatter = useNumberFormatter(formatOptions);
    if (!isIndeterminate && !valueLabel) {
        let valueToFormat = formatOptions.style === 'percent' ? percentage : value;
        valueLabel = formatter.format(valueToFormat);
    }
    return {
        progressBarProps: mergeProps(domProps, _babelRuntimeHelpersExtends({
        }, fieldProps, {
            'aria-valuenow': isIndeterminate ? undefined : value,
            'aria-valuemin': minValue,
            'aria-valuemax': maxValue,
            'aria-valuetext': isIndeterminate ? undefined : valueLabel,
            role: 'progressbar'
        })),
        labelProps
    };
}
exports.useProgressBar = useProgressBar;
