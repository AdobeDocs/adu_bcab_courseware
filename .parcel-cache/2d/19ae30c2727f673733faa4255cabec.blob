var { useProvider , useProviderProps  } = require("@react-spectrum/provider");
var _react2 = require("react");
var _react = $parcel$interopDefault(_react2);
var { useCallback , useEffect , useRef  } = _react2;
var { filterDOMProps  } = require("@react-aria/utils");
var { classNames , SlotProvider , useDOMRef , useResizeObserver , useSlotProps , useStyleProps , useValueEffect  } = require("@react-spectrum/utils");
var _babelRuntimeHelpersObjectWithoutPropertiesLoose = $parcel$interopDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
require("./main.css");
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/buttongroup/vars.css
var $e5350288554758da1efde2be1e5df5d4$exports = {
};
$e5350288554758da1efde2be1e5df5d4$exports = {
    "spectrum-ButtonGroup": "_spectrum-ButtonGroup_25328",
    "spectrum-ButtonGroup-Button": "_spectrum-ButtonGroup-Button_25328",
    "spectrum-ButtonGroup--alignEnd": "_spectrum-ButtonGroup--alignEnd_25328",
    "spectrum-ButtonGroup--alignCenter": "_spectrum-ButtonGroup--alignCenter_25328",
    "spectrum-ButtonGroup--vertical": "_spectrum-ButtonGroup--vertical_25328"
};
var $e5350288554758da1efde2be1e5df5d4$$interop$default = $parcel$interopDefault($e5350288554758da1efde2be1e5df5d4$exports);
function $b8c4ebb5d2445e152b6571d47036dd$var$ButtonGroup(props, ref) {
    let { scale  } = useProvider();
    props = useProviderProps(props);
    props = useSlotProps(props, 'buttonGroup');
    let { children , orientation ='horizontal' , isDisabled , align ='start'  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "children",
        "orientation",
        "isDisabled",
        "align"
    ]);
    let { styleProps  } = useStyleProps(otherProps);
    let domRef = useDOMRef(ref);
    let [hasOverflow, setHasOverflow] = useValueEffect(false);
    let checkForOverflow = useCallback(()=>{
        let computeHasOverflow = ()=>{
            if (domRef.current && orientation === 'horizontal') {
                let buttonGroupChildren = Array.from(domRef.current.children);
                let maxX = domRef.current.offsetWidth + 1; // + 1 to account for rounding errors
                // If any buttons have negative X positions (align="end") or extend beyond
                // the width of the button group (align="start"), then switch to vertical.
                if (buttonGroupChildren.some((child)=>child.offsetLeft < 0 || child.offsetLeft + child.offsetWidth > maxX
                )) return true;
                return false;
            }
        };
        if (orientation === 'horizontal') setHasOverflow(function*() {
            // Force to horizontal for measurement.
            yield false; // Measure, and update if there is overflow.
            yield computeHasOverflow();
        });
    }, [
        domRef,
        orientation,
        scale,
        setHasOverflow,
        children
    ]); // There are two main reasons we need to remeasure:
    // 1. Internal changes: Check for initial overflow or when orientation/scale/children change (from checkForOverflow dep array)
    useEffect(()=>{
        checkForOverflow();
    }, [
        checkForOverflow
    ]); // 2. External changes: buttongroup won't change size due to any parents changing size, so listen to its container for size changes to figure out if we should remeasure
    let parent = useRef();
    useEffect(()=>{
        parent.current = domRef.current.parentElement;
    }, [
        domRef.current
    ]);
    useResizeObserver({
        ref: parent,
        onResize: checkForOverflow
    });
    return(/*#__PURE__*/ _react.createElement("div", _babelRuntimeHelpersExtends({
    }, filterDOMProps(otherProps), styleProps, {
        ref: domRef,
        className: classNames($e5350288554758da1efde2be1e5df5d4$$interop$default, 'spectrum-ButtonGroup', {
            'spectrum-ButtonGroup--vertical': orientation === 'vertical' || hasOverflow,
            'spectrum-ButtonGroup--alignEnd': align === 'end',
            'spectrum-ButtonGroup--alignCenter': align === 'center'
        }, styleProps.className)
    }), /*#__PURE__*/ _react.createElement(SlotProvider, {
        slots: {
            button: {
                isDisabled,
                UNSAFE_className: classNames($e5350288554758da1efde2be1e5df5d4$$interop$default, 'spectrum-ButtonGroup-Button')
            }
        }
    }, children)));
}
/**
 * ButtonGroup handles overflow for a grouping of buttons whose actions are related to each other.
 */ let ButtonGroup = /*#__PURE__*/ _react.forwardRef($b8c4ebb5d2445e152b6571d47036dd$var$ButtonGroup);
exports.ButtonGroup = ButtonGroup;
