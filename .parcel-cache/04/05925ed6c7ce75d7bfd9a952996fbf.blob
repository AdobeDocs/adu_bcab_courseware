var { useTextField  } = require("@react-aria/textfield");
var { useControlledState  } = require("@react-stately/utils");
var { useProviderProps  } = require("@react-spectrum/provider");
var { useHover  } = require("@react-aria/interactions");
var { useFormProps  } = require("@react-spectrum/form");
var { Label  } = require("@react-spectrum/label");
var { FocusRing  } = require("@react-aria/focus");
var { classNames , createFocusableRef , useStyleProps  } = require("@react-spectrum/utils");
var _spectrumIconsUiCheckmarkMedium = $parcel$interopDefault(require("@spectrum-icons/ui/CheckmarkMedium"));
var _spectrumIconsUiAlertMedium = $parcel$interopDefault(require("@spectrum-icons/ui/AlertMedium"));
var _react2 = require("react");
var _react = $parcel$interopDefault(_react2);
var { useCallback , useRef , cloneElement , forwardRef , useImperativeHandle  } = _react2;
var { chain , useLayoutEffect , mergeProps  } = require("@react-aria/utils");
var _babelRuntimeHelpersObjectWithoutPropertiesLoose = $parcel$interopDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
require("./main.css");
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/fieldlabel/vars.css
var $a0bedb1888ff92cb3407d1a60d76e$exports = {
};
$a0bedb1888ff92cb3407d1a60d76e$exports = {
    "spectrum-FieldLabel": "_spectrum-FieldLabel_36b9b",
    "spectrum-FieldLabel--positionSide": "_spectrum-FieldLabel--positionSide_36b9b",
    "spectrum-FieldLabel-requiredIcon": "_spectrum-FieldLabel-requiredIcon_36b9b",
    "spectrum-FieldLabel--alignEnd": "_spectrum-FieldLabel--alignEnd_36b9b",
    "spectrum-Field": "_spectrum-Field_36b9b",
    "spectrum-Field--positionTop": "_spectrum-Field--positionTop_36b9b",
    "spectrum-Field-field": "_spectrum-Field-field_36b9b",
    "spectrum-Field-field--multiline": "_spectrum-Field-field--multiline_36b9b",
    "spectrum-Field--positionSide": "_spectrum-Field--positionSide_36b9b",
    "spectrum-Form": "_spectrum-Form_36b9b",
    "spectrum-Form--positionSide": "_spectrum-Form--positionSide_36b9b",
    "spectrum-Form--positionTop": "_spectrum-Form--positionTop_36b9b",
    "spectrum-Form-itemLabel": "_spectrum-Form-itemLabel_36b9b",
    "is-disabled": "_is-disabled_36b9b"
};
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/textfield/vars.css
var $d6ccebc39ce6c9807064e14b8824ec$exports = {
};
$d6ccebc39ce6c9807064e14b8824ec$exports = {
    "spectrum-Textfield": "_spectrum-Textfield_61339",
    "spectrum-Textfield--quiet": "_spectrum-Textfield--quiet_61339",
    "spectrum-Textfield--multiline": "_spectrum-Textfield--multiline_61339",
    "spectrum-Textfield-input": "_spectrum-Textfield-input_61339",
    "is-placeholder": "_is-placeholder_61339",
    "is-hovered": "_is-hovered_61339",
    "spectrum-Textfield--valid": "_spectrum-Textfield--valid_61339",
    "spectrum-Textfield--invalid": "_spectrum-Textfield--invalid_61339",
    "spectrum-Textfield--loadable": "_spectrum-Textfield--loadable_61339",
    "spectrum-Textfield-validationIcon": "_spectrum-Textfield-validationIcon_61339",
    "spectrum-Textfield-icon": "_spectrum-Textfield-icon_61339",
    "spectrum-Textfield-inputIcon": "_spectrum-Textfield-inputIcon_61339",
    "spectrum-Textfield-circleLoader": "_spectrum-Textfield-circleLoader_61339",
    "is-focused": "_is-focused_61339",
    "focus-ring": "_focus-ring_61339",
    "is-disabled": "_is-disabled_61339"
};
var $d6ccebc39ce6c9807064e14b8824ec$$interop$default = $parcel$interopDefault($d6ccebc39ce6c9807064e14b8824ec$exports);
var $a0bedb1888ff92cb3407d1a60d76e$$interop$default = $parcel$interopDefault($a0bedb1888ff92cb3407d1a60d76e$exports);
function $e7a3dfeb4bff45d199cec4325445e2$var$TextFieldBase(props, ref) {
    props = useProviderProps(props);
    props = useFormProps(props);
    let { label , labelPosition ='top' , labelAlign , isRequired , necessityIndicator , validationState , icon , isQuiet =false , isDisabled , multiLine , autoFocus , inputClassName , wrapperChildren , labelProps , inputProps , inputRef , isLoading , loadingIndicator , validationIconClassName  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "label",
        "labelPosition",
        "labelAlign",
        "isRequired",
        "necessityIndicator",
        "validationState",
        "icon",
        "isQuiet",
        "isDisabled",
        "multiLine",
        "autoFocus",
        "inputClassName",
        "wrapperChildren",
        "labelProps",
        "inputProps",
        "inputRef",
        "isLoading",
        "loadingIndicator",
        "validationIconClassName"
    ]);
    let { hoverProps , isHovered  } = useHover({
        isDisabled
    });
    let domRef = useRef(null);
    let defaultInputRef = useRef(null);
    inputRef = inputRef || defaultInputRef; // Expose imperative interface for ref
    useImperativeHandle(ref, ()=>_babelRuntimeHelpersExtends({
        }, createFocusableRef(domRef, inputRef), {
            select () {
                if (inputRef.current) inputRef.current.select();
            },
            getInputElement () {
                return inputRef.current;
            }
        })
    );
    let { styleProps  } = useStyleProps(otherProps);
    let ElementType = multiLine ? 'textarea' : 'input';
    let isInvalid = validationState === 'invalid';
    if (icon) {
        let UNSAFE_className = classNames($d6ccebc39ce6c9807064e14b8824ec$$interop$default, icon.props && icon.props.UNSAFE_className, 'spectrum-Textfield-icon');
        icon = /*#__PURE__*/ cloneElement(icon, {
            UNSAFE_className,
            size: 'S'
        });
    }
    let validationIcon = isInvalid ? /*#__PURE__*/ _react.createElement(_spectrumIconsUiAlertMedium, null) : /*#__PURE__*/ _react.createElement(_spectrumIconsUiCheckmarkMedium, null);
    let validation = /*#__PURE__*/ cloneElement(validationIcon, {
        UNSAFE_className: classNames($d6ccebc39ce6c9807064e14b8824ec$$interop$default, 'spectrum-Textfield-validationIcon', validationIconClassName)
    });
    let textField = /*#__PURE__*/ _react.createElement("div", {
        className: classNames($d6ccebc39ce6c9807064e14b8824ec$$interop$default, 'spectrum-Textfield', {
            'spectrum-Textfield--invalid': isInvalid,
            'spectrum-Textfield--valid': validationState === 'valid',
            'spectrum-Textfield--loadable': loadingIndicator,
            'spectrum-Textfield--quiet': isQuiet,
            'spectrum-Textfield--multiline': multiLine
        })
    }, /*#__PURE__*/ _react.createElement(FocusRing, {
        focusRingClass: classNames($d6ccebc39ce6c9807064e14b8824ec$$interop$default, 'focus-ring'),
        isTextInput: true,
        autoFocus: autoFocus
    }, /*#__PURE__*/ _react.createElement(ElementType, _babelRuntimeHelpersExtends({
    }, mergeProps(inputProps, hoverProps), {
        ref: inputRef,
        rows: multiLine ? 1 : undefined,
        className: classNames($d6ccebc39ce6c9807064e14b8824ec$$interop$default, 'spectrum-Textfield-input', {
            'spectrum-Textfield-inputIcon': icon,
            'is-hovered': isHovered
        }, inputClassName)
    }))), icon, validationState && !isLoading ? validation : null, isLoading && loadingIndicator, wrapperChildren);
    if (label) {
        let labelWrapperClass = classNames($a0bedb1888ff92cb3407d1a60d76e$$interop$default, 'spectrum-Field', {
            'spectrum-Field--positionTop': labelPosition === 'top',
            'spectrum-Field--positionSide': labelPosition === 'side'
        }, styleProps.className);
        textField = /*#__PURE__*/ _react.cloneElement(textField, mergeProps(textField.props, {
            className: classNames($a0bedb1888ff92cb3407d1a60d76e$$interop$default, 'spectrum-Field-field', {
                'spectrum-Field-field--multiline': multiLine
            })
        }));
        return(/*#__PURE__*/ _react.createElement("div", _babelRuntimeHelpersExtends({
        }, styleProps, {
            ref: domRef,
            className: labelWrapperClass
        }), /*#__PURE__*/ _react.createElement(Label, _babelRuntimeHelpersExtends({
        }, labelProps, {
            labelPosition: labelPosition,
            labelAlign: labelAlign,
            isRequired: isRequired,
            necessityIndicator: necessityIndicator
        }), label), textField));
    }
    return(/*#__PURE__*/ _react.cloneElement(textField, mergeProps(textField.props, _babelRuntimeHelpersExtends({
    }, styleProps, {
        ref: domRef
    }))));
}
const TextFieldBase = /*#__PURE__*/ forwardRef($e7a3dfeb4bff45d199cec4325445e2$var$TextFieldBase);
exports.TextFieldBase = TextFieldBase;
function $b063c3295c2860c57a7ba2b2561c3d34$var$TextArea(props, ref) {
    props = useProviderProps(props);
    let { isDisabled =false , isQuiet =false , isReadOnly =false , isRequired =false , onChange  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "isDisabled",
        "isQuiet",
        "isReadOnly",
        "isRequired",
        "onChange"
    ]); // not in stately because this is so we know when to re-measure, which is a spectrum design
    let [inputValue, setInputValue] = useControlledState(props.value, props.defaultValue, ()=>{
    });
    let inputRef = useRef();
    let onHeightChange = useCallback(()=>{
        if (isQuiet) {
            let input = inputRef.current;
            let prevAlignment = input.style.alignSelf;
            input.style.alignSelf = 'start';
            input.style.height = 'auto';
            input.style.height = input.scrollHeight + "px";
            input.style.alignSelf = prevAlignment;
        }
    }, [
        isQuiet,
        inputRef
    ]);
    useLayoutEffect(()=>{
        if (inputRef.current) onHeightChange();
    }, [
        onHeightChange,
        inputValue,
        inputRef
    ]);
    let { labelProps , inputProps  } = useTextField(_babelRuntimeHelpersExtends({
    }, props, {
        onChange: chain(onChange, setInputValue),
        inputElementType: 'textarea'
    }), inputRef);
    return(/*#__PURE__*/ _react.createElement(TextFieldBase, _babelRuntimeHelpersExtends({
    }, otherProps, {
        ref: ref,
        inputRef: inputRef,
        labelProps: labelProps,
        inputProps: inputProps,
        multiLine: true,
        isDisabled: isDisabled,
        isQuiet: isQuiet,
        isReadOnly: isReadOnly,
        isRequired: isRequired
    })));
}
/**
 * TextAreas are multiline text inputs, useful for cases where users have
 * a sizable amount of text to enter. They allow for all customizations that
 * are available to text fields.
 */ let TextArea = /*#__PURE__*/ _react.forwardRef($b063c3295c2860c57a7ba2b2561c3d34$var$TextArea);
exports.TextArea = TextArea;
function $db9dd8b68ff637ff703d9fd0385e7$var$TextField(props, ref) {
    props = useProviderProps(props);
    let inputRef = useRef();
    let { labelProps , inputProps  } = useTextField(props, inputRef);
    return(/*#__PURE__*/ _react.createElement(TextFieldBase, _babelRuntimeHelpersExtends({
    }, props, {
        labelProps: labelProps,
        inputProps: inputProps,
        ref: ref,
        inputRef: inputRef
    })));
}
/**
 * TextFields are text inputs that allow users to input custom text entries
 * with a keyboard. Various decorations can be displayed around the field to
 * communicate the entry requirements.
 */ const TextField = /*#__PURE__*/ forwardRef($db9dd8b68ff637ff703d9fd0385e7$var$TextField);
exports.TextField = TextField;
