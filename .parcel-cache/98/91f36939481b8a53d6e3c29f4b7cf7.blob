var { useProviderProps  } = require("@react-spectrum/provider");
var { Menu , MenuTrigger  } = require("@react-spectrum/menu");
var _spectrumIconsUiFolderBreadcrumb = $parcel$interopDefault(require("@spectrum-icons/ui/FolderBreadcrumb"));
var { useLocale  } = require("@react-aria/i18n");
var { useHover  } = require("@react-aria/interactions");
var { useBreadcrumbItem , useBreadcrumbs  } = require("@react-aria/breadcrumbs");
var _react2 = require("react");
var _react = $parcel$interopDefault(_react2);
var { Fragment , useRef , useCallback  } = _react2;
var { mergeProps , useLayoutEffect , useResizeObserver  } = require("@react-aria/utils");
var { FocusRing  } = require("@react-aria/focus");
var { classNames , getWrappedElement , useDOMRef , useStyleProps , useValueEffect  } = require("@react-spectrum/utils");
var _spectrumIconsUiChevronRightSmall = $parcel$interopDefault(require("@spectrum-icons/ui/ChevronRightSmall"));
var { ActionButton  } = require("@react-spectrum/button");
var _babelRuntimeHelpersObjectWithoutPropertiesLoose = $parcel$interopDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));
var { Item  } = require("@react-stately/collections");
exports.Item = Item;
require("./main.css");
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/breadcrumb/vars.css
var $cbb9ca45c80051a074b454ff67e12191$exports = {
};
$cbb9ca45c80051a074b454ff67e12191$exports = {
    "spectrum-Breadcrumbs": "_spectrum-Breadcrumbs_e7b3e",
    "spectrum-Breadcrumbs-itemSeparator": "_spectrum-Breadcrumbs-itemSeparator_e7b3e",
    "is-reversed": "_is-reversed_e7b3e",
    "spectrum-Breadcrumbs-item": "_spectrum-Breadcrumbs-item_e7b3e",
    "spectrum-ActionButton": "_spectrum-ActionButton_e7b3e",
    "spectrum-Breadcrumbs-itemLink": "_spectrum-Breadcrumbs-itemLink_e7b3e",
    "is-hovered": "_is-hovered_e7b3e",
    "focus-ring": "_focus-ring_e7b3e",
    "is-dragged": "_is-dragged_e7b3e",
    "spectrum-Breadcrumbs--small": "_spectrum-Breadcrumbs--small_e7b3e",
    "spectrum-Breadcrumbs--medium": "_spectrum-Breadcrumbs--medium_e7b3e",
    "spectrum-Breadcrumbs--multiline": "_spectrum-Breadcrumbs--multiline_e7b3e",
    "spectrum-Heading--pageTitle": "_spectrum-Heading--pageTitle_e7b3e",
    "is-disabled": "_is-disabled_e7b3e",
    "is-selected": "_is-selected_e7b3e",
    "spectrum-Breadcrumb": "_spectrum-Breadcrumb_e7b3e"
};
var $cbb9ca45c80051a074b454ff67e12191$$interop$default = $parcel$interopDefault($cbb9ca45c80051a074b454ff67e12191$exports);
function $ccb3b1ecd96026a521a9bbbd15d0b93d$export$BreadcrumbItem(props) {
    let { children , isCurrent , isDisabled  } = props;
    let { direction  } = useLocale();
    let ref = useRef();
    let { itemProps  } = useBreadcrumbItem(_babelRuntimeHelpersExtends({
    }, props, {
        elementType: typeof children === 'string' ? 'span' : 'a'
    }), ref);
    let { hoverProps , isHovered  } = useHover(props);
    let element = /*#__PURE__*/ _react.cloneElement(getWrappedElement(children), _babelRuntimeHelpersExtends({
    }, mergeProps(itemProps, hoverProps), {
        ref,
        className: classNames($cbb9ca45c80051a074b454ff67e12191$$interop$default, 'spectrum-Breadcrumbs-itemLink', {
            'is-disabled': !isCurrent && isDisabled,
            'is-hovered': isHovered
        })
    }));
    return(/*#__PURE__*/ _react.createElement(Fragment, null, /*#__PURE__*/ _react.createElement(FocusRing, {
        focusRingClass: classNames($cbb9ca45c80051a074b454ff67e12191$$interop$default, 'focus-ring')
    }, element), isCurrent === false && /*#__PURE__*/ _react.createElement(_spectrumIconsUiChevronRightSmall, {
        UNSAFE_className: classNames($cbb9ca45c80051a074b454ff67e12191$$interop$default, 'spectrum-Breadcrumbs-itemSeparator', {
            'is-reversed': direction === 'rtl'
        })
    })));
}
const $e2f01fb373fadb4c4bc7c0c3ead285a$var$MIN_VISIBLE_ITEMS = 1;
const $e2f01fb373fadb4c4bc7c0c3ead285a$var$MAX_VISIBLE_ITEMS = 4;
function $e2f01fb373fadb4c4bc7c0c3ead285a$var$Breadcrumbs(props, ref) {
    props = useProviderProps(props);
    let { size ='L' , isMultiline , children , showRoot , isDisabled , onAction  } = props, otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, [
        "size",
        "isMultiline",
        "children",
        "showRoot",
        "isDisabled",
        "onAction"
    ]); // Not using React.Children.toArray because it mutates the key prop.
    let childArray = [];
    _react.Children.forEach(children, (child)=>{
        if (/*#__PURE__*/ _react.isValidElement(child)) childArray.push(child);
    });
    let domRef = useDOMRef(ref);
    let listRef = useRef(null);
    let [visibleItems, setVisibleItems] = useValueEffect(childArray.length);
    let { navProps  } = useBreadcrumbs(props);
    let { styleProps  } = useStyleProps(otherProps);
    let updateOverflow = useCallback(()=>{
        let computeVisibleItems = (visibleItems1)=>{
            let listItems = Array.from(listRef.current.children);
            let containerWidth = listRef.current.offsetWidth;
            let isShowingMenu = childArray.length > visibleItems1;
            let calculatedWidth = 0;
            let newVisibleItems = 0;
            let maxVisibleItems = $e2f01fb373fadb4c4bc7c0c3ead285a$var$MAX_VISIBLE_ITEMS;
            if (showRoot) {
                calculatedWidth += listItems.shift().offsetWidth;
                newVisibleItems++;
            }
            if (isShowingMenu) {
                calculatedWidth += listItems.shift().offsetWidth;
                maxVisibleItems--;
            }
            if (showRoot && calculatedWidth >= containerWidth) newVisibleItems--;
             // TODO: what if multiline and only one breadcrumb??
            if (isMultiline) {
                listItems.pop();
                newVisibleItems++;
            } else {
                // Ensure the last breadcrumb isn't truncated when we measure it.
                let last = listItems.pop();
                last.style.overflow = 'visible';
                calculatedWidth += last.offsetWidth;
                if (calculatedWidth < containerWidth) newVisibleItems++;
                last.style.overflow = '';
            }
            for (let breadcrumb of listItems.reverse()){
                calculatedWidth += breadcrumb.offsetWidth;
                if (calculatedWidth < containerWidth) newVisibleItems++;
            }
            return Math.max($e2f01fb373fadb4c4bc7c0c3ead285a$var$MIN_VISIBLE_ITEMS, Math.min(maxVisibleItems, newVisibleItems));
        };
        setVisibleItems(function*() {
            // Update to show all items.
            yield childArray.length; // Measure, and update to show the items that fit.
            let newVisibleItems = computeVisibleItems(childArray.length);
            yield newVisibleItems; // If the number of items is less than the number of children,
            // then update again to ensure that the menu fits.
            if (newVisibleItems < childArray.length && newVisibleItems > 1) yield computeVisibleItems(newVisibleItems);
        });
    }, [
        listRef,
        children,
        setVisibleItems,
        showRoot,
        isMultiline
    ]);
    useResizeObserver({
        ref: domRef,
        onResize: updateOverflow
    });
    useLayoutEffect(updateOverflow, [
        children
    ]);
    let contents = childArray;
    if (childArray.length > visibleItems) {
        var _selectedItem$key;
        let selectedItem = childArray[childArray.length - 1];
        let selectedKey = (_selectedItem$key = selectedItem.key) != null ? _selectedItem$key : childArray.length - 1;
        let onMenuAction = (key)=>{
            // Don't fire onAction when clicking on the last item
            if (key !== selectedKey && onAction) onAction(key);
        };
        let menuItem = /*#__PURE__*/ _react.createElement($ccb3b1ecd96026a521a9bbbd15d0b93d$export$BreadcrumbItem, {
            key: "menu"
        }, /*#__PURE__*/ _react.createElement(MenuTrigger, null, /*#__PURE__*/ _react.createElement(ActionButton, {
            "aria-label": "\u2026",
            isQuiet: true,
            isDisabled: isDisabled
        }, /*#__PURE__*/ _react.createElement(_spectrumIconsUiFolderBreadcrumb, null)), /*#__PURE__*/ _react.createElement(Menu, {
            selectionMode: "single",
            selectedKeys: [
                selectedKey
            ],
            onAction: onMenuAction
        }, childArray)));
        contents = [
            menuItem
        ];
        let breadcrumbs = [
            ...childArray
        ];
        let endItems = visibleItems;
        if (showRoot && visibleItems > 1) {
            contents.unshift(breadcrumbs.shift());
            endItems--;
        }
        contents.push(...breadcrumbs.slice(-endItems));
    }
    let lastIndex = contents.length - 1;
    let breadcrumbItems = contents.map((child, index)=>{
        var _child$key;
        let isCurrent = index === lastIndex;
        let key = (_child$key = child.key) != null ? _child$key : index;
        let onPress = ()=>{
            if (onAction) onAction(key);
        };
        return(/*#__PURE__*/ _react.createElement("li", {
            key: key,
            className: classNames($cbb9ca45c80051a074b454ff67e12191$$interop$default, 'spectrum-Breadcrumbs-item')
        }, /*#__PURE__*/ _react.createElement($ccb3b1ecd96026a521a9bbbd15d0b93d$export$BreadcrumbItem, {
            isCurrent: isCurrent,
            isDisabled: isDisabled,
            onPress: onPress
        }, child.props.children)));
    });
    return(/*#__PURE__*/ _react.createElement("nav", _babelRuntimeHelpersExtends({
    }, styleProps, navProps, {
        ref: domRef
    }), /*#__PURE__*/ _react.createElement("ul", {
        ref: listRef,
        className: classNames($cbb9ca45c80051a074b454ff67e12191$$interop$default, 'spectrum-Breadcrumbs', {
            'spectrum-Breadcrumbs--small': size === 'S',
            'spectrum-Breadcrumbs--medium': size === 'M',
            'spectrum-Breadcrumbs--multiline': isMultiline,
            'spectrum-Breadcrumbs--showRoot': showRoot,
            'is-disabled': isDisabled
        }, styleProps.className)
    }, breadcrumbItems)));
}
/**
 * Breadcrumbs show hierarchy and navigational context for a user’s location within an application.
 */ let Breadcrumbs = /*#__PURE__*/ _react.forwardRef($e2f01fb373fadb4c4bc7c0c3ead285a$var$Breadcrumbs);
exports.Breadcrumbs = Breadcrumbs;
