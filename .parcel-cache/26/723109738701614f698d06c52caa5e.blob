"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MissingValueError = exports.InvalidValueTypeError = exports.InvalidValueError = exports.FormatError = exports.ErrorCode = void 0;
var tslib_1 = require("tslib");
var ErrorCode;
(function(ErrorCode1) {
    // When we have a placeholder but no value to format
    ErrorCode1["MISSING_VALUE"] = "MISSING_VALUE";
    // When value supplied is invalid
    ErrorCode1["INVALID_VALUE"] = "INVALID_VALUE";
    // When we need specific Intl API but it's not available
    ErrorCode1["MISSING_INTL_API"] = "MISSING_INTL_API";
})(ErrorCode = exports.ErrorCode || (exports.ErrorCode = {
}));
var FormatError1 = function(_super) {
    tslib_1.__extends(FormatError2, _super);
    function FormatError2(msg, code, originalMessage) {
        var _this = _super.call(this, msg) || this;
        _this.code = code;
        _this.originalMessage = originalMessage;
        return _this;
    }
    FormatError2.prototype.toString = function() {
        return "[formatjs Error: " + this.code + "] " + this.message;
    };
    return FormatError2;
}(Error);
exports.FormatError = FormatError1;
var InvalidValueError1 = function(_super) {
    tslib_1.__extends(InvalidValueError2, _super);
    function InvalidValueError2(variableId, value, options, originalMessage) {
        return _super.call(this, "Invalid values for \"" + variableId + "\": \"" + value + "\". Options are \"" + Object.keys(options).join('", "') + "\"", ErrorCode.INVALID_VALUE, originalMessage) || this;
    }
    return InvalidValueError2;
}(FormatError1);
exports.InvalidValueError = InvalidValueError1;
var InvalidValueTypeError1 = function(_super) {
    tslib_1.__extends(InvalidValueTypeError2, _super);
    function InvalidValueTypeError2(value, type, originalMessage) {
        return _super.call(this, "Value for \"" + value + "\" must be of type " + type, ErrorCode.INVALID_VALUE, originalMessage) || this;
    }
    return InvalidValueTypeError2;
}(FormatError1);
exports.InvalidValueTypeError = InvalidValueTypeError1;
var MissingValueError1 = function(_super) {
    tslib_1.__extends(MissingValueError2, _super);
    function MissingValueError2(variableId, originalMessage) {
        return _super.call(this, "The intl string context variable \"" + variableId + "\" was not provided to the string \"" + originalMessage + "\"", ErrorCode.MISSING_VALUE, originalMessage) || this;
    }
    return MissingValueError2;
}(FormatError1);
exports.MissingValueError = MissingValueError1;
